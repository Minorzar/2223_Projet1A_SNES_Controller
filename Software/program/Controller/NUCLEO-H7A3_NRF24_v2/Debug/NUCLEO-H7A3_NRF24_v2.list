
NUCLEO-H7A3_NRF24_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000899c  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08008c48  08008c48  00018c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008cb8  08008cb8  00018cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008cc0  08008cc0  00018cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008cc4  08008cc4  00018cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000001c  24000000  08008cc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001a0  2400001c  08008ce4  0002001c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240001bc  08008ce4  000201bc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015482  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002947  00000000  00000000  000354cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000d90  00000000  00000000  00037e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000c88  00000000  00000000  00038ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000306d5  00000000  00000000  00039830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00014fc1  00000000  00000000  00069f05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00136e69  00000000  00000000  0007eec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001b5d2f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003700  00000000  00000000  001b5d80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	2400001c 	.word	0x2400001c
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08008c30 	.word	0x08008c30

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000020 	.word	0x24000020
 80002e8:	08008c30 	.word	0x08008c30

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b974 	b.w	80005ec <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468e      	mov	lr, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d14d      	bne.n	80003c6 <__udivmoddi4+0xaa>
 800032a:	428a      	cmp	r2, r1
 800032c:	4694      	mov	ip, r2
 800032e:	d969      	bls.n	8000404 <__udivmoddi4+0xe8>
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	b152      	cbz	r2, 800034c <__udivmoddi4+0x30>
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	f1c2 0120 	rsb	r1, r2, #32
 800033e:	fa20 f101 	lsr.w	r1, r0, r1
 8000342:	fa0c fc02 	lsl.w	ip, ip, r2
 8000346:	ea41 0e03 	orr.w	lr, r1, r3
 800034a:	4094      	lsls	r4, r2
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	0c21      	lsrs	r1, r4, #16
 8000352:	fbbe f6f8 	udiv	r6, lr, r8
 8000356:	fa1f f78c 	uxth.w	r7, ip
 800035a:	fb08 e316 	mls	r3, r8, r6, lr
 800035e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000362:	fb06 f107 	mul.w	r1, r6, r7
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 811f 	bcs.w	80005b4 <__udivmoddi4+0x298>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 811c 	bls.w	80005b4 <__udivmoddi4+0x298>
 800037c:	3e02      	subs	r6, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 f707 	mul.w	r7, r0, r7
 8000394:	42a7      	cmp	r7, r4
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x92>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a0:	f080 810a 	bcs.w	80005b8 <__udivmoddi4+0x29c>
 80003a4:	42a7      	cmp	r7, r4
 80003a6:	f240 8107 	bls.w	80005b8 <__udivmoddi4+0x29c>
 80003aa:	4464      	add	r4, ip
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa4>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xc2>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80ef 	beq.w	80005ae <__udivmoddi4+0x292>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x160>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd4>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80f9 	bhi.w	80005e2 <__udivmoddi4+0x2c6>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	469e      	mov	lr, r3
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa4>
 80003fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa4>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xec>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 8092 	bne.w	8000536 <__udivmoddi4+0x21a>
 8000412:	eba1 010c 	sub.w	r1, r1, ip
 8000416:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	2601      	movs	r6, #1
 8000420:	0c20      	lsrs	r0, r4, #16
 8000422:	fbb1 f3f7 	udiv	r3, r1, r7
 8000426:	fb07 1113 	mls	r1, r7, r3, r1
 800042a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042e:	fb0e f003 	mul.w	r0, lr, r3
 8000432:	4288      	cmp	r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x12c>
 8000436:	eb1c 0101 	adds.w	r1, ip, r1
 800043a:	f103 38ff 	add.w	r8, r3, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x12a>
 8000440:	4288      	cmp	r0, r1
 8000442:	f200 80cb 	bhi.w	80005dc <__udivmoddi4+0x2c0>
 8000446:	4643      	mov	r3, r8
 8000448:	1a09      	subs	r1, r1, r0
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1110 	mls	r1, r7, r0, r1
 8000454:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000458:	fb0e fe00 	mul.w	lr, lr, r0
 800045c:	45a6      	cmp	lr, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x156>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f100 31ff 	add.w	r1, r0, #4294967295
 8000468:	d202      	bcs.n	8000470 <__udivmoddi4+0x154>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f200 80bb 	bhi.w	80005e6 <__udivmoddi4+0x2ca>
 8000470:	4608      	mov	r0, r1
 8000472:	eba4 040e 	sub.w	r4, r4, lr
 8000476:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047a:	e79c      	b.n	80003b6 <__udivmoddi4+0x9a>
 800047c:	f1c6 0720 	rsb	r7, r6, #32
 8000480:	40b3      	lsls	r3, r6
 8000482:	fa22 fc07 	lsr.w	ip, r2, r7
 8000486:	ea4c 0c03 	orr.w	ip, ip, r3
 800048a:	fa20 f407 	lsr.w	r4, r0, r7
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	431c      	orrs	r4, r3
 8000494:	40f9      	lsrs	r1, r7
 8000496:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049a:	fa00 f306 	lsl.w	r3, r0, r6
 800049e:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a2:	0c20      	lsrs	r0, r4, #16
 80004a4:	fa1f fe8c 	uxth.w	lr, ip
 80004a8:	fb09 1118 	mls	r1, r9, r8, r1
 80004ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b0:	fb08 f00e 	mul.w	r0, r8, lr
 80004b4:	4288      	cmp	r0, r1
 80004b6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ba:	d90b      	bls.n	80004d4 <__udivmoddi4+0x1b8>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c4:	f080 8088 	bcs.w	80005d8 <__udivmoddi4+0x2bc>
 80004c8:	4288      	cmp	r0, r1
 80004ca:	f240 8085 	bls.w	80005d8 <__udivmoddi4+0x2bc>
 80004ce:	f1a8 0802 	sub.w	r8, r8, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	1a09      	subs	r1, r1, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004dc:	fb09 1110 	mls	r1, r9, r0, r1
 80004e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e8:	458e      	cmp	lr, r1
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x1e2>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f4:	d26c      	bcs.n	80005d0 <__udivmoddi4+0x2b4>
 80004f6:	458e      	cmp	lr, r1
 80004f8:	d96a      	bls.n	80005d0 <__udivmoddi4+0x2b4>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4461      	add	r1, ip
 80004fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000502:	fba0 9402 	umull	r9, r4, r0, r2
 8000506:	eba1 010e 	sub.w	r1, r1, lr
 800050a:	42a1      	cmp	r1, r4
 800050c:	46c8      	mov	r8, r9
 800050e:	46a6      	mov	lr, r4
 8000510:	d356      	bcc.n	80005c0 <__udivmoddi4+0x2a4>
 8000512:	d053      	beq.n	80005bc <__udivmoddi4+0x2a0>
 8000514:	b15d      	cbz	r5, 800052e <__udivmoddi4+0x212>
 8000516:	ebb3 0208 	subs.w	r2, r3, r8
 800051a:	eb61 010e 	sbc.w	r1, r1, lr
 800051e:	fa01 f707 	lsl.w	r7, r1, r7
 8000522:	fa22 f306 	lsr.w	r3, r2, r6
 8000526:	40f1      	lsrs	r1, r6
 8000528:	431f      	orrs	r7, r3
 800052a:	e9c5 7100 	strd	r7, r1, [r5]
 800052e:	2600      	movs	r6, #0
 8000530:	4631      	mov	r1, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	40d8      	lsrs	r0, r3
 800053c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000540:	fa21 f303 	lsr.w	r3, r1, r3
 8000544:	4091      	lsls	r1, r2
 8000546:	4301      	orrs	r1, r0
 8000548:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800054c:	fa1f fe8c 	uxth.w	lr, ip
 8000550:	fbb3 f0f7 	udiv	r0, r3, r7
 8000554:	fb07 3610 	mls	r6, r7, r0, r3
 8000558:	0c0b      	lsrs	r3, r1, #16
 800055a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055e:	fb00 f60e 	mul.w	r6, r0, lr
 8000562:	429e      	cmp	r6, r3
 8000564:	fa04 f402 	lsl.w	r4, r4, r2
 8000568:	d908      	bls.n	800057c <__udivmoddi4+0x260>
 800056a:	eb1c 0303 	adds.w	r3, ip, r3
 800056e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000572:	d22f      	bcs.n	80005d4 <__udivmoddi4+0x2b8>
 8000574:	429e      	cmp	r6, r3
 8000576:	d92d      	bls.n	80005d4 <__udivmoddi4+0x2b8>
 8000578:	3802      	subs	r0, #2
 800057a:	4463      	add	r3, ip
 800057c:	1b9b      	subs	r3, r3, r6
 800057e:	b289      	uxth	r1, r1
 8000580:	fbb3 f6f7 	udiv	r6, r3, r7
 8000584:	fb07 3316 	mls	r3, r7, r6, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb06 f30e 	mul.w	r3, r6, lr
 8000590:	428b      	cmp	r3, r1
 8000592:	d908      	bls.n	80005a6 <__udivmoddi4+0x28a>
 8000594:	eb1c 0101 	adds.w	r1, ip, r1
 8000598:	f106 38ff 	add.w	r8, r6, #4294967295
 800059c:	d216      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d914      	bls.n	80005cc <__udivmoddi4+0x2b0>
 80005a2:	3e02      	subs	r6, #2
 80005a4:	4461      	add	r1, ip
 80005a6:	1ac9      	subs	r1, r1, r3
 80005a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005ac:	e738      	b.n	8000420 <__udivmoddi4+0x104>
 80005ae:	462e      	mov	r6, r5
 80005b0:	4628      	mov	r0, r5
 80005b2:	e705      	b.n	80003c0 <__udivmoddi4+0xa4>
 80005b4:	4606      	mov	r6, r0
 80005b6:	e6e3      	b.n	8000380 <__udivmoddi4+0x64>
 80005b8:	4618      	mov	r0, r3
 80005ba:	e6f8      	b.n	80003ae <__udivmoddi4+0x92>
 80005bc:	454b      	cmp	r3, r9
 80005be:	d2a9      	bcs.n	8000514 <__udivmoddi4+0x1f8>
 80005c0:	ebb9 0802 	subs.w	r8, r9, r2
 80005c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c8:	3801      	subs	r0, #1
 80005ca:	e7a3      	b.n	8000514 <__udivmoddi4+0x1f8>
 80005cc:	4646      	mov	r6, r8
 80005ce:	e7ea      	b.n	80005a6 <__udivmoddi4+0x28a>
 80005d0:	4620      	mov	r0, r4
 80005d2:	e794      	b.n	80004fe <__udivmoddi4+0x1e2>
 80005d4:	4640      	mov	r0, r8
 80005d6:	e7d1      	b.n	800057c <__udivmoddi4+0x260>
 80005d8:	46d0      	mov	r8, sl
 80005da:	e77b      	b.n	80004d4 <__udivmoddi4+0x1b8>
 80005dc:	3b02      	subs	r3, #2
 80005de:	4461      	add	r1, ip
 80005e0:	e732      	b.n	8000448 <__udivmoddi4+0x12c>
 80005e2:	4630      	mov	r0, r6
 80005e4:	e709      	b.n	80003fa <__udivmoddi4+0xde>
 80005e6:	4464      	add	r4, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e742      	b.n	8000472 <__udivmoddi4+0x156>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <nrf24_ToggleCSCE>:
 * 2 -> CE up
 * 3 -> CE down
 *
 *
 */
void nrf24_ToggleCSCE(uint8_t sel){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	switch (sel){
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	2b03      	cmp	r3, #3
 80005fe:	d823      	bhi.n	8000648 <nrf24_ToggleCSCE+0x58>
 8000600:	a201      	add	r2, pc, #4	; (adr r2, 8000608 <nrf24_ToggleCSCE+0x18>)
 8000602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000606:	bf00      	nop
 8000608:	08000619 	.word	0x08000619
 800060c:	08000625 	.word	0x08000625
 8000610:	08000631 	.word	0x08000631
 8000614:	0800063d 	.word	0x0800063d
	case 0: HAL_GPIO_WritePin(GPIO_CS_Port,GPIO_CS_Pin,GPIO_PIN_SET) ;
 8000618:	2201      	movs	r2, #1
 800061a:	2110      	movs	r1, #16
 800061c:	480c      	ldr	r0, [pc, #48]	; (8000650 <nrf24_ToggleCSCE+0x60>)
 800061e:	f001 ffcf 	bl	80025c0 <HAL_GPIO_WritePin>
			break ;
 8000622:	e011      	b.n	8000648 <nrf24_ToggleCSCE+0x58>
	case 1: HAL_GPIO_WritePin(GPIO_CS_Port,GPIO_CS_Pin,GPIO_PIN_RESET) ;
 8000624:	2200      	movs	r2, #0
 8000626:	2110      	movs	r1, #16
 8000628:	4809      	ldr	r0, [pc, #36]	; (8000650 <nrf24_ToggleCSCE+0x60>)
 800062a:	f001 ffc9 	bl	80025c0 <HAL_GPIO_WritePin>
			break ;
 800062e:	e00b      	b.n	8000648 <nrf24_ToggleCSCE+0x58>
	case 2: HAL_GPIO_WritePin(GPIO_CE_Port,GPIO_CE_Pin,GPIO_PIN_SET) ;
 8000630:	2201      	movs	r2, #1
 8000632:	2120      	movs	r1, #32
 8000634:	4807      	ldr	r0, [pc, #28]	; (8000654 <nrf24_ToggleCSCE+0x64>)
 8000636:	f001 ffc3 	bl	80025c0 <HAL_GPIO_WritePin>
			break ;
 800063a:	e005      	b.n	8000648 <nrf24_ToggleCSCE+0x58>
	case 3: HAL_GPIO_WritePin(GPIO_CE_Port,GPIO_CE_Pin,GPIO_PIN_RESET) ;
 800063c:	2200      	movs	r2, #0
 800063e:	2120      	movs	r1, #32
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <nrf24_ToggleCSCE+0x64>)
 8000642:	f001 ffbd 	bl	80025c0 <HAL_GPIO_WritePin>
			break ;
 8000646:	bf00      	nop
	}
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	58020000 	.word	0x58020000
 8000654:	58020800 	.word	0x58020800

08000658 <nrf24_WriteRegister1bit>:
 *
 * nrf24_WriteRegister1bit will be use to write 1 bit of data inside one register using SPI connection
 *
 *
 */
void nrf24_WriteRegister1bit(uint8_t reg , uint8_t data){
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	460a      	mov	r2, r1
 8000662:	71fb      	strb	r3, [r7, #7]
 8000664:	4613      	mov	r3, r2
 8000666:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2] ;
	buf[0] = reg | 1<<5 ;
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	f043 0320 	orr.w	r3, r3, #32
 800066e:	b2db      	uxtb	r3, r3
 8000670:	733b      	strb	r3, [r7, #12]
	buf[1] = data ;
 8000672:	79bb      	ldrb	r3, [r7, #6]
 8000674:	737b      	strb	r3, [r7, #13]

	nrf24_ToggleCSCE(1); // Put the CS pin low
 8000676:	2001      	movs	r0, #1
 8000678:	f7ff ffba 	bl	80005f0 <nrf24_ToggleCSCE>

	HAL_SPI_Transmit(&hspi1,buf,2,1000);
 800067c:	f107 010c 	add.w	r1, r7, #12
 8000680:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000684:	2202      	movs	r2, #2
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <nrf24_WriteRegister1bit+0x44>)
 8000688:	f004 feea 	bl	8005460 <HAL_SPI_Transmit>

	nrf24_ToggleCSCE(0); // Put the CS pin up
 800068c:	2000      	movs	r0, #0
 800068e:	f7ff ffaf 	bl	80005f0 <nrf24_ToggleCSCE>
}
 8000692:	bf00      	nop
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	24000058 	.word	0x24000058

080006a0 <nrf24_WriteRegisterNbit>:
 *
 * nrf24_WriteRegisterNbit will be use to write N bit (N = size) of data inside one register using SPI connection
 *
 *
 */
void nrf24_WriteRegisterNbit(uint8_t reg , uint8_t* data ,int size){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
 80006ac:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2] ;
	buf[0] = reg | 1<<5 ;
 80006ae:	7bfb      	ldrb	r3, [r7, #15]
 80006b0:	f043 0320 	orr.w	r3, r3, #32
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	753b      	strb	r3, [r7, #20]

	nrf24_ToggleCSCE(1); // Put the CS pin low
 80006b8:	2001      	movs	r0, #1
 80006ba:	f7ff ff99 	bl	80005f0 <nrf24_ToggleCSCE>

	HAL_SPI_Transmit(&hspi1,buf,1,100);
 80006be:	f107 0114 	add.w	r1, r7, #20
 80006c2:	2364      	movs	r3, #100	; 0x64
 80006c4:	2201      	movs	r2, #1
 80006c6:	4809      	ldr	r0, [pc, #36]	; (80006ec <nrf24_WriteRegisterNbit+0x4c>)
 80006c8:	f004 feca 	bl	8005460 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1,data,size,1000);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	b29a      	uxth	r2, r3
 80006d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d4:	68b9      	ldr	r1, [r7, #8]
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <nrf24_WriteRegisterNbit+0x4c>)
 80006d8:	f004 fec2 	bl	8005460 <HAL_SPI_Transmit>


	nrf24_ToggleCSCE(0); // Put the CS pin up
 80006dc:	2000      	movs	r0, #0
 80006de:	f7ff ff87 	bl	80005f0 <nrf24_ToggleCSCE>
}
 80006e2:	bf00      	nop
 80006e4:	3718      	adds	r7, #24
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	24000058 	.word	0x24000058

080006f0 <nrf24_ReadRegister1bit>:
 * nrf24_ReadRegister1bit will be use to read 1 bit of data inside one register using SPI connection.
 * It will be return inside a uint8_t data.
 *
 *
 */
uint8_t nrf24_ReadRegister1bit(uint8_t reg){
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
	uint8_t data ;

	nrf24_ToggleCSCE(0) ;
 80006fa:	2000      	movs	r0, #0
 80006fc:	f7ff ff78 	bl	80005f0 <nrf24_ToggleCSCE>

	HAL_SPI_Transmit(&hspi1,&reg,1,100) ;
 8000700:	1df9      	adds	r1, r7, #7
 8000702:	2364      	movs	r3, #100	; 0x64
 8000704:	2201      	movs	r2, #1
 8000706:	4809      	ldr	r0, [pc, #36]	; (800072c <nrf24_ReadRegister1bit+0x3c>)
 8000708:	f004 feaa 	bl	8005460 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1,&data,1,100) ;
 800070c:	f107 010f 	add.w	r1, r7, #15
 8000710:	2364      	movs	r3, #100	; 0x64
 8000712:	2201      	movs	r2, #1
 8000714:	4805      	ldr	r0, [pc, #20]	; (800072c <nrf24_ReadRegister1bit+0x3c>)
 8000716:	f005 f89f 	bl	8005858 <HAL_SPI_Receive>

	nrf24_ToggleCSCE(1) ;
 800071a:	2001      	movs	r0, #1
 800071c:	f7ff ff68 	bl	80005f0 <nrf24_ToggleCSCE>

	return data ;
 8000720:	7bfb      	ldrb	r3, [r7, #15]
}
 8000722:	4618      	mov	r0, r3
 8000724:	3710      	adds	r7, #16
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	24000058 	.word	0x24000058

08000730 <nrf24_CmdTransmit>:
 *
 * nrf24_CmdTransmit will be use to send a command to the nrf24 using SPI connection.
 *
 *
 */
void nrf24_CmdTransmit(uint8_t cmd){
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	71fb      	strb	r3, [r7, #7]
	nrf24_ToggleCSCE(0) ;
 800073a:	2000      	movs	r0, #0
 800073c:	f7ff ff58 	bl	80005f0 <nrf24_ToggleCSCE>

	HAL_SPI_Transmit(&hspi1,&cmd,1,100) ;
 8000740:	1df9      	adds	r1, r7, #7
 8000742:	2364      	movs	r3, #100	; 0x64
 8000744:	2201      	movs	r2, #1
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <nrf24_CmdTransmit+0x2c>)
 8000748:	f004 fe8a 	bl	8005460 <HAL_SPI_Transmit>

	nrf24_ToggleCSCE(1) ;
 800074c:	2001      	movs	r0, #1
 800074e:	f7ff ff4f 	bl	80005f0 <nrf24_ToggleCSCE>
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	24000058 	.word	0x24000058

08000760 <nrf24_reset>:
 *
 * nrf24_reset will be use to reset the registers of the nrf24 to their original value.
 *
 *
 */
void nrf24_reset(uint8_t Reg){
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]

	switch(Reg){
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	2b07      	cmp	r3, #7
 800076e:	d002      	beq.n	8000776 <nrf24_reset+0x16>
 8000770:	2b17      	cmp	r3, #23
 8000772:	d005      	beq.n	8000780 <nrf24_reset+0x20>
 8000774:	e009      	b.n	800078a <nrf24_reset+0x2a>

	case STATUS:
		nrf24_WriteRegister1bit(STATUS, 0x00);
 8000776:	2100      	movs	r1, #0
 8000778:	2007      	movs	r0, #7
 800077a:	f7ff ff6d 	bl	8000658 <nrf24_WriteRegister1bit>
		break ;
 800077e:	e08e      	b.n	800089e <nrf24_reset+0x13e>

	case FIFO_STATUS:
		nrf24_WriteRegister1bit(FIFO_STATUS, 0x11);
 8000780:	2111      	movs	r1, #17
 8000782:	2017      	movs	r0, #23
 8000784:	f7ff ff68 	bl	8000658 <nrf24_WriteRegister1bit>
		break ;
 8000788:	e089      	b.n	800089e <nrf24_reset+0x13e>

	default:
		nrf24_WriteRegister1bit(CONFIG, 0x08);
 800078a:	2108      	movs	r1, #8
 800078c:	2000      	movs	r0, #0
 800078e:	f7ff ff63 	bl	8000658 <nrf24_WriteRegister1bit>
		nrf24_WriteRegister1bit(EN_AA, 0x3F);
 8000792:	213f      	movs	r1, #63	; 0x3f
 8000794:	2001      	movs	r0, #1
 8000796:	f7ff ff5f 	bl	8000658 <nrf24_WriteRegister1bit>
		nrf24_WriteRegister1bit(EN_RXADDR, 0x03);
 800079a:	2103      	movs	r1, #3
 800079c:	2002      	movs	r0, #2
 800079e:	f7ff ff5b 	bl	8000658 <nrf24_WriteRegister1bit>
		nrf24_WriteRegister1bit(SETUP_AW, 0x03);
 80007a2:	2103      	movs	r1, #3
 80007a4:	2003      	movs	r0, #3
 80007a6:	f7ff ff57 	bl	8000658 <nrf24_WriteRegister1bit>
		nrf24_WriteRegister1bit(SETUP_RETR, 0x03);
 80007aa:	2103      	movs	r1, #3
 80007ac:	2004      	movs	r0, #4
 80007ae:	f7ff ff53 	bl	8000658 <nrf24_WriteRegister1bit>
		nrf24_WriteRegister1bit(RF_CH, 0x02);
 80007b2:	2102      	movs	r1, #2
 80007b4:	2005      	movs	r0, #5
 80007b6:	f7ff ff4f 	bl	8000658 <nrf24_WriteRegister1bit>
		nrf24_WriteRegister1bit(RF_SETUP, 0x0E);
 80007ba:	210e      	movs	r1, #14
 80007bc:	2006      	movs	r0, #6
 80007be:	f7ff ff4b 	bl	8000658 <nrf24_WriteRegister1bit>
		nrf24_WriteRegister1bit(STATUS, 0x00);
 80007c2:	2100      	movs	r1, #0
 80007c4:	2007      	movs	r0, #7
 80007c6:	f7ff ff47 	bl	8000658 <nrf24_WriteRegister1bit>
		nrf24_WriteRegister1bit(OBSERVE_TX, 0x00);
 80007ca:	2100      	movs	r1, #0
 80007cc:	2008      	movs	r0, #8
 80007ce:	f7ff ff43 	bl	8000658 <nrf24_WriteRegister1bit>
		nrf24_WriteRegister1bit(CD, 0x00);
 80007d2:	2100      	movs	r1, #0
 80007d4:	2009      	movs	r0, #9
 80007d6:	f7ff ff3f 	bl	8000658 <nrf24_WriteRegister1bit>

		uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80007da:	4a33      	ldr	r2, [pc, #204]	; (80008a8 <nrf24_reset+0x148>)
 80007dc:	f107 0318 	add.w	r3, r7, #24
 80007e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007e4:	6018      	str	r0, [r3, #0]
 80007e6:	3304      	adds	r3, #4
 80007e8:	7019      	strb	r1, [r3, #0]
		nrf24_WriteRegisterNbit(RX_ADDR_P0, rx_addr_p0_def, 5);
 80007ea:	f107 0318 	add.w	r3, r7, #24
 80007ee:	2205      	movs	r2, #5
 80007f0:	4619      	mov	r1, r3
 80007f2:	200a      	movs	r0, #10
 80007f4:	f7ff ff54 	bl	80006a0 <nrf24_WriteRegisterNbit>

		uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 80007f8:	4a2c      	ldr	r2, [pc, #176]	; (80008ac <nrf24_reset+0x14c>)
 80007fa:	f107 0310 	add.w	r3, r7, #16
 80007fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000802:	6018      	str	r0, [r3, #0]
 8000804:	3304      	adds	r3, #4
 8000806:	7019      	strb	r1, [r3, #0]
		nrf24_WriteRegisterNbit(RX_ADDR_P1, rx_addr_p1_def, 5);
 8000808:	f107 0310 	add.w	r3, r7, #16
 800080c:	2205      	movs	r2, #5
 800080e:	4619      	mov	r1, r3
 8000810:	200b      	movs	r0, #11
 8000812:	f7ff ff45 	bl	80006a0 <nrf24_WriteRegisterNbit>

		nrf24_WriteRegister1bit(RX_ADDR_P2, 0xC3);
 8000816:	21c3      	movs	r1, #195	; 0xc3
 8000818:	200c      	movs	r0, #12
 800081a:	f7ff ff1d 	bl	8000658 <nrf24_WriteRegister1bit>
		nrf24_WriteRegister1bit(RX_ADDR_P3, 0xC4);
 800081e:	21c4      	movs	r1, #196	; 0xc4
 8000820:	200d      	movs	r0, #13
 8000822:	f7ff ff19 	bl	8000658 <nrf24_WriteRegister1bit>
		nrf24_WriteRegister1bit(RX_ADDR_P4, 0xC5);
 8000826:	21c5      	movs	r1, #197	; 0xc5
 8000828:	200e      	movs	r0, #14
 800082a:	f7ff ff15 	bl	8000658 <nrf24_WriteRegister1bit>
		nrf24_WriteRegister1bit(RX_ADDR_P5, 0xC6);
 800082e:	21c6      	movs	r1, #198	; 0xc6
 8000830:	200f      	movs	r0, #15
 8000832:	f7ff ff11 	bl	8000658 <nrf24_WriteRegister1bit>

		uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000836:	4a1c      	ldr	r2, [pc, #112]	; (80008a8 <nrf24_reset+0x148>)
 8000838:	f107 0308 	add.w	r3, r7, #8
 800083c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000840:	6018      	str	r0, [r3, #0]
 8000842:	3304      	adds	r3, #4
 8000844:	7019      	strb	r1, [r3, #0]
		nrf24_WriteRegisterNbit(TX_ADDR, tx_addr_def, 5);
 8000846:	f107 0308 	add.w	r3, r7, #8
 800084a:	2205      	movs	r2, #5
 800084c:	4619      	mov	r1, r3
 800084e:	2010      	movs	r0, #16
 8000850:	f7ff ff26 	bl	80006a0 <nrf24_WriteRegisterNbit>

		nrf24_WriteRegister1bit(RX_PW_P0, 0);
 8000854:	2100      	movs	r1, #0
 8000856:	2011      	movs	r0, #17
 8000858:	f7ff fefe 	bl	8000658 <nrf24_WriteRegister1bit>
		nrf24_WriteRegister1bit(RX_PW_P1, 0);
 800085c:	2100      	movs	r1, #0
 800085e:	2012      	movs	r0, #18
 8000860:	f7ff fefa 	bl	8000658 <nrf24_WriteRegister1bit>
		nrf24_WriteRegister1bit(RX_PW_P2, 0);
 8000864:	2100      	movs	r1, #0
 8000866:	2013      	movs	r0, #19
 8000868:	f7ff fef6 	bl	8000658 <nrf24_WriteRegister1bit>
		nrf24_WriteRegister1bit(RX_PW_P3, 0);
 800086c:	2100      	movs	r1, #0
 800086e:	2014      	movs	r0, #20
 8000870:	f7ff fef2 	bl	8000658 <nrf24_WriteRegister1bit>
		nrf24_WriteRegister1bit(RX_PW_P4, 0);
 8000874:	2100      	movs	r1, #0
 8000876:	2015      	movs	r0, #21
 8000878:	f7ff feee 	bl	8000658 <nrf24_WriteRegister1bit>
		nrf24_WriteRegister1bit(RX_PW_P5, 0);
 800087c:	2100      	movs	r1, #0
 800087e:	2016      	movs	r0, #22
 8000880:	f7ff feea 	bl	8000658 <nrf24_WriteRegister1bit>
		nrf24_WriteRegister1bit(FIFO_STATUS, 0x11);
 8000884:	2111      	movs	r1, #17
 8000886:	2017      	movs	r0, #23
 8000888:	f7ff fee6 	bl	8000658 <nrf24_WriteRegister1bit>
		nrf24_WriteRegister1bit(DYNPD, 0);
 800088c:	2100      	movs	r1, #0
 800088e:	201c      	movs	r0, #28
 8000890:	f7ff fee2 	bl	8000658 <nrf24_WriteRegister1bit>
		nrf24_WriteRegister1bit(FEATURE, 0);
 8000894:	2100      	movs	r1, #0
 8000896:	201d      	movs	r0, #29
 8000898:	f7ff fede 	bl	8000658 <nrf24_WriteRegister1bit>
		break;
 800089c:	bf00      	nop
	}
}
 800089e:	bf00      	nop
 80008a0:	3720      	adds	r7, #32
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	08008c48 	.word	0x08008c48
 80008ac:	08008c50 	.word	0x08008c50

080008b0 <nrf24_Init>:
 *
 * nrf24_Init will initialise the nrf24.
 *
 *
 */
void nrf24_Init(){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	nrf24_ToggleCSCE(3);
 80008b4:	2003      	movs	r0, #3
 80008b6:	f7ff fe9b 	bl	80005f0 <nrf24_ToggleCSCE>

	nrf24_reset(0);
 80008ba:	2000      	movs	r0, #0
 80008bc:	f7ff ff50 	bl	8000760 <nrf24_reset>
	nrf24_WriteRegister1bit(CONFIG, 0);
 80008c0:	2100      	movs	r1, #0
 80008c2:	2000      	movs	r0, #0
 80008c4:	f7ff fec8 	bl	8000658 <nrf24_WriteRegister1bit>
	nrf24_WriteRegister1bit(EN_AA, 0);  // No Auto ACK
 80008c8:	2100      	movs	r1, #0
 80008ca:	2001      	movs	r0, #1
 80008cc:	f7ff fec4 	bl	8000658 <nrf24_WriteRegister1bit>
	nrf24_WriteRegister1bit(EN_RXADDR, 0);
 80008d0:	2100      	movs	r1, #0
 80008d2:	2002      	movs	r0, #2
 80008d4:	f7ff fec0 	bl	8000658 <nrf24_WriteRegister1bit>
	nrf24_WriteRegister1bit(SETUP_AW, 0x03); // Define the 5 byte for adresses
 80008d8:	2103      	movs	r1, #3
 80008da:	2003      	movs	r0, #3
 80008dc:	f7ff febc 	bl	8000658 <nrf24_WriteRegister1bit>
	nrf24_WriteRegister1bit(SETUP_RETR, 0);
 80008e0:	2100      	movs	r1, #0
 80008e2:	2004      	movs	r0, #4
 80008e4:	f7ff feb8 	bl	8000658 <nrf24_WriteRegister1bit>
	nrf24_WriteRegister1bit(RF_CH, 0);  // will be setup during Tx or RX, currently disable
 80008e8:	2100      	movs	r1, #0
 80008ea:	2005      	movs	r0, #5
 80008ec:	f7ff feb4 	bl	8000658 <nrf24_WriteRegister1bit>

	nrf24_WriteRegister1bit (RF_SETUP, 0x0E);   // Setup the Power at 0db and data rate at 2Mbps
 80008f0:	210e      	movs	r1, #14
 80008f2:	2006      	movs	r0, #6
 80008f4:	f7ff feb0 	bl	8000658 <nrf24_WriteRegister1bit>

	nrf24_ToggleCSCE(2);
 80008f8:	2002      	movs	r0, #2
 80008fa:	f7ff fe79 	bl	80005f0 <nrf24_ToggleCSCE>

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}

08000902 <nrf24_RxMode>:
 *
 * nrf24_RxMode will be use to activate the Receive mode.
 *
 *
 */
void nrf24_RxMode(uint8_t *Address, uint8_t channel){
 8000902:	b580      	push	{r7, lr}
 8000904:	b084      	sub	sp, #16
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
 800090a:	460b      	mov	r3, r1
 800090c:	70fb      	strb	r3, [r7, #3]
	nrf24_ToggleCSCE(3);
 800090e:	2003      	movs	r0, #3
 8000910:	f7ff fe6e 	bl	80005f0 <nrf24_ToggleCSCE>

	nrf24_reset(STATUS);
 8000914:	2007      	movs	r0, #7
 8000916:	f7ff ff23 	bl	8000760 <nrf24_reset>

	nrf24_WriteRegister1bit(RF_CH, channel);
 800091a:	78fb      	ldrb	r3, [r7, #3]
 800091c:	4619      	mov	r1, r3
 800091e:	2005      	movs	r0, #5
 8000920:	f7ff fe9a 	bl	8000658 <nrf24_WriteRegister1bit>

	uint8_t en_rxaddr = nrf24_ReadRegister1bit(EN_RXADDR);
 8000924:	2002      	movs	r0, #2
 8000926:	f7ff fee3 	bl	80006f0 <nrf24_ReadRegister1bit>
 800092a:	4603      	mov	r3, r0
 800092c:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 800092e:	7bfb      	ldrb	r3, [r7, #15]
 8000930:	f043 0304 	orr.w	r3, r3, #4
 8000934:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteRegister1bit(EN_RXADDR, en_rxaddr);
 8000936:	7bfb      	ldrb	r3, [r7, #15]
 8000938:	4619      	mov	r1, r3
 800093a:	2002      	movs	r0, #2
 800093c:	f7ff fe8c 	bl	8000658 <nrf24_WriteRegister1bit>
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */

	nrf24_WriteRegisterNbit(RX_ADDR_P1, Address, 5);
 8000940:	2205      	movs	r2, #5
 8000942:	6879      	ldr	r1, [r7, #4]
 8000944:	200b      	movs	r0, #11
 8000946:	f7ff feab 	bl	80006a0 <nrf24_WriteRegisterNbit>
	nrf24_WriteRegister1bit(RX_ADDR_P2, 0xEE);
 800094a:	21ee      	movs	r1, #238	; 0xee
 800094c:	200c      	movs	r0, #12
 800094e:	f7ff fe83 	bl	8000658 <nrf24_WriteRegister1bit>

	nrf24_WriteRegister1bit(RX_PW_P2, 32);   // Size of 2 bytes for the data pipe 2 (will be set as 2)
 8000952:	2120      	movs	r1, #32
 8000954:	2013      	movs	r0, #19
 8000956:	f7ff fe7f 	bl	8000658 <nrf24_WriteRegister1bit>

	uint8_t config = nrf24_ReadRegister1bit(CONFIG);
 800095a:	2000      	movs	r0, #0
 800095c:	f7ff fec8 	bl	80006f0 <nrf24_ReadRegister1bit>
 8000960:	4603      	mov	r3, r0
 8000962:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 8000964:	7bbb      	ldrb	r3, [r7, #14]
 8000966:	f043 0303 	orr.w	r3, r3, #3
 800096a:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteRegister1bit(CONFIG, config);
 800096c:	7bbb      	ldrb	r3, [r7, #14]
 800096e:	4619      	mov	r1, r3
 8000970:	2000      	movs	r0, #0
 8000972:	f7ff fe71 	bl	8000658 <nrf24_WriteRegister1bit>

	nrf24_ToggleCSCE(2);
 8000976:	2002      	movs	r0, #2
 8000978:	f7ff fe3a 	bl	80005f0 <nrf24_ToggleCSCE>
}
 800097c:	bf00      	nop
 800097e:	3710      	adds	r7, #16
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <nrf24_DataAvailable>:
 * nrf24_DataAvailable will be use to determine if their has been data received in the pipe in entry.
 * If their is, it will return a 1, otherwise a 0.
 *
 *
 */
uint8_t nrf24_DataAvailable(int pipe){
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadRegister1bit(STATUS);
 800098c:	2007      	movs	r0, #7
 800098e:	f7ff feaf 	bl	80006f0 <nrf24_ReadRegister1bit>
 8000992:	4603      	mov	r3, r0
 8000994:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipe<<1))){
 8000996:	7bfb      	ldrb	r3, [r7, #15]
 8000998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800099c:	2b00      	cmp	r3, #0
 800099e:	d00b      	beq.n	80009b8 <nrf24_DataAvailable+0x34>
 80009a0:	7bfa      	ldrb	r2, [r7, #15]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	4013      	ands	r3, r2
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d005      	beq.n	80009b8 <nrf24_DataAvailable+0x34>

		nrf24_WriteRegister1bit(STATUS, (1<<6));
 80009ac:	2140      	movs	r1, #64	; 0x40
 80009ae:	2007      	movs	r0, #7
 80009b0:	f7ff fe52 	bl	8000658 <nrf24_WriteRegister1bit>

		return 1;
 80009b4:	2301      	movs	r3, #1
 80009b6:	e000      	b.n	80009ba <nrf24_DataAvailable+0x36>
	}
	return 0;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <nrf24_Receive>:
 *
 * nrf24_Receive will be use to receive data using the nrf24.
 *
 *
 */
HAL_StatusTypeDef nrf24_Receive(uint8_t *data){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	73bb      	strb	r3, [r7, #14]

	nrf24_ToggleCSCE(0);
 80009d0:	2000      	movs	r0, #0
 80009d2:	f7ff fe0d 	bl	80005f0 <nrf24_ToggleCSCE>

	cmd = R_RX_PAYLOAD;
 80009d6:	2361      	movs	r3, #97	; 0x61
 80009d8:	73bb      	strb	r3, [r7, #14]

	HAL_SPI_Transmit(&hspi1, &cmd, 1, 100);
 80009da:	f107 010e 	add.w	r1, r7, #14
 80009de:	2364      	movs	r3, #100	; 0x64
 80009e0:	2201      	movs	r2, #1
 80009e2:	480e      	ldr	r0, [pc, #56]	; (8000a1c <nrf24_Receive+0x58>)
 80009e4:	f004 fd3c 	bl	8005460 <HAL_SPI_Transmit>
	HAL_StatusTypeDef hal_status = HAL_SPI_Receive(&hspi1, data, 32, 1000);
 80009e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ec:	2220      	movs	r2, #32
 80009ee:	6879      	ldr	r1, [r7, #4]
 80009f0:	480a      	ldr	r0, [pc, #40]	; (8000a1c <nrf24_Receive+0x58>)
 80009f2:	f004 ff31 	bl	8005858 <HAL_SPI_Receive>
 80009f6:	4603      	mov	r3, r0
 80009f8:	73fb      	strb	r3, [r7, #15]

	nrf24_ToggleCSCE(1);
 80009fa:	2001      	movs	r0, #1
 80009fc:	f7ff fdf8 	bl	80005f0 <nrf24_ToggleCSCE>

	HAL_Delay(100);
 8000a00:	2064      	movs	r0, #100	; 0x64
 8000a02:	f000 fd95 	bl	8001530 <HAL_Delay>

	cmd = FLUSH_RX;
 8000a06:	23e2      	movs	r3, #226	; 0xe2
 8000a08:	73bb      	strb	r3, [r7, #14]
	nrf24_CmdTransmit(cmd);
 8000a0a:	7bbb      	ldrb	r3, [r7, #14]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff fe8f 	bl	8000730 <nrf24_CmdTransmit>

	return hal_status ;
 8000a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	24000058 	.word	0x24000058

08000a20 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08e      	sub	sp, #56	; 0x38
 8000a24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
 8000a34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a36:	4b93      	ldr	r3, [pc, #588]	; (8000c84 <MX_GPIO_Init+0x264>)
 8000a38:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a3c:	4a91      	ldr	r2, [pc, #580]	; (8000c84 <MX_GPIO_Init+0x264>)
 8000a3e:	f043 0304 	orr.w	r3, r3, #4
 8000a42:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a46:	4b8f      	ldr	r3, [pc, #572]	; (8000c84 <MX_GPIO_Init+0x264>)
 8000a48:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a4c:	f003 0304 	and.w	r3, r3, #4
 8000a50:	623b      	str	r3, [r7, #32]
 8000a52:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a54:	4b8b      	ldr	r3, [pc, #556]	; (8000c84 <MX_GPIO_Init+0x264>)
 8000a56:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a5a:	4a8a      	ldr	r2, [pc, #552]	; (8000c84 <MX_GPIO_Init+0x264>)
 8000a5c:	f043 0320 	orr.w	r3, r3, #32
 8000a60:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a64:	4b87      	ldr	r3, [pc, #540]	; (8000c84 <MX_GPIO_Init+0x264>)
 8000a66:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a6a:	f003 0320 	and.w	r3, r3, #32
 8000a6e:	61fb      	str	r3, [r7, #28]
 8000a70:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a72:	4b84      	ldr	r3, [pc, #528]	; (8000c84 <MX_GPIO_Init+0x264>)
 8000a74:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a78:	4a82      	ldr	r2, [pc, #520]	; (8000c84 <MX_GPIO_Init+0x264>)
 8000a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a7e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a82:	4b80      	ldr	r3, [pc, #512]	; (8000c84 <MX_GPIO_Init+0x264>)
 8000a84:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a8c:	61bb      	str	r3, [r7, #24]
 8000a8e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a90:	4b7c      	ldr	r3, [pc, #496]	; (8000c84 <MX_GPIO_Init+0x264>)
 8000a92:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a96:	4a7b      	ldr	r2, [pc, #492]	; (8000c84 <MX_GPIO_Init+0x264>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000aa0:	4b78      	ldr	r3, [pc, #480]	; (8000c84 <MX_GPIO_Init+0x264>)
 8000aa2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	617b      	str	r3, [r7, #20]
 8000aac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aae:	4b75      	ldr	r3, [pc, #468]	; (8000c84 <MX_GPIO_Init+0x264>)
 8000ab0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ab4:	4a73      	ldr	r2, [pc, #460]	; (8000c84 <MX_GPIO_Init+0x264>)
 8000ab6:	f043 0302 	orr.w	r3, r3, #2
 8000aba:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000abe:	4b71      	ldr	r3, [pc, #452]	; (8000c84 <MX_GPIO_Init+0x264>)
 8000ac0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ac4:	f003 0302 	and.w	r3, r3, #2
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000acc:	4b6d      	ldr	r3, [pc, #436]	; (8000c84 <MX_GPIO_Init+0x264>)
 8000ace:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ad2:	4a6c      	ldr	r2, [pc, #432]	; (8000c84 <MX_GPIO_Init+0x264>)
 8000ad4:	f043 0308 	orr.w	r3, r3, #8
 8000ad8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000adc:	4b69      	ldr	r3, [pc, #420]	; (8000c84 <MX_GPIO_Init+0x264>)
 8000ade:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ae2:	f003 0308 	and.w	r3, r3, #8
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aea:	4b66      	ldr	r3, [pc, #408]	; (8000c84 <MX_GPIO_Init+0x264>)
 8000aec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000af0:	4a64      	ldr	r2, [pc, #400]	; (8000c84 <MX_GPIO_Init+0x264>)
 8000af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000af6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000afa:	4b62      	ldr	r3, [pc, #392]	; (8000c84 <MX_GPIO_Init+0x264>)
 8000afc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b08:	4b5e      	ldr	r3, [pc, #376]	; (8000c84 <MX_GPIO_Init+0x264>)
 8000b0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b0e:	4a5d      	ldr	r2, [pc, #372]	; (8000c84 <MX_GPIO_Init+0x264>)
 8000b10:	f043 0310 	orr.w	r3, r3, #16
 8000b14:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b18:	4b5a      	ldr	r3, [pc, #360]	; (8000c84 <MX_GPIO_Init+0x264>)
 8000b1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b1e:	f003 0310 	and.w	r3, r3, #16
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b2c:	4856      	ldr	r0, [pc, #344]	; (8000c88 <MX_GPIO_Init+0x268>)
 8000b2e:	f001 fd47 	bl	80025c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2110      	movs	r1, #16
 8000b36:	4855      	ldr	r0, [pc, #340]	; (8000c8c <MX_GPIO_Init+0x26c>)
 8000b38:	f001 fd42 	bl	80025c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2120      	movs	r1, #32
 8000b40:	4853      	ldr	r0, [pc, #332]	; (8000c90 <MX_GPIO_Init+0x270>)
 8000b42:	f001 fd3d 	bl	80025c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	f244 0101 	movw	r1, #16385	; 0x4001
 8000b4c:	4851      	ldr	r0, [pc, #324]	; (8000c94 <MX_GPIO_Init+0x274>)
 8000b4e:	f001 fd37 	bl	80025c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2102      	movs	r1, #2
 8000b56:	4850      	ldr	r0, [pc, #320]	; (8000c98 <MX_GPIO_Init+0x278>)
 8000b58:	f001 fd32 	bl	80025c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4847      	ldr	r0, [pc, #284]	; (8000c90 <MX_GPIO_Init+0x270>)
 8000b72:	f001 fb75 	bl	8002260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000b76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	483e      	ldr	r0, [pc, #248]	; (8000c88 <MX_GPIO_Init+0x268>)
 8000b90:	f001 fb66 	bl	8002260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b94:	2310      	movs	r3, #16
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4838      	ldr	r0, [pc, #224]	; (8000c8c <MX_GPIO_Init+0x26c>)
 8000bac:	f001 fb58 	bl	8002260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bb0:	2320      	movs	r3, #32
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4832      	ldr	r0, [pc, #200]	; (8000c90 <MX_GPIO_Init+0x270>)
 8000bc8:	f001 fb4a 	bl	8002260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000bcc:	f244 0301 	movw	r3, #16385	; 0x4001
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be2:	4619      	mov	r1, r3
 8000be4:	482b      	ldr	r0, [pc, #172]	; (8000c94 <MX_GPIO_Init+0x274>)
 8000be6:	f001 fb3b 	bl	8002260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000bea:	2380      	movs	r3, #128	; 0x80
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4827      	ldr	r0, [pc, #156]	; (8000c9c <MX_GPIO_Init+0x27c>)
 8000c00:	f001 fb2e 	bl	8002260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000c04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c16:	4619      	mov	r1, r3
 8000c18:	481c      	ldr	r0, [pc, #112]	; (8000c8c <MX_GPIO_Init+0x26c>)
 8000c1a:	f001 fb21 	bl	8002260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000c1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c24:	2302      	movs	r3, #2
 8000c26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000c30:	230a      	movs	r3, #10
 8000c32:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000c34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4814      	ldr	r0, [pc, #80]	; (8000c8c <MX_GPIO_Init+0x26c>)
 8000c3c:	f001 fb10 	bl	8002260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000c40:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c56:	4619      	mov	r1, r3
 8000c58:	480c      	ldr	r0, [pc, #48]	; (8000c8c <MX_GPIO_Init+0x26c>)
 8000c5a:	f001 fb01 	bl	8002260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c72:	4619      	mov	r1, r3
 8000c74:	4808      	ldr	r0, [pc, #32]	; (8000c98 <MX_GPIO_Init+0x278>)
 8000c76:	f001 faf3 	bl	8002260 <HAL_GPIO_Init>

}
 8000c7a:	bf00      	nop
 8000c7c:	3738      	adds	r7, #56	; 0x38
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	58024400 	.word	0x58024400
 8000c88:	58021400 	.word	0x58021400
 8000c8c:	58020000 	.word	0x58020000
 8000c90:	58020800 	.word	0x58020800
 8000c94:	58020400 	.word	0x58020400
 8000c98:	58021000 	.word	0x58021000
 8000c9c:	58021800 	.word	0x58021800

08000ca0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ca4:	f000 fbb2 	bl	800140c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ca8:	f000 f860 	bl	8000d6c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000cac:	f000 f8da 	bl	8000e64 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb0:	f7ff feb6 	bl	8000a20 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000cb4:	f000 fa90 	bl	80011d8 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000cb8:	f000 fb76 	bl	80013a8 <MX_USB_OTG_HS_USB_Init>
  MX_SPI1_Init();
 8000cbc:	f000 f8f6 	bl	8000eac <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	nrf24_Init();
 8000cc0:	f7ff fdf6 	bl	80008b0 <nrf24_Init>
	// TX mode
	//nrf24_TxMode(TxAddress, 10);


	//RX mode
	nrf24_RxMode(RxAddress, 10);
 8000cc4:	210a      	movs	r1, #10
 8000cc6:	4822      	ldr	r0, [pc, #136]	; (8000d50 <main+0xb0>)
 8000cc8:	f7ff fe1b 	bl	8000902 <nrf24_RxMode>
  /* USER CODE BEGIN WHILE */
	while (1){
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		 if(uartFlag == 1){
 8000ccc:	4b21      	ldr	r3, [pc, #132]	; (8000d54 <main+0xb4>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d111      	bne.n	8000cf8 <main+0x58>
			HAL_GPIO_TogglePin(LED2_PORT,  LED2_PIN) ;
 8000cd4:	2102      	movs	r1, #2
 8000cd6:	4820      	ldr	r0, [pc, #128]	; (8000d58 <main+0xb8>)
 8000cd8:	f001 fc8b 	bl	80025f2 <HAL_GPIO_TogglePin>
			HAL_UART_Transmit(&huart3, (uint8_t*) msglu, 32, 100) ;
 8000cdc:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <main+0xbc>)
 8000cde:	6819      	ldr	r1, [r3, #0]
 8000ce0:	2364      	movs	r3, #100	; 0x64
 8000ce2:	2220      	movs	r2, #32
 8000ce4:	481e      	ldr	r0, [pc, #120]	; (8000d60 <main+0xc0>)
 8000ce6:	f005 fa9a 	bl	800621e <HAL_UART_Transmit>
			uartFlag = 0 ;
 8000cea:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <main+0xb4>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED2_PORT,  LED2_PIN) ;
 8000cf0:	2102      	movs	r1, #2
 8000cf2:	4819      	ldr	r0, [pc, #100]	; (8000d58 <main+0xb8>)
 8000cf4:	f001 fc7d 	bl	80025f2 <HAL_GPIO_TogglePin>
		}

		if (nrf24_DataAvailable(2) == 1){
 8000cf8:	2002      	movs	r0, #2
 8000cfa:	f7ff fe43 	bl	8000984 <nrf24_DataAvailable>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d114      	bne.n	8000d2e <main+0x8e>
			nrf24_Receive(RxData) ;
 8000d04:	4817      	ldr	r0, [pc, #92]	; (8000d64 <main+0xc4>)
 8000d06:	f7ff fe5d 	bl	80009c4 <nrf24_Receive>
			HAL_UART_Transmit(&huart3, RxData, 32, 100);
 8000d0a:	2364      	movs	r3, #100	; 0x64
 8000d0c:	2220      	movs	r2, #32
 8000d0e:	4915      	ldr	r1, [pc, #84]	; (8000d64 <main+0xc4>)
 8000d10:	4813      	ldr	r0, [pc, #76]	; (8000d60 <main+0xc0>)
 8000d12:	f005 fa84 	bl	800621e <HAL_UART_Transmit>
			HAL_GPIO_TogglePin(LED1_PORT,  LED1_PIN);
 8000d16:	2101      	movs	r1, #1
 8000d18:	4813      	ldr	r0, [pc, #76]	; (8000d68 <main+0xc8>)
 8000d1a:	f001 fc6a 	bl	80025f2 <HAL_GPIO_TogglePin>
			HAL_Delay(10);
 8000d1e:	200a      	movs	r0, #10
 8000d20:	f000 fc06 	bl	8001530 <HAL_Delay>
			HAL_GPIO_TogglePin(LED1_PORT,  LED1_PIN);
 8000d24:	2101      	movs	r1, #1
 8000d26:	4810      	ldr	r0, [pc, #64]	; (8000d68 <main+0xc8>)
 8000d28:	f001 fc63 	bl	80025f2 <HAL_GPIO_TogglePin>
 8000d2c:	e7ce      	b.n	8000ccc <main+0x2c>
		}
		else{
			HAL_GPIO_TogglePin(LED3_PORT,  LED3_PIN);
 8000d2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d32:	480d      	ldr	r0, [pc, #52]	; (8000d68 <main+0xc8>)
 8000d34:	f001 fc5d 	bl	80025f2 <HAL_GPIO_TogglePin>
			HAL_Delay(50);
 8000d38:	2032      	movs	r0, #50	; 0x32
 8000d3a:	f000 fbf9 	bl	8001530 <HAL_Delay>
			HAL_GPIO_TogglePin(LED3_PORT,  LED3_PIN);
 8000d3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d42:	4809      	ldr	r0, [pc, #36]	; (8000d68 <main+0xc8>)
 8000d44:	f001 fc55 	bl	80025f2 <HAL_GPIO_TogglePin>
			HAL_Delay(50);
 8000d48:	2032      	movs	r0, #50	; 0x32
 8000d4a:	f000 fbf1 	bl	8001530 <HAL_Delay>
		 if(uartFlag == 1){
 8000d4e:	e7bd      	b.n	8000ccc <main+0x2c>
 8000d50:	24000004 	.word	0x24000004
 8000d54:	240000e0 	.word	0x240000e0
 8000d58:	58021000 	.word	0x58021000
 8000d5c:	24000000 	.word	0x24000000
 8000d60:	24000124 	.word	0x24000124
 8000d64:	24000038 	.word	0x24000038
 8000d68:	58020400 	.word	0x58020400

08000d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b09c      	sub	sp, #112	; 0x70
 8000d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d76:	224c      	movs	r2, #76	; 0x4c
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f007 ff50 	bl	8008c20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d80:	1d3b      	adds	r3, r7, #4
 8000d82:	2220      	movs	r2, #32
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f007 ff4a 	bl	8008c20 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000d8c:	4b33      	ldr	r3, [pc, #204]	; (8000e5c <SystemClock_Config+0xf0>)
 8000d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8000d92:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000d96:	2004      	movs	r0, #4
 8000d98:	f001 fc46 	bl	8002628 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	4b2f      	ldr	r3, [pc, #188]	; (8000e60 <SystemClock_Config+0xf4>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a2e      	ldr	r2, [pc, #184]	; (8000e60 <SystemClock_Config+0xf4>)
 8000da6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000daa:	6193      	str	r3, [r2, #24]
 8000dac:	4b2c      	ldr	r3, [pc, #176]	; (8000e60 <SystemClock_Config+0xf4>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000db4:	603b      	str	r3, [r7, #0]
 8000db6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000db8:	bf00      	nop
 8000dba:	4b29      	ldr	r3, [pc, #164]	; (8000e60 <SystemClock_Config+0xf4>)
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000dc6:	d1f8      	bne.n	8000dba <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000dc8:	2323      	movs	r3, #35	; 0x23
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000dcc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV4;
 8000dd2:	2311      	movs	r3, #17
 8000dd4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000dd6:	2340      	movs	r3, #64	; 0x40
 8000dd8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dde:	2302      	movs	r3, #2
 8000de0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000de2:	2302      	movs	r3, #2
 8000de4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000de6:	2304      	movs	r3, #4
 8000de8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 8000dea:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000dee:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000df0:	2302      	movs	r3, #2
 8000df2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000df4:	2304      	movs	r3, #4
 8000df6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000dfc:	2304      	movs	r3, #4
 8000dfe:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f001 fc65 	bl	80026dc <HAL_RCC_OscConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000e18:	f000 f842 	bl	8000ea0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e1c:	233f      	movs	r3, #63	; 0x3f
 8000e1e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e20:	2303      	movs	r3, #3
 8000e22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e2c:	2340      	movs	r3, #64	; 0x40
 8000e2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e30:	2340      	movs	r3, #64	; 0x40
 8000e32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e38:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e3a:	2340      	movs	r3, #64	; 0x40
 8000e3c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	2107      	movs	r1, #7
 8000e42:	4618      	mov	r0, r3
 8000e44:	f002 f87c 	bl	8002f40 <HAL_RCC_ClockConfig>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000e4e:	f000 f827 	bl	8000ea0 <Error_Handler>
  }
}
 8000e52:	bf00      	nop
 8000e54:	3770      	adds	r7, #112	; 0x70
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	58024400 	.word	0x58024400
 8000e60:	58024800 	.word	0x58024800

08000e64 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b0b0      	sub	sp, #192	; 0xc0
 8000e68:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	22c0      	movs	r2, #192	; 0xc0
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f007 fed5 	bl	8008c20 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8000e76:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000e7a:	f04f 0300 	mov.w	r3, #0
 8000e7e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8000e82:	2300      	movs	r3, #0
 8000e84:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e86:	463b      	mov	r3, r7
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f002 fbe5 	bl	8003658 <HAL_RCCEx_PeriphCLKConfig>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 8000e94:	f000 f804 	bl	8000ea0 <Error_Handler>
  }
}
 8000e98:	bf00      	nop
 8000e9a:	37c0      	adds	r7, #192	; 0xc0
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea4:	b672      	cpsid	i
}
 8000ea6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <Error_Handler+0x8>
	...

08000eac <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000eb0:	4b27      	ldr	r3, [pc, #156]	; (8000f50 <MX_SPI1_Init+0xa4>)
 8000eb2:	4a28      	ldr	r2, [pc, #160]	; (8000f54 <MX_SPI1_Init+0xa8>)
 8000eb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eb6:	4b26      	ldr	r3, [pc, #152]	; (8000f50 <MX_SPI1_Init+0xa4>)
 8000eb8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ebc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ebe:	4b24      	ldr	r3, [pc, #144]	; (8000f50 <MX_SPI1_Init+0xa4>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ec4:	4b22      	ldr	r3, [pc, #136]	; (8000f50 <MX_SPI1_Init+0xa4>)
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eca:	4b21      	ldr	r3, [pc, #132]	; (8000f50 <MX_SPI1_Init+0xa4>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ed0:	4b1f      	ldr	r3, [pc, #124]	; (8000f50 <MX_SPI1_Init+0xa4>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ed6:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <MX_SPI1_Init+0xa4>)
 8000ed8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000edc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ede:	4b1c      	ldr	r3, [pc, #112]	; (8000f50 <MX_SPI1_Init+0xa4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <MX_SPI1_Init+0xa4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eea:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <MX_SPI1_Init+0xa4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ef0:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <MX_SPI1_Init+0xa4>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000ef6:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <MX_SPI1_Init+0xa4>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000efc:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <MX_SPI1_Init+0xa4>)
 8000efe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f02:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <MX_SPI1_Init+0xa4>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <MX_SPI1_Init+0xa4>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f10:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <MX_SPI1_Init+0xa4>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <MX_SPI1_Init+0xa4>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <MX_SPI1_Init+0xa4>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f22:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <MX_SPI1_Init+0xa4>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f28:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <MX_SPI1_Init+0xa4>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f2e:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <MX_SPI1_Init+0xa4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <MX_SPI1_Init+0xa4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f3a:	4805      	ldr	r0, [pc, #20]	; (8000f50 <MX_SPI1_Init+0xa4>)
 8000f3c:	f004 f96c 	bl	8005218 <HAL_SPI_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000f46:	f7ff ffab 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	24000058 	.word	0x24000058
 8000f54:	40013000 	.word	0x40013000

08000f58 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b0ba      	sub	sp, #232	; 0xe8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f70:	f107 0310 	add.w	r3, r7, #16
 8000f74:	22c0      	movs	r2, #192	; 0xc0
 8000f76:	2100      	movs	r1, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f007 fe51 	bl	8008c20 <memset>
  if(spiHandle->Instance==SPI1)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a2a      	ldr	r2, [pc, #168]	; (800102c <HAL_SPI_MspInit+0xd4>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d14d      	bne.n	8001024 <HAL_SPI_MspInit+0xcc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000f88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f8c:	f04f 0300 	mov.w	r3, #0
 8000f90:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8000f94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f98:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f9a:	f107 0310 	add.w	r3, r7, #16
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f002 fb5a 	bl	8003658 <HAL_RCCEx_PeriphCLKConfig>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8000faa:	f7ff ff79 	bl	8000ea0 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fae:	4b20      	ldr	r3, [pc, #128]	; (8001030 <HAL_SPI_MspInit+0xd8>)
 8000fb0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000fb4:	4a1e      	ldr	r2, [pc, #120]	; (8001030 <HAL_SPI_MspInit+0xd8>)
 8000fb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fba:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8000fbe:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <HAL_SPI_MspInit+0xd8>)
 8000fc0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000fc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fcc:	4b18      	ldr	r3, [pc, #96]	; (8001030 <HAL_SPI_MspInit+0xd8>)
 8000fce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fd2:	4a17      	ldr	r2, [pc, #92]	; (8001030 <HAL_SPI_MspInit+0xd8>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000fdc:	4b14      	ldr	r3, [pc, #80]	; (8001030 <HAL_SPI_MspInit+0xd8>)
 8000fde:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000fea:	23e0      	movs	r3, #224	; 0xe0
 8000fec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001002:	2305      	movs	r3, #5
 8001004:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001008:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800100c:	4619      	mov	r1, r3
 800100e:	4809      	ldr	r0, [pc, #36]	; (8001034 <HAL_SPI_MspInit+0xdc>)
 8001010:	f001 f926 	bl	8002260 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001014:	2200      	movs	r2, #0
 8001016:	2100      	movs	r1, #0
 8001018:	2023      	movs	r0, #35	; 0x23
 800101a:	f000 fb88 	bl	800172e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800101e:	2023      	movs	r0, #35	; 0x23
 8001020:	f000 fb9f 	bl	8001762 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001024:	bf00      	nop
 8001026:	37e8      	adds	r7, #232	; 0xe8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40013000 	.word	0x40013000
 8001030:	58024400 	.word	0x58024400
 8001034:	58020000 	.word	0x58020000

08001038 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103e:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <HAL_MspInit+0x30>)
 8001040:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001044:	4a08      	ldr	r2, [pc, #32]	; (8001068 <HAL_MspInit+0x30>)
 8001046:	f043 0302 	orr.w	r3, r3, #2
 800104a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_MspInit+0x30>)
 8001050:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	58024400 	.word	0x58024400

0800106c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <NMI_Handler+0x4>

08001072 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <HardFault_Handler+0x4>

08001078 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800107c:	e7fe      	b.n	800107c <MemManage_Handler+0x4>

0800107e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001082:	e7fe      	b.n	8001082 <BusFault_Handler+0x4>

08001084 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <UsageFault_Handler+0x4>

0800108a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b8:	f000 fa1a 	bl	80014f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80010c4:	4802      	ldr	r0, [pc, #8]	; (80010d0 <SPI1_IRQHandler+0x10>)
 80010c6:	f004 fd57 	bl	8005b78 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	24000058 	.word	0x24000058

080010d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80010d8:	4802      	ldr	r0, [pc, #8]	; (80010e4 <USART3_IRQHandler+0x10>)
 80010da:	f005 f97b 	bl	80063d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	24000124 	.word	0x24000124

080010e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010ec:	4b32      	ldr	r3, [pc, #200]	; (80011b8 <SystemInit+0xd0>)
 80010ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010f2:	4a31      	ldr	r2, [pc, #196]	; (80011b8 <SystemInit+0xd0>)
 80010f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010fc:	4b2f      	ldr	r3, [pc, #188]	; (80011bc <SystemInit+0xd4>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 030f 	and.w	r3, r3, #15
 8001104:	2b02      	cmp	r3, #2
 8001106:	d807      	bhi.n	8001118 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001108:	4b2c      	ldr	r3, [pc, #176]	; (80011bc <SystemInit+0xd4>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f023 030f 	bic.w	r3, r3, #15
 8001110:	4a2a      	ldr	r2, [pc, #168]	; (80011bc <SystemInit+0xd4>)
 8001112:	f043 0303 	orr.w	r3, r3, #3
 8001116:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001118:	4b29      	ldr	r3, [pc, #164]	; (80011c0 <SystemInit+0xd8>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a28      	ldr	r2, [pc, #160]	; (80011c0 <SystemInit+0xd8>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001124:	4b26      	ldr	r3, [pc, #152]	; (80011c0 <SystemInit+0xd8>)
 8001126:	2200      	movs	r2, #0
 8001128:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800112a:	4b25      	ldr	r3, [pc, #148]	; (80011c0 <SystemInit+0xd8>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	4924      	ldr	r1, [pc, #144]	; (80011c0 <SystemInit+0xd8>)
 8001130:	4b24      	ldr	r3, [pc, #144]	; (80011c4 <SystemInit+0xdc>)
 8001132:	4013      	ands	r3, r2
 8001134:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001136:	4b21      	ldr	r3, [pc, #132]	; (80011bc <SystemInit+0xd4>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 030c 	and.w	r3, r3, #12
 800113e:	2b00      	cmp	r3, #0
 8001140:	d007      	beq.n	8001152 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001142:	4b1e      	ldr	r3, [pc, #120]	; (80011bc <SystemInit+0xd4>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f023 030f 	bic.w	r3, r3, #15
 800114a:	4a1c      	ldr	r2, [pc, #112]	; (80011bc <SystemInit+0xd4>)
 800114c:	f043 0303 	orr.w	r3, r3, #3
 8001150:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001152:	4b1b      	ldr	r3, [pc, #108]	; (80011c0 <SystemInit+0xd8>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001158:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <SystemInit+0xd8>)
 800115a:	2200      	movs	r2, #0
 800115c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800115e:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <SystemInit+0xd8>)
 8001160:	2200      	movs	r2, #0
 8001162:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001164:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <SystemInit+0xd8>)
 8001166:	4a18      	ldr	r2, [pc, #96]	; (80011c8 <SystemInit+0xe0>)
 8001168:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <SystemInit+0xd8>)
 800116c:	4a17      	ldr	r2, [pc, #92]	; (80011cc <SystemInit+0xe4>)
 800116e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001170:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <SystemInit+0xd8>)
 8001172:	4a17      	ldr	r2, [pc, #92]	; (80011d0 <SystemInit+0xe8>)
 8001174:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001176:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <SystemInit+0xd8>)
 8001178:	2200      	movs	r2, #0
 800117a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800117c:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <SystemInit+0xd8>)
 800117e:	4a14      	ldr	r2, [pc, #80]	; (80011d0 <SystemInit+0xe8>)
 8001180:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001182:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <SystemInit+0xd8>)
 8001184:	2200      	movs	r2, #0
 8001186:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001188:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <SystemInit+0xd8>)
 800118a:	4a11      	ldr	r2, [pc, #68]	; (80011d0 <SystemInit+0xe8>)
 800118c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800118e:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <SystemInit+0xd8>)
 8001190:	2200      	movs	r2, #0
 8001192:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001194:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <SystemInit+0xd8>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a09      	ldr	r2, [pc, #36]	; (80011c0 <SystemInit+0xd8>)
 800119a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800119e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011a0:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <SystemInit+0xd8>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011a6:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <SystemInit+0xec>)
 80011a8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80011ac:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000ed00 	.word	0xe000ed00
 80011bc:	52002000 	.word	0x52002000
 80011c0:	58024400 	.word	0x58024400
 80011c4:	eaf6ed7f 	.word	0xeaf6ed7f
 80011c8:	02020200 	.word	0x02020200
 80011cc:	01ff0000 	.word	0x01ff0000
 80011d0:	01010280 	.word	0x01010280
 80011d4:	52004000 	.word	0x52004000

080011d8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011dc:	4b25      	ldr	r3, [pc, #148]	; (8001274 <MX_USART3_UART_Init+0x9c>)
 80011de:	4a26      	ldr	r2, [pc, #152]	; (8001278 <MX_USART3_UART_Init+0xa0>)
 80011e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011e2:	4b24      	ldr	r3, [pc, #144]	; (8001274 <MX_USART3_UART_Init+0x9c>)
 80011e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011ea:	4b22      	ldr	r3, [pc, #136]	; (8001274 <MX_USART3_UART_Init+0x9c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011f0:	4b20      	ldr	r3, [pc, #128]	; (8001274 <MX_USART3_UART_Init+0x9c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011f6:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <MX_USART3_UART_Init+0x9c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011fc:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <MX_USART3_UART_Init+0x9c>)
 80011fe:	220c      	movs	r2, #12
 8001200:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001202:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <MX_USART3_UART_Init+0x9c>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001208:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <MX_USART3_UART_Init+0x9c>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800120e:	4b19      	ldr	r3, [pc, #100]	; (8001274 <MX_USART3_UART_Init+0x9c>)
 8001210:	2200      	movs	r2, #0
 8001212:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001214:	4b17      	ldr	r3, [pc, #92]	; (8001274 <MX_USART3_UART_Init+0x9c>)
 8001216:	2200      	movs	r2, #0
 8001218:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800121a:	4b16      	ldr	r3, [pc, #88]	; (8001274 <MX_USART3_UART_Init+0x9c>)
 800121c:	2200      	movs	r2, #0
 800121e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001220:	4814      	ldr	r0, [pc, #80]	; (8001274 <MX_USART3_UART_Init+0x9c>)
 8001222:	f004 ffac 	bl	800617e <HAL_UART_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800122c:	f7ff fe38 	bl	8000ea0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001230:	2100      	movs	r1, #0
 8001232:	4810      	ldr	r0, [pc, #64]	; (8001274 <MX_USART3_UART_Init+0x9c>)
 8001234:	f007 fc05 	bl	8008a42 <HAL_UARTEx_SetTxFifoThreshold>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800123e:	f7ff fe2f 	bl	8000ea0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001242:	2100      	movs	r1, #0
 8001244:	480b      	ldr	r0, [pc, #44]	; (8001274 <MX_USART3_UART_Init+0x9c>)
 8001246:	f007 fc3a 	bl	8008abe <HAL_UARTEx_SetRxFifoThreshold>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001250:	f7ff fe26 	bl	8000ea0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001254:	4807      	ldr	r0, [pc, #28]	; (8001274 <MX_USART3_UART_Init+0x9c>)
 8001256:	f007 fbbb 	bl	80089d0 <HAL_UARTEx_DisableFifoMode>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001260:	f7ff fe1e 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  HAL_UART_Receive_IT(&huart3, (uint8_t*) uartRxBuffer, 1);
 8001264:	2201      	movs	r2, #1
 8001266:	4905      	ldr	r1, [pc, #20]	; (800127c <MX_USART3_UART_Init+0xa4>)
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <MX_USART3_UART_Init+0x9c>)
 800126a:	f005 f867 	bl	800633c <HAL_UART_Receive_IT>
  /* USER CODE END USART3_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	24000124 	.word	0x24000124
 8001278:	40004800 	.word	0x40004800
 800127c:	24000104 	.word	0x24000104

08001280 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b0ba      	sub	sp, #232	; 0xe8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001298:	f107 0310 	add.w	r3, r7, #16
 800129c:	22c0      	movs	r2, #192	; 0xc0
 800129e:	2100      	movs	r1, #0
 80012a0:	4618      	mov	r0, r3
 80012a2:	f007 fcbd 	bl	8008c20 <memset>
  if(uartHandle->Instance==USART3)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a2b      	ldr	r2, [pc, #172]	; (8001358 <HAL_UART_MspInit+0xd8>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d14e      	bne.n	800134e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012b0:	f04f 0202 	mov.w	r2, #2
 80012b4:	f04f 0300 	mov.w	r3, #0
 80012b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80012bc:	2300      	movs	r3, #0
 80012be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012c2:	f107 0310 	add.w	r3, r7, #16
 80012c6:	4618      	mov	r0, r3
 80012c8:	f002 f9c6 	bl	8003658 <HAL_RCCEx_PeriphCLKConfig>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80012d2:	f7ff fde5 	bl	8000ea0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012d6:	4b21      	ldr	r3, [pc, #132]	; (800135c <HAL_UART_MspInit+0xdc>)
 80012d8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80012dc:	4a1f      	ldr	r2, [pc, #124]	; (800135c <HAL_UART_MspInit+0xdc>)
 80012de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012e2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80012e6:	4b1d      	ldr	r3, [pc, #116]	; (800135c <HAL_UART_MspInit+0xdc>)
 80012e8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80012ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f4:	4b19      	ldr	r3, [pc, #100]	; (800135c <HAL_UART_MspInit+0xdc>)
 80012f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012fa:	4a18      	ldr	r2, [pc, #96]	; (800135c <HAL_UART_MspInit+0xdc>)
 80012fc:	f043 0308 	orr.w	r3, r3, #8
 8001300:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001304:	4b15      	ldr	r3, [pc, #84]	; (800135c <HAL_UART_MspInit+0xdc>)
 8001306:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001312:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001316:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2300      	movs	r3, #0
 8001328:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800132c:	2307      	movs	r3, #7
 800132e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001332:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001336:	4619      	mov	r1, r3
 8001338:	4809      	ldr	r0, [pc, #36]	; (8001360 <HAL_UART_MspInit+0xe0>)
 800133a:	f000 ff91 	bl	8002260 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800133e:	2200      	movs	r2, #0
 8001340:	2100      	movs	r1, #0
 8001342:	2027      	movs	r0, #39	; 0x27
 8001344:	f000 f9f3 	bl	800172e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001348:	2027      	movs	r0, #39	; 0x27
 800134a:	f000 fa0a 	bl	8001762 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800134e:	bf00      	nop
 8001350:	37e8      	adds	r7, #232	; 0xe8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40004800 	.word	0x40004800
 800135c:	58024400 	.word	0x58024400
 8001360:	58020c00 	.word	0x58020c00

08001364 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	uartFlag = 1;
 800136c:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <HAL_UART_RxCpltCallback+0x34>)
 800136e:	2201      	movs	r2, #1
 8001370:	701a      	strb	r2, [r3, #0]
	uartTxBuffer[0]=uartRxBuffer[0];
 8001372:	4b0a      	ldr	r3, [pc, #40]	; (800139c <HAL_UART_RxCpltCallback+0x38>)
 8001374:	781a      	ldrb	r2, [r3, #0]
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <HAL_UART_RxCpltCallback+0x3c>)
 8001378:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*) uartTxBuffer, 1, 100);
 800137a:	2364      	movs	r3, #100	; 0x64
 800137c:	2201      	movs	r2, #1
 800137e:	4908      	ldr	r1, [pc, #32]	; (80013a0 <HAL_UART_RxCpltCallback+0x3c>)
 8001380:	4808      	ldr	r0, [pc, #32]	; (80013a4 <HAL_UART_RxCpltCallback+0x40>)
 8001382:	f004 ff4c 	bl	800621e <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart3, (uint8_t*) uartRxBuffer, 1);
 8001386:	2201      	movs	r2, #1
 8001388:	4904      	ldr	r1, [pc, #16]	; (800139c <HAL_UART_RxCpltCallback+0x38>)
 800138a:	4806      	ldr	r0, [pc, #24]	; (80013a4 <HAL_UART_RxCpltCallback+0x40>)
 800138c:	f004 ffd6 	bl	800633c <HAL_UART_Receive_IT>

}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	240000e0 	.word	0x240000e0
 800139c:	24000104 	.word	0x24000104
 80013a0:	240000e4 	.word	0x240000e4
 80013a4:	24000124 	.word	0x24000124

080013a8 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013f0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80013bc:	f7ff fe94 	bl	80010e8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013c0:	480c      	ldr	r0, [pc, #48]	; (80013f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013c2:	490d      	ldr	r1, [pc, #52]	; (80013f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013c4:	4a0d      	ldr	r2, [pc, #52]	; (80013fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c8:	e002      	b.n	80013d0 <LoopCopyDataInit>

080013ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ce:	3304      	adds	r3, #4

080013d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80013d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d4:	d3f9      	bcc.n	80013ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013d8:	4c0a      	ldr	r4, [pc, #40]	; (8001404 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013dc:	e001      	b.n	80013e2 <LoopFillZerobss>

080013de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e0:	3204      	adds	r2, #4

080013e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e4:	d3fb      	bcc.n	80013de <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80013e6:	f007 fbf7 	bl	8008bd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ea:	f7ff fc59 	bl	8000ca0 <main>
  bx  lr
 80013ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013f0:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80013f4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013f8:	2400001c 	.word	0x2400001c
  ldr r2, =_sidata
 80013fc:	08008cc8 	.word	0x08008cc8
  ldr r2, =_sbss
 8001400:	2400001c 	.word	0x2400001c
  ldr r4, =_ebss
 8001404:	240001bc 	.word	0x240001bc

08001408 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001408:	e7fe      	b.n	8001408 <ADC_IRQHandler>
	...

0800140c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001412:	2003      	movs	r0, #3
 8001414:	f000 f980 	bl	8001718 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001418:	f001 ff48 	bl	80032ac <HAL_RCC_GetSysClockFreq>
 800141c:	4602      	mov	r2, r0
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <HAL_Init+0x68>)
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	0a1b      	lsrs	r3, r3, #8
 8001424:	f003 030f 	and.w	r3, r3, #15
 8001428:	4913      	ldr	r1, [pc, #76]	; (8001478 <HAL_Init+0x6c>)
 800142a:	5ccb      	ldrb	r3, [r1, r3]
 800142c:	f003 031f 	and.w	r3, r3, #31
 8001430:	fa22 f303 	lsr.w	r3, r2, r3
 8001434:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001436:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <HAL_Init+0x68>)
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	f003 030f 	and.w	r3, r3, #15
 800143e:	4a0e      	ldr	r2, [pc, #56]	; (8001478 <HAL_Init+0x6c>)
 8001440:	5cd3      	ldrb	r3, [r2, r3]
 8001442:	f003 031f 	and.w	r3, r3, #31
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	fa22 f303 	lsr.w	r3, r2, r3
 800144c:	4a0b      	ldr	r2, [pc, #44]	; (800147c <HAL_Init+0x70>)
 800144e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001450:	4a0b      	ldr	r2, [pc, #44]	; (8001480 <HAL_Init+0x74>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001456:	2000      	movs	r0, #0
 8001458:	f000 f814 	bl	8001484 <HAL_InitTick>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e002      	b.n	800146c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001466:	f7ff fde7 	bl	8001038 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	58024400 	.word	0x58024400
 8001478:	08008c80 	.word	0x08008c80
 800147c:	24000010 	.word	0x24000010
 8001480:	2400000c 	.word	0x2400000c

08001484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800148c:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <HAL_InitTick+0x60>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e021      	b.n	80014dc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001498:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <HAL_InitTick+0x64>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <HAL_InitTick+0x60>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	4619      	mov	r1, r3
 80014a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 f965 	bl	800177e <HAL_SYSTICK_Config>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e00e      	b.n	80014dc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2b0f      	cmp	r3, #15
 80014c2:	d80a      	bhi.n	80014da <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014c4:	2200      	movs	r2, #0
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	f04f 30ff 	mov.w	r0, #4294967295
 80014cc:	f000 f92f 	bl	800172e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014d0:	4a06      	ldr	r2, [pc, #24]	; (80014ec <HAL_InitTick+0x68>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
 80014d8:	e000      	b.n	80014dc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	24000018 	.word	0x24000018
 80014e8:	2400000c 	.word	0x2400000c
 80014ec:	24000014 	.word	0x24000014

080014f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_IncTick+0x20>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_IncTick+0x24>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4413      	add	r3, r2
 8001500:	4a04      	ldr	r2, [pc, #16]	; (8001514 <HAL_IncTick+0x24>)
 8001502:	6013      	str	r3, [r2, #0]
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	24000018 	.word	0x24000018
 8001514:	240001b8 	.word	0x240001b8

08001518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return uwTick;
 800151c:	4b03      	ldr	r3, [pc, #12]	; (800152c <HAL_GetTick+0x14>)
 800151e:	681b      	ldr	r3, [r3, #0]
}
 8001520:	4618      	mov	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	240001b8 	.word	0x240001b8

08001530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001538:	f7ff ffee 	bl	8001518 <HAL_GetTick>
 800153c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001548:	d005      	beq.n	8001556 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800154a:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <HAL_Delay+0x44>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	461a      	mov	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4413      	add	r3, r2
 8001554:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001556:	bf00      	nop
 8001558:	f7ff ffde 	bl	8001518 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	429a      	cmp	r2, r3
 8001566:	d8f7      	bhi.n	8001558 <HAL_Delay+0x28>
  {
  }
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	24000018 	.word	0x24000018

08001578 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001588:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <__NVIC_SetPriorityGrouping+0x40>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800158e:	68ba      	ldr	r2, [r7, #8]
 8001590:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001594:	4013      	ands	r3, r2
 8001596:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <__NVIC_SetPriorityGrouping+0x44>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015a6:	4a04      	ldr	r2, [pc, #16]	; (80015b8 <__NVIC_SetPriorityGrouping+0x40>)
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	60d3      	str	r3, [r2, #12]
}
 80015ac:	bf00      	nop
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e000ed00 	.word	0xe000ed00
 80015bc:	05fa0000 	.word	0x05fa0000

080015c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c4:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <__NVIC_GetPriorityGrouping+0x18>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	0a1b      	lsrs	r3, r3, #8
 80015ca:	f003 0307 	and.w	r3, r3, #7
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	db0b      	blt.n	8001606 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ee:	88fb      	ldrh	r3, [r7, #6]
 80015f0:	f003 021f 	and.w	r2, r3, #31
 80015f4:	4907      	ldr	r1, [pc, #28]	; (8001614 <__NVIC_EnableIRQ+0x38>)
 80015f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015fa:	095b      	lsrs	r3, r3, #5
 80015fc:	2001      	movs	r0, #1
 80015fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000e100 	.word	0xe000e100

08001618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	6039      	str	r1, [r7, #0]
 8001622:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001624:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001628:	2b00      	cmp	r3, #0
 800162a:	db0a      	blt.n	8001642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	b2da      	uxtb	r2, r3
 8001630:	490c      	ldr	r1, [pc, #48]	; (8001664 <__NVIC_SetPriority+0x4c>)
 8001632:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001636:	0112      	lsls	r2, r2, #4
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	440b      	add	r3, r1
 800163c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001640:	e00a      	b.n	8001658 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4908      	ldr	r1, [pc, #32]	; (8001668 <__NVIC_SetPriority+0x50>)
 8001648:	88fb      	ldrh	r3, [r7, #6]
 800164a:	f003 030f 	and.w	r3, r3, #15
 800164e:	3b04      	subs	r3, #4
 8001650:	0112      	lsls	r2, r2, #4
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	440b      	add	r3, r1
 8001656:	761a      	strb	r2, [r3, #24]
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000e100 	.word	0xe000e100
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800166c:	b480      	push	{r7}
 800166e:	b089      	sub	sp, #36	; 0x24
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	f1c3 0307 	rsb	r3, r3, #7
 8001686:	2b04      	cmp	r3, #4
 8001688:	bf28      	it	cs
 800168a:	2304      	movcs	r3, #4
 800168c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3304      	adds	r3, #4
 8001692:	2b06      	cmp	r3, #6
 8001694:	d902      	bls.n	800169c <NVIC_EncodePriority+0x30>
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3b03      	subs	r3, #3
 800169a:	e000      	b.n	800169e <NVIC_EncodePriority+0x32>
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a0:	f04f 32ff 	mov.w	r2, #4294967295
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43da      	mvns	r2, r3
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	401a      	ands	r2, r3
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b4:	f04f 31ff 	mov.w	r1, #4294967295
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	fa01 f303 	lsl.w	r3, r1, r3
 80016be:	43d9      	mvns	r1, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c4:	4313      	orrs	r3, r2
         );
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3724      	adds	r7, #36	; 0x24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
	...

080016d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3b01      	subs	r3, #1
 80016e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016e4:	d301      	bcc.n	80016ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016e6:	2301      	movs	r3, #1
 80016e8:	e00f      	b.n	800170a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ea:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <SysTick_Config+0x40>)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016f2:	210f      	movs	r1, #15
 80016f4:	f04f 30ff 	mov.w	r0, #4294967295
 80016f8:	f7ff ff8e 	bl	8001618 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016fc:	4b05      	ldr	r3, [pc, #20]	; (8001714 <SysTick_Config+0x40>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001702:	4b04      	ldr	r3, [pc, #16]	; (8001714 <SysTick_Config+0x40>)
 8001704:	2207      	movs	r2, #7
 8001706:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	e000e010 	.word	0xe000e010

08001718 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff ff29 	bl	8001578 <__NVIC_SetPriorityGrouping>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b086      	sub	sp, #24
 8001732:	af00      	add	r7, sp, #0
 8001734:	4603      	mov	r3, r0
 8001736:	60b9      	str	r1, [r7, #8]
 8001738:	607a      	str	r2, [r7, #4]
 800173a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800173c:	f7ff ff40 	bl	80015c0 <__NVIC_GetPriorityGrouping>
 8001740:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	68b9      	ldr	r1, [r7, #8]
 8001746:	6978      	ldr	r0, [r7, #20]
 8001748:	f7ff ff90 	bl	800166c <NVIC_EncodePriority>
 800174c:	4602      	mov	r2, r0
 800174e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001752:	4611      	mov	r1, r2
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff5f 	bl	8001618 <__NVIC_SetPriority>
}
 800175a:	bf00      	nop
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	4603      	mov	r3, r0
 800176a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800176c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff33 	bl	80015dc <__NVIC_EnableIRQ>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ffa4 	bl	80016d4 <SysTick_Config>
 800178c:	4603      	mov	r3, r0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80017a0:	f7ff feba 	bl	8001518 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e2dc      	b.n	8001d6a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d008      	beq.n	80017ce <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2280      	movs	r2, #128	; 0x80
 80017c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e2cd      	b.n	8001d6a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a76      	ldr	r2, [pc, #472]	; (80019ac <HAL_DMA_Abort+0x214>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d04a      	beq.n	800186e <HAL_DMA_Abort+0xd6>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a74      	ldr	r2, [pc, #464]	; (80019b0 <HAL_DMA_Abort+0x218>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d045      	beq.n	800186e <HAL_DMA_Abort+0xd6>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a73      	ldr	r2, [pc, #460]	; (80019b4 <HAL_DMA_Abort+0x21c>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d040      	beq.n	800186e <HAL_DMA_Abort+0xd6>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a71      	ldr	r2, [pc, #452]	; (80019b8 <HAL_DMA_Abort+0x220>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d03b      	beq.n	800186e <HAL_DMA_Abort+0xd6>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a70      	ldr	r2, [pc, #448]	; (80019bc <HAL_DMA_Abort+0x224>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d036      	beq.n	800186e <HAL_DMA_Abort+0xd6>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a6e      	ldr	r2, [pc, #440]	; (80019c0 <HAL_DMA_Abort+0x228>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d031      	beq.n	800186e <HAL_DMA_Abort+0xd6>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a6d      	ldr	r2, [pc, #436]	; (80019c4 <HAL_DMA_Abort+0x22c>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d02c      	beq.n	800186e <HAL_DMA_Abort+0xd6>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a6b      	ldr	r2, [pc, #428]	; (80019c8 <HAL_DMA_Abort+0x230>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d027      	beq.n	800186e <HAL_DMA_Abort+0xd6>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a6a      	ldr	r2, [pc, #424]	; (80019cc <HAL_DMA_Abort+0x234>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d022      	beq.n	800186e <HAL_DMA_Abort+0xd6>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a68      	ldr	r2, [pc, #416]	; (80019d0 <HAL_DMA_Abort+0x238>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d01d      	beq.n	800186e <HAL_DMA_Abort+0xd6>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a67      	ldr	r2, [pc, #412]	; (80019d4 <HAL_DMA_Abort+0x23c>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d018      	beq.n	800186e <HAL_DMA_Abort+0xd6>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a65      	ldr	r2, [pc, #404]	; (80019d8 <HAL_DMA_Abort+0x240>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d013      	beq.n	800186e <HAL_DMA_Abort+0xd6>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a64      	ldr	r2, [pc, #400]	; (80019dc <HAL_DMA_Abort+0x244>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d00e      	beq.n	800186e <HAL_DMA_Abort+0xd6>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a62      	ldr	r2, [pc, #392]	; (80019e0 <HAL_DMA_Abort+0x248>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d009      	beq.n	800186e <HAL_DMA_Abort+0xd6>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a61      	ldr	r2, [pc, #388]	; (80019e4 <HAL_DMA_Abort+0x24c>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d004      	beq.n	800186e <HAL_DMA_Abort+0xd6>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a5f      	ldr	r2, [pc, #380]	; (80019e8 <HAL_DMA_Abort+0x250>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d101      	bne.n	8001872 <HAL_DMA_Abort+0xda>
 800186e:	2301      	movs	r3, #1
 8001870:	e000      	b.n	8001874 <HAL_DMA_Abort+0xdc>
 8001872:	2300      	movs	r3, #0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d013      	beq.n	80018a0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 021e 	bic.w	r2, r2, #30
 8001886:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	695a      	ldr	r2, [r3, #20]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001896:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	e00a      	b.n	80018b6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 020e 	bic.w	r2, r2, #14
 80018ae:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a3c      	ldr	r2, [pc, #240]	; (80019ac <HAL_DMA_Abort+0x214>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d072      	beq.n	80019a6 <HAL_DMA_Abort+0x20e>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a3a      	ldr	r2, [pc, #232]	; (80019b0 <HAL_DMA_Abort+0x218>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d06d      	beq.n	80019a6 <HAL_DMA_Abort+0x20e>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a39      	ldr	r2, [pc, #228]	; (80019b4 <HAL_DMA_Abort+0x21c>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d068      	beq.n	80019a6 <HAL_DMA_Abort+0x20e>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a37      	ldr	r2, [pc, #220]	; (80019b8 <HAL_DMA_Abort+0x220>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d063      	beq.n	80019a6 <HAL_DMA_Abort+0x20e>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a36      	ldr	r2, [pc, #216]	; (80019bc <HAL_DMA_Abort+0x224>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d05e      	beq.n	80019a6 <HAL_DMA_Abort+0x20e>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a34      	ldr	r2, [pc, #208]	; (80019c0 <HAL_DMA_Abort+0x228>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d059      	beq.n	80019a6 <HAL_DMA_Abort+0x20e>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a33      	ldr	r2, [pc, #204]	; (80019c4 <HAL_DMA_Abort+0x22c>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d054      	beq.n	80019a6 <HAL_DMA_Abort+0x20e>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a31      	ldr	r2, [pc, #196]	; (80019c8 <HAL_DMA_Abort+0x230>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d04f      	beq.n	80019a6 <HAL_DMA_Abort+0x20e>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a30      	ldr	r2, [pc, #192]	; (80019cc <HAL_DMA_Abort+0x234>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d04a      	beq.n	80019a6 <HAL_DMA_Abort+0x20e>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a2e      	ldr	r2, [pc, #184]	; (80019d0 <HAL_DMA_Abort+0x238>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d045      	beq.n	80019a6 <HAL_DMA_Abort+0x20e>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a2d      	ldr	r2, [pc, #180]	; (80019d4 <HAL_DMA_Abort+0x23c>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d040      	beq.n	80019a6 <HAL_DMA_Abort+0x20e>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a2b      	ldr	r2, [pc, #172]	; (80019d8 <HAL_DMA_Abort+0x240>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d03b      	beq.n	80019a6 <HAL_DMA_Abort+0x20e>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a2a      	ldr	r2, [pc, #168]	; (80019dc <HAL_DMA_Abort+0x244>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d036      	beq.n	80019a6 <HAL_DMA_Abort+0x20e>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a28      	ldr	r2, [pc, #160]	; (80019e0 <HAL_DMA_Abort+0x248>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d031      	beq.n	80019a6 <HAL_DMA_Abort+0x20e>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a27      	ldr	r2, [pc, #156]	; (80019e4 <HAL_DMA_Abort+0x24c>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d02c      	beq.n	80019a6 <HAL_DMA_Abort+0x20e>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a25      	ldr	r2, [pc, #148]	; (80019e8 <HAL_DMA_Abort+0x250>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d027      	beq.n	80019a6 <HAL_DMA_Abort+0x20e>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a24      	ldr	r2, [pc, #144]	; (80019ec <HAL_DMA_Abort+0x254>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d022      	beq.n	80019a6 <HAL_DMA_Abort+0x20e>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a22      	ldr	r2, [pc, #136]	; (80019f0 <HAL_DMA_Abort+0x258>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d01d      	beq.n	80019a6 <HAL_DMA_Abort+0x20e>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a21      	ldr	r2, [pc, #132]	; (80019f4 <HAL_DMA_Abort+0x25c>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d018      	beq.n	80019a6 <HAL_DMA_Abort+0x20e>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a1f      	ldr	r2, [pc, #124]	; (80019f8 <HAL_DMA_Abort+0x260>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d013      	beq.n	80019a6 <HAL_DMA_Abort+0x20e>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a1e      	ldr	r2, [pc, #120]	; (80019fc <HAL_DMA_Abort+0x264>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d00e      	beq.n	80019a6 <HAL_DMA_Abort+0x20e>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a1c      	ldr	r2, [pc, #112]	; (8001a00 <HAL_DMA_Abort+0x268>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d009      	beq.n	80019a6 <HAL_DMA_Abort+0x20e>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a1b      	ldr	r2, [pc, #108]	; (8001a04 <HAL_DMA_Abort+0x26c>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d004      	beq.n	80019a6 <HAL_DMA_Abort+0x20e>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a19      	ldr	r2, [pc, #100]	; (8001a08 <HAL_DMA_Abort+0x270>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d132      	bne.n	8001a0c <HAL_DMA_Abort+0x274>
 80019a6:	2301      	movs	r3, #1
 80019a8:	e031      	b.n	8001a0e <HAL_DMA_Abort+0x276>
 80019aa:	bf00      	nop
 80019ac:	40020010 	.word	0x40020010
 80019b0:	40020028 	.word	0x40020028
 80019b4:	40020040 	.word	0x40020040
 80019b8:	40020058 	.word	0x40020058
 80019bc:	40020070 	.word	0x40020070
 80019c0:	40020088 	.word	0x40020088
 80019c4:	400200a0 	.word	0x400200a0
 80019c8:	400200b8 	.word	0x400200b8
 80019cc:	40020410 	.word	0x40020410
 80019d0:	40020428 	.word	0x40020428
 80019d4:	40020440 	.word	0x40020440
 80019d8:	40020458 	.word	0x40020458
 80019dc:	40020470 	.word	0x40020470
 80019e0:	40020488 	.word	0x40020488
 80019e4:	400204a0 	.word	0x400204a0
 80019e8:	400204b8 	.word	0x400204b8
 80019ec:	58025408 	.word	0x58025408
 80019f0:	5802541c 	.word	0x5802541c
 80019f4:	58025430 	.word	0x58025430
 80019f8:	58025444 	.word	0x58025444
 80019fc:	58025458 	.word	0x58025458
 8001a00:	5802546c 	.word	0x5802546c
 8001a04:	58025480 	.word	0x58025480
 8001a08:	58025494 	.word	0x58025494
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d007      	beq.n	8001a22 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a20:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a6d      	ldr	r2, [pc, #436]	; (8001bdc <HAL_DMA_Abort+0x444>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d04a      	beq.n	8001ac2 <HAL_DMA_Abort+0x32a>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a6b      	ldr	r2, [pc, #428]	; (8001be0 <HAL_DMA_Abort+0x448>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d045      	beq.n	8001ac2 <HAL_DMA_Abort+0x32a>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a6a      	ldr	r2, [pc, #424]	; (8001be4 <HAL_DMA_Abort+0x44c>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d040      	beq.n	8001ac2 <HAL_DMA_Abort+0x32a>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a68      	ldr	r2, [pc, #416]	; (8001be8 <HAL_DMA_Abort+0x450>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d03b      	beq.n	8001ac2 <HAL_DMA_Abort+0x32a>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a67      	ldr	r2, [pc, #412]	; (8001bec <HAL_DMA_Abort+0x454>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d036      	beq.n	8001ac2 <HAL_DMA_Abort+0x32a>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a65      	ldr	r2, [pc, #404]	; (8001bf0 <HAL_DMA_Abort+0x458>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d031      	beq.n	8001ac2 <HAL_DMA_Abort+0x32a>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a64      	ldr	r2, [pc, #400]	; (8001bf4 <HAL_DMA_Abort+0x45c>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d02c      	beq.n	8001ac2 <HAL_DMA_Abort+0x32a>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a62      	ldr	r2, [pc, #392]	; (8001bf8 <HAL_DMA_Abort+0x460>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d027      	beq.n	8001ac2 <HAL_DMA_Abort+0x32a>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a61      	ldr	r2, [pc, #388]	; (8001bfc <HAL_DMA_Abort+0x464>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d022      	beq.n	8001ac2 <HAL_DMA_Abort+0x32a>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a5f      	ldr	r2, [pc, #380]	; (8001c00 <HAL_DMA_Abort+0x468>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d01d      	beq.n	8001ac2 <HAL_DMA_Abort+0x32a>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a5e      	ldr	r2, [pc, #376]	; (8001c04 <HAL_DMA_Abort+0x46c>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d018      	beq.n	8001ac2 <HAL_DMA_Abort+0x32a>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a5c      	ldr	r2, [pc, #368]	; (8001c08 <HAL_DMA_Abort+0x470>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d013      	beq.n	8001ac2 <HAL_DMA_Abort+0x32a>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a5b      	ldr	r2, [pc, #364]	; (8001c0c <HAL_DMA_Abort+0x474>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d00e      	beq.n	8001ac2 <HAL_DMA_Abort+0x32a>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a59      	ldr	r2, [pc, #356]	; (8001c10 <HAL_DMA_Abort+0x478>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d009      	beq.n	8001ac2 <HAL_DMA_Abort+0x32a>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a58      	ldr	r2, [pc, #352]	; (8001c14 <HAL_DMA_Abort+0x47c>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d004      	beq.n	8001ac2 <HAL_DMA_Abort+0x32a>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a56      	ldr	r2, [pc, #344]	; (8001c18 <HAL_DMA_Abort+0x480>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d108      	bne.n	8001ad4 <HAL_DMA_Abort+0x33c>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 0201 	bic.w	r2, r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	e007      	b.n	8001ae4 <HAL_DMA_Abort+0x34c>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 0201 	bic.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001ae4:	e013      	b.n	8001b0e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ae6:	f7ff fd17 	bl	8001518 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b05      	cmp	r3, #5
 8001af2:	d90c      	bls.n	8001b0e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2220      	movs	r2, #32
 8001af8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2203      	movs	r2, #3
 8001afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e12d      	b.n	8001d6a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1e5      	bne.n	8001ae6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a2f      	ldr	r2, [pc, #188]	; (8001bdc <HAL_DMA_Abort+0x444>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d04a      	beq.n	8001bba <HAL_DMA_Abort+0x422>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a2d      	ldr	r2, [pc, #180]	; (8001be0 <HAL_DMA_Abort+0x448>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d045      	beq.n	8001bba <HAL_DMA_Abort+0x422>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a2c      	ldr	r2, [pc, #176]	; (8001be4 <HAL_DMA_Abort+0x44c>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d040      	beq.n	8001bba <HAL_DMA_Abort+0x422>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a2a      	ldr	r2, [pc, #168]	; (8001be8 <HAL_DMA_Abort+0x450>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d03b      	beq.n	8001bba <HAL_DMA_Abort+0x422>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a29      	ldr	r2, [pc, #164]	; (8001bec <HAL_DMA_Abort+0x454>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d036      	beq.n	8001bba <HAL_DMA_Abort+0x422>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a27      	ldr	r2, [pc, #156]	; (8001bf0 <HAL_DMA_Abort+0x458>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d031      	beq.n	8001bba <HAL_DMA_Abort+0x422>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a26      	ldr	r2, [pc, #152]	; (8001bf4 <HAL_DMA_Abort+0x45c>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d02c      	beq.n	8001bba <HAL_DMA_Abort+0x422>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a24      	ldr	r2, [pc, #144]	; (8001bf8 <HAL_DMA_Abort+0x460>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d027      	beq.n	8001bba <HAL_DMA_Abort+0x422>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a23      	ldr	r2, [pc, #140]	; (8001bfc <HAL_DMA_Abort+0x464>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d022      	beq.n	8001bba <HAL_DMA_Abort+0x422>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a21      	ldr	r2, [pc, #132]	; (8001c00 <HAL_DMA_Abort+0x468>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d01d      	beq.n	8001bba <HAL_DMA_Abort+0x422>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a20      	ldr	r2, [pc, #128]	; (8001c04 <HAL_DMA_Abort+0x46c>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d018      	beq.n	8001bba <HAL_DMA_Abort+0x422>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a1e      	ldr	r2, [pc, #120]	; (8001c08 <HAL_DMA_Abort+0x470>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d013      	beq.n	8001bba <HAL_DMA_Abort+0x422>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a1d      	ldr	r2, [pc, #116]	; (8001c0c <HAL_DMA_Abort+0x474>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d00e      	beq.n	8001bba <HAL_DMA_Abort+0x422>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a1b      	ldr	r2, [pc, #108]	; (8001c10 <HAL_DMA_Abort+0x478>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d009      	beq.n	8001bba <HAL_DMA_Abort+0x422>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a1a      	ldr	r2, [pc, #104]	; (8001c14 <HAL_DMA_Abort+0x47c>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d004      	beq.n	8001bba <HAL_DMA_Abort+0x422>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a18      	ldr	r2, [pc, #96]	; (8001c18 <HAL_DMA_Abort+0x480>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d101      	bne.n	8001bbe <HAL_DMA_Abort+0x426>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <HAL_DMA_Abort+0x428>
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d02b      	beq.n	8001c1c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bce:	f003 031f 	and.w	r3, r3, #31
 8001bd2:	223f      	movs	r2, #63	; 0x3f
 8001bd4:	409a      	lsls	r2, r3
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	609a      	str	r2, [r3, #8]
 8001bda:	e02a      	b.n	8001c32 <HAL_DMA_Abort+0x49a>
 8001bdc:	40020010 	.word	0x40020010
 8001be0:	40020028 	.word	0x40020028
 8001be4:	40020040 	.word	0x40020040
 8001be8:	40020058 	.word	0x40020058
 8001bec:	40020070 	.word	0x40020070
 8001bf0:	40020088 	.word	0x40020088
 8001bf4:	400200a0 	.word	0x400200a0
 8001bf8:	400200b8 	.word	0x400200b8
 8001bfc:	40020410 	.word	0x40020410
 8001c00:	40020428 	.word	0x40020428
 8001c04:	40020440 	.word	0x40020440
 8001c08:	40020458 	.word	0x40020458
 8001c0c:	40020470 	.word	0x40020470
 8001c10:	40020488 	.word	0x40020488
 8001c14:	400204a0 	.word	0x400204a0
 8001c18:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c20:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c26:	f003 031f 	and.w	r3, r3, #31
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	409a      	lsls	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a4f      	ldr	r2, [pc, #316]	; (8001d74 <HAL_DMA_Abort+0x5dc>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d072      	beq.n	8001d22 <HAL_DMA_Abort+0x58a>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a4d      	ldr	r2, [pc, #308]	; (8001d78 <HAL_DMA_Abort+0x5e0>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d06d      	beq.n	8001d22 <HAL_DMA_Abort+0x58a>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a4c      	ldr	r2, [pc, #304]	; (8001d7c <HAL_DMA_Abort+0x5e4>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d068      	beq.n	8001d22 <HAL_DMA_Abort+0x58a>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a4a      	ldr	r2, [pc, #296]	; (8001d80 <HAL_DMA_Abort+0x5e8>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d063      	beq.n	8001d22 <HAL_DMA_Abort+0x58a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a49      	ldr	r2, [pc, #292]	; (8001d84 <HAL_DMA_Abort+0x5ec>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d05e      	beq.n	8001d22 <HAL_DMA_Abort+0x58a>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a47      	ldr	r2, [pc, #284]	; (8001d88 <HAL_DMA_Abort+0x5f0>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d059      	beq.n	8001d22 <HAL_DMA_Abort+0x58a>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a46      	ldr	r2, [pc, #280]	; (8001d8c <HAL_DMA_Abort+0x5f4>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d054      	beq.n	8001d22 <HAL_DMA_Abort+0x58a>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a44      	ldr	r2, [pc, #272]	; (8001d90 <HAL_DMA_Abort+0x5f8>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d04f      	beq.n	8001d22 <HAL_DMA_Abort+0x58a>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a43      	ldr	r2, [pc, #268]	; (8001d94 <HAL_DMA_Abort+0x5fc>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d04a      	beq.n	8001d22 <HAL_DMA_Abort+0x58a>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a41      	ldr	r2, [pc, #260]	; (8001d98 <HAL_DMA_Abort+0x600>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d045      	beq.n	8001d22 <HAL_DMA_Abort+0x58a>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a40      	ldr	r2, [pc, #256]	; (8001d9c <HAL_DMA_Abort+0x604>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d040      	beq.n	8001d22 <HAL_DMA_Abort+0x58a>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a3e      	ldr	r2, [pc, #248]	; (8001da0 <HAL_DMA_Abort+0x608>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d03b      	beq.n	8001d22 <HAL_DMA_Abort+0x58a>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a3d      	ldr	r2, [pc, #244]	; (8001da4 <HAL_DMA_Abort+0x60c>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d036      	beq.n	8001d22 <HAL_DMA_Abort+0x58a>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a3b      	ldr	r2, [pc, #236]	; (8001da8 <HAL_DMA_Abort+0x610>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d031      	beq.n	8001d22 <HAL_DMA_Abort+0x58a>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a3a      	ldr	r2, [pc, #232]	; (8001dac <HAL_DMA_Abort+0x614>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d02c      	beq.n	8001d22 <HAL_DMA_Abort+0x58a>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a38      	ldr	r2, [pc, #224]	; (8001db0 <HAL_DMA_Abort+0x618>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d027      	beq.n	8001d22 <HAL_DMA_Abort+0x58a>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a37      	ldr	r2, [pc, #220]	; (8001db4 <HAL_DMA_Abort+0x61c>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d022      	beq.n	8001d22 <HAL_DMA_Abort+0x58a>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a35      	ldr	r2, [pc, #212]	; (8001db8 <HAL_DMA_Abort+0x620>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d01d      	beq.n	8001d22 <HAL_DMA_Abort+0x58a>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a34      	ldr	r2, [pc, #208]	; (8001dbc <HAL_DMA_Abort+0x624>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d018      	beq.n	8001d22 <HAL_DMA_Abort+0x58a>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a32      	ldr	r2, [pc, #200]	; (8001dc0 <HAL_DMA_Abort+0x628>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d013      	beq.n	8001d22 <HAL_DMA_Abort+0x58a>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a31      	ldr	r2, [pc, #196]	; (8001dc4 <HAL_DMA_Abort+0x62c>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d00e      	beq.n	8001d22 <HAL_DMA_Abort+0x58a>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a2f      	ldr	r2, [pc, #188]	; (8001dc8 <HAL_DMA_Abort+0x630>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d009      	beq.n	8001d22 <HAL_DMA_Abort+0x58a>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a2e      	ldr	r2, [pc, #184]	; (8001dcc <HAL_DMA_Abort+0x634>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d004      	beq.n	8001d22 <HAL_DMA_Abort+0x58a>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a2c      	ldr	r2, [pc, #176]	; (8001dd0 <HAL_DMA_Abort+0x638>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d101      	bne.n	8001d26 <HAL_DMA_Abort+0x58e>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <HAL_DMA_Abort+0x590>
 8001d26:	2300      	movs	r3, #0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d015      	beq.n	8001d58 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001d34:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00c      	beq.n	8001d58 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d4c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001d56:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40020010 	.word	0x40020010
 8001d78:	40020028 	.word	0x40020028
 8001d7c:	40020040 	.word	0x40020040
 8001d80:	40020058 	.word	0x40020058
 8001d84:	40020070 	.word	0x40020070
 8001d88:	40020088 	.word	0x40020088
 8001d8c:	400200a0 	.word	0x400200a0
 8001d90:	400200b8 	.word	0x400200b8
 8001d94:	40020410 	.word	0x40020410
 8001d98:	40020428 	.word	0x40020428
 8001d9c:	40020440 	.word	0x40020440
 8001da0:	40020458 	.word	0x40020458
 8001da4:	40020470 	.word	0x40020470
 8001da8:	40020488 	.word	0x40020488
 8001dac:	400204a0 	.word	0x400204a0
 8001db0:	400204b8 	.word	0x400204b8
 8001db4:	58025408 	.word	0x58025408
 8001db8:	5802541c 	.word	0x5802541c
 8001dbc:	58025430 	.word	0x58025430
 8001dc0:	58025444 	.word	0x58025444
 8001dc4:	58025458 	.word	0x58025458
 8001dc8:	5802546c 	.word	0x5802546c
 8001dcc:	58025480 	.word	0x58025480
 8001dd0:	58025494 	.word	0x58025494

08001dd4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e237      	b.n	8002256 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d004      	beq.n	8001dfc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2280      	movs	r2, #128	; 0x80
 8001df6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e22c      	b.n	8002256 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a5c      	ldr	r2, [pc, #368]	; (8001f74 <HAL_DMA_Abort_IT+0x1a0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d04a      	beq.n	8001e9c <HAL_DMA_Abort_IT+0xc8>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a5b      	ldr	r2, [pc, #364]	; (8001f78 <HAL_DMA_Abort_IT+0x1a4>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d045      	beq.n	8001e9c <HAL_DMA_Abort_IT+0xc8>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a59      	ldr	r2, [pc, #356]	; (8001f7c <HAL_DMA_Abort_IT+0x1a8>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d040      	beq.n	8001e9c <HAL_DMA_Abort_IT+0xc8>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a58      	ldr	r2, [pc, #352]	; (8001f80 <HAL_DMA_Abort_IT+0x1ac>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d03b      	beq.n	8001e9c <HAL_DMA_Abort_IT+0xc8>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a56      	ldr	r2, [pc, #344]	; (8001f84 <HAL_DMA_Abort_IT+0x1b0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d036      	beq.n	8001e9c <HAL_DMA_Abort_IT+0xc8>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a55      	ldr	r2, [pc, #340]	; (8001f88 <HAL_DMA_Abort_IT+0x1b4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d031      	beq.n	8001e9c <HAL_DMA_Abort_IT+0xc8>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a53      	ldr	r2, [pc, #332]	; (8001f8c <HAL_DMA_Abort_IT+0x1b8>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d02c      	beq.n	8001e9c <HAL_DMA_Abort_IT+0xc8>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a52      	ldr	r2, [pc, #328]	; (8001f90 <HAL_DMA_Abort_IT+0x1bc>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d027      	beq.n	8001e9c <HAL_DMA_Abort_IT+0xc8>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a50      	ldr	r2, [pc, #320]	; (8001f94 <HAL_DMA_Abort_IT+0x1c0>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d022      	beq.n	8001e9c <HAL_DMA_Abort_IT+0xc8>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a4f      	ldr	r2, [pc, #316]	; (8001f98 <HAL_DMA_Abort_IT+0x1c4>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d01d      	beq.n	8001e9c <HAL_DMA_Abort_IT+0xc8>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a4d      	ldr	r2, [pc, #308]	; (8001f9c <HAL_DMA_Abort_IT+0x1c8>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d018      	beq.n	8001e9c <HAL_DMA_Abort_IT+0xc8>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a4c      	ldr	r2, [pc, #304]	; (8001fa0 <HAL_DMA_Abort_IT+0x1cc>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d013      	beq.n	8001e9c <HAL_DMA_Abort_IT+0xc8>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a4a      	ldr	r2, [pc, #296]	; (8001fa4 <HAL_DMA_Abort_IT+0x1d0>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d00e      	beq.n	8001e9c <HAL_DMA_Abort_IT+0xc8>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a49      	ldr	r2, [pc, #292]	; (8001fa8 <HAL_DMA_Abort_IT+0x1d4>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d009      	beq.n	8001e9c <HAL_DMA_Abort_IT+0xc8>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a47      	ldr	r2, [pc, #284]	; (8001fac <HAL_DMA_Abort_IT+0x1d8>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d004      	beq.n	8001e9c <HAL_DMA_Abort_IT+0xc8>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a46      	ldr	r2, [pc, #280]	; (8001fb0 <HAL_DMA_Abort_IT+0x1dc>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d101      	bne.n	8001ea0 <HAL_DMA_Abort_IT+0xcc>
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e000      	b.n	8001ea2 <HAL_DMA_Abort_IT+0xce>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 8086 	beq.w	8001fb4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2204      	movs	r2, #4
 8001eac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a2f      	ldr	r2, [pc, #188]	; (8001f74 <HAL_DMA_Abort_IT+0x1a0>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d04a      	beq.n	8001f50 <HAL_DMA_Abort_IT+0x17c>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a2e      	ldr	r2, [pc, #184]	; (8001f78 <HAL_DMA_Abort_IT+0x1a4>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d045      	beq.n	8001f50 <HAL_DMA_Abort_IT+0x17c>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a2c      	ldr	r2, [pc, #176]	; (8001f7c <HAL_DMA_Abort_IT+0x1a8>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d040      	beq.n	8001f50 <HAL_DMA_Abort_IT+0x17c>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a2b      	ldr	r2, [pc, #172]	; (8001f80 <HAL_DMA_Abort_IT+0x1ac>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d03b      	beq.n	8001f50 <HAL_DMA_Abort_IT+0x17c>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a29      	ldr	r2, [pc, #164]	; (8001f84 <HAL_DMA_Abort_IT+0x1b0>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d036      	beq.n	8001f50 <HAL_DMA_Abort_IT+0x17c>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a28      	ldr	r2, [pc, #160]	; (8001f88 <HAL_DMA_Abort_IT+0x1b4>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d031      	beq.n	8001f50 <HAL_DMA_Abort_IT+0x17c>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a26      	ldr	r2, [pc, #152]	; (8001f8c <HAL_DMA_Abort_IT+0x1b8>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d02c      	beq.n	8001f50 <HAL_DMA_Abort_IT+0x17c>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a25      	ldr	r2, [pc, #148]	; (8001f90 <HAL_DMA_Abort_IT+0x1bc>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d027      	beq.n	8001f50 <HAL_DMA_Abort_IT+0x17c>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a23      	ldr	r2, [pc, #140]	; (8001f94 <HAL_DMA_Abort_IT+0x1c0>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d022      	beq.n	8001f50 <HAL_DMA_Abort_IT+0x17c>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a22      	ldr	r2, [pc, #136]	; (8001f98 <HAL_DMA_Abort_IT+0x1c4>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d01d      	beq.n	8001f50 <HAL_DMA_Abort_IT+0x17c>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a20      	ldr	r2, [pc, #128]	; (8001f9c <HAL_DMA_Abort_IT+0x1c8>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d018      	beq.n	8001f50 <HAL_DMA_Abort_IT+0x17c>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a1f      	ldr	r2, [pc, #124]	; (8001fa0 <HAL_DMA_Abort_IT+0x1cc>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d013      	beq.n	8001f50 <HAL_DMA_Abort_IT+0x17c>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a1d      	ldr	r2, [pc, #116]	; (8001fa4 <HAL_DMA_Abort_IT+0x1d0>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d00e      	beq.n	8001f50 <HAL_DMA_Abort_IT+0x17c>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a1c      	ldr	r2, [pc, #112]	; (8001fa8 <HAL_DMA_Abort_IT+0x1d4>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d009      	beq.n	8001f50 <HAL_DMA_Abort_IT+0x17c>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a1a      	ldr	r2, [pc, #104]	; (8001fac <HAL_DMA_Abort_IT+0x1d8>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d004      	beq.n	8001f50 <HAL_DMA_Abort_IT+0x17c>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a19      	ldr	r2, [pc, #100]	; (8001fb0 <HAL_DMA_Abort_IT+0x1dc>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d108      	bne.n	8001f62 <HAL_DMA_Abort_IT+0x18e>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 0201 	bic.w	r2, r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	e178      	b.n	8002254 <HAL_DMA_Abort_IT+0x480>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 0201 	bic.w	r2, r2, #1
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	e16f      	b.n	8002254 <HAL_DMA_Abort_IT+0x480>
 8001f74:	40020010 	.word	0x40020010
 8001f78:	40020028 	.word	0x40020028
 8001f7c:	40020040 	.word	0x40020040
 8001f80:	40020058 	.word	0x40020058
 8001f84:	40020070 	.word	0x40020070
 8001f88:	40020088 	.word	0x40020088
 8001f8c:	400200a0 	.word	0x400200a0
 8001f90:	400200b8 	.word	0x400200b8
 8001f94:	40020410 	.word	0x40020410
 8001f98:	40020428 	.word	0x40020428
 8001f9c:	40020440 	.word	0x40020440
 8001fa0:	40020458 	.word	0x40020458
 8001fa4:	40020470 	.word	0x40020470
 8001fa8:	40020488 	.word	0x40020488
 8001fac:	400204a0 	.word	0x400204a0
 8001fb0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 020e 	bic.w	r2, r2, #14
 8001fc2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a6c      	ldr	r2, [pc, #432]	; (800217c <HAL_DMA_Abort_IT+0x3a8>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d04a      	beq.n	8002064 <HAL_DMA_Abort_IT+0x290>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a6b      	ldr	r2, [pc, #428]	; (8002180 <HAL_DMA_Abort_IT+0x3ac>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d045      	beq.n	8002064 <HAL_DMA_Abort_IT+0x290>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a69      	ldr	r2, [pc, #420]	; (8002184 <HAL_DMA_Abort_IT+0x3b0>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d040      	beq.n	8002064 <HAL_DMA_Abort_IT+0x290>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a68      	ldr	r2, [pc, #416]	; (8002188 <HAL_DMA_Abort_IT+0x3b4>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d03b      	beq.n	8002064 <HAL_DMA_Abort_IT+0x290>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a66      	ldr	r2, [pc, #408]	; (800218c <HAL_DMA_Abort_IT+0x3b8>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d036      	beq.n	8002064 <HAL_DMA_Abort_IT+0x290>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a65      	ldr	r2, [pc, #404]	; (8002190 <HAL_DMA_Abort_IT+0x3bc>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d031      	beq.n	8002064 <HAL_DMA_Abort_IT+0x290>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a63      	ldr	r2, [pc, #396]	; (8002194 <HAL_DMA_Abort_IT+0x3c0>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d02c      	beq.n	8002064 <HAL_DMA_Abort_IT+0x290>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a62      	ldr	r2, [pc, #392]	; (8002198 <HAL_DMA_Abort_IT+0x3c4>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d027      	beq.n	8002064 <HAL_DMA_Abort_IT+0x290>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a60      	ldr	r2, [pc, #384]	; (800219c <HAL_DMA_Abort_IT+0x3c8>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d022      	beq.n	8002064 <HAL_DMA_Abort_IT+0x290>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a5f      	ldr	r2, [pc, #380]	; (80021a0 <HAL_DMA_Abort_IT+0x3cc>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d01d      	beq.n	8002064 <HAL_DMA_Abort_IT+0x290>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a5d      	ldr	r2, [pc, #372]	; (80021a4 <HAL_DMA_Abort_IT+0x3d0>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d018      	beq.n	8002064 <HAL_DMA_Abort_IT+0x290>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a5c      	ldr	r2, [pc, #368]	; (80021a8 <HAL_DMA_Abort_IT+0x3d4>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d013      	beq.n	8002064 <HAL_DMA_Abort_IT+0x290>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a5a      	ldr	r2, [pc, #360]	; (80021ac <HAL_DMA_Abort_IT+0x3d8>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d00e      	beq.n	8002064 <HAL_DMA_Abort_IT+0x290>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a59      	ldr	r2, [pc, #356]	; (80021b0 <HAL_DMA_Abort_IT+0x3dc>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d009      	beq.n	8002064 <HAL_DMA_Abort_IT+0x290>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a57      	ldr	r2, [pc, #348]	; (80021b4 <HAL_DMA_Abort_IT+0x3e0>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d004      	beq.n	8002064 <HAL_DMA_Abort_IT+0x290>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a56      	ldr	r2, [pc, #344]	; (80021b8 <HAL_DMA_Abort_IT+0x3e4>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d108      	bne.n	8002076 <HAL_DMA_Abort_IT+0x2a2>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0201 	bic.w	r2, r2, #1
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	e007      	b.n	8002086 <HAL_DMA_Abort_IT+0x2b2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 0201 	bic.w	r2, r2, #1
 8002084:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a3c      	ldr	r2, [pc, #240]	; (800217c <HAL_DMA_Abort_IT+0x3a8>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d072      	beq.n	8002176 <HAL_DMA_Abort_IT+0x3a2>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a3a      	ldr	r2, [pc, #232]	; (8002180 <HAL_DMA_Abort_IT+0x3ac>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d06d      	beq.n	8002176 <HAL_DMA_Abort_IT+0x3a2>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a39      	ldr	r2, [pc, #228]	; (8002184 <HAL_DMA_Abort_IT+0x3b0>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d068      	beq.n	8002176 <HAL_DMA_Abort_IT+0x3a2>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a37      	ldr	r2, [pc, #220]	; (8002188 <HAL_DMA_Abort_IT+0x3b4>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d063      	beq.n	8002176 <HAL_DMA_Abort_IT+0x3a2>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a36      	ldr	r2, [pc, #216]	; (800218c <HAL_DMA_Abort_IT+0x3b8>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d05e      	beq.n	8002176 <HAL_DMA_Abort_IT+0x3a2>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a34      	ldr	r2, [pc, #208]	; (8002190 <HAL_DMA_Abort_IT+0x3bc>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d059      	beq.n	8002176 <HAL_DMA_Abort_IT+0x3a2>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a33      	ldr	r2, [pc, #204]	; (8002194 <HAL_DMA_Abort_IT+0x3c0>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d054      	beq.n	8002176 <HAL_DMA_Abort_IT+0x3a2>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a31      	ldr	r2, [pc, #196]	; (8002198 <HAL_DMA_Abort_IT+0x3c4>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d04f      	beq.n	8002176 <HAL_DMA_Abort_IT+0x3a2>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a30      	ldr	r2, [pc, #192]	; (800219c <HAL_DMA_Abort_IT+0x3c8>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d04a      	beq.n	8002176 <HAL_DMA_Abort_IT+0x3a2>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a2e      	ldr	r2, [pc, #184]	; (80021a0 <HAL_DMA_Abort_IT+0x3cc>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d045      	beq.n	8002176 <HAL_DMA_Abort_IT+0x3a2>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a2d      	ldr	r2, [pc, #180]	; (80021a4 <HAL_DMA_Abort_IT+0x3d0>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d040      	beq.n	8002176 <HAL_DMA_Abort_IT+0x3a2>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a2b      	ldr	r2, [pc, #172]	; (80021a8 <HAL_DMA_Abort_IT+0x3d4>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d03b      	beq.n	8002176 <HAL_DMA_Abort_IT+0x3a2>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a2a      	ldr	r2, [pc, #168]	; (80021ac <HAL_DMA_Abort_IT+0x3d8>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d036      	beq.n	8002176 <HAL_DMA_Abort_IT+0x3a2>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a28      	ldr	r2, [pc, #160]	; (80021b0 <HAL_DMA_Abort_IT+0x3dc>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d031      	beq.n	8002176 <HAL_DMA_Abort_IT+0x3a2>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a27      	ldr	r2, [pc, #156]	; (80021b4 <HAL_DMA_Abort_IT+0x3e0>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d02c      	beq.n	8002176 <HAL_DMA_Abort_IT+0x3a2>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a25      	ldr	r2, [pc, #148]	; (80021b8 <HAL_DMA_Abort_IT+0x3e4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d027      	beq.n	8002176 <HAL_DMA_Abort_IT+0x3a2>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a24      	ldr	r2, [pc, #144]	; (80021bc <HAL_DMA_Abort_IT+0x3e8>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d022      	beq.n	8002176 <HAL_DMA_Abort_IT+0x3a2>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a22      	ldr	r2, [pc, #136]	; (80021c0 <HAL_DMA_Abort_IT+0x3ec>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d01d      	beq.n	8002176 <HAL_DMA_Abort_IT+0x3a2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a21      	ldr	r2, [pc, #132]	; (80021c4 <HAL_DMA_Abort_IT+0x3f0>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d018      	beq.n	8002176 <HAL_DMA_Abort_IT+0x3a2>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a1f      	ldr	r2, [pc, #124]	; (80021c8 <HAL_DMA_Abort_IT+0x3f4>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d013      	beq.n	8002176 <HAL_DMA_Abort_IT+0x3a2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a1e      	ldr	r2, [pc, #120]	; (80021cc <HAL_DMA_Abort_IT+0x3f8>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d00e      	beq.n	8002176 <HAL_DMA_Abort_IT+0x3a2>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a1c      	ldr	r2, [pc, #112]	; (80021d0 <HAL_DMA_Abort_IT+0x3fc>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d009      	beq.n	8002176 <HAL_DMA_Abort_IT+0x3a2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a1b      	ldr	r2, [pc, #108]	; (80021d4 <HAL_DMA_Abort_IT+0x400>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d004      	beq.n	8002176 <HAL_DMA_Abort_IT+0x3a2>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a19      	ldr	r2, [pc, #100]	; (80021d8 <HAL_DMA_Abort_IT+0x404>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d132      	bne.n	80021dc <HAL_DMA_Abort_IT+0x408>
 8002176:	2301      	movs	r3, #1
 8002178:	e031      	b.n	80021de <HAL_DMA_Abort_IT+0x40a>
 800217a:	bf00      	nop
 800217c:	40020010 	.word	0x40020010
 8002180:	40020028 	.word	0x40020028
 8002184:	40020040 	.word	0x40020040
 8002188:	40020058 	.word	0x40020058
 800218c:	40020070 	.word	0x40020070
 8002190:	40020088 	.word	0x40020088
 8002194:	400200a0 	.word	0x400200a0
 8002198:	400200b8 	.word	0x400200b8
 800219c:	40020410 	.word	0x40020410
 80021a0:	40020428 	.word	0x40020428
 80021a4:	40020440 	.word	0x40020440
 80021a8:	40020458 	.word	0x40020458
 80021ac:	40020470 	.word	0x40020470
 80021b0:	40020488 	.word	0x40020488
 80021b4:	400204a0 	.word	0x400204a0
 80021b8:	400204b8 	.word	0x400204b8
 80021bc:	58025408 	.word	0x58025408
 80021c0:	5802541c 	.word	0x5802541c
 80021c4:	58025430 	.word	0x58025430
 80021c8:	58025444 	.word	0x58025444
 80021cc:	58025458 	.word	0x58025458
 80021d0:	5802546c 	.word	0x5802546c
 80021d4:	58025480 	.word	0x58025480
 80021d8:	58025494 	.word	0x58025494
 80021dc:	2300      	movs	r3, #0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d028      	beq.n	8002234 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021f0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fc:	f003 031f 	and.w	r3, r3, #31
 8002200:	2201      	movs	r2, #1
 8002202:	409a      	lsls	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002210:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00c      	beq.n	8002234 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002224:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002228:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002232:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002248:	2b00      	cmp	r3, #0
 800224a:	d003      	beq.n	8002254 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop

08002260 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002260:	b480      	push	{r7}
 8002262:	b089      	sub	sp, #36	; 0x24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800226a:	2300      	movs	r3, #0
 800226c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800226e:	4b89      	ldr	r3, [pc, #548]	; (8002494 <HAL_GPIO_Init+0x234>)
 8002270:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002272:	e194      	b.n	800259e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	2101      	movs	r1, #1
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	fa01 f303 	lsl.w	r3, r1, r3
 8002280:	4013      	ands	r3, r2
 8002282:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	2b00      	cmp	r3, #0
 8002288:	f000 8186 	beq.w	8002598 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	2b01      	cmp	r3, #1
 8002296:	d005      	beq.n	80022a4 <HAL_GPIO_Init+0x44>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 0303 	and.w	r3, r3, #3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d130      	bne.n	8002306 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	2203      	movs	r2, #3
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	68da      	ldr	r2, [r3, #12]
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022da:	2201      	movs	r2, #1
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43db      	mvns	r3, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4013      	ands	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	091b      	lsrs	r3, r3, #4
 80022f0:	f003 0201 	and.w	r2, r3, #1
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	2b03      	cmp	r3, #3
 8002310:	d017      	beq.n	8002342 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	2203      	movs	r2, #3
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d123      	bne.n	8002396 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	08da      	lsrs	r2, r3, #3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	3208      	adds	r2, #8
 8002356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800235a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	220f      	movs	r2, #15
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43db      	mvns	r3, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	691a      	ldr	r2, [r3, #16]
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4313      	orrs	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	08da      	lsrs	r2, r3, #3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3208      	adds	r2, #8
 8002390:	69b9      	ldr	r1, [r7, #24]
 8002392:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	2203      	movs	r2, #3
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4013      	ands	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f003 0203 	and.w	r2, r3, #3
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 80e0 	beq.w	8002598 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023d8:	4b2f      	ldr	r3, [pc, #188]	; (8002498 <HAL_GPIO_Init+0x238>)
 80023da:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80023de:	4a2e      	ldr	r2, [pc, #184]	; (8002498 <HAL_GPIO_Init+0x238>)
 80023e0:	f043 0302 	orr.w	r3, r3, #2
 80023e4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80023e8:	4b2b      	ldr	r3, [pc, #172]	; (8002498 <HAL_GPIO_Init+0x238>)
 80023ea:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023f6:	4a29      	ldr	r2, [pc, #164]	; (800249c <HAL_GPIO_Init+0x23c>)
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	089b      	lsrs	r3, r3, #2
 80023fc:	3302      	adds	r3, #2
 80023fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	220f      	movs	r2, #15
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43db      	mvns	r3, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4013      	ands	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a20      	ldr	r2, [pc, #128]	; (80024a0 <HAL_GPIO_Init+0x240>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d052      	beq.n	80024c8 <HAL_GPIO_Init+0x268>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a1f      	ldr	r2, [pc, #124]	; (80024a4 <HAL_GPIO_Init+0x244>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d031      	beq.n	800248e <HAL_GPIO_Init+0x22e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a1e      	ldr	r2, [pc, #120]	; (80024a8 <HAL_GPIO_Init+0x248>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d02b      	beq.n	800248a <HAL_GPIO_Init+0x22a>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a1d      	ldr	r2, [pc, #116]	; (80024ac <HAL_GPIO_Init+0x24c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d025      	beq.n	8002486 <HAL_GPIO_Init+0x226>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a1c      	ldr	r2, [pc, #112]	; (80024b0 <HAL_GPIO_Init+0x250>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d01f      	beq.n	8002482 <HAL_GPIO_Init+0x222>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a1b      	ldr	r2, [pc, #108]	; (80024b4 <HAL_GPIO_Init+0x254>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d019      	beq.n	800247e <HAL_GPIO_Init+0x21e>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a1a      	ldr	r2, [pc, #104]	; (80024b8 <HAL_GPIO_Init+0x258>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d013      	beq.n	800247a <HAL_GPIO_Init+0x21a>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a19      	ldr	r2, [pc, #100]	; (80024bc <HAL_GPIO_Init+0x25c>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d00d      	beq.n	8002476 <HAL_GPIO_Init+0x216>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a18      	ldr	r2, [pc, #96]	; (80024c0 <HAL_GPIO_Init+0x260>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d007      	beq.n	8002472 <HAL_GPIO_Init+0x212>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a17      	ldr	r2, [pc, #92]	; (80024c4 <HAL_GPIO_Init+0x264>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d101      	bne.n	800246e <HAL_GPIO_Init+0x20e>
 800246a:	2309      	movs	r3, #9
 800246c:	e02d      	b.n	80024ca <HAL_GPIO_Init+0x26a>
 800246e:	230a      	movs	r3, #10
 8002470:	e02b      	b.n	80024ca <HAL_GPIO_Init+0x26a>
 8002472:	2308      	movs	r3, #8
 8002474:	e029      	b.n	80024ca <HAL_GPIO_Init+0x26a>
 8002476:	2307      	movs	r3, #7
 8002478:	e027      	b.n	80024ca <HAL_GPIO_Init+0x26a>
 800247a:	2306      	movs	r3, #6
 800247c:	e025      	b.n	80024ca <HAL_GPIO_Init+0x26a>
 800247e:	2305      	movs	r3, #5
 8002480:	e023      	b.n	80024ca <HAL_GPIO_Init+0x26a>
 8002482:	2304      	movs	r3, #4
 8002484:	e021      	b.n	80024ca <HAL_GPIO_Init+0x26a>
 8002486:	2303      	movs	r3, #3
 8002488:	e01f      	b.n	80024ca <HAL_GPIO_Init+0x26a>
 800248a:	2302      	movs	r3, #2
 800248c:	e01d      	b.n	80024ca <HAL_GPIO_Init+0x26a>
 800248e:	2301      	movs	r3, #1
 8002490:	e01b      	b.n	80024ca <HAL_GPIO_Init+0x26a>
 8002492:	bf00      	nop
 8002494:	58000080 	.word	0x58000080
 8002498:	58024400 	.word	0x58024400
 800249c:	58000400 	.word	0x58000400
 80024a0:	58020000 	.word	0x58020000
 80024a4:	58020400 	.word	0x58020400
 80024a8:	58020800 	.word	0x58020800
 80024ac:	58020c00 	.word	0x58020c00
 80024b0:	58021000 	.word	0x58021000
 80024b4:	58021400 	.word	0x58021400
 80024b8:	58021800 	.word	0x58021800
 80024bc:	58021c00 	.word	0x58021c00
 80024c0:	58022000 	.word	0x58022000
 80024c4:	58022400 	.word	0x58022400
 80024c8:	2300      	movs	r3, #0
 80024ca:	69fa      	ldr	r2, [r7, #28]
 80024cc:	f002 0203 	and.w	r2, r2, #3
 80024d0:	0092      	lsls	r2, r2, #2
 80024d2:	4093      	lsls	r3, r2
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024da:	4938      	ldr	r1, [pc, #224]	; (80025bc <HAL_GPIO_Init+0x35c>)
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	089b      	lsrs	r3, r3, #2
 80024e0:	3302      	adds	r3, #2
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	43db      	mvns	r3, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4013      	ands	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800250e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	4313      	orrs	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800253c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	4313      	orrs	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	43db      	mvns	r3, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4013      	ands	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	3301      	adds	r3, #1
 800259c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	fa22 f303 	lsr.w	r3, r2, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f47f ae63 	bne.w	8002274 <HAL_GPIO_Init+0x14>
  }
}
 80025ae:	bf00      	nop
 80025b0:	bf00      	nop
 80025b2:	3724      	adds	r7, #36	; 0x24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	58000400 	.word	0x58000400

080025c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	807b      	strh	r3, [r7, #2]
 80025cc:	4613      	mov	r3, r2
 80025ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025d0:	787b      	ldrb	r3, [r7, #1]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025d6:	887a      	ldrh	r2, [r7, #2]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80025dc:	e003      	b.n	80025e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80025de:	887b      	ldrh	r3, [r7, #2]
 80025e0:	041a      	lsls	r2, r3, #16
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	619a      	str	r2, [r3, #24]
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b085      	sub	sp, #20
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
 80025fa:	460b      	mov	r3, r1
 80025fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002604:	887a      	ldrh	r2, [r7, #2]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	4013      	ands	r3, r2
 800260a:	041a      	lsls	r2, r3, #16
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	43d9      	mvns	r1, r3
 8002610:	887b      	ldrh	r3, [r7, #2]
 8002612:	400b      	ands	r3, r1
 8002614:	431a      	orrs	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	619a      	str	r2, [r3, #24]
}
 800261a:	bf00      	nop
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
	...

08002628 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002630:	4b29      	ldr	r3, [pc, #164]	; (80026d8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	2b06      	cmp	r3, #6
 800263a:	d00a      	beq.n	8002652 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800263c:	4b26      	ldr	r3, [pc, #152]	; (80026d8 <HAL_PWREx_ConfigSupply+0xb0>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	429a      	cmp	r2, r3
 8002648:	d001      	beq.n	800264e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e040      	b.n	80026d0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800264e:	2300      	movs	r3, #0
 8002650:	e03e      	b.n	80026d0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002652:	4b21      	ldr	r3, [pc, #132]	; (80026d8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800265a:	491f      	ldr	r1, [pc, #124]	; (80026d8 <HAL_PWREx_ConfigSupply+0xb0>)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4313      	orrs	r3, r2
 8002660:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002662:	f7fe ff59 	bl	8001518 <HAL_GetTick>
 8002666:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002668:	e009      	b.n	800267e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800266a:	f7fe ff55 	bl	8001518 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002678:	d901      	bls.n	800267e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e028      	b.n	80026d0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800267e:	4b16      	ldr	r3, [pc, #88]	; (80026d8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800268a:	d1ee      	bne.n	800266a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b1e      	cmp	r3, #30
 8002690:	d008      	beq.n	80026a4 <HAL_PWREx_ConfigSupply+0x7c>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b2e      	cmp	r3, #46	; 0x2e
 8002696:	d005      	beq.n	80026a4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b1d      	cmp	r3, #29
 800269c:	d002      	beq.n	80026a4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b2d      	cmp	r3, #45	; 0x2d
 80026a2:	d114      	bne.n	80026ce <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80026a4:	f7fe ff38 	bl	8001518 <HAL_GetTick>
 80026a8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80026aa:	e009      	b.n	80026c0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80026ac:	f7fe ff34 	bl	8001518 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026ba:	d901      	bls.n	80026c0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e007      	b.n	80026d0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80026c0:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <HAL_PWREx_ConfigSupply+0xb0>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026cc:	d1ee      	bne.n	80026ac <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	58024800 	.word	0x58024800

080026dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08c      	sub	sp, #48	; 0x30
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d102      	bne.n	80026f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	f000 bc1f 	b.w	8002f2e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 80b3 	beq.w	8002864 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026fe:	4b95      	ldr	r3, [pc, #596]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002706:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002708:	4b92      	ldr	r3, [pc, #584]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 800270a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800270e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002710:	2b10      	cmp	r3, #16
 8002712:	d007      	beq.n	8002724 <HAL_RCC_OscConfig+0x48>
 8002714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002716:	2b18      	cmp	r3, #24
 8002718:	d112      	bne.n	8002740 <HAL_RCC_OscConfig+0x64>
 800271a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271c:	f003 0303 	and.w	r3, r3, #3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d10d      	bne.n	8002740 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002724:	4b8b      	ldr	r3, [pc, #556]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 8098 	beq.w	8002862 <HAL_RCC_OscConfig+0x186>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	f040 8093 	bne.w	8002862 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e3f6      	b.n	8002f2e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002748:	d106      	bne.n	8002758 <HAL_RCC_OscConfig+0x7c>
 800274a:	4b82      	ldr	r3, [pc, #520]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a81      	ldr	r2, [pc, #516]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 8002750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	e058      	b.n	800280a <HAL_RCC_OscConfig+0x12e>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d112      	bne.n	8002786 <HAL_RCC_OscConfig+0xaa>
 8002760:	4b7c      	ldr	r3, [pc, #496]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a7b      	ldr	r2, [pc, #492]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 8002766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800276a:	6013      	str	r3, [r2, #0]
 800276c:	4b79      	ldr	r3, [pc, #484]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a78      	ldr	r2, [pc, #480]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 8002772:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002776:	6013      	str	r3, [r2, #0]
 8002778:	4b76      	ldr	r3, [pc, #472]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a75      	ldr	r2, [pc, #468]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 800277e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002782:	6013      	str	r3, [r2, #0]
 8002784:	e041      	b.n	800280a <HAL_RCC_OscConfig+0x12e>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800278e:	d112      	bne.n	80027b6 <HAL_RCC_OscConfig+0xda>
 8002790:	4b70      	ldr	r3, [pc, #448]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a6f      	ldr	r2, [pc, #444]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 8002796:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800279a:	6013      	str	r3, [r2, #0]
 800279c:	4b6d      	ldr	r3, [pc, #436]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a6c      	ldr	r2, [pc, #432]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 80027a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80027a6:	6013      	str	r3, [r2, #0]
 80027a8:	4b6a      	ldr	r3, [pc, #424]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a69      	ldr	r2, [pc, #420]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 80027ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b2:	6013      	str	r3, [r2, #0]
 80027b4:	e029      	b.n	800280a <HAL_RCC_OscConfig+0x12e>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80027be:	d112      	bne.n	80027e6 <HAL_RCC_OscConfig+0x10a>
 80027c0:	4b64      	ldr	r3, [pc, #400]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a63      	ldr	r2, [pc, #396]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 80027c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	4b61      	ldr	r3, [pc, #388]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a60      	ldr	r2, [pc, #384]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 80027d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027d6:	6013      	str	r3, [r2, #0]
 80027d8:	4b5e      	ldr	r3, [pc, #376]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a5d      	ldr	r2, [pc, #372]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 80027de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	e011      	b.n	800280a <HAL_RCC_OscConfig+0x12e>
 80027e6:	4b5b      	ldr	r3, [pc, #364]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a5a      	ldr	r2, [pc, #360]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 80027ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f0:	6013      	str	r3, [r2, #0]
 80027f2:	4b58      	ldr	r3, [pc, #352]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a57      	ldr	r2, [pc, #348]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 80027f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	4b55      	ldr	r3, [pc, #340]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a54      	ldr	r2, [pc, #336]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 8002804:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002808:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d013      	beq.n	800283a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002812:	f7fe fe81 	bl	8001518 <HAL_GetTick>
 8002816:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800281a:	f7fe fe7d 	bl	8001518 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b64      	cmp	r3, #100	; 0x64
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e380      	b.n	8002f2e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800282c:	4b49      	ldr	r3, [pc, #292]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0f0      	beq.n	800281a <HAL_RCC_OscConfig+0x13e>
 8002838:	e014      	b.n	8002864 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283a:	f7fe fe6d 	bl	8001518 <HAL_GetTick>
 800283e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002842:	f7fe fe69 	bl	8001518 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b64      	cmp	r3, #100	; 0x64
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e36c      	b.n	8002f2e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002854:	4b3f      	ldr	r3, [pc, #252]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1f0      	bne.n	8002842 <HAL_RCC_OscConfig+0x166>
 8002860:	e000      	b.n	8002864 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002862:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 808c 	beq.w	800298a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002872:	4b38      	ldr	r3, [pc, #224]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800287a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800287c:	4b35      	ldr	r3, [pc, #212]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 800287e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002880:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d007      	beq.n	8002898 <HAL_RCC_OscConfig+0x1bc>
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	2b18      	cmp	r3, #24
 800288c:	d137      	bne.n	80028fe <HAL_RCC_OscConfig+0x222>
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	f003 0303 	and.w	r3, r3, #3
 8002894:	2b00      	cmp	r3, #0
 8002896:	d132      	bne.n	80028fe <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002898:	4b2e      	ldr	r3, [pc, #184]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d005      	beq.n	80028b0 <HAL_RCC_OscConfig+0x1d4>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e33e      	b.n	8002f2e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80028b0:	4b28      	ldr	r3, [pc, #160]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f023 0219 	bic.w	r2, r3, #25
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	4925      	ldr	r1, [pc, #148]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c2:	f7fe fe29 	bl	8001518 <HAL_GetTick>
 80028c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ca:	f7fe fe25 	bl	8001518 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e328      	b.n	8002f2e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028dc:	4b1d      	ldr	r3, [pc, #116]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0f0      	beq.n	80028ca <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e8:	4b1a      	ldr	r3, [pc, #104]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	061b      	lsls	r3, r3, #24
 80028f6:	4917      	ldr	r1, [pc, #92]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028fc:	e045      	b.n	800298a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d028      	beq.n	8002958 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002906:	4b13      	ldr	r3, [pc, #76]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f023 0219 	bic.w	r2, r3, #25
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	4910      	ldr	r1, [pc, #64]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 8002914:	4313      	orrs	r3, r2
 8002916:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002918:	f7fe fdfe 	bl	8001518 <HAL_GetTick>
 800291c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002920:	f7fe fdfa 	bl	8001518 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e2fd      	b.n	8002f2e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002932:	4b08      	ldr	r3, [pc, #32]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0304 	and.w	r3, r3, #4
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800293e:	4b05      	ldr	r3, [pc, #20]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	061b      	lsls	r3, r3, #24
 800294c:	4901      	ldr	r1, [pc, #4]	; (8002954 <HAL_RCC_OscConfig+0x278>)
 800294e:	4313      	orrs	r3, r2
 8002950:	604b      	str	r3, [r1, #4]
 8002952:	e01a      	b.n	800298a <HAL_RCC_OscConfig+0x2ae>
 8002954:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002958:	4b97      	ldr	r3, [pc, #604]	; (8002bb8 <HAL_RCC_OscConfig+0x4dc>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a96      	ldr	r2, [pc, #600]	; (8002bb8 <HAL_RCC_OscConfig+0x4dc>)
 800295e:	f023 0301 	bic.w	r3, r3, #1
 8002962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002964:	f7fe fdd8 	bl	8001518 <HAL_GetTick>
 8002968:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800296c:	f7fe fdd4 	bl	8001518 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e2d7      	b.n	8002f2e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800297e:	4b8e      	ldr	r3, [pc, #568]	; (8002bb8 <HAL_RCC_OscConfig+0x4dc>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0304 	and.w	r3, r3, #4
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1f0      	bne.n	800296c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0310 	and.w	r3, r3, #16
 8002992:	2b00      	cmp	r3, #0
 8002994:	d06a      	beq.n	8002a6c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002996:	4b88      	ldr	r3, [pc, #544]	; (8002bb8 <HAL_RCC_OscConfig+0x4dc>)
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800299e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80029a0:	4b85      	ldr	r3, [pc, #532]	; (8002bb8 <HAL_RCC_OscConfig+0x4dc>)
 80029a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	d007      	beq.n	80029bc <HAL_RCC_OscConfig+0x2e0>
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	2b18      	cmp	r3, #24
 80029b0:	d11b      	bne.n	80029ea <HAL_RCC_OscConfig+0x30e>
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	f003 0303 	and.w	r3, r3, #3
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d116      	bne.n	80029ea <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029bc:	4b7e      	ldr	r3, [pc, #504]	; (8002bb8 <HAL_RCC_OscConfig+0x4dc>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_RCC_OscConfig+0x2f8>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	2b80      	cmp	r3, #128	; 0x80
 80029ce:	d001      	beq.n	80029d4 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e2ac      	b.n	8002f2e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029d4:	4b78      	ldr	r3, [pc, #480]	; (8002bb8 <HAL_RCC_OscConfig+0x4dc>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	061b      	lsls	r3, r3, #24
 80029e2:	4975      	ldr	r1, [pc, #468]	; (8002bb8 <HAL_RCC_OscConfig+0x4dc>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029e8:	e040      	b.n	8002a6c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d023      	beq.n	8002a3a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80029f2:	4b71      	ldr	r3, [pc, #452]	; (8002bb8 <HAL_RCC_OscConfig+0x4dc>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a70      	ldr	r2, [pc, #448]	; (8002bb8 <HAL_RCC_OscConfig+0x4dc>)
 80029f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fe:	f7fe fd8b 	bl	8001518 <HAL_GetTick>
 8002a02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a06:	f7fe fd87 	bl	8001518 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e28a      	b.n	8002f2e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a18:	4b67      	ldr	r3, [pc, #412]	; (8002bb8 <HAL_RCC_OscConfig+0x4dc>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0f0      	beq.n	8002a06 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a24:	4b64      	ldr	r3, [pc, #400]	; (8002bb8 <HAL_RCC_OscConfig+0x4dc>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	061b      	lsls	r3, r3, #24
 8002a32:	4961      	ldr	r1, [pc, #388]	; (8002bb8 <HAL_RCC_OscConfig+0x4dc>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	60cb      	str	r3, [r1, #12]
 8002a38:	e018      	b.n	8002a6c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002a3a:	4b5f      	ldr	r3, [pc, #380]	; (8002bb8 <HAL_RCC_OscConfig+0x4dc>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a5e      	ldr	r2, [pc, #376]	; (8002bb8 <HAL_RCC_OscConfig+0x4dc>)
 8002a40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a46:	f7fe fd67 	bl	8001518 <HAL_GetTick>
 8002a4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a4c:	e008      	b.n	8002a60 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a4e:	f7fe fd63 	bl	8001518 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e266      	b.n	8002f2e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a60:	4b55      	ldr	r3, [pc, #340]	; (8002bb8 <HAL_RCC_OscConfig+0x4dc>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1f0      	bne.n	8002a4e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0308 	and.w	r3, r3, #8
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d036      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d019      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a80:	4b4d      	ldr	r3, [pc, #308]	; (8002bb8 <HAL_RCC_OscConfig+0x4dc>)
 8002a82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a84:	4a4c      	ldr	r2, [pc, #304]	; (8002bb8 <HAL_RCC_OscConfig+0x4dc>)
 8002a86:	f043 0301 	orr.w	r3, r3, #1
 8002a8a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8c:	f7fe fd44 	bl	8001518 <HAL_GetTick>
 8002a90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a94:	f7fe fd40 	bl	8001518 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e243      	b.n	8002f2e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002aa6:	4b44      	ldr	r3, [pc, #272]	; (8002bb8 <HAL_RCC_OscConfig+0x4dc>)
 8002aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0f0      	beq.n	8002a94 <HAL_RCC_OscConfig+0x3b8>
 8002ab2:	e018      	b.n	8002ae6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ab4:	4b40      	ldr	r3, [pc, #256]	; (8002bb8 <HAL_RCC_OscConfig+0x4dc>)
 8002ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab8:	4a3f      	ldr	r2, [pc, #252]	; (8002bb8 <HAL_RCC_OscConfig+0x4dc>)
 8002aba:	f023 0301 	bic.w	r3, r3, #1
 8002abe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac0:	f7fe fd2a 	bl	8001518 <HAL_GetTick>
 8002ac4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ac8:	f7fe fd26 	bl	8001518 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e229      	b.n	8002f2e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ada:	4b37      	ldr	r3, [pc, #220]	; (8002bb8 <HAL_RCC_OscConfig+0x4dc>)
 8002adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1f0      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0320 	and.w	r3, r3, #32
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d036      	beq.n	8002b60 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d019      	beq.n	8002b2e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002afa:	4b2f      	ldr	r3, [pc, #188]	; (8002bb8 <HAL_RCC_OscConfig+0x4dc>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a2e      	ldr	r2, [pc, #184]	; (8002bb8 <HAL_RCC_OscConfig+0x4dc>)
 8002b00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b04:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b06:	f7fe fd07 	bl	8001518 <HAL_GetTick>
 8002b0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b0e:	f7fe fd03 	bl	8001518 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e206      	b.n	8002f2e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b20:	4b25      	ldr	r3, [pc, #148]	; (8002bb8 <HAL_RCC_OscConfig+0x4dc>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0f0      	beq.n	8002b0e <HAL_RCC_OscConfig+0x432>
 8002b2c:	e018      	b.n	8002b60 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b2e:	4b22      	ldr	r3, [pc, #136]	; (8002bb8 <HAL_RCC_OscConfig+0x4dc>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a21      	ldr	r2, [pc, #132]	; (8002bb8 <HAL_RCC_OscConfig+0x4dc>)
 8002b34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b38:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b3a:	f7fe fced 	bl	8001518 <HAL_GetTick>
 8002b3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b40:	e008      	b.n	8002b54 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b42:	f7fe fce9 	bl	8001518 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e1ec      	b.n	8002f2e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b54:	4b18      	ldr	r3, [pc, #96]	; (8002bb8 <HAL_RCC_OscConfig+0x4dc>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1f0      	bne.n	8002b42 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 80af 	beq.w	8002ccc <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b6e:	4b13      	ldr	r3, [pc, #76]	; (8002bbc <HAL_RCC_OscConfig+0x4e0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a12      	ldr	r2, [pc, #72]	; (8002bbc <HAL_RCC_OscConfig+0x4e0>)
 8002b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b7a:	f7fe fccd 	bl	8001518 <HAL_GetTick>
 8002b7e:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b82:	f7fe fcc9 	bl	8001518 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b64      	cmp	r3, #100	; 0x64
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e1cc      	b.n	8002f2e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b94:	4b09      	ldr	r3, [pc, #36]	; (8002bbc <HAL_RCC_OscConfig+0x4e0>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0f0      	beq.n	8002b82 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d10b      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x4e4>
 8002ba8:	4b03      	ldr	r3, [pc, #12]	; (8002bb8 <HAL_RCC_OscConfig+0x4dc>)
 8002baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bac:	4a02      	ldr	r2, [pc, #8]	; (8002bb8 <HAL_RCC_OscConfig+0x4dc>)
 8002bae:	f043 0301 	orr.w	r3, r3, #1
 8002bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb4:	e05b      	b.n	8002c6e <HAL_RCC_OscConfig+0x592>
 8002bb6:	bf00      	nop
 8002bb8:	58024400 	.word	0x58024400
 8002bbc:	58024800 	.word	0x58024800
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d112      	bne.n	8002bee <HAL_RCC_OscConfig+0x512>
 8002bc8:	4b9d      	ldr	r3, [pc, #628]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bcc:	4a9c      	ldr	r2, [pc, #624]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002bce:	f023 0301 	bic.w	r3, r3, #1
 8002bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd4:	4b9a      	ldr	r3, [pc, #616]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd8:	4a99      	ldr	r2, [pc, #612]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002bda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bde:	6713      	str	r3, [r2, #112]	; 0x70
 8002be0:	4b97      	ldr	r3, [pc, #604]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be4:	4a96      	ldr	r2, [pc, #600]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002be6:	f023 0304 	bic.w	r3, r3, #4
 8002bea:	6713      	str	r3, [r2, #112]	; 0x70
 8002bec:	e03f      	b.n	8002c6e <HAL_RCC_OscConfig+0x592>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	2b05      	cmp	r3, #5
 8002bf4:	d112      	bne.n	8002c1c <HAL_RCC_OscConfig+0x540>
 8002bf6:	4b92      	ldr	r3, [pc, #584]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfa:	4a91      	ldr	r2, [pc, #580]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002bfc:	f043 0304 	orr.w	r3, r3, #4
 8002c00:	6713      	str	r3, [r2, #112]	; 0x70
 8002c02:	4b8f      	ldr	r3, [pc, #572]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c06:	4a8e      	ldr	r2, [pc, #568]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002c08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c0e:	4b8c      	ldr	r3, [pc, #560]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c12:	4a8b      	ldr	r2, [pc, #556]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002c14:	f043 0301 	orr.w	r3, r3, #1
 8002c18:	6713      	str	r3, [r2, #112]	; 0x70
 8002c1a:	e028      	b.n	8002c6e <HAL_RCC_OscConfig+0x592>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	2b85      	cmp	r3, #133	; 0x85
 8002c22:	d112      	bne.n	8002c4a <HAL_RCC_OscConfig+0x56e>
 8002c24:	4b86      	ldr	r3, [pc, #536]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c28:	4a85      	ldr	r2, [pc, #532]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002c2a:	f043 0304 	orr.w	r3, r3, #4
 8002c2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c30:	4b83      	ldr	r3, [pc, #524]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c34:	4a82      	ldr	r2, [pc, #520]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c3c:	4b80      	ldr	r3, [pc, #512]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c40:	4a7f      	ldr	r2, [pc, #508]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002c42:	f043 0301 	orr.w	r3, r3, #1
 8002c46:	6713      	str	r3, [r2, #112]	; 0x70
 8002c48:	e011      	b.n	8002c6e <HAL_RCC_OscConfig+0x592>
 8002c4a:	4b7d      	ldr	r3, [pc, #500]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4e:	4a7c      	ldr	r2, [pc, #496]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002c50:	f023 0301 	bic.w	r3, r3, #1
 8002c54:	6713      	str	r3, [r2, #112]	; 0x70
 8002c56:	4b7a      	ldr	r3, [pc, #488]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5a:	4a79      	ldr	r2, [pc, #484]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002c5c:	f023 0304 	bic.w	r3, r3, #4
 8002c60:	6713      	str	r3, [r2, #112]	; 0x70
 8002c62:	4b77      	ldr	r3, [pc, #476]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c66:	4a76      	ldr	r2, [pc, #472]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002c68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d015      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c76:	f7fe fc4f 	bl	8001518 <HAL_GetTick>
 8002c7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c7c:	e00a      	b.n	8002c94 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c7e:	f7fe fc4b 	bl	8001518 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e14c      	b.n	8002f2e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c94:	4b6a      	ldr	r3, [pc, #424]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0ee      	beq.n	8002c7e <HAL_RCC_OscConfig+0x5a2>
 8002ca0:	e014      	b.n	8002ccc <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca2:	f7fe fc39 	bl	8001518 <HAL_GetTick>
 8002ca6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ca8:	e00a      	b.n	8002cc0 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002caa:	f7fe fc35 	bl	8001518 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e136      	b.n	8002f2e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cc0:	4b5f      	ldr	r3, [pc, #380]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1ee      	bne.n	8002caa <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 812b 	beq.w	8002f2c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002cd6:	4b5a      	ldr	r3, [pc, #360]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cde:	2b18      	cmp	r3, #24
 8002ce0:	f000 80bb 	beq.w	8002e5a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	f040 8095 	bne.w	8002e18 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cee:	4b54      	ldr	r3, [pc, #336]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a53      	ldr	r2, [pc, #332]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002cf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfa:	f7fe fc0d 	bl	8001518 <HAL_GetTick>
 8002cfe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d02:	f7fe fc09 	bl	8001518 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e10c      	b.n	8002f2e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d14:	4b4a      	ldr	r3, [pc, #296]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1f0      	bne.n	8002d02 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d20:	4b47      	ldr	r3, [pc, #284]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002d22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d24:	4b47      	ldr	r3, [pc, #284]	; (8002e44 <HAL_RCC_OscConfig+0x768>)
 8002d26:	4013      	ands	r3, r2
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d30:	0112      	lsls	r2, r2, #4
 8002d32:	430a      	orrs	r2, r1
 8002d34:	4942      	ldr	r1, [pc, #264]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	628b      	str	r3, [r1, #40]	; 0x28
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	025b      	lsls	r3, r3, #9
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d54:	3b01      	subs	r3, #1
 8002d56:	041b      	lsls	r3, r3, #16
 8002d58:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d62:	3b01      	subs	r3, #1
 8002d64:	061b      	lsls	r3, r3, #24
 8002d66:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002d6a:	4935      	ldr	r1, [pc, #212]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002d70:	4b33      	ldr	r3, [pc, #204]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d74:	4a32      	ldr	r2, [pc, #200]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002d76:	f023 0301 	bic.w	r3, r3, #1
 8002d7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d7c:	4b30      	ldr	r3, [pc, #192]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002d7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d80:	4b31      	ldr	r3, [pc, #196]	; (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002d82:	4013      	ands	r3, r2
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d88:	00d2      	lsls	r2, r2, #3
 8002d8a:	492d      	ldr	r1, [pc, #180]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002d90:	4b2b      	ldr	r3, [pc, #172]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d94:	f023 020c 	bic.w	r2, r3, #12
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9c:	4928      	ldr	r1, [pc, #160]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002da2:	4b27      	ldr	r3, [pc, #156]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da6:	f023 0202 	bic.w	r2, r3, #2
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dae:	4924      	ldr	r1, [pc, #144]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002db4:	4b22      	ldr	r3, [pc, #136]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db8:	4a21      	ldr	r2, [pc, #132]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dc0:	4b1f      	ldr	r3, [pc, #124]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	4a1e      	ldr	r2, [pc, #120]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002dc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002dcc:	4b1c      	ldr	r3, [pc, #112]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd0:	4a1b      	ldr	r2, [pc, #108]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002dd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002dd8:	4b19      	ldr	r3, [pc, #100]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ddc:	4a18      	ldr	r2, [pc, #96]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002dde:	f043 0301 	orr.w	r3, r3, #1
 8002de2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002de4:	4b16      	ldr	r3, [pc, #88]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a15      	ldr	r2, [pc, #84]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002dea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df0:	f7fe fb92 	bl	8001518 <HAL_GetTick>
 8002df4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df8:	f7fe fb8e 	bl	8001518 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e091      	b.n	8002f2e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e0a:	4b0d      	ldr	r3, [pc, #52]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0f0      	beq.n	8002df8 <HAL_RCC_OscConfig+0x71c>
 8002e16:	e089      	b.n	8002f2c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e18:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a08      	ldr	r2, [pc, #32]	; (8002e40 <HAL_RCC_OscConfig+0x764>)
 8002e1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e24:	f7fe fb78 	bl	8001518 <HAL_GetTick>
 8002e28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e2a:	e00f      	b.n	8002e4c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2c:	f7fe fb74 	bl	8001518 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d908      	bls.n	8002e4c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e077      	b.n	8002f2e <HAL_RCC_OscConfig+0x852>
 8002e3e:	bf00      	nop
 8002e40:	58024400 	.word	0x58024400
 8002e44:	fffffc0c 	.word	0xfffffc0c
 8002e48:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e4c:	4b3a      	ldr	r3, [pc, #232]	; (8002f38 <HAL_RCC_OscConfig+0x85c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1e9      	bne.n	8002e2c <HAL_RCC_OscConfig+0x750>
 8002e58:	e068      	b.n	8002f2c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e5a:	4b37      	ldr	r3, [pc, #220]	; (8002f38 <HAL_RCC_OscConfig+0x85c>)
 8002e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e60:	4b35      	ldr	r3, [pc, #212]	; (8002f38 <HAL_RCC_OscConfig+0x85c>)
 8002e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e64:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d031      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	f003 0203 	and.w	r2, r3, #3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d12a      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	091b      	lsrs	r3, r3, #4
 8002e80:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d122      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d11a      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	0a5b      	lsrs	r3, r3, #9
 8002ea0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d111      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	0c1b      	lsrs	r3, r3, #16
 8002eb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d108      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	0e1b      	lsrs	r3, r3, #24
 8002ec4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ecc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d001      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e02b      	b.n	8002f2e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002ed6:	4b18      	ldr	r3, [pc, #96]	; (8002f38 <HAL_RCC_OscConfig+0x85c>)
 8002ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eda:	08db      	lsrs	r3, r3, #3
 8002edc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ee0:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d01f      	beq.n	8002f2c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002eec:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <HAL_RCC_OscConfig+0x85c>)
 8002eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef0:	4a11      	ldr	r2, [pc, #68]	; (8002f38 <HAL_RCC_OscConfig+0x85c>)
 8002ef2:	f023 0301 	bic.w	r3, r3, #1
 8002ef6:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ef8:	f7fe fb0e 	bl	8001518 <HAL_GetTick>
 8002efc:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002efe:	bf00      	nop
 8002f00:	f7fe fb0a 	bl	8001518 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d0f9      	beq.n	8002f00 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f0c:	4b0a      	ldr	r3, [pc, #40]	; (8002f38 <HAL_RCC_OscConfig+0x85c>)
 8002f0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f10:	4b0a      	ldr	r3, [pc, #40]	; (8002f3c <HAL_RCC_OscConfig+0x860>)
 8002f12:	4013      	ands	r3, r2
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f18:	00d2      	lsls	r2, r2, #3
 8002f1a:	4907      	ldr	r1, [pc, #28]	; (8002f38 <HAL_RCC_OscConfig+0x85c>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002f20:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <HAL_RCC_OscConfig+0x85c>)
 8002f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f24:	4a04      	ldr	r2, [pc, #16]	; (8002f38 <HAL_RCC_OscConfig+0x85c>)
 8002f26:	f043 0301 	orr.w	r3, r3, #1
 8002f2a:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3730      	adds	r7, #48	; 0x30
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	58024400 	.word	0x58024400
 8002f3c:	ffff0007 	.word	0xffff0007

08002f40 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e19c      	b.n	800328e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f54:	4b8a      	ldr	r3, [pc, #552]	; (8003180 <HAL_RCC_ClockConfig+0x240>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 030f 	and.w	r3, r3, #15
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d910      	bls.n	8002f84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f62:	4b87      	ldr	r3, [pc, #540]	; (8003180 <HAL_RCC_ClockConfig+0x240>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f023 020f 	bic.w	r2, r3, #15
 8002f6a:	4985      	ldr	r1, [pc, #532]	; (8003180 <HAL_RCC_ClockConfig+0x240>)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f72:	4b83      	ldr	r3, [pc, #524]	; (8003180 <HAL_RCC_ClockConfig+0x240>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d001      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e184      	b.n	800328e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d010      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691a      	ldr	r2, [r3, #16]
 8002f94:	4b7b      	ldr	r3, [pc, #492]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d908      	bls.n	8002fb2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002fa0:	4b78      	ldr	r3, [pc, #480]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	4975      	ldr	r1, [pc, #468]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0308 	and.w	r3, r3, #8
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d010      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	695a      	ldr	r2, [r3, #20]
 8002fc2:	4b70      	ldr	r3, [pc, #448]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d908      	bls.n	8002fe0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002fce:	4b6d      	ldr	r3, [pc, #436]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	496a      	ldr	r1, [pc, #424]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0310 	and.w	r3, r3, #16
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d010      	beq.n	800300e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	699a      	ldr	r2, [r3, #24]
 8002ff0:	4b64      	ldr	r3, [pc, #400]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d908      	bls.n	800300e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ffc:	4b61      	ldr	r3, [pc, #388]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	495e      	ldr	r1, [pc, #376]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 800300a:	4313      	orrs	r3, r2
 800300c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0320 	and.w	r3, r3, #32
 8003016:	2b00      	cmp	r3, #0
 8003018:	d010      	beq.n	800303c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69da      	ldr	r2, [r3, #28]
 800301e:	4b59      	ldr	r3, [pc, #356]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003026:	429a      	cmp	r2, r3
 8003028:	d908      	bls.n	800303c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800302a:	4b56      	ldr	r3, [pc, #344]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	4953      	ldr	r1, [pc, #332]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 8003038:	4313      	orrs	r3, r2
 800303a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d010      	beq.n	800306a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	4b4d      	ldr	r3, [pc, #308]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	f003 030f 	and.w	r3, r3, #15
 8003054:	429a      	cmp	r2, r3
 8003056:	d908      	bls.n	800306a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003058:	4b4a      	ldr	r3, [pc, #296]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	f023 020f 	bic.w	r2, r3, #15
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	4947      	ldr	r1, [pc, #284]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 8003066:	4313      	orrs	r3, r2
 8003068:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	d055      	beq.n	8003122 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003076:	4b43      	ldr	r3, [pc, #268]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	4940      	ldr	r1, [pc, #256]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 8003084:	4313      	orrs	r3, r2
 8003086:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	2b02      	cmp	r3, #2
 800308e:	d107      	bne.n	80030a0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003090:	4b3c      	ldr	r3, [pc, #240]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d121      	bne.n	80030e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e0f6      	b.n	800328e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b03      	cmp	r3, #3
 80030a6:	d107      	bne.n	80030b8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030a8:	4b36      	ldr	r3, [pc, #216]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d115      	bne.n	80030e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e0ea      	b.n	800328e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d107      	bne.n	80030d0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030c0:	4b30      	ldr	r3, [pc, #192]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d109      	bne.n	80030e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e0de      	b.n	800328e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030d0:	4b2c      	ldr	r3, [pc, #176]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e0d6      	b.n	800328e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030e0:	4b28      	ldr	r3, [pc, #160]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	f023 0207 	bic.w	r2, r3, #7
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	4925      	ldr	r1, [pc, #148]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030f2:	f7fe fa11 	bl	8001518 <HAL_GetTick>
 80030f6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f8:	e00a      	b.n	8003110 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030fa:	f7fe fa0d 	bl	8001518 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	f241 3288 	movw	r2, #5000	; 0x1388
 8003108:	4293      	cmp	r3, r2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e0be      	b.n	800328e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003110:	4b1c      	ldr	r3, [pc, #112]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	429a      	cmp	r2, r3
 8003120:	d1eb      	bne.n	80030fa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d010      	beq.n	8003150 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68da      	ldr	r2, [r3, #12]
 8003132:	4b14      	ldr	r3, [pc, #80]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	429a      	cmp	r2, r3
 800313c:	d208      	bcs.n	8003150 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800313e:	4b11      	ldr	r3, [pc, #68]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	f023 020f 	bic.w	r2, r3, #15
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	490e      	ldr	r1, [pc, #56]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 800314c:	4313      	orrs	r3, r2
 800314e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003150:	4b0b      	ldr	r3, [pc, #44]	; (8003180 <HAL_RCC_ClockConfig+0x240>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 030f 	and.w	r3, r3, #15
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	429a      	cmp	r2, r3
 800315c:	d214      	bcs.n	8003188 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315e:	4b08      	ldr	r3, [pc, #32]	; (8003180 <HAL_RCC_ClockConfig+0x240>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f023 020f 	bic.w	r2, r3, #15
 8003166:	4906      	ldr	r1, [pc, #24]	; (8003180 <HAL_RCC_ClockConfig+0x240>)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	4313      	orrs	r3, r2
 800316c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800316e:	4b04      	ldr	r3, [pc, #16]	; (8003180 <HAL_RCC_ClockConfig+0x240>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	429a      	cmp	r2, r3
 800317a:	d005      	beq.n	8003188 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e086      	b.n	800328e <HAL_RCC_ClockConfig+0x34e>
 8003180:	52002000 	.word	0x52002000
 8003184:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	d010      	beq.n	80031b6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691a      	ldr	r2, [r3, #16]
 8003198:	4b3f      	ldr	r3, [pc, #252]	; (8003298 <HAL_RCC_ClockConfig+0x358>)
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d208      	bcs.n	80031b6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80031a4:	4b3c      	ldr	r3, [pc, #240]	; (8003298 <HAL_RCC_ClockConfig+0x358>)
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	4939      	ldr	r1, [pc, #228]	; (8003298 <HAL_RCC_ClockConfig+0x358>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0308 	and.w	r3, r3, #8
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d010      	beq.n	80031e4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695a      	ldr	r2, [r3, #20]
 80031c6:	4b34      	ldr	r3, [pc, #208]	; (8003298 <HAL_RCC_ClockConfig+0x358>)
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d208      	bcs.n	80031e4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031d2:	4b31      	ldr	r3, [pc, #196]	; (8003298 <HAL_RCC_ClockConfig+0x358>)
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	492e      	ldr	r1, [pc, #184]	; (8003298 <HAL_RCC_ClockConfig+0x358>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0310 	and.w	r3, r3, #16
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d010      	beq.n	8003212 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	699a      	ldr	r2, [r3, #24]
 80031f4:	4b28      	ldr	r3, [pc, #160]	; (8003298 <HAL_RCC_ClockConfig+0x358>)
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d208      	bcs.n	8003212 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003200:	4b25      	ldr	r3, [pc, #148]	; (8003298 <HAL_RCC_ClockConfig+0x358>)
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	4922      	ldr	r1, [pc, #136]	; (8003298 <HAL_RCC_ClockConfig+0x358>)
 800320e:	4313      	orrs	r3, r2
 8003210:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0320 	and.w	r3, r3, #32
 800321a:	2b00      	cmp	r3, #0
 800321c:	d010      	beq.n	8003240 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69da      	ldr	r2, [r3, #28]
 8003222:	4b1d      	ldr	r3, [pc, #116]	; (8003298 <HAL_RCC_ClockConfig+0x358>)
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800322a:	429a      	cmp	r2, r3
 800322c:	d208      	bcs.n	8003240 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800322e:	4b1a      	ldr	r3, [pc, #104]	; (8003298 <HAL_RCC_ClockConfig+0x358>)
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	4917      	ldr	r1, [pc, #92]	; (8003298 <HAL_RCC_ClockConfig+0x358>)
 800323c:	4313      	orrs	r3, r2
 800323e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003240:	f000 f834 	bl	80032ac <HAL_RCC_GetSysClockFreq>
 8003244:	4602      	mov	r2, r0
 8003246:	4b14      	ldr	r3, [pc, #80]	; (8003298 <HAL_RCC_ClockConfig+0x358>)
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	0a1b      	lsrs	r3, r3, #8
 800324c:	f003 030f 	and.w	r3, r3, #15
 8003250:	4912      	ldr	r1, [pc, #72]	; (800329c <HAL_RCC_ClockConfig+0x35c>)
 8003252:	5ccb      	ldrb	r3, [r1, r3]
 8003254:	f003 031f 	and.w	r3, r3, #31
 8003258:	fa22 f303 	lsr.w	r3, r2, r3
 800325c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800325e:	4b0e      	ldr	r3, [pc, #56]	; (8003298 <HAL_RCC_ClockConfig+0x358>)
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	4a0d      	ldr	r2, [pc, #52]	; (800329c <HAL_RCC_ClockConfig+0x35c>)
 8003268:	5cd3      	ldrb	r3, [r2, r3]
 800326a:	f003 031f 	and.w	r3, r3, #31
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	fa22 f303 	lsr.w	r3, r2, r3
 8003274:	4a0a      	ldr	r2, [pc, #40]	; (80032a0 <HAL_RCC_ClockConfig+0x360>)
 8003276:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003278:	4a0a      	ldr	r2, [pc, #40]	; (80032a4 <HAL_RCC_ClockConfig+0x364>)
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800327e:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <HAL_RCC_ClockConfig+0x368>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f7fe f8fe 	bl	8001484 <HAL_InitTick>
 8003288:	4603      	mov	r3, r0
 800328a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800328c:	7bfb      	ldrb	r3, [r7, #15]
}
 800328e:	4618      	mov	r0, r3
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	58024400 	.word	0x58024400
 800329c:	08008c80 	.word	0x08008c80
 80032a0:	24000010 	.word	0x24000010
 80032a4:	2400000c 	.word	0x2400000c
 80032a8:	24000014 	.word	0x24000014

080032ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b089      	sub	sp, #36	; 0x24
 80032b0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032b2:	4bb3      	ldr	r3, [pc, #716]	; (8003580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032ba:	2b18      	cmp	r3, #24
 80032bc:	f200 8155 	bhi.w	800356a <HAL_RCC_GetSysClockFreq+0x2be>
 80032c0:	a201      	add	r2, pc, #4	; (adr r2, 80032c8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80032c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c6:	bf00      	nop
 80032c8:	0800332d 	.word	0x0800332d
 80032cc:	0800356b 	.word	0x0800356b
 80032d0:	0800356b 	.word	0x0800356b
 80032d4:	0800356b 	.word	0x0800356b
 80032d8:	0800356b 	.word	0x0800356b
 80032dc:	0800356b 	.word	0x0800356b
 80032e0:	0800356b 	.word	0x0800356b
 80032e4:	0800356b 	.word	0x0800356b
 80032e8:	08003353 	.word	0x08003353
 80032ec:	0800356b 	.word	0x0800356b
 80032f0:	0800356b 	.word	0x0800356b
 80032f4:	0800356b 	.word	0x0800356b
 80032f8:	0800356b 	.word	0x0800356b
 80032fc:	0800356b 	.word	0x0800356b
 8003300:	0800356b 	.word	0x0800356b
 8003304:	0800356b 	.word	0x0800356b
 8003308:	08003359 	.word	0x08003359
 800330c:	0800356b 	.word	0x0800356b
 8003310:	0800356b 	.word	0x0800356b
 8003314:	0800356b 	.word	0x0800356b
 8003318:	0800356b 	.word	0x0800356b
 800331c:	0800356b 	.word	0x0800356b
 8003320:	0800356b 	.word	0x0800356b
 8003324:	0800356b 	.word	0x0800356b
 8003328:	0800335f 	.word	0x0800335f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800332c:	4b94      	ldr	r3, [pc, #592]	; (8003580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0320 	and.w	r3, r3, #32
 8003334:	2b00      	cmp	r3, #0
 8003336:	d009      	beq.n	800334c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003338:	4b91      	ldr	r3, [pc, #580]	; (8003580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	08db      	lsrs	r3, r3, #3
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	4a90      	ldr	r2, [pc, #576]	; (8003584 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003344:	fa22 f303 	lsr.w	r3, r2, r3
 8003348:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800334a:	e111      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800334c:	4b8d      	ldr	r3, [pc, #564]	; (8003584 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800334e:	61bb      	str	r3, [r7, #24]
      break;
 8003350:	e10e      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003352:	4b8d      	ldr	r3, [pc, #564]	; (8003588 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003354:	61bb      	str	r3, [r7, #24]
      break;
 8003356:	e10b      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003358:	4b8c      	ldr	r3, [pc, #560]	; (800358c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800335a:	61bb      	str	r3, [r7, #24]
      break;
 800335c:	e108      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800335e:	4b88      	ldr	r3, [pc, #544]	; (8003580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003368:	4b85      	ldr	r3, [pc, #532]	; (8003580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800336a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336c:	091b      	lsrs	r3, r3, #4
 800336e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003372:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003374:	4b82      	ldr	r3, [pc, #520]	; (8003580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800337e:	4b80      	ldr	r3, [pc, #512]	; (8003580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003382:	08db      	lsrs	r3, r3, #3
 8003384:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	fb02 f303 	mul.w	r3, r2, r3
 800338e:	ee07 3a90 	vmov	s15, r3
 8003392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003396:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 80e1 	beq.w	8003564 <HAL_RCC_GetSysClockFreq+0x2b8>
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	f000 8083 	beq.w	80034b0 <HAL_RCC_GetSysClockFreq+0x204>
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	f200 80a1 	bhi.w	80034f4 <HAL_RCC_GetSysClockFreq+0x248>
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d003      	beq.n	80033c0 <HAL_RCC_GetSysClockFreq+0x114>
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d056      	beq.n	800346c <HAL_RCC_GetSysClockFreq+0x1c0>
 80033be:	e099      	b.n	80034f4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033c0:	4b6f      	ldr	r3, [pc, #444]	; (8003580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0320 	and.w	r3, r3, #32
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d02d      	beq.n	8003428 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80033cc:	4b6c      	ldr	r3, [pc, #432]	; (8003580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	08db      	lsrs	r3, r3, #3
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	4a6b      	ldr	r2, [pc, #428]	; (8003584 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033d8:	fa22 f303 	lsr.w	r3, r2, r3
 80033dc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	ee07 3a90 	vmov	s15, r3
 80033e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	ee07 3a90 	vmov	s15, r3
 80033ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033f6:	4b62      	ldr	r3, [pc, #392]	; (8003580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033fe:	ee07 3a90 	vmov	s15, r3
 8003402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003406:	ed97 6a02 	vldr	s12, [r7, #8]
 800340a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003590 <HAL_RCC_GetSysClockFreq+0x2e4>
 800340e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003416:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800341a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800341e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003422:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003426:	e087      	b.n	8003538 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	ee07 3a90 	vmov	s15, r3
 800342e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003432:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003594 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800343a:	4b51      	ldr	r3, [pc, #324]	; (8003580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003442:	ee07 3a90 	vmov	s15, r3
 8003446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800344a:	ed97 6a02 	vldr	s12, [r7, #8]
 800344e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003590 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800345a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800345e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003466:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800346a:	e065      	b.n	8003538 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	ee07 3a90 	vmov	s15, r3
 8003472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003476:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003598 <HAL_RCC_GetSysClockFreq+0x2ec>
 800347a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800347e:	4b40      	ldr	r3, [pc, #256]	; (8003580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003486:	ee07 3a90 	vmov	s15, r3
 800348a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800348e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003492:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003590 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800349a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800349e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034ae:	e043      	b.n	8003538 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	ee07 3a90 	vmov	s15, r3
 80034b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ba:	eddf 6a38 	vldr	s13, [pc, #224]	; 800359c <HAL_RCC_GetSysClockFreq+0x2f0>
 80034be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034c2:	4b2f      	ldr	r3, [pc, #188]	; (8003580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ca:	ee07 3a90 	vmov	s15, r3
 80034ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80034d6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003590 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034f2:	e021      	b.n	8003538 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	ee07 3a90 	vmov	s15, r3
 80034fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034fe:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003598 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003506:	4b1e      	ldr	r3, [pc, #120]	; (8003580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800350e:	ee07 3a90 	vmov	s15, r3
 8003512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003516:	ed97 6a02 	vldr	s12, [r7, #8]
 800351a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003590 <HAL_RCC_GetSysClockFreq+0x2e4>
 800351e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003526:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800352a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800352e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003532:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003536:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003538:	4b11      	ldr	r3, [pc, #68]	; (8003580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800353a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353c:	0a5b      	lsrs	r3, r3, #9
 800353e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003542:	3301      	adds	r3, #1
 8003544:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	ee07 3a90 	vmov	s15, r3
 800354c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003550:	edd7 6a07 	vldr	s13, [r7, #28]
 8003554:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003558:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800355c:	ee17 3a90 	vmov	r3, s15
 8003560:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003562:	e005      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	61bb      	str	r3, [r7, #24]
      break;
 8003568:	e002      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800356a:	4b07      	ldr	r3, [pc, #28]	; (8003588 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800356c:	61bb      	str	r3, [r7, #24]
      break;
 800356e:	bf00      	nop
  }

  return sysclockfreq;
 8003570:	69bb      	ldr	r3, [r7, #24]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3724      	adds	r7, #36	; 0x24
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	58024400 	.word	0x58024400
 8003584:	03d09000 	.word	0x03d09000
 8003588:	003d0900 	.word	0x003d0900
 800358c:	007a1200 	.word	0x007a1200
 8003590:	46000000 	.word	0x46000000
 8003594:	4c742400 	.word	0x4c742400
 8003598:	4a742400 	.word	0x4a742400
 800359c:	4af42400 	.word	0x4af42400

080035a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80035a6:	f7ff fe81 	bl	80032ac <HAL_RCC_GetSysClockFreq>
 80035aa:	4602      	mov	r2, r0
 80035ac:	4b10      	ldr	r3, [pc, #64]	; (80035f0 <HAL_RCC_GetHCLKFreq+0x50>)
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	0a1b      	lsrs	r3, r3, #8
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	490f      	ldr	r1, [pc, #60]	; (80035f4 <HAL_RCC_GetHCLKFreq+0x54>)
 80035b8:	5ccb      	ldrb	r3, [r1, r3]
 80035ba:	f003 031f 	and.w	r3, r3, #31
 80035be:	fa22 f303 	lsr.w	r3, r2, r3
 80035c2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80035c4:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <HAL_RCC_GetHCLKFreq+0x50>)
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	f003 030f 	and.w	r3, r3, #15
 80035cc:	4a09      	ldr	r2, [pc, #36]	; (80035f4 <HAL_RCC_GetHCLKFreq+0x54>)
 80035ce:	5cd3      	ldrb	r3, [r2, r3]
 80035d0:	f003 031f 	and.w	r3, r3, #31
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	fa22 f303 	lsr.w	r3, r2, r3
 80035da:	4a07      	ldr	r2, [pc, #28]	; (80035f8 <HAL_RCC_GetHCLKFreq+0x58>)
 80035dc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035de:	4a07      	ldr	r2, [pc, #28]	; (80035fc <HAL_RCC_GetHCLKFreq+0x5c>)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80035e4:	4b04      	ldr	r3, [pc, #16]	; (80035f8 <HAL_RCC_GetHCLKFreq+0x58>)
 80035e6:	681b      	ldr	r3, [r3, #0]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3708      	adds	r7, #8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	58024400 	.word	0x58024400
 80035f4:	08008c80 	.word	0x08008c80
 80035f8:	24000010 	.word	0x24000010
 80035fc:	2400000c 	.word	0x2400000c

08003600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003604:	f7ff ffcc 	bl	80035a0 <HAL_RCC_GetHCLKFreq>
 8003608:	4602      	mov	r2, r0
 800360a:	4b06      	ldr	r3, [pc, #24]	; (8003624 <HAL_RCC_GetPCLK1Freq+0x24>)
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	091b      	lsrs	r3, r3, #4
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	4904      	ldr	r1, [pc, #16]	; (8003628 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003616:	5ccb      	ldrb	r3, [r1, r3]
 8003618:	f003 031f 	and.w	r3, r3, #31
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003620:	4618      	mov	r0, r3
 8003622:	bd80      	pop	{r7, pc}
 8003624:	58024400 	.word	0x58024400
 8003628:	08008c80 	.word	0x08008c80

0800362c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003630:	f7ff ffb6 	bl	80035a0 <HAL_RCC_GetHCLKFreq>
 8003634:	4602      	mov	r2, r0
 8003636:	4b06      	ldr	r3, [pc, #24]	; (8003650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	0a1b      	lsrs	r3, r3, #8
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	4904      	ldr	r1, [pc, #16]	; (8003654 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003642:	5ccb      	ldrb	r3, [r1, r3]
 8003644:	f003 031f 	and.w	r3, r3, #31
 8003648:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800364c:	4618      	mov	r0, r3
 800364e:	bd80      	pop	{r7, pc}
 8003650:	58024400 	.word	0x58024400
 8003654:	08008c80 	.word	0x08008c80

08003658 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800365c:	b0c8      	sub	sp, #288	; 0x120
 800365e:	af00      	add	r7, sp, #0
 8003660:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003664:	2300      	movs	r3, #0
 8003666:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800366a:	2300      	movs	r3, #0
 800366c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003670:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003678:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800367c:	2500      	movs	r5, #0
 800367e:	ea54 0305 	orrs.w	r3, r4, r5
 8003682:	d049      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003684:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003688:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800368a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800368e:	d02f      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003690:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003694:	d828      	bhi.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003696:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800369a:	d01a      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800369c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036a0:	d822      	bhi.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x56>
 80036a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036aa:	d007      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036ac:	e01c      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036ae:	4ba7      	ldr	r3, [pc, #668]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b2:	4aa6      	ldr	r2, [pc, #664]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036ba:	e01a      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036c0:	3308      	adds	r3, #8
 80036c2:	2102      	movs	r1, #2
 80036c4:	4618      	mov	r0, r3
 80036c6:	f001 fc43 	bl	8004f50 <RCCEx_PLL2_Config>
 80036ca:	4603      	mov	r3, r0
 80036cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036d0:	e00f      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036d6:	3328      	adds	r3, #40	; 0x28
 80036d8:	2102      	movs	r1, #2
 80036da:	4618      	mov	r0, r3
 80036dc:	f001 fcea 	bl	80050b4 <RCCEx_PLL3_Config>
 80036e0:	4603      	mov	r3, r0
 80036e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036e6:	e004      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80036ee:	e000      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80036f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10a      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80036fa:	4b94      	ldr	r3, [pc, #592]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036fe:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003702:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003708:	4a90      	ldr	r2, [pc, #576]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800370a:	430b      	orrs	r3, r1
 800370c:	6513      	str	r3, [r2, #80]	; 0x50
 800370e:	e003      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003710:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003714:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003718:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800371c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003720:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003724:	f04f 0900 	mov.w	r9, #0
 8003728:	ea58 0309 	orrs.w	r3, r8, r9
 800372c:	d047      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800372e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003734:	2b04      	cmp	r3, #4
 8003736:	d82a      	bhi.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003738:	a201      	add	r2, pc, #4	; (adr r2, 8003740 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800373a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800373e:	bf00      	nop
 8003740:	08003755 	.word	0x08003755
 8003744:	08003763 	.word	0x08003763
 8003748:	08003779 	.word	0x08003779
 800374c:	08003797 	.word	0x08003797
 8003750:	08003797 	.word	0x08003797
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003754:	4b7d      	ldr	r3, [pc, #500]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	4a7c      	ldr	r2, [pc, #496]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800375a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800375e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003760:	e01a      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003762:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003766:	3308      	adds	r3, #8
 8003768:	2100      	movs	r1, #0
 800376a:	4618      	mov	r0, r3
 800376c:	f001 fbf0 	bl	8004f50 <RCCEx_PLL2_Config>
 8003770:	4603      	mov	r3, r0
 8003772:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003776:	e00f      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003778:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800377c:	3328      	adds	r3, #40	; 0x28
 800377e:	2100      	movs	r1, #0
 8003780:	4618      	mov	r0, r3
 8003782:	f001 fc97 	bl	80050b4 <RCCEx_PLL3_Config>
 8003786:	4603      	mov	r3, r0
 8003788:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800378c:	e004      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003794:	e000      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003796:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003798:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10a      	bne.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037a0:	4b6a      	ldr	r3, [pc, #424]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a4:	f023 0107 	bic.w	r1, r3, #7
 80037a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ae:	4a67      	ldr	r2, [pc, #412]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037b0:	430b      	orrs	r3, r1
 80037b2:	6513      	str	r3, [r2, #80]	; 0x50
 80037b4:	e003      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037ba:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80037be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80037ca:	f04f 0b00 	mov.w	fp, #0
 80037ce:	ea5a 030b 	orrs.w	r3, sl, fp
 80037d2:	d054      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80037d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037da:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80037de:	d036      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80037e0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80037e4:	d82f      	bhi.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80037e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ea:	d032      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80037ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037f0:	d829      	bhi.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80037f2:	2bc0      	cmp	r3, #192	; 0xc0
 80037f4:	d02f      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80037f6:	2bc0      	cmp	r3, #192	; 0xc0
 80037f8:	d825      	bhi.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80037fa:	2b80      	cmp	r3, #128	; 0x80
 80037fc:	d018      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80037fe:	2b80      	cmp	r3, #128	; 0x80
 8003800:	d821      	bhi.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003802:	2b00      	cmp	r3, #0
 8003804:	d002      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003806:	2b40      	cmp	r3, #64	; 0x40
 8003808:	d007      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800380a:	e01c      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800380c:	4b4f      	ldr	r3, [pc, #316]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003810:	4a4e      	ldr	r2, [pc, #312]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003816:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003818:	e01e      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800381a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800381e:	3308      	adds	r3, #8
 8003820:	2100      	movs	r1, #0
 8003822:	4618      	mov	r0, r3
 8003824:	f001 fb94 	bl	8004f50 <RCCEx_PLL2_Config>
 8003828:	4603      	mov	r3, r0
 800382a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800382e:	e013      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003830:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003834:	3328      	adds	r3, #40	; 0x28
 8003836:	2100      	movs	r1, #0
 8003838:	4618      	mov	r0, r3
 800383a:	f001 fc3b 	bl	80050b4 <RCCEx_PLL3_Config>
 800383e:	4603      	mov	r3, r0
 8003840:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003844:	e008      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800384c:	e004      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800384e:	bf00      	nop
 8003850:	e002      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003852:	bf00      	nop
 8003854:	e000      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003856:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003858:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10a      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003860:	4b3a      	ldr	r3, [pc, #232]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003864:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003868:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800386c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386e:	4a37      	ldr	r2, [pc, #220]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003870:	430b      	orrs	r3, r1
 8003872:	6513      	str	r3, [r2, #80]	; 0x50
 8003874:	e003      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003876:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800387a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800387e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003886:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800388a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800388e:	2300      	movs	r3, #0
 8003890:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003894:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003898:	460b      	mov	r3, r1
 800389a:	4313      	orrs	r3, r2
 800389c:	d05c      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800389e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038a4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80038a8:	d03b      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80038aa:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80038ae:	d834      	bhi.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80038b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038b4:	d037      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80038b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038ba:	d82e      	bhi.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80038bc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80038c0:	d033      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80038c2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80038c6:	d828      	bhi.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80038c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038cc:	d01a      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80038ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038d2:	d822      	bhi.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d003      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80038d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038dc:	d007      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x296>
 80038de:	e01c      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038e0:	4b1a      	ldr	r3, [pc, #104]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e4:	4a19      	ldr	r2, [pc, #100]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80038ec:	e01e      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038f2:	3308      	adds	r3, #8
 80038f4:	2100      	movs	r1, #0
 80038f6:	4618      	mov	r0, r3
 80038f8:	f001 fb2a 	bl	8004f50 <RCCEx_PLL2_Config>
 80038fc:	4603      	mov	r3, r0
 80038fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003902:	e013      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003904:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003908:	3328      	adds	r3, #40	; 0x28
 800390a:	2100      	movs	r1, #0
 800390c:	4618      	mov	r0, r3
 800390e:	f001 fbd1 	bl	80050b4 <RCCEx_PLL3_Config>
 8003912:	4603      	mov	r3, r0
 8003914:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003918:	e008      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003920:	e004      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003922:	bf00      	nop
 8003924:	e002      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003926:	bf00      	nop
 8003928:	e000      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800392a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800392c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10d      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003934:	4b05      	ldr	r3, [pc, #20]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003938:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800393c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003942:	4a02      	ldr	r2, [pc, #8]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003944:	430b      	orrs	r3, r1
 8003946:	6513      	str	r3, [r2, #80]	; 0x50
 8003948:	e006      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800394a:	bf00      	nop
 800394c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003950:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003954:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003958:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800395c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003960:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003964:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003968:	2300      	movs	r3, #0
 800396a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800396e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003972:	460b      	mov	r3, r1
 8003974:	4313      	orrs	r3, r2
 8003976:	d03a      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003978:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800397c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800397e:	2b30      	cmp	r3, #48	; 0x30
 8003980:	d01f      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003982:	2b30      	cmp	r3, #48	; 0x30
 8003984:	d819      	bhi.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003986:	2b20      	cmp	r3, #32
 8003988:	d00c      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800398a:	2b20      	cmp	r3, #32
 800398c:	d815      	bhi.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x362>
 800398e:	2b00      	cmp	r3, #0
 8003990:	d019      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003992:	2b10      	cmp	r3, #16
 8003994:	d111      	bne.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003996:	4bae      	ldr	r3, [pc, #696]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399a:	4aad      	ldr	r2, [pc, #692]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800399c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80039a2:	e011      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039a8:	3308      	adds	r3, #8
 80039aa:	2102      	movs	r1, #2
 80039ac:	4618      	mov	r0, r3
 80039ae:	f001 facf 	bl	8004f50 <RCCEx_PLL2_Config>
 80039b2:	4603      	mov	r3, r0
 80039b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80039b8:	e006      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80039c0:	e002      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80039c2:	bf00      	nop
 80039c4:	e000      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80039c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10a      	bne.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80039d0:	4b9f      	ldr	r3, [pc, #636]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80039d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039de:	4a9c      	ldr	r2, [pc, #624]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039e0:	430b      	orrs	r3, r1
 80039e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039e4:	e003      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039ea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80039ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80039fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80039fe:	2300      	movs	r3, #0
 8003a00:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003a04:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003a08:	460b      	mov	r3, r1
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	d051      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003a0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a18:	d035      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003a1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a1e:	d82e      	bhi.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003a20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a24:	d031      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003a26:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a2a:	d828      	bhi.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a30:	d01a      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a36:	d822      	bhi.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003a3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a40:	d007      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003a42:	e01c      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a44:	4b82      	ldr	r3, [pc, #520]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a48:	4a81      	ldr	r2, [pc, #516]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a50:	e01c      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a56:	3308      	adds	r3, #8
 8003a58:	2100      	movs	r1, #0
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f001 fa78 	bl	8004f50 <RCCEx_PLL2_Config>
 8003a60:	4603      	mov	r3, r0
 8003a62:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a66:	e011      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a6c:	3328      	adds	r3, #40	; 0x28
 8003a6e:	2100      	movs	r1, #0
 8003a70:	4618      	mov	r0, r3
 8003a72:	f001 fb1f 	bl	80050b4 <RCCEx_PLL3_Config>
 8003a76:	4603      	mov	r3, r0
 8003a78:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a7c:	e006      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003a84:	e002      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003a86:	bf00      	nop
 8003a88:	e000      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003a8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a8c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10a      	bne.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003a94:	4b6e      	ldr	r3, [pc, #440]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a98:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003a9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aa2:	4a6b      	ldr	r2, [pc, #428]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003aa4:	430b      	orrs	r3, r1
 8003aa6:	6513      	str	r3, [r2, #80]	; 0x50
 8003aa8:	e003      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aaa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003aae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003ab2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aba:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003abe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003ac8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003acc:	460b      	mov	r3, r1
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	d053      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003ad2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ad6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ad8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003adc:	d033      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003ade:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ae2:	d82c      	bhi.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003ae4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ae8:	d02f      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003aea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003aee:	d826      	bhi.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003af0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003af4:	d02b      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003af6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003afa:	d820      	bhi.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003afc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b00:	d012      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003b02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b06:	d81a      	bhi.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d022      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b10:	d115      	bne.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b16:	3308      	adds	r3, #8
 8003b18:	2101      	movs	r1, #1
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f001 fa18 	bl	8004f50 <RCCEx_PLL2_Config>
 8003b20:	4603      	mov	r3, r0
 8003b22:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b26:	e015      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b2c:	3328      	adds	r3, #40	; 0x28
 8003b2e:	2101      	movs	r1, #1
 8003b30:	4618      	mov	r0, r3
 8003b32:	f001 fabf 	bl	80050b4 <RCCEx_PLL3_Config>
 8003b36:	4603      	mov	r3, r0
 8003b38:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b3c:	e00a      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003b44:	e006      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003b46:	bf00      	nop
 8003b48:	e004      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003b4a:	bf00      	nop
 8003b4c:	e002      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003b4e:	bf00      	nop
 8003b50:	e000      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003b52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b54:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10a      	bne.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003b5c:	4b3c      	ldr	r3, [pc, #240]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b60:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003b64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b6a:	4a39      	ldr	r2, [pc, #228]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b6c:	430b      	orrs	r3, r1
 8003b6e:	6513      	str	r3, [r2, #80]	; 0x50
 8003b70:	e003      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b72:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b76:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003b7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b82:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003b86:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b90:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003b94:	460b      	mov	r3, r1
 8003b96:	4313      	orrs	r3, r2
 8003b98:	d060      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003b9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ba2:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003ba6:	d039      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8003ba8:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003bac:	d832      	bhi.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003bae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bb2:	d035      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003bb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bb8:	d82c      	bhi.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bbe:	d031      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc4:	d826      	bhi.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003bc6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003bca:	d02d      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003bcc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003bd0:	d820      	bhi.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003bd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bd6:	d012      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003bd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bdc:	d81a      	bhi.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d024      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003be2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003be6:	d115      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003be8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bec:	3308      	adds	r3, #8
 8003bee:	2101      	movs	r1, #1
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f001 f9ad 	bl	8004f50 <RCCEx_PLL2_Config>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003bfc:	e017      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c02:	3328      	adds	r3, #40	; 0x28
 8003c04:	2101      	movs	r1, #1
 8003c06:	4618      	mov	r0, r3
 8003c08:	f001 fa54 	bl	80050b4 <RCCEx_PLL3_Config>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c12:	e00c      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003c1a:	e008      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003c1c:	bf00      	nop
 8003c1e:	e006      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003c20:	bf00      	nop
 8003c22:	e004      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003c24:	bf00      	nop
 8003c26:	e002      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003c28:	bf00      	nop
 8003c2a:	e000      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003c2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c2e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10e      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003c36:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c3a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003c3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c46:	4a02      	ldr	r2, [pc, #8]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	6593      	str	r3, [r2, #88]	; 0x58
 8003c4c:	e006      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003c4e:	bf00      	nop
 8003c50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c54:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c58:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c64:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003c68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003c72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c76:	460b      	mov	r3, r1
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	d037      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003c7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c86:	d00e      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003c88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c8c:	d816      	bhi.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d018      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003c92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c96:	d111      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c98:	4bc4      	ldr	r3, [pc, #784]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9c:	4ac3      	ldr	r2, [pc, #780]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ca2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003ca4:	e00f      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ca6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003caa:	3308      	adds	r3, #8
 8003cac:	2101      	movs	r1, #1
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f001 f94e 	bl	8004f50 <RCCEx_PLL2_Config>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003cba:	e004      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003cc2:	e000      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003cc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cc6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10a      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003cce:	4bb7      	ldr	r3, [pc, #732]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003cd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cdc:	4ab3      	ldr	r2, [pc, #716]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cde:	430b      	orrs	r3, r1
 8003ce0:	6513      	str	r3, [r2, #80]	; 0x50
 8003ce2:	e003      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ce8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003cec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003cf8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003d02:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003d06:	460b      	mov	r3, r1
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	d039      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003d0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	d81c      	bhi.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003d16:	a201      	add	r2, pc, #4	; (adr r2, 8003d1c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1c:	08003d59 	.word	0x08003d59
 8003d20:	08003d2d 	.word	0x08003d2d
 8003d24:	08003d3b 	.word	0x08003d3b
 8003d28:	08003d59 	.word	0x08003d59
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d2c:	4b9f      	ldr	r3, [pc, #636]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d30:	4a9e      	ldr	r2, [pc, #632]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d38:	e00f      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d3e:	3308      	adds	r3, #8
 8003d40:	2102      	movs	r1, #2
 8003d42:	4618      	mov	r0, r3
 8003d44:	f001 f904 	bl	8004f50 <RCCEx_PLL2_Config>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d4e:	e004      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003d56:	e000      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003d58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d5a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10a      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003d62:	4b92      	ldr	r3, [pc, #584]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d66:	f023 0103 	bic.w	r1, r3, #3
 8003d6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d70:	4a8e      	ldr	r2, [pc, #568]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d72:	430b      	orrs	r3, r1
 8003d74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d76:	e003      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d78:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d7c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d88:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003d8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d90:	2300      	movs	r3, #0
 8003d92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d96:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	f000 8099 	beq.w	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003da2:	4b83      	ldr	r3, [pc, #524]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a82      	ldr	r2, [pc, #520]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dae:	f7fd fbb3 	bl	8001518 <HAL_GetTick>
 8003db2:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003db6:	e00b      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db8:	f7fd fbae 	bl	8001518 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b64      	cmp	r3, #100	; 0x64
 8003dc6:	d903      	bls.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003dce:	e005      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dd0:	4b77      	ldr	r3, [pc, #476]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0ed      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003ddc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d173      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003de4:	4b71      	ldr	r3, [pc, #452]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003de6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003de8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003df0:	4053      	eors	r3, r2
 8003df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d015      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dfa:	4b6c      	ldr	r3, [pc, #432]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e02:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e06:	4b69      	ldr	r3, [pc, #420]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0a:	4a68      	ldr	r2, [pc, #416]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e10:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e12:	4b66      	ldr	r3, [pc, #408]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e16:	4a65      	ldr	r2, [pc, #404]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e1c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003e1e:	4a63      	ldr	r2, [pc, #396]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e24:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003e26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e32:	d118      	bne.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e34:	f7fd fb70 	bl	8001518 <HAL_GetTick>
 8003e38:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e3c:	e00d      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e3e:	f7fd fb6b 	bl	8001518 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003e48:	1ad2      	subs	r2, r2, r3
 8003e4a:	f241 3388 	movw	r3, #5000	; 0x1388
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d903      	bls.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8003e58:	e005      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e5a:	4b54      	ldr	r3, [pc, #336]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d0eb      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003e66:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d129      	bne.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e7e:	d10e      	bne.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003e80:	4b4a      	ldr	r3, [pc, #296]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003e88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e8c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e90:	091a      	lsrs	r2, r3, #4
 8003e92:	4b48      	ldr	r3, [pc, #288]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003e94:	4013      	ands	r3, r2
 8003e96:	4a45      	ldr	r2, [pc, #276]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e98:	430b      	orrs	r3, r1
 8003e9a:	6113      	str	r3, [r2, #16]
 8003e9c:	e005      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003e9e:	4b43      	ldr	r3, [pc, #268]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	4a42      	ldr	r2, [pc, #264]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ea4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003ea8:	6113      	str	r3, [r2, #16]
 8003eaa:	4b40      	ldr	r3, [pc, #256]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003eac:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003eae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eb2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eba:	4a3c      	ldr	r2, [pc, #240]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ebc:	430b      	orrs	r3, r1
 8003ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec0:	e008      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ec2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ec6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8003eca:	e003      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ecc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ed0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003ed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003edc:	f002 0301 	and.w	r3, r2, #1
 8003ee0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003eea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	f000 8090 	beq.w	8004016 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003ef6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003efe:	2b28      	cmp	r3, #40	; 0x28
 8003f00:	d870      	bhi.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003f02:	a201      	add	r2, pc, #4	; (adr r2, 8003f08 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f08:	08003fed 	.word	0x08003fed
 8003f0c:	08003fe5 	.word	0x08003fe5
 8003f10:	08003fe5 	.word	0x08003fe5
 8003f14:	08003fe5 	.word	0x08003fe5
 8003f18:	08003fe5 	.word	0x08003fe5
 8003f1c:	08003fe5 	.word	0x08003fe5
 8003f20:	08003fe5 	.word	0x08003fe5
 8003f24:	08003fe5 	.word	0x08003fe5
 8003f28:	08003fb9 	.word	0x08003fb9
 8003f2c:	08003fe5 	.word	0x08003fe5
 8003f30:	08003fe5 	.word	0x08003fe5
 8003f34:	08003fe5 	.word	0x08003fe5
 8003f38:	08003fe5 	.word	0x08003fe5
 8003f3c:	08003fe5 	.word	0x08003fe5
 8003f40:	08003fe5 	.word	0x08003fe5
 8003f44:	08003fe5 	.word	0x08003fe5
 8003f48:	08003fcf 	.word	0x08003fcf
 8003f4c:	08003fe5 	.word	0x08003fe5
 8003f50:	08003fe5 	.word	0x08003fe5
 8003f54:	08003fe5 	.word	0x08003fe5
 8003f58:	08003fe5 	.word	0x08003fe5
 8003f5c:	08003fe5 	.word	0x08003fe5
 8003f60:	08003fe5 	.word	0x08003fe5
 8003f64:	08003fe5 	.word	0x08003fe5
 8003f68:	08003fed 	.word	0x08003fed
 8003f6c:	08003fe5 	.word	0x08003fe5
 8003f70:	08003fe5 	.word	0x08003fe5
 8003f74:	08003fe5 	.word	0x08003fe5
 8003f78:	08003fe5 	.word	0x08003fe5
 8003f7c:	08003fe5 	.word	0x08003fe5
 8003f80:	08003fe5 	.word	0x08003fe5
 8003f84:	08003fe5 	.word	0x08003fe5
 8003f88:	08003fed 	.word	0x08003fed
 8003f8c:	08003fe5 	.word	0x08003fe5
 8003f90:	08003fe5 	.word	0x08003fe5
 8003f94:	08003fe5 	.word	0x08003fe5
 8003f98:	08003fe5 	.word	0x08003fe5
 8003f9c:	08003fe5 	.word	0x08003fe5
 8003fa0:	08003fe5 	.word	0x08003fe5
 8003fa4:	08003fe5 	.word	0x08003fe5
 8003fa8:	08003fed 	.word	0x08003fed
 8003fac:	58024400 	.word	0x58024400
 8003fb0:	58024800 	.word	0x58024800
 8003fb4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fbc:	3308      	adds	r3, #8
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f000 ffc5 	bl	8004f50 <RCCEx_PLL2_Config>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003fcc:	e00f      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fd2:	3328      	adds	r3, #40	; 0x28
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f001 f86c 	bl	80050b4 <RCCEx_PLL3_Config>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003fe2:	e004      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003fea:	e000      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003fec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10b      	bne.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003ff6:	4bc0      	ldr	r3, [pc, #768]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffa:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003ffe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004002:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004006:	4abc      	ldr	r2, [pc, #752]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004008:	430b      	orrs	r3, r1
 800400a:	6553      	str	r3, [r2, #84]	; 0x54
 800400c:	e003      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800400e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004012:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004016:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800401a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401e:	f002 0302 	and.w	r3, r2, #2
 8004022:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004026:	2300      	movs	r3, #0
 8004028:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800402c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004030:	460b      	mov	r3, r1
 8004032:	4313      	orrs	r3, r2
 8004034:	d043      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004036:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800403a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800403e:	2b05      	cmp	r3, #5
 8004040:	d824      	bhi.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8004042:	a201      	add	r2, pc, #4	; (adr r2, 8004048 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8004044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004048:	08004095 	.word	0x08004095
 800404c:	08004061 	.word	0x08004061
 8004050:	08004077 	.word	0x08004077
 8004054:	08004095 	.word	0x08004095
 8004058:	08004095 	.word	0x08004095
 800405c:	08004095 	.word	0x08004095
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004060:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004064:	3308      	adds	r3, #8
 8004066:	2101      	movs	r1, #1
 8004068:	4618      	mov	r0, r3
 800406a:	f000 ff71 	bl	8004f50 <RCCEx_PLL2_Config>
 800406e:	4603      	mov	r3, r0
 8004070:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004074:	e00f      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004076:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800407a:	3328      	adds	r3, #40	; 0x28
 800407c:	2101      	movs	r1, #1
 800407e:	4618      	mov	r0, r3
 8004080:	f001 f818 	bl	80050b4 <RCCEx_PLL3_Config>
 8004084:	4603      	mov	r3, r0
 8004086:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800408a:	e004      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004092:	e000      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8004094:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004096:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10b      	bne.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800409e:	4b96      	ldr	r3, [pc, #600]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80040a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a2:	f023 0107 	bic.w	r1, r3, #7
 80040a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040ae:	4a92      	ldr	r2, [pc, #584]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80040b0:	430b      	orrs	r3, r1
 80040b2:	6553      	str	r3, [r2, #84]	; 0x54
 80040b4:	e003      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040ba:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c6:	f002 0304 	and.w	r3, r2, #4
 80040ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040ce:	2300      	movs	r3, #0
 80040d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040d4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80040d8:	460b      	mov	r3, r1
 80040da:	4313      	orrs	r3, r2
 80040dc:	d043      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80040de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040e6:	2b05      	cmp	r3, #5
 80040e8:	d824      	bhi.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80040ea:	a201      	add	r2, pc, #4	; (adr r2, 80040f0 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80040ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f0:	0800413d 	.word	0x0800413d
 80040f4:	08004109 	.word	0x08004109
 80040f8:	0800411f 	.word	0x0800411f
 80040fc:	0800413d 	.word	0x0800413d
 8004100:	0800413d 	.word	0x0800413d
 8004104:	0800413d 	.word	0x0800413d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004108:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800410c:	3308      	adds	r3, #8
 800410e:	2101      	movs	r1, #1
 8004110:	4618      	mov	r0, r3
 8004112:	f000 ff1d 	bl	8004f50 <RCCEx_PLL2_Config>
 8004116:	4603      	mov	r3, r0
 8004118:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800411c:	e00f      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800411e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004122:	3328      	adds	r3, #40	; 0x28
 8004124:	2101      	movs	r1, #1
 8004126:	4618      	mov	r0, r3
 8004128:	f000 ffc4 	bl	80050b4 <RCCEx_PLL3_Config>
 800412c:	4603      	mov	r3, r0
 800412e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004132:	e004      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800413a:	e000      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800413c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800413e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10b      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004146:	4b6c      	ldr	r3, [pc, #432]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800414a:	f023 0107 	bic.w	r1, r3, #7
 800414e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004152:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004156:	4a68      	ldr	r2, [pc, #416]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004158:	430b      	orrs	r3, r1
 800415a:	6593      	str	r3, [r2, #88]	; 0x58
 800415c:	e003      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800415e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004162:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004166:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800416a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416e:	f002 0320 	and.w	r3, r2, #32
 8004172:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004176:	2300      	movs	r3, #0
 8004178:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800417c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004180:	460b      	mov	r3, r1
 8004182:	4313      	orrs	r3, r2
 8004184:	d055      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004186:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800418a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800418e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004192:	d033      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004194:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004198:	d82c      	bhi.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800419a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800419e:	d02f      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80041a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a4:	d826      	bhi.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80041a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041aa:	d02b      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80041ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041b0:	d820      	bhi.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80041b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041b6:	d012      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80041b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041bc:	d81a      	bhi.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d022      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80041c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041c6:	d115      	bne.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041cc:	3308      	adds	r3, #8
 80041ce:	2100      	movs	r1, #0
 80041d0:	4618      	mov	r0, r3
 80041d2:	f000 febd 	bl	8004f50 <RCCEx_PLL2_Config>
 80041d6:	4603      	mov	r3, r0
 80041d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80041dc:	e015      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041e2:	3328      	adds	r3, #40	; 0x28
 80041e4:	2102      	movs	r1, #2
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 ff64 	bl	80050b4 <RCCEx_PLL3_Config>
 80041ec:	4603      	mov	r3, r0
 80041ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80041f2:	e00a      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80041fa:	e006      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80041fc:	bf00      	nop
 80041fe:	e004      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004200:	bf00      	nop
 8004202:	e002      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004204:	bf00      	nop
 8004206:	e000      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004208:	bf00      	nop
    }

    if (ret == HAL_OK)
 800420a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10b      	bne.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004212:	4b39      	ldr	r3, [pc, #228]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004216:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800421a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800421e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004222:	4a35      	ldr	r2, [pc, #212]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004224:	430b      	orrs	r3, r1
 8004226:	6553      	str	r3, [r2, #84]	; 0x54
 8004228:	e003      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800422a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800422e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004232:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800423e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004242:	2300      	movs	r3, #0
 8004244:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004248:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800424c:	460b      	mov	r3, r1
 800424e:	4313      	orrs	r3, r2
 8004250:	d058      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004252:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004256:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800425a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800425e:	d033      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004260:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004264:	d82c      	bhi.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800426a:	d02f      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800426c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004270:	d826      	bhi.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004272:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004276:	d02b      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004278:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800427c:	d820      	bhi.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800427e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004282:	d012      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8004284:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004288:	d81a      	bhi.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800428a:	2b00      	cmp	r3, #0
 800428c:	d022      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800428e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004292:	d115      	bne.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004294:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004298:	3308      	adds	r3, #8
 800429a:	2100      	movs	r1, #0
 800429c:	4618      	mov	r0, r3
 800429e:	f000 fe57 	bl	8004f50 <RCCEx_PLL2_Config>
 80042a2:	4603      	mov	r3, r0
 80042a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80042a8:	e015      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042ae:	3328      	adds	r3, #40	; 0x28
 80042b0:	2102      	movs	r1, #2
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 fefe 	bl	80050b4 <RCCEx_PLL3_Config>
 80042b8:	4603      	mov	r3, r0
 80042ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80042be:	e00a      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80042c6:	e006      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80042c8:	bf00      	nop
 80042ca:	e004      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80042cc:	bf00      	nop
 80042ce:	e002      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80042d0:	bf00      	nop
 80042d2:	e000      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80042d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042d6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10e      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042de:	4b06      	ldr	r3, [pc, #24]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80042e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80042e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80042ee:	4a02      	ldr	r2, [pc, #8]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80042f0:	430b      	orrs	r3, r1
 80042f2:	6593      	str	r3, [r2, #88]	; 0x58
 80042f4:	e006      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80042f6:	bf00      	nop
 80042f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004300:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004304:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004310:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004314:	2300      	movs	r3, #0
 8004316:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800431a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800431e:	460b      	mov	r3, r1
 8004320:	4313      	orrs	r3, r2
 8004322:	d055      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004324:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004328:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800432c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004330:	d033      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004332:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004336:	d82c      	bhi.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004338:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800433c:	d02f      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800433e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004342:	d826      	bhi.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004344:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004348:	d02b      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800434a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800434e:	d820      	bhi.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004350:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004354:	d012      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8004356:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800435a:	d81a      	bhi.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800435c:	2b00      	cmp	r3, #0
 800435e:	d022      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004360:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004364:	d115      	bne.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004366:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800436a:	3308      	adds	r3, #8
 800436c:	2100      	movs	r1, #0
 800436e:	4618      	mov	r0, r3
 8004370:	f000 fdee 	bl	8004f50 <RCCEx_PLL2_Config>
 8004374:	4603      	mov	r3, r0
 8004376:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800437a:	e015      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800437c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004380:	3328      	adds	r3, #40	; 0x28
 8004382:	2102      	movs	r1, #2
 8004384:	4618      	mov	r0, r3
 8004386:	f000 fe95 	bl	80050b4 <RCCEx_PLL3_Config>
 800438a:	4603      	mov	r3, r0
 800438c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004390:	e00a      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004398:	e006      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800439a:	bf00      	nop
 800439c:	e004      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800439e:	bf00      	nop
 80043a0:	e002      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80043a2:	bf00      	nop
 80043a4:	e000      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80043a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10b      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80043b0:	4ba1      	ldr	r3, [pc, #644]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80043b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80043b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80043c0:	4a9d      	ldr	r2, [pc, #628]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80043c2:	430b      	orrs	r3, r1
 80043c4:	6593      	str	r3, [r2, #88]	; 0x58
 80043c6:	e003      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043cc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80043d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d8:	f002 0308 	and.w	r3, r2, #8
 80043dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80043e0:	2300      	movs	r3, #0
 80043e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80043e6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80043ea:	460b      	mov	r3, r1
 80043ec:	4313      	orrs	r3, r2
 80043ee:	d01e      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80043f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043fc:	d10c      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004402:	3328      	adds	r3, #40	; 0x28
 8004404:	2102      	movs	r1, #2
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fe54 	bl	80050b4 <RCCEx_PLL3_Config>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d002      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004418:	4b87      	ldr	r3, [pc, #540]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800441a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004420:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004428:	4a83      	ldr	r2, [pc, #524]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800442a:	430b      	orrs	r3, r1
 800442c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800442e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004436:	f002 0310 	and.w	r3, r2, #16
 800443a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800443e:	2300      	movs	r3, #0
 8004440:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004444:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004448:	460b      	mov	r3, r1
 800444a:	4313      	orrs	r3, r2
 800444c:	d01e      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800444e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004452:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800445a:	d10c      	bne.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800445c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004460:	3328      	adds	r3, #40	; 0x28
 8004462:	2102      	movs	r1, #2
 8004464:	4618      	mov	r0, r3
 8004466:	f000 fe25 	bl	80050b4 <RCCEx_PLL3_Config>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d002      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004476:	4b70      	ldr	r3, [pc, #448]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800447a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800447e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004482:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004486:	4a6c      	ldr	r2, [pc, #432]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004488:	430b      	orrs	r3, r1
 800448a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800448c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004494:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004498:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800449c:	2300      	movs	r3, #0
 800449e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80044a2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80044a6:	460b      	mov	r3, r1
 80044a8:	4313      	orrs	r3, r2
 80044aa:	d03e      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80044ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80044b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044b8:	d022      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80044ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044be:	d81b      	bhi.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80044c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044c8:	d00b      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80044ca:	e015      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044d0:	3308      	adds	r3, #8
 80044d2:	2100      	movs	r1, #0
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 fd3b 	bl	8004f50 <RCCEx_PLL2_Config>
 80044da:	4603      	mov	r3, r0
 80044dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80044e0:	e00f      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044e6:	3328      	adds	r3, #40	; 0x28
 80044e8:	2102      	movs	r1, #2
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 fde2 	bl	80050b4 <RCCEx_PLL3_Config>
 80044f0:	4603      	mov	r3, r0
 80044f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80044f6:	e004      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80044fe:	e000      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004500:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004502:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10b      	bne.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800450a:	4b4b      	ldr	r3, [pc, #300]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800450c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800450e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004512:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004516:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800451a:	4a47      	ldr	r2, [pc, #284]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800451c:	430b      	orrs	r3, r1
 800451e:	6593      	str	r3, [r2, #88]	; 0x58
 8004520:	e003      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004522:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004526:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800452a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800452e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004532:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004536:	67bb      	str	r3, [r7, #120]	; 0x78
 8004538:	2300      	movs	r3, #0
 800453a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800453c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004540:	460b      	mov	r3, r1
 8004542:	4313      	orrs	r3, r2
 8004544:	d03b      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004546:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800454a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800454e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004552:	d01f      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004554:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004558:	d818      	bhi.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800455a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800455e:	d003      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004560:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004564:	d007      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8004566:	e011      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004568:	4b33      	ldr	r3, [pc, #204]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800456a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456c:	4a32      	ldr	r2, [pc, #200]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800456e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004572:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004574:	e00f      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004576:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800457a:	3328      	adds	r3, #40	; 0x28
 800457c:	2101      	movs	r1, #1
 800457e:	4618      	mov	r0, r3
 8004580:	f000 fd98 	bl	80050b4 <RCCEx_PLL3_Config>
 8004584:	4603      	mov	r3, r0
 8004586:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800458a:	e004      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004592:	e000      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004594:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004596:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10b      	bne.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800459e:	4b26      	ldr	r3, [pc, #152]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80045a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80045a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ae:	4a22      	ldr	r2, [pc, #136]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80045b0:	430b      	orrs	r3, r1
 80045b2:	6553      	str	r3, [r2, #84]	; 0x54
 80045b4:	e003      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045ba:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80045be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80045ca:	673b      	str	r3, [r7, #112]	; 0x70
 80045cc:	2300      	movs	r3, #0
 80045ce:	677b      	str	r3, [r7, #116]	; 0x74
 80045d0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80045d4:	460b      	mov	r3, r1
 80045d6:	4313      	orrs	r3, r2
 80045d8:	d034      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80045da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d003      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80045e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045e8:	d007      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80045ea:	e011      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045ec:	4b12      	ldr	r3, [pc, #72]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80045ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f0:	4a11      	ldr	r2, [pc, #68]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80045f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80045f8:	e00e      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045fe:	3308      	adds	r3, #8
 8004600:	2102      	movs	r1, #2
 8004602:	4618      	mov	r0, r3
 8004604:	f000 fca4 	bl	8004f50 <RCCEx_PLL2_Config>
 8004608:	4603      	mov	r3, r0
 800460a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800460e:	e003      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004616:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004618:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10d      	bne.n	800463c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004620:	4b05      	ldr	r3, [pc, #20]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004624:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004628:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800462c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800462e:	4a02      	ldr	r2, [pc, #8]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004630:	430b      	orrs	r3, r1
 8004632:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004634:	e006      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004636:	bf00      	nop
 8004638:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800463c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004640:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004644:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004650:	66bb      	str	r3, [r7, #104]	; 0x68
 8004652:	2300      	movs	r3, #0
 8004654:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004656:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800465a:	460b      	mov	r3, r1
 800465c:	4313      	orrs	r3, r2
 800465e:	d00c      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004660:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004664:	3328      	adds	r3, #40	; 0x28
 8004666:	2102      	movs	r1, #2
 8004668:	4618      	mov	r0, r3
 800466a:	f000 fd23 	bl	80050b4 <RCCEx_PLL3_Config>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d002      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800467a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800467e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004682:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004686:	663b      	str	r3, [r7, #96]	; 0x60
 8004688:	2300      	movs	r3, #0
 800468a:	667b      	str	r3, [r7, #100]	; 0x64
 800468c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004690:	460b      	mov	r3, r1
 8004692:	4313      	orrs	r3, r2
 8004694:	d038      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004696:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800469a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046a2:	d018      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80046a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046a8:	d811      	bhi.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80046aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046ae:	d014      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80046b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046b4:	d80b      	bhi.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d011      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80046ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046be:	d106      	bne.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046c0:	4bc3      	ldr	r3, [pc, #780]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80046c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c4:	4ac2      	ldr	r2, [pc, #776]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80046c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80046cc:	e008      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80046d4:	e004      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80046d6:	bf00      	nop
 80046d8:	e002      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80046da:	bf00      	nop
 80046dc:	e000      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80046de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10b      	bne.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046e8:	4bb9      	ldr	r3, [pc, #740]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80046ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ec:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80046f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f8:	4ab5      	ldr	r2, [pc, #724]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80046fa:	430b      	orrs	r3, r1
 80046fc:	6553      	str	r3, [r2, #84]	; 0x54
 80046fe:	e003      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004700:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004704:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004708:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800470c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004710:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004714:	65bb      	str	r3, [r7, #88]	; 0x58
 8004716:	2300      	movs	r3, #0
 8004718:	65fb      	str	r3, [r7, #92]	; 0x5c
 800471a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800471e:	460b      	mov	r3, r1
 8004720:	4313      	orrs	r3, r2
 8004722:	d009      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004724:	4baa      	ldr	r3, [pc, #680]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004728:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800472c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004730:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004732:	4aa7      	ldr	r2, [pc, #668]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004734:	430b      	orrs	r3, r1
 8004736:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004738:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800473c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004740:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004744:	653b      	str	r3, [r7, #80]	; 0x50
 8004746:	2300      	movs	r3, #0
 8004748:	657b      	str	r3, [r7, #84]	; 0x54
 800474a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800474e:	460b      	mov	r3, r1
 8004750:	4313      	orrs	r3, r2
 8004752:	d009      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004754:	4b9e      	ldr	r3, [pc, #632]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004758:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800475c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004762:	4a9b      	ldr	r2, [pc, #620]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004764:	430b      	orrs	r3, r1
 8004766:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004768:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800476c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004770:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004774:	64bb      	str	r3, [r7, #72]	; 0x48
 8004776:	2300      	movs	r3, #0
 8004778:	64fb      	str	r3, [r7, #76]	; 0x4c
 800477a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800477e:	460b      	mov	r3, r1
 8004780:	4313      	orrs	r3, r2
 8004782:	d009      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004784:	4b92      	ldr	r3, [pc, #584]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004788:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 800478c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004792:	4a8f      	ldr	r2, [pc, #572]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004794:	430b      	orrs	r3, r1
 8004796:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004798:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800479c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a0:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80047a4:	643b      	str	r3, [r7, #64]	; 0x40
 80047a6:	2300      	movs	r3, #0
 80047a8:	647b      	str	r3, [r7, #68]	; 0x44
 80047aa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80047ae:	460b      	mov	r3, r1
 80047b0:	4313      	orrs	r3, r2
 80047b2:	d00e      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80047b4:	4b86      	ldr	r3, [pc, #536]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	4a85      	ldr	r2, [pc, #532]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80047ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80047be:	6113      	str	r3, [r2, #16]
 80047c0:	4b83      	ldr	r3, [pc, #524]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80047c2:	6919      	ldr	r1, [r3, #16]
 80047c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80047cc:	4a80      	ldr	r2, [pc, #512]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80047ce:	430b      	orrs	r3, r1
 80047d0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80047d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047da:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80047de:	63bb      	str	r3, [r7, #56]	; 0x38
 80047e0:	2300      	movs	r3, #0
 80047e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047e4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80047e8:	460b      	mov	r3, r1
 80047ea:	4313      	orrs	r3, r2
 80047ec:	d009      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80047ee:	4b78      	ldr	r3, [pc, #480]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80047f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047f2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80047f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fc:	4a74      	ldr	r2, [pc, #464]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80047fe:	430b      	orrs	r3, r1
 8004800:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004802:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800480e:	633b      	str	r3, [r7, #48]	; 0x30
 8004810:	2300      	movs	r3, #0
 8004812:	637b      	str	r3, [r7, #52]	; 0x34
 8004814:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004818:	460b      	mov	r3, r1
 800481a:	4313      	orrs	r3, r2
 800481c:	d00a      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800481e:	4b6c      	ldr	r3, [pc, #432]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004822:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004826:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800482a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800482e:	4a68      	ldr	r2, [pc, #416]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004830:	430b      	orrs	r3, r1
 8004832:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004834:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483c:	2100      	movs	r1, #0
 800483e:	62b9      	str	r1, [r7, #40]	; 0x28
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004846:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800484a:	460b      	mov	r3, r1
 800484c:	4313      	orrs	r3, r2
 800484e:	d011      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004850:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004854:	3308      	adds	r3, #8
 8004856:	2100      	movs	r1, #0
 8004858:	4618      	mov	r0, r3
 800485a:	f000 fb79 	bl	8004f50 <RCCEx_PLL2_Config>
 800485e:	4603      	mov	r3, r0
 8004860:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004864:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004868:	2b00      	cmp	r3, #0
 800486a:	d003      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800486c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004870:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004874:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487c:	2100      	movs	r1, #0
 800487e:	6239      	str	r1, [r7, #32]
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	627b      	str	r3, [r7, #36]	; 0x24
 8004886:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800488a:	460b      	mov	r3, r1
 800488c:	4313      	orrs	r3, r2
 800488e:	d011      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004890:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004894:	3308      	adds	r3, #8
 8004896:	2101      	movs	r1, #1
 8004898:	4618      	mov	r0, r3
 800489a:	f000 fb59 	bl	8004f50 <RCCEx_PLL2_Config>
 800489e:	4603      	mov	r3, r0
 80048a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80048a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048b0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80048b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048bc:	2100      	movs	r1, #0
 80048be:	61b9      	str	r1, [r7, #24]
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	61fb      	str	r3, [r7, #28]
 80048c6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80048ca:	460b      	mov	r3, r1
 80048cc:	4313      	orrs	r3, r2
 80048ce:	d011      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048d4:	3308      	adds	r3, #8
 80048d6:	2102      	movs	r1, #2
 80048d8:	4618      	mov	r0, r3
 80048da:	f000 fb39 	bl	8004f50 <RCCEx_PLL2_Config>
 80048de:	4603      	mov	r3, r0
 80048e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80048e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d003      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048f0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80048f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fc:	2100      	movs	r1, #0
 80048fe:	6139      	str	r1, [r7, #16]
 8004900:	f003 0308 	and.w	r3, r3, #8
 8004904:	617b      	str	r3, [r7, #20]
 8004906:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800490a:	460b      	mov	r3, r1
 800490c:	4313      	orrs	r3, r2
 800490e:	d011      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004910:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004914:	3328      	adds	r3, #40	; 0x28
 8004916:	2100      	movs	r1, #0
 8004918:	4618      	mov	r0, r3
 800491a:	f000 fbcb 	bl	80050b4 <RCCEx_PLL3_Config>
 800491e:	4603      	mov	r3, r0
 8004920:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8004924:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004928:	2b00      	cmp	r3, #0
 800492a:	d003      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800492c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004930:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004934:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493c:	2100      	movs	r1, #0
 800493e:	60b9      	str	r1, [r7, #8]
 8004940:	f003 0310 	and.w	r3, r3, #16
 8004944:	60fb      	str	r3, [r7, #12]
 8004946:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800494a:	460b      	mov	r3, r1
 800494c:	4313      	orrs	r3, r2
 800494e:	d011      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004950:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004954:	3328      	adds	r3, #40	; 0x28
 8004956:	2101      	movs	r1, #1
 8004958:	4618      	mov	r0, r3
 800495a:	f000 fbab 	bl	80050b4 <RCCEx_PLL3_Config>
 800495e:	4603      	mov	r3, r0
 8004960:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004964:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800496c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004970:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004974:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497c:	2100      	movs	r1, #0
 800497e:	6039      	str	r1, [r7, #0]
 8004980:	f003 0320 	and.w	r3, r3, #32
 8004984:	607b      	str	r3, [r7, #4]
 8004986:	e9d7 1200 	ldrd	r1, r2, [r7]
 800498a:	460b      	mov	r3, r1
 800498c:	4313      	orrs	r3, r2
 800498e:	d011      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004990:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004994:	3328      	adds	r3, #40	; 0x28
 8004996:	2102      	movs	r1, #2
 8004998:	4618      	mov	r0, r3
 800499a:	f000 fb8b 	bl	80050b4 <RCCEx_PLL3_Config>
 800499e:	4603      	mov	r3, r0
 80049a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80049a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d003      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80049b0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80049b4:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80049bc:	2300      	movs	r3, #0
 80049be:	e000      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80049c8:	46bd      	mov	sp, r7
 80049ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049ce:	bf00      	nop
 80049d0:	58024400 	.word	0x58024400

080049d4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80049d8:	f7fe fde2 	bl	80035a0 <HAL_RCC_GetHCLKFreq>
 80049dc:	4602      	mov	r2, r0
 80049de:	4b06      	ldr	r3, [pc, #24]	; (80049f8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	091b      	lsrs	r3, r3, #4
 80049e4:	f003 0307 	and.w	r3, r3, #7
 80049e8:	4904      	ldr	r1, [pc, #16]	; (80049fc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80049ea:	5ccb      	ldrb	r3, [r1, r3]
 80049ec:	f003 031f 	and.w	r3, r3, #31
 80049f0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	58024400 	.word	0x58024400
 80049fc:	08008c80 	.word	0x08008c80

08004a00 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b089      	sub	sp, #36	; 0x24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a08:	4ba1      	ldr	r3, [pc, #644]	; (8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0c:	f003 0303 	and.w	r3, r3, #3
 8004a10:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004a12:	4b9f      	ldr	r3, [pc, #636]	; (8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a16:	0b1b      	lsrs	r3, r3, #12
 8004a18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a1c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004a1e:	4b9c      	ldr	r3, [pc, #624]	; (8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a22:	091b      	lsrs	r3, r3, #4
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004a2a:	4b99      	ldr	r3, [pc, #612]	; (8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a2e:	08db      	lsrs	r3, r3, #3
 8004a30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	fb02 f303 	mul.w	r3, r2, r3
 8004a3a:	ee07 3a90 	vmov	s15, r3
 8004a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f000 8111 	beq.w	8004c70 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	f000 8083 	beq.w	8004b5c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	f200 80a1 	bhi.w	8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d056      	beq.n	8004b18 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004a6a:	e099      	b.n	8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a6c:	4b88      	ldr	r3, [pc, #544]	; (8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0320 	and.w	r3, r3, #32
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d02d      	beq.n	8004ad4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a78:	4b85      	ldr	r3, [pc, #532]	; (8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	08db      	lsrs	r3, r3, #3
 8004a7e:	f003 0303 	and.w	r3, r3, #3
 8004a82:	4a84      	ldr	r2, [pc, #528]	; (8004c94 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004a84:	fa22 f303 	lsr.w	r3, r2, r3
 8004a88:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	ee07 3a90 	vmov	s15, r3
 8004a90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	ee07 3a90 	vmov	s15, r3
 8004a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aa2:	4b7b      	ldr	r3, [pc, #492]	; (8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aaa:	ee07 3a90 	vmov	s15, r3
 8004aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ab2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ab6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004c98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ac2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ace:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004ad2:	e087      	b.n	8004be4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	ee07 3a90 	vmov	s15, r3
 8004ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ade:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004c9c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ae6:	4b6a      	ldr	r3, [pc, #424]	; (8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aee:	ee07 3a90 	vmov	s15, r3
 8004af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004af6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004afa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004c98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b16:	e065      	b.n	8004be4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	ee07 3a90 	vmov	s15, r3
 8004b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b22:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b2a:	4b59      	ldr	r3, [pc, #356]	; (8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b32:	ee07 3a90 	vmov	s15, r3
 8004b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b3e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004c98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b5a:	e043      	b.n	8004be4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	ee07 3a90 	vmov	s15, r3
 8004b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b66:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b6e:	4b48      	ldr	r3, [pc, #288]	; (8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b76:	ee07 3a90 	vmov	s15, r3
 8004b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b82:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004c98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b9e:	e021      	b.n	8004be4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	ee07 3a90 	vmov	s15, r3
 8004ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004baa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bb2:	4b37      	ldr	r3, [pc, #220]	; (8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bba:	ee07 3a90 	vmov	s15, r3
 8004bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bc6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004c98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004be2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004be4:	4b2a      	ldr	r3, [pc, #168]	; (8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be8:	0a5b      	lsrs	r3, r3, #9
 8004bea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bee:	ee07 3a90 	vmov	s15, r3
 8004bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c0a:	ee17 2a90 	vmov	r2, s15
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004c12:	4b1f      	ldr	r3, [pc, #124]	; (8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c16:	0c1b      	lsrs	r3, r3, #16
 8004c18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c1c:	ee07 3a90 	vmov	s15, r3
 8004c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c38:	ee17 2a90 	vmov	r2, s15
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004c40:	4b13      	ldr	r3, [pc, #76]	; (8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c44:	0e1b      	lsrs	r3, r3, #24
 8004c46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c4a:	ee07 3a90 	vmov	s15, r3
 8004c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c66:	ee17 2a90 	vmov	r2, s15
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004c6e:	e008      	b.n	8004c82 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	609a      	str	r2, [r3, #8]
}
 8004c82:	bf00      	nop
 8004c84:	3724      	adds	r7, #36	; 0x24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	58024400 	.word	0x58024400
 8004c94:	03d09000 	.word	0x03d09000
 8004c98:	46000000 	.word	0x46000000
 8004c9c:	4c742400 	.word	0x4c742400
 8004ca0:	4a742400 	.word	0x4a742400
 8004ca4:	4af42400 	.word	0x4af42400

08004ca8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b089      	sub	sp, #36	; 0x24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004cb0:	4ba1      	ldr	r3, [pc, #644]	; (8004f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb4:	f003 0303 	and.w	r3, r3, #3
 8004cb8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004cba:	4b9f      	ldr	r3, [pc, #636]	; (8004f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cbe:	0d1b      	lsrs	r3, r3, #20
 8004cc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cc4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004cc6:	4b9c      	ldr	r3, [pc, #624]	; (8004f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cca:	0a1b      	lsrs	r3, r3, #8
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004cd2:	4b99      	ldr	r3, [pc, #612]	; (8004f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd6:	08db      	lsrs	r3, r3, #3
 8004cd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	fb02 f303 	mul.w	r3, r2, r3
 8004ce2:	ee07 3a90 	vmov	s15, r3
 8004ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 8111 	beq.w	8004f18 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	f000 8083 	beq.w	8004e04 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	f200 80a1 	bhi.w	8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d056      	beq.n	8004dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004d12:	e099      	b.n	8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d14:	4b88      	ldr	r3, [pc, #544]	; (8004f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0320 	and.w	r3, r3, #32
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d02d      	beq.n	8004d7c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d20:	4b85      	ldr	r3, [pc, #532]	; (8004f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	08db      	lsrs	r3, r3, #3
 8004d26:	f003 0303 	and.w	r3, r3, #3
 8004d2a:	4a84      	ldr	r2, [pc, #528]	; (8004f3c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d30:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	ee07 3a90 	vmov	s15, r3
 8004d38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	ee07 3a90 	vmov	s15, r3
 8004d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d4a:	4b7b      	ldr	r3, [pc, #492]	; (8004f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d52:	ee07 3a90 	vmov	s15, r3
 8004d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d5e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004f40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d76:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004d7a:	e087      	b.n	8004e8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	ee07 3a90 	vmov	s15, r3
 8004d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d86:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004f44 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d8e:	4b6a      	ldr	r3, [pc, #424]	; (8004f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d96:	ee07 3a90 	vmov	s15, r3
 8004d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004da2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004f40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dbe:	e065      	b.n	8004e8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	ee07 3a90 	vmov	s15, r3
 8004dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004f48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dd2:	4b59      	ldr	r3, [pc, #356]	; (8004f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dda:	ee07 3a90 	vmov	s15, r3
 8004dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004de2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004de6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004f40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004dea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004df2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e02:	e043      	b.n	8004e8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	ee07 3a90 	vmov	s15, r3
 8004e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e0e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e16:	4b48      	ldr	r3, [pc, #288]	; (8004f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e1e:	ee07 3a90 	vmov	s15, r3
 8004e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e26:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e2a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004f40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e46:	e021      	b.n	8004e8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	ee07 3a90 	vmov	s15, r3
 8004e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e52:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004f48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e5a:	4b37      	ldr	r3, [pc, #220]	; (8004f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e62:	ee07 3a90 	vmov	s15, r3
 8004e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e6e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004f40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e8a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004e8c:	4b2a      	ldr	r3, [pc, #168]	; (8004f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e90:	0a5b      	lsrs	r3, r3, #9
 8004e92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e96:	ee07 3a90 	vmov	s15, r3
 8004e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ea2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ea6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004eaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004eae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004eb2:	ee17 2a90 	vmov	r2, s15
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004eba:	4b1f      	ldr	r3, [pc, #124]	; (8004f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebe:	0c1b      	lsrs	r3, r3, #16
 8004ec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ec4:	ee07 3a90 	vmov	s15, r3
 8004ec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ecc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ed0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ed4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ed8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004edc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ee0:	ee17 2a90 	vmov	r2, s15
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004ee8:	4b13      	ldr	r3, [pc, #76]	; (8004f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eec:	0e1b      	lsrs	r3, r3, #24
 8004eee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ef2:	ee07 3a90 	vmov	s15, r3
 8004ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004efa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004efe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f02:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f0e:	ee17 2a90 	vmov	r2, s15
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004f16:	e008      	b.n	8004f2a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	609a      	str	r2, [r3, #8]
}
 8004f2a:	bf00      	nop
 8004f2c:	3724      	adds	r7, #36	; 0x24
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	58024400 	.word	0x58024400
 8004f3c:	03d09000 	.word	0x03d09000
 8004f40:	46000000 	.word	0x46000000
 8004f44:	4c742400 	.word	0x4c742400
 8004f48:	4a742400 	.word	0x4a742400
 8004f4c:	4af42400 	.word	0x4af42400

08004f50 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f5e:	4b53      	ldr	r3, [pc, #332]	; (80050ac <RCCEx_PLL2_Config+0x15c>)
 8004f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f62:	f003 0303 	and.w	r3, r3, #3
 8004f66:	2b03      	cmp	r3, #3
 8004f68:	d101      	bne.n	8004f6e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e099      	b.n	80050a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004f6e:	4b4f      	ldr	r3, [pc, #316]	; (80050ac <RCCEx_PLL2_Config+0x15c>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a4e      	ldr	r2, [pc, #312]	; (80050ac <RCCEx_PLL2_Config+0x15c>)
 8004f74:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f7a:	f7fc facd 	bl	8001518 <HAL_GetTick>
 8004f7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f80:	e008      	b.n	8004f94 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f82:	f7fc fac9 	bl	8001518 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d901      	bls.n	8004f94 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e086      	b.n	80050a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f94:	4b45      	ldr	r3, [pc, #276]	; (80050ac <RCCEx_PLL2_Config+0x15c>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1f0      	bne.n	8004f82 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004fa0:	4b42      	ldr	r3, [pc, #264]	; (80050ac <RCCEx_PLL2_Config+0x15c>)
 8004fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	031b      	lsls	r3, r3, #12
 8004fae:	493f      	ldr	r1, [pc, #252]	; (80050ac <RCCEx_PLL2_Config+0x15c>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	628b      	str	r3, [r1, #40]	; 0x28
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	025b      	lsls	r3, r3, #9
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	431a      	orrs	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	041b      	lsls	r3, r3, #16
 8004fd2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	061b      	lsls	r3, r3, #24
 8004fe0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004fe4:	4931      	ldr	r1, [pc, #196]	; (80050ac <RCCEx_PLL2_Config+0x15c>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004fea:	4b30      	ldr	r3, [pc, #192]	; (80050ac <RCCEx_PLL2_Config+0x15c>)
 8004fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	492d      	ldr	r1, [pc, #180]	; (80050ac <RCCEx_PLL2_Config+0x15c>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004ffc:	4b2b      	ldr	r3, [pc, #172]	; (80050ac <RCCEx_PLL2_Config+0x15c>)
 8004ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005000:	f023 0220 	bic.w	r2, r3, #32
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	4928      	ldr	r1, [pc, #160]	; (80050ac <RCCEx_PLL2_Config+0x15c>)
 800500a:	4313      	orrs	r3, r2
 800500c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800500e:	4b27      	ldr	r3, [pc, #156]	; (80050ac <RCCEx_PLL2_Config+0x15c>)
 8005010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005012:	4a26      	ldr	r2, [pc, #152]	; (80050ac <RCCEx_PLL2_Config+0x15c>)
 8005014:	f023 0310 	bic.w	r3, r3, #16
 8005018:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800501a:	4b24      	ldr	r3, [pc, #144]	; (80050ac <RCCEx_PLL2_Config+0x15c>)
 800501c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800501e:	4b24      	ldr	r3, [pc, #144]	; (80050b0 <RCCEx_PLL2_Config+0x160>)
 8005020:	4013      	ands	r3, r2
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	69d2      	ldr	r2, [r2, #28]
 8005026:	00d2      	lsls	r2, r2, #3
 8005028:	4920      	ldr	r1, [pc, #128]	; (80050ac <RCCEx_PLL2_Config+0x15c>)
 800502a:	4313      	orrs	r3, r2
 800502c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800502e:	4b1f      	ldr	r3, [pc, #124]	; (80050ac <RCCEx_PLL2_Config+0x15c>)
 8005030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005032:	4a1e      	ldr	r2, [pc, #120]	; (80050ac <RCCEx_PLL2_Config+0x15c>)
 8005034:	f043 0310 	orr.w	r3, r3, #16
 8005038:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d106      	bne.n	800504e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005040:	4b1a      	ldr	r3, [pc, #104]	; (80050ac <RCCEx_PLL2_Config+0x15c>)
 8005042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005044:	4a19      	ldr	r2, [pc, #100]	; (80050ac <RCCEx_PLL2_Config+0x15c>)
 8005046:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800504a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800504c:	e00f      	b.n	800506e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d106      	bne.n	8005062 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005054:	4b15      	ldr	r3, [pc, #84]	; (80050ac <RCCEx_PLL2_Config+0x15c>)
 8005056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005058:	4a14      	ldr	r2, [pc, #80]	; (80050ac <RCCEx_PLL2_Config+0x15c>)
 800505a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800505e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005060:	e005      	b.n	800506e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005062:	4b12      	ldr	r3, [pc, #72]	; (80050ac <RCCEx_PLL2_Config+0x15c>)
 8005064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005066:	4a11      	ldr	r2, [pc, #68]	; (80050ac <RCCEx_PLL2_Config+0x15c>)
 8005068:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800506c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800506e:	4b0f      	ldr	r3, [pc, #60]	; (80050ac <RCCEx_PLL2_Config+0x15c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a0e      	ldr	r2, [pc, #56]	; (80050ac <RCCEx_PLL2_Config+0x15c>)
 8005074:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005078:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800507a:	f7fc fa4d 	bl	8001518 <HAL_GetTick>
 800507e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005080:	e008      	b.n	8005094 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005082:	f7fc fa49 	bl	8001518 <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	2b02      	cmp	r3, #2
 800508e:	d901      	bls.n	8005094 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e006      	b.n	80050a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005094:	4b05      	ldr	r3, [pc, #20]	; (80050ac <RCCEx_PLL2_Config+0x15c>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d0f0      	beq.n	8005082 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80050a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	58024400 	.word	0x58024400
 80050b0:	ffff0007 	.word	0xffff0007

080050b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050be:	2300      	movs	r3, #0
 80050c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050c2:	4b53      	ldr	r3, [pc, #332]	; (8005210 <RCCEx_PLL3_Config+0x15c>)
 80050c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c6:	f003 0303 	and.w	r3, r3, #3
 80050ca:	2b03      	cmp	r3, #3
 80050cc:	d101      	bne.n	80050d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e099      	b.n	8005206 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80050d2:	4b4f      	ldr	r3, [pc, #316]	; (8005210 <RCCEx_PLL3_Config+0x15c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a4e      	ldr	r2, [pc, #312]	; (8005210 <RCCEx_PLL3_Config+0x15c>)
 80050d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050de:	f7fc fa1b 	bl	8001518 <HAL_GetTick>
 80050e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80050e4:	e008      	b.n	80050f8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80050e6:	f7fc fa17 	bl	8001518 <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d901      	bls.n	80050f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e086      	b.n	8005206 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80050f8:	4b45      	ldr	r3, [pc, #276]	; (8005210 <RCCEx_PLL3_Config+0x15c>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1f0      	bne.n	80050e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005104:	4b42      	ldr	r3, [pc, #264]	; (8005210 <RCCEx_PLL3_Config+0x15c>)
 8005106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005108:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	051b      	lsls	r3, r3, #20
 8005112:	493f      	ldr	r1, [pc, #252]	; (8005210 <RCCEx_PLL3_Config+0x15c>)
 8005114:	4313      	orrs	r3, r2
 8005116:	628b      	str	r3, [r1, #40]	; 0x28
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	3b01      	subs	r3, #1
 800511e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	3b01      	subs	r3, #1
 8005128:	025b      	lsls	r3, r3, #9
 800512a:	b29b      	uxth	r3, r3
 800512c:	431a      	orrs	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	3b01      	subs	r3, #1
 8005134:	041b      	lsls	r3, r3, #16
 8005136:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800513a:	431a      	orrs	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	3b01      	subs	r3, #1
 8005142:	061b      	lsls	r3, r3, #24
 8005144:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005148:	4931      	ldr	r1, [pc, #196]	; (8005210 <RCCEx_PLL3_Config+0x15c>)
 800514a:	4313      	orrs	r3, r2
 800514c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800514e:	4b30      	ldr	r3, [pc, #192]	; (8005210 <RCCEx_PLL3_Config+0x15c>)
 8005150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005152:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	492d      	ldr	r1, [pc, #180]	; (8005210 <RCCEx_PLL3_Config+0x15c>)
 800515c:	4313      	orrs	r3, r2
 800515e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005160:	4b2b      	ldr	r3, [pc, #172]	; (8005210 <RCCEx_PLL3_Config+0x15c>)
 8005162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005164:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	4928      	ldr	r1, [pc, #160]	; (8005210 <RCCEx_PLL3_Config+0x15c>)
 800516e:	4313      	orrs	r3, r2
 8005170:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005172:	4b27      	ldr	r3, [pc, #156]	; (8005210 <RCCEx_PLL3_Config+0x15c>)
 8005174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005176:	4a26      	ldr	r2, [pc, #152]	; (8005210 <RCCEx_PLL3_Config+0x15c>)
 8005178:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800517c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800517e:	4b24      	ldr	r3, [pc, #144]	; (8005210 <RCCEx_PLL3_Config+0x15c>)
 8005180:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005182:	4b24      	ldr	r3, [pc, #144]	; (8005214 <RCCEx_PLL3_Config+0x160>)
 8005184:	4013      	ands	r3, r2
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	69d2      	ldr	r2, [r2, #28]
 800518a:	00d2      	lsls	r2, r2, #3
 800518c:	4920      	ldr	r1, [pc, #128]	; (8005210 <RCCEx_PLL3_Config+0x15c>)
 800518e:	4313      	orrs	r3, r2
 8005190:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005192:	4b1f      	ldr	r3, [pc, #124]	; (8005210 <RCCEx_PLL3_Config+0x15c>)
 8005194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005196:	4a1e      	ldr	r2, [pc, #120]	; (8005210 <RCCEx_PLL3_Config+0x15c>)
 8005198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800519c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d106      	bne.n	80051b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80051a4:	4b1a      	ldr	r3, [pc, #104]	; (8005210 <RCCEx_PLL3_Config+0x15c>)
 80051a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a8:	4a19      	ldr	r2, [pc, #100]	; (8005210 <RCCEx_PLL3_Config+0x15c>)
 80051aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80051ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051b0:	e00f      	b.n	80051d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d106      	bne.n	80051c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80051b8:	4b15      	ldr	r3, [pc, #84]	; (8005210 <RCCEx_PLL3_Config+0x15c>)
 80051ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051bc:	4a14      	ldr	r2, [pc, #80]	; (8005210 <RCCEx_PLL3_Config+0x15c>)
 80051be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80051c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051c4:	e005      	b.n	80051d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80051c6:	4b12      	ldr	r3, [pc, #72]	; (8005210 <RCCEx_PLL3_Config+0x15c>)
 80051c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ca:	4a11      	ldr	r2, [pc, #68]	; (8005210 <RCCEx_PLL3_Config+0x15c>)
 80051cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80051d2:	4b0f      	ldr	r3, [pc, #60]	; (8005210 <RCCEx_PLL3_Config+0x15c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a0e      	ldr	r2, [pc, #56]	; (8005210 <RCCEx_PLL3_Config+0x15c>)
 80051d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051de:	f7fc f99b 	bl	8001518 <HAL_GetTick>
 80051e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80051e4:	e008      	b.n	80051f8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80051e6:	f7fc f997 	bl	8001518 <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d901      	bls.n	80051f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e006      	b.n	8005206 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80051f8:	4b05      	ldr	r3, [pc, #20]	; (8005210 <RCCEx_PLL3_Config+0x15c>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d0f0      	beq.n	80051e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005204:	7bfb      	ldrb	r3, [r7, #15]
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	58024400 	.word	0x58024400
 8005214:	ffff0007 	.word	0xffff0007

08005218 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e10f      	b.n	800544a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a87      	ldr	r2, [pc, #540]	; (8005454 <HAL_SPI_Init+0x23c>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d00f      	beq.n	800525a <HAL_SPI_Init+0x42>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a86      	ldr	r2, [pc, #536]	; (8005458 <HAL_SPI_Init+0x240>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d00a      	beq.n	800525a <HAL_SPI_Init+0x42>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a84      	ldr	r2, [pc, #528]	; (800545c <HAL_SPI_Init+0x244>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d005      	beq.n	800525a <HAL_SPI_Init+0x42>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	2b0f      	cmp	r3, #15
 8005254:	d901      	bls.n	800525a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e0f7      	b.n	800544a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 ff74 	bl	8006148 <SPI_GetPacketSize>
 8005260:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a7b      	ldr	r2, [pc, #492]	; (8005454 <HAL_SPI_Init+0x23c>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d00c      	beq.n	8005286 <HAL_SPI_Init+0x6e>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a79      	ldr	r2, [pc, #484]	; (8005458 <HAL_SPI_Init+0x240>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d007      	beq.n	8005286 <HAL_SPI_Init+0x6e>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a78      	ldr	r2, [pc, #480]	; (800545c <HAL_SPI_Init+0x244>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d002      	beq.n	8005286 <HAL_SPI_Init+0x6e>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2b08      	cmp	r3, #8
 8005284:	d811      	bhi.n	80052aa <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800528a:	4a72      	ldr	r2, [pc, #456]	; (8005454 <HAL_SPI_Init+0x23c>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d009      	beq.n	80052a4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a70      	ldr	r2, [pc, #448]	; (8005458 <HAL_SPI_Init+0x240>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d004      	beq.n	80052a4 <HAL_SPI_Init+0x8c>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a6f      	ldr	r2, [pc, #444]	; (800545c <HAL_SPI_Init+0x244>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d104      	bne.n	80052ae <HAL_SPI_Init+0x96>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2b10      	cmp	r3, #16
 80052a8:	d901      	bls.n	80052ae <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e0cd      	b.n	800544a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d106      	bne.n	80052c8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7fb fe48 	bl	8000f58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2202      	movs	r2, #2
 80052cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 0201 	bic.w	r2, r2, #1
 80052de:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80052ea:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052f4:	d119      	bne.n	800532a <HAL_SPI_Init+0x112>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052fe:	d103      	bne.n	8005308 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005304:	2b00      	cmp	r3, #0
 8005306:	d008      	beq.n	800531a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10c      	bne.n	800532a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005314:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005318:	d107      	bne.n	800532a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005328:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00f      	beq.n	8005356 <HAL_SPI_Init+0x13e>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	2b06      	cmp	r3, #6
 800533c:	d90b      	bls.n	8005356 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	430a      	orrs	r2, r1
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	e007      	b.n	8005366 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005364:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	69da      	ldr	r2, [r3, #28]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536e:	431a      	orrs	r2, r3
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	431a      	orrs	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005378:	ea42 0103 	orr.w	r1, r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	68da      	ldr	r2, [r3, #12]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	430a      	orrs	r2, r1
 8005386:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005390:	431a      	orrs	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005396:	431a      	orrs	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	431a      	orrs	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	431a      	orrs	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	695b      	ldr	r3, [r3, #20]
 80053a8:	431a      	orrs	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	431a      	orrs	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	431a      	orrs	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ba:	431a      	orrs	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	431a      	orrs	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053c6:	ea42 0103 	orr.w	r1, r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	430a      	orrs	r2, r1
 80053d4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d113      	bne.n	8005406 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053f0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005404:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f022 0201 	bic.w	r2, r2, #1
 8005414:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00a      	beq.n	8005438 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	430a      	orrs	r2, r1
 8005436:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	40013000 	.word	0x40013000
 8005458:	40003800 	.word	0x40003800
 800545c:	40003c00 	.word	0x40003c00

08005460 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b08a      	sub	sp, #40	; 0x28
 8005464:	af02      	add	r7, sp, #8
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	603b      	str	r3, [r7, #0]
 800546c:	4613      	mov	r3, r2
 800546e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	3320      	adds	r3, #32
 8005476:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005478:	2300      	movs	r3, #0
 800547a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005482:	2b01      	cmp	r3, #1
 8005484:	d101      	bne.n	800548a <HAL_SPI_Transmit+0x2a>
 8005486:	2302      	movs	r3, #2
 8005488:	e1e1      	b.n	800584e <HAL_SPI_Transmit+0x3ee>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005492:	f7fc f841 	bl	8001518 <HAL_GetTick>
 8005496:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d007      	beq.n	80054b4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80054a4:	2302      	movs	r3, #2
 80054a6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80054b0:	7efb      	ldrb	r3, [r7, #27]
 80054b2:	e1cc      	b.n	800584e <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d002      	beq.n	80054c0 <HAL_SPI_Transmit+0x60>
 80054ba:	88fb      	ldrh	r3, [r7, #6]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d107      	bne.n	80054d0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80054cc:	7efb      	ldrb	r3, [r7, #27]
 80054ce:	e1be      	b.n	800584e <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2203      	movs	r2, #3
 80054d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	88fa      	ldrh	r2, [r7, #6]
 80054ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	88fa      	ldrh	r2, [r7, #6]
 80054f2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005520:	d108      	bne.n	8005534 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005530:	601a      	str	r2, [r3, #0]
 8005532:	e009      	b.n	8005548 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005546:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	4b96      	ldr	r3, [pc, #600]	; (80057a8 <HAL_SPI_Transmit+0x348>)
 8005550:	4013      	ands	r3, r2
 8005552:	88f9      	ldrh	r1, [r7, #6]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	6812      	ldr	r2, [r2, #0]
 8005558:	430b      	orrs	r3, r1
 800555a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f042 0201 	orr.w	r2, r2, #1
 800556a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005574:	d107      	bne.n	8005586 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005584:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	2b0f      	cmp	r3, #15
 800558c:	d947      	bls.n	800561e <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800558e:	e03f      	b.n	8005610 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b02      	cmp	r3, #2
 800559c:	d114      	bne.n	80055c8 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	6812      	ldr	r2, [r2, #0]
 80055a8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ae:	1d1a      	adds	r2, r3, #4
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	3b01      	subs	r3, #1
 80055be:	b29a      	uxth	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80055c6:	e023      	b.n	8005610 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055c8:	f7fb ffa6 	bl	8001518 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	683a      	ldr	r2, [r7, #0]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d803      	bhi.n	80055e0 <HAL_SPI_Transmit+0x180>
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055de:	d102      	bne.n	80055e6 <HAL_SPI_Transmit+0x186>
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d114      	bne.n	8005610 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f000 fce0 	bl	8005fac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e11e      	b.n	800584e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005616:	b29b      	uxth	r3, r3
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1b9      	bne.n	8005590 <HAL_SPI_Transmit+0x130>
 800561c:	e0f1      	b.n	8005802 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	2b07      	cmp	r3, #7
 8005624:	f240 80e6 	bls.w	80057f4 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005628:	e05d      	b.n	80056e6 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	f003 0302 	and.w	r3, r3, #2
 8005634:	2b02      	cmp	r3, #2
 8005636:	d132      	bne.n	800569e <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800563e:	b29b      	uxth	r3, r3
 8005640:	2b01      	cmp	r3, #1
 8005642:	d918      	bls.n	8005676 <HAL_SPI_Transmit+0x216>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005648:	2b00      	cmp	r3, #0
 800564a:	d014      	beq.n	8005676 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6812      	ldr	r2, [r2, #0]
 8005656:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800565c:	1d1a      	adds	r2, r3, #4
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005668:	b29b      	uxth	r3, r3
 800566a:	3b02      	subs	r3, #2
 800566c:	b29a      	uxth	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005674:	e037      	b.n	80056e6 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800567a:	881a      	ldrh	r2, [r3, #0]
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005684:	1c9a      	adds	r2, r3, #2
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005690:	b29b      	uxth	r3, r3
 8005692:	3b01      	subs	r3, #1
 8005694:	b29a      	uxth	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800569c:	e023      	b.n	80056e6 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800569e:	f7fb ff3b 	bl	8001518 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	683a      	ldr	r2, [r7, #0]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d803      	bhi.n	80056b6 <HAL_SPI_Transmit+0x256>
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b4:	d102      	bne.n	80056bc <HAL_SPI_Transmit+0x25c>
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d114      	bne.n	80056e6 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f000 fc75 	bl	8005fac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e0b3      	b.n	800584e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d19b      	bne.n	800562a <HAL_SPI_Transmit+0x1ca>
 80056f2:	e086      	b.n	8005802 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	f003 0302 	and.w	r3, r3, #2
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d154      	bne.n	80057ac <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005708:	b29b      	uxth	r3, r3
 800570a:	2b03      	cmp	r3, #3
 800570c:	d918      	bls.n	8005740 <HAL_SPI_Transmit+0x2e0>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005712:	2b40      	cmp	r3, #64	; 0x40
 8005714:	d914      	bls.n	8005740 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	6812      	ldr	r2, [r2, #0]
 8005720:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005726:	1d1a      	adds	r2, r3, #4
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005732:	b29b      	uxth	r3, r3
 8005734:	3b04      	subs	r3, #4
 8005736:	b29a      	uxth	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800573e:	e059      	b.n	80057f4 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005746:	b29b      	uxth	r3, r3
 8005748:	2b01      	cmp	r3, #1
 800574a:	d917      	bls.n	800577c <HAL_SPI_Transmit+0x31c>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005750:	2b00      	cmp	r3, #0
 8005752:	d013      	beq.n	800577c <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005758:	881a      	ldrh	r2, [r3, #0]
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005762:	1c9a      	adds	r2, r3, #2
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800576e:	b29b      	uxth	r3, r3
 8005770:	3b02      	subs	r3, #2
 8005772:	b29a      	uxth	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800577a:	e03b      	b.n	80057f4 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	3320      	adds	r3, #32
 8005786:	7812      	ldrb	r2, [r2, #0]
 8005788:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800578e:	1c5a      	adds	r2, r3, #1
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800579a:	b29b      	uxth	r3, r3
 800579c:	3b01      	subs	r3, #1
 800579e:	b29a      	uxth	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80057a6:	e025      	b.n	80057f4 <HAL_SPI_Transmit+0x394>
 80057a8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057ac:	f7fb feb4 	bl	8001518 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d803      	bhi.n	80057c4 <HAL_SPI_Transmit+0x364>
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c2:	d102      	bne.n	80057ca <HAL_SPI_Transmit+0x36a>
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d114      	bne.n	80057f4 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f000 fbee 	bl	8005fac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e02c      	b.n	800584e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f47f af79 	bne.w	80056f4 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	9300      	str	r3, [sp, #0]
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	2200      	movs	r2, #0
 800580a:	2108      	movs	r1, #8
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f000 fc6d 	bl	80060ec <SPI_WaitOnFlagUntilTimeout>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d007      	beq.n	8005828 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800581e:	f043 0220 	orr.w	r2, r3, #32
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f000 fbbf 	bl	8005fac <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005844:	2b00      	cmp	r3, #0
 8005846:	d001      	beq.n	800584c <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e000      	b.n	800584e <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800584c:	7efb      	ldrb	r3, [r7, #27]
}
 800584e:	4618      	mov	r0, r3
 8005850:	3720      	adds	r7, #32
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop

08005858 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b088      	sub	sp, #32
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	603b      	str	r3, [r7, #0]
 8005864:	4613      	mov	r3, r2
 8005866:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005868:	2300      	movs	r3, #0
 800586a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	3330      	adds	r3, #48	; 0x30
 8005872:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800587a:	2b01      	cmp	r3, #1
 800587c:	d101      	bne.n	8005882 <HAL_SPI_Receive+0x2a>
 800587e:	2302      	movs	r3, #2
 8005880:	e173      	b.n	8005b6a <HAL_SPI_Receive+0x312>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2201      	movs	r2, #1
 8005886:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800588a:	f7fb fe45 	bl	8001518 <HAL_GetTick>
 800588e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b01      	cmp	r3, #1
 800589a:	d007      	beq.n	80058ac <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800589c:	2302      	movs	r3, #2
 800589e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80058a8:	7ffb      	ldrb	r3, [r7, #31]
 80058aa:	e15e      	b.n	8005b6a <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d002      	beq.n	80058b8 <HAL_SPI_Receive+0x60>
 80058b2:	88fb      	ldrh	r3, [r7, #6]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d107      	bne.n	80058c8 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80058c4:	7ffb      	ldrb	r3, [r7, #31]
 80058c6:	e150      	b.n	8005b6a <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2204      	movs	r2, #4
 80058cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	88fa      	ldrh	r2, [r7, #6]
 80058e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	88fa      	ldrh	r2, [r7, #6]
 80058ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005918:	d108      	bne.n	800592c <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	e009      	b.n	8005940 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800593e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	4b8b      	ldr	r3, [pc, #556]	; (8005b74 <HAL_SPI_Receive+0x31c>)
 8005948:	4013      	ands	r3, r2
 800594a:	88f9      	ldrh	r1, [r7, #6]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	6812      	ldr	r2, [r2, #0]
 8005950:	430b      	orrs	r3, r1
 8005952:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f042 0201 	orr.w	r2, r2, #1
 8005962:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800596c:	d107      	bne.n	800597e <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800597c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	2b0f      	cmp	r3, #15
 8005984:	d948      	bls.n	8005a18 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005986:	e040      	b.n	8005a0a <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	695a      	ldr	r2, [r3, #20]
 800598e:	f248 0308 	movw	r3, #32776	; 0x8008
 8005992:	4013      	ands	r3, r2
 8005994:	2b00      	cmp	r3, #0
 8005996:	d014      	beq.n	80059c2 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80059a2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059a8:	1d1a      	adds	r2, r3, #4
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	3b01      	subs	r3, #1
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80059c0:	e023      	b.n	8005a0a <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059c2:	f7fb fda9 	bl	8001518 <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d803      	bhi.n	80059da <HAL_SPI_Receive+0x182>
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d8:	d102      	bne.n	80059e0 <HAL_SPI_Receive+0x188>
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d114      	bne.n	8005a0a <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f000 fae3 	bl	8005fac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e0af      	b.n	8005b6a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1b8      	bne.n	8005988 <HAL_SPI_Receive+0x130>
 8005a16:	e095      	b.n	8005b44 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	2b07      	cmp	r3, #7
 8005a1e:	f240 808b 	bls.w	8005b38 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005a22:	e03f      	b.n	8005aa4 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d114      	bne.n	8005a5c <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	8812      	ldrh	r2, [r2, #0]
 8005a3a:	b292      	uxth	r2, r2
 8005a3c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a42:	1c9a      	adds	r2, r3, #2
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	3b01      	subs	r3, #1
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005a5a:	e023      	b.n	8005aa4 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a5c:	f7fb fd5c 	bl	8001518 <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d803      	bhi.n	8005a74 <HAL_SPI_Receive+0x21c>
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a72:	d102      	bne.n	8005a7a <HAL_SPI_Receive+0x222>
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d114      	bne.n	8005aa4 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f000 fa96 	bl	8005fac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a8e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e062      	b.n	8005b6a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1b9      	bne.n	8005a24 <HAL_SPI_Receive+0x1cc>
 8005ab0:	e048      	b.n	8005b44 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	695b      	ldr	r3, [r3, #20]
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d117      	bne.n	8005af0 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005acc:	7812      	ldrb	r2, [r2, #0]
 8005ace:	b2d2      	uxtb	r2, r2
 8005ad0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ad6:	1c5a      	adds	r2, r3, #1
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005aee:	e023      	b.n	8005b38 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005af0:	f7fb fd12 	bl	8001518 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d803      	bhi.n	8005b08 <HAL_SPI_Receive+0x2b0>
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b06:	d102      	bne.n	8005b0e <HAL_SPI_Receive+0x2b6>
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d114      	bne.n	8005b38 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f000 fa4c 	bl	8005fac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e018      	b.n	8005b6a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1b6      	bne.n	8005ab2 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f000 fa31 	bl	8005fac <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d001      	beq.n	8005b68 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e000      	b.n	8005b6a <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 8005b68:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3720      	adds	r7, #32
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	ffff0000 	.word	0xffff0000

08005b78 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b08a      	sub	sp, #40	; 0x28
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8005b90:	6a3a      	ldr	r2, [r7, #32]
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	4013      	ands	r3, r2
 8005b96:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005baa:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	3330      	adds	r3, #48	; 0x30
 8005bb2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d010      	beq.n	8005be0 <HAL_SPI_IRQHandler+0x68>
 8005bbe:	6a3b      	ldr	r3, [r7, #32]
 8005bc0:	f003 0308 	and.w	r3, r3, #8
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00b      	beq.n	8005be0 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	699a      	ldr	r2, [r3, #24]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bd6:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 f9c3 	bl	8005f64 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8005bde:	e192      	b.n	8005f06 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d113      	bne.n	8005c12 <HAL_SPI_IRQHandler+0x9a>
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	f003 0320 	and.w	r3, r3, #32
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d10e      	bne.n	8005c12 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d009      	beq.n	8005c12 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	4798      	blx	r3
    hspi->RxISR(hspi);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	4798      	blx	r3
    handled = 1UL;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10f      	bne.n	8005c3c <HAL_SPI_IRQHandler+0xc4>
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00a      	beq.n	8005c3c <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d105      	bne.n	8005c3c <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	4798      	blx	r3
    handled = 1UL;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	f003 0320 	and.w	r3, r3, #32
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10f      	bne.n	8005c66 <HAL_SPI_IRQHandler+0xee>
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	f003 0302 	and.w	r3, r3, #2
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00a      	beq.n	8005c66 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d105      	bne.n	8005c66 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	4798      	blx	r3
    handled = 1UL;
 8005c62:	2301      	movs	r3, #1
 8005c64:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8005c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f040 8147 	bne.w	8005efc <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	f003 0308 	and.w	r3, r3, #8
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f000 808b 	beq.w	8005d90 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	699a      	ldr	r2, [r3, #24]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f042 0208 	orr.w	r2, r2, #8
 8005c88:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	699a      	ldr	r2, [r3, #24]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f042 0210 	orr.w	r2, r2, #16
 8005c98:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	699a      	ldr	r2, [r3, #24]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ca8:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	691a      	ldr	r2, [r3, #16]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f022 0208 	bic.w	r2, r2, #8
 8005cb8:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d13d      	bne.n	8005d44 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8005cc8:	e036      	b.n	8005d38 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	2b0f      	cmp	r3, #15
 8005cd0:	d90b      	bls.n	8005cea <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cda:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005cdc:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ce2:	1d1a      	adds	r2, r3, #4
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	665a      	str	r2, [r3, #100]	; 0x64
 8005ce8:	e01d      	b.n	8005d26 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	2b07      	cmp	r3, #7
 8005cf0:	d90b      	bls.n	8005d0a <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	8812      	ldrh	r2, [r2, #0]
 8005cfa:	b292      	uxth	r2, r2
 8005cfc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d02:	1c9a      	adds	r2, r3, #2
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	665a      	str	r2, [r3, #100]	; 0x64
 8005d08:	e00d      	b.n	8005d26 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d16:	7812      	ldrb	r2, [r2, #0]
 8005d18:	b2d2      	uxtb	r2, r2
 8005d1a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d20:	1c5a      	adds	r2, r3, #1
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1c2      	bne.n	8005cca <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 f931 	bl	8005fac <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d003      	beq.n	8005d64 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 f8f7 	bl	8005f50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005d62:	e0d0      	b.n	8005f06 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8005d64:	7cfb      	ldrb	r3, [r7, #19]
 8005d66:	2b05      	cmp	r3, #5
 8005d68:	d103      	bne.n	8005d72 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f8e6 	bl	8005f3c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8005d70:	e0c6      	b.n	8005f00 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8005d72:	7cfb      	ldrb	r3, [r7, #19]
 8005d74:	2b04      	cmp	r3, #4
 8005d76:	d103      	bne.n	8005d80 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 f8d5 	bl	8005f28 <HAL_SPI_RxCpltCallback>
    return;
 8005d7e:	e0bf      	b.n	8005f00 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8005d80:	7cfb      	ldrb	r3, [r7, #19]
 8005d82:	2b03      	cmp	r3, #3
 8005d84:	f040 80bc 	bne.w	8005f00 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 f8c3 	bl	8005f14 <HAL_SPI_TxCpltCallback>
    return;
 8005d8e:	e0b7      	b.n	8005f00 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f000 80b5 	beq.w	8005f06 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00f      	beq.n	8005dc6 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dac:	f043 0204 	orr.w	r2, r3, #4
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	699a      	ldr	r2, [r3, #24]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dc4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00f      	beq.n	8005df0 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dd6:	f043 0201 	orr.w	r2, r3, #1
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	699a      	ldr	r2, [r3, #24]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dee:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00f      	beq.n	8005e1a <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e00:	f043 0208 	orr.w	r2, r3, #8
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	699a      	ldr	r2, [r3, #24]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e18:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	f003 0320 	and.w	r3, r3, #32
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00f      	beq.n	8005e44 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e2a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	699a      	ldr	r2, [r3, #24]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f042 0220 	orr.w	r2, r2, #32
 8005e42:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d05a      	beq.n	8005f04 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 0201 	bic.w	r2, r2, #1
 8005e5c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	6919      	ldr	r1, [r3, #16]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	4b28      	ldr	r3, [pc, #160]	; (8005f0c <HAL_SPI_IRQHandler+0x394>)
 8005e6a:	400b      	ands	r3, r1
 8005e6c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005e74:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005e78:	d138      	bne.n	8005eec <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	689a      	ldr	r2, [r3, #8]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005e88:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d013      	beq.n	8005eba <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e96:	4a1e      	ldr	r2, [pc, #120]	; (8005f10 <HAL_SPI_IRQHandler+0x398>)
 8005e98:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7fb ff98 	bl	8001dd4 <HAL_DMA_Abort_IT>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d007      	beq.n	8005eba <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eb0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d020      	beq.n	8005f04 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ec6:	4a12      	ldr	r2, [pc, #72]	; (8005f10 <HAL_SPI_IRQHandler+0x398>)
 8005ec8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7fb ff80 	bl	8001dd4 <HAL_DMA_Abort_IT>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d014      	beq.n	8005f04 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ee0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005eea:	e00b      	b.n	8005f04 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 f82b 	bl	8005f50 <HAL_SPI_ErrorCallback>
    return;
 8005efa:	e003      	b.n	8005f04 <HAL_SPI_IRQHandler+0x38c>
    return;
 8005efc:	bf00      	nop
 8005efe:	e002      	b.n	8005f06 <HAL_SPI_IRQHandler+0x38e>
    return;
 8005f00:	bf00      	nop
 8005f02:	e000      	b.n	8005f06 <HAL_SPI_IRQHandler+0x38e>
    return;
 8005f04:	bf00      	nop
  }
}
 8005f06:	3728      	adds	r7, #40	; 0x28
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	fffffc94 	.word	0xfffffc94
 8005f10:	08005f79 	.word	0x08005f79

08005f14 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f84:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f7ff ffd6 	bl	8005f50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005fa4:	bf00      	nop
 8005fa6:	3710      	adds	r7, #16
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	699a      	ldr	r2, [r3, #24]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f042 0208 	orr.w	r2, r2, #8
 8005fca:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	699a      	ldr	r2, [r3, #24]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f042 0210 	orr.w	r2, r2, #16
 8005fda:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f022 0201 	bic.w	r2, r2, #1
 8005fea:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6919      	ldr	r1, [r3, #16]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	4b3c      	ldr	r3, [pc, #240]	; (80060e8 <SPI_CloseTransfer+0x13c>)
 8005ff8:	400b      	ands	r3, r1
 8005ffa:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	689a      	ldr	r2, [r3, #8]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800600a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006012:	b2db      	uxtb	r3, r3
 8006014:	2b04      	cmp	r3, #4
 8006016:	d014      	beq.n	8006042 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f003 0320 	and.w	r3, r3, #32
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00f      	beq.n	8006042 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006028:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	699a      	ldr	r2, [r3, #24]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f042 0220 	orr.w	r2, r2, #32
 8006040:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b03      	cmp	r3, #3
 800604c:	d014      	beq.n	8006078 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00f      	beq.n	8006078 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800605e:	f043 0204 	orr.w	r2, r3, #4
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	699a      	ldr	r2, [r3, #24]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006076:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00f      	beq.n	80060a2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006088:	f043 0201 	orr.w	r2, r3, #1
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	699a      	ldr	r2, [r3, #24]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060a0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00f      	beq.n	80060cc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060b2:	f043 0208 	orr.w	r2, r3, #8
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	699a      	ldr	r2, [r3, #24]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060ca:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80060dc:	bf00      	nop
 80060de:	3714      	adds	r7, #20
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr
 80060e8:	fffffc90 	.word	0xfffffc90

080060ec <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	603b      	str	r3, [r7, #0]
 80060f8:	4613      	mov	r3, r2
 80060fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80060fc:	e010      	b.n	8006120 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060fe:	f7fb fa0b 	bl	8001518 <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	683a      	ldr	r2, [r7, #0]
 800610a:	429a      	cmp	r2, r3
 800610c:	d803      	bhi.n	8006116 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006114:	d102      	bne.n	800611c <SPI_WaitOnFlagUntilTimeout+0x30>
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d101      	bne.n	8006120 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e00f      	b.n	8006140 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	695a      	ldr	r2, [r3, #20]
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	4013      	ands	r3, r2
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	429a      	cmp	r2, r3
 800612e:	bf0c      	ite	eq
 8006130:	2301      	moveq	r3, #1
 8006132:	2300      	movne	r3, #0
 8006134:	b2db      	uxtb	r3, r3
 8006136:	461a      	mov	r2, r3
 8006138:	79fb      	ldrb	r3, [r7, #7]
 800613a:	429a      	cmp	r2, r3
 800613c:	d0df      	beq.n	80060fe <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3710      	adds	r7, #16
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006154:	095b      	lsrs	r3, r3, #5
 8006156:	3301      	adds	r3, #1
 8006158:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	3301      	adds	r3, #1
 8006160:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	3307      	adds	r3, #7
 8006166:	08db      	lsrs	r3, r3, #3
 8006168:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	fb02 f303 	mul.w	r3, r2, r3
}
 8006172:	4618      	mov	r0, r3
 8006174:	3714      	adds	r7, #20
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b082      	sub	sp, #8
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d101      	bne.n	8006190 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e042      	b.n	8006216 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006196:	2b00      	cmp	r3, #0
 8006198:	d106      	bne.n	80061a8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7fb f86c 	bl	8001280 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2224      	movs	r2, #36	; 0x24
 80061ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f022 0201 	bic.w	r2, r2, #1
 80061be:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 fce1 	bl	8006b88 <UART_SetConfig>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d101      	bne.n	80061d0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e022      	b.n	8006216 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d002      	beq.n	80061de <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f001 fb41 	bl	8007860 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	689a      	ldr	r2, [r3, #8]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061fc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f042 0201 	orr.w	r2, r2, #1
 800620c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f001 fbc8 	bl	80079a4 <UART_CheckIdleState>
 8006214:	4603      	mov	r3, r0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3708      	adds	r7, #8
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b08a      	sub	sp, #40	; 0x28
 8006222:	af02      	add	r7, sp, #8
 8006224:	60f8      	str	r0, [r7, #12]
 8006226:	60b9      	str	r1, [r7, #8]
 8006228:	603b      	str	r3, [r7, #0]
 800622a:	4613      	mov	r3, r2
 800622c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006234:	2b20      	cmp	r3, #32
 8006236:	d17b      	bne.n	8006330 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d002      	beq.n	8006244 <HAL_UART_Transmit+0x26>
 800623e:	88fb      	ldrh	r3, [r7, #6]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d101      	bne.n	8006248 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e074      	b.n	8006332 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2221      	movs	r2, #33	; 0x21
 8006254:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006258:	f7fb f95e 	bl	8001518 <HAL_GetTick>
 800625c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	88fa      	ldrh	r2, [r7, #6]
 8006262:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	88fa      	ldrh	r2, [r7, #6]
 800626a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006276:	d108      	bne.n	800628a <HAL_UART_Transmit+0x6c>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d104      	bne.n	800628a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006280:	2300      	movs	r3, #0
 8006282:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	61bb      	str	r3, [r7, #24]
 8006288:	e003      	b.n	8006292 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800628e:	2300      	movs	r3, #0
 8006290:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006292:	e030      	b.n	80062f6 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	2200      	movs	r2, #0
 800629c:	2180      	movs	r1, #128	; 0x80
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f001 fc2a 	bl	8007af8 <UART_WaitOnFlagUntilTimeout>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d005      	beq.n	80062b6 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2220      	movs	r2, #32
 80062ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e03d      	b.n	8006332 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10b      	bne.n	80062d4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	881b      	ldrh	r3, [r3, #0]
 80062c0:	461a      	mov	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062ca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	3302      	adds	r3, #2
 80062d0:	61bb      	str	r3, [r7, #24]
 80062d2:	e007      	b.n	80062e4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	781a      	ldrb	r2, [r3, #0]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	3301      	adds	r3, #1
 80062e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	3b01      	subs	r3, #1
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1c8      	bne.n	8006294 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	9300      	str	r3, [sp, #0]
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	2200      	movs	r2, #0
 800630a:	2140      	movs	r1, #64	; 0x40
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f001 fbf3 	bl	8007af8 <UART_WaitOnFlagUntilTimeout>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d005      	beq.n	8006324 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2220      	movs	r2, #32
 800631c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	e006      	b.n	8006332 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2220      	movs	r2, #32
 8006328:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800632c:	2300      	movs	r3, #0
 800632e:	e000      	b.n	8006332 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006330:	2302      	movs	r3, #2
  }
}
 8006332:	4618      	mov	r0, r3
 8006334:	3720      	adds	r7, #32
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
	...

0800633c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b08a      	sub	sp, #40	; 0x28
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	4613      	mov	r3, r2
 8006348:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006350:	2b20      	cmp	r3, #32
 8006352:	d137      	bne.n	80063c4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d002      	beq.n	8006360 <HAL_UART_Receive_IT+0x24>
 800635a:	88fb      	ldrh	r3, [r7, #6]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d101      	bne.n	8006364 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	e030      	b.n	80063c6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a18      	ldr	r2, [pc, #96]	; (80063d0 <HAL_UART_Receive_IT+0x94>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d01f      	beq.n	80063b4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d018      	beq.n	80063b4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	e853 3f00 	ldrex	r3, [r3]
 800638e:	613b      	str	r3, [r7, #16]
   return(result);
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006396:	627b      	str	r3, [r7, #36]	; 0x24
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	461a      	mov	r2, r3
 800639e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a0:	623b      	str	r3, [r7, #32]
 80063a2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a4:	69f9      	ldr	r1, [r7, #28]
 80063a6:	6a3a      	ldr	r2, [r7, #32]
 80063a8:	e841 2300 	strex	r3, r2, [r1]
 80063ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1e6      	bne.n	8006382 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80063b4:	88fb      	ldrh	r3, [r7, #6]
 80063b6:	461a      	mov	r2, r3
 80063b8:	68b9      	ldr	r1, [r7, #8]
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f001 fc04 	bl	8007bc8 <UART_Start_Receive_IT>
 80063c0:	4603      	mov	r3, r0
 80063c2:	e000      	b.n	80063c6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80063c4:	2302      	movs	r3, #2
  }
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3728      	adds	r7, #40	; 0x28
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	58000c00 	.word	0x58000c00

080063d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b0ba      	sub	sp, #232	; 0xe8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	69db      	ldr	r3, [r3, #28]
 80063e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80063fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80063fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8006402:	4013      	ands	r3, r2
 8006404:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006408:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800640c:	2b00      	cmp	r3, #0
 800640e:	d11b      	bne.n	8006448 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006414:	f003 0320 	and.w	r3, r3, #32
 8006418:	2b00      	cmp	r3, #0
 800641a:	d015      	beq.n	8006448 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800641c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006420:	f003 0320 	and.w	r3, r3, #32
 8006424:	2b00      	cmp	r3, #0
 8006426:	d105      	bne.n	8006434 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006428:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800642c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006430:	2b00      	cmp	r3, #0
 8006432:	d009      	beq.n	8006448 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006438:	2b00      	cmp	r3, #0
 800643a:	f000 8377 	beq.w	8006b2c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	4798      	blx	r3
      }
      return;
 8006446:	e371      	b.n	8006b2c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006448:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800644c:	2b00      	cmp	r3, #0
 800644e:	f000 8123 	beq.w	8006698 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006452:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006456:	4b8d      	ldr	r3, [pc, #564]	; (800668c <HAL_UART_IRQHandler+0x2b8>)
 8006458:	4013      	ands	r3, r2
 800645a:	2b00      	cmp	r3, #0
 800645c:	d106      	bne.n	800646c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800645e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006462:	4b8b      	ldr	r3, [pc, #556]	; (8006690 <HAL_UART_IRQHandler+0x2bc>)
 8006464:	4013      	ands	r3, r2
 8006466:	2b00      	cmp	r3, #0
 8006468:	f000 8116 	beq.w	8006698 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800646c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006470:	f003 0301 	and.w	r3, r3, #1
 8006474:	2b00      	cmp	r3, #0
 8006476:	d011      	beq.n	800649c <HAL_UART_IRQHandler+0xc8>
 8006478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800647c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00b      	beq.n	800649c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2201      	movs	r2, #1
 800648a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006492:	f043 0201 	orr.w	r2, r3, #1
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800649c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064a0:	f003 0302 	and.w	r3, r3, #2
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d011      	beq.n	80064cc <HAL_UART_IRQHandler+0xf8>
 80064a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064ac:	f003 0301 	and.w	r3, r3, #1
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00b      	beq.n	80064cc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2202      	movs	r2, #2
 80064ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064c2:	f043 0204 	orr.w	r2, r3, #4
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064d0:	f003 0304 	and.w	r3, r3, #4
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d011      	beq.n	80064fc <HAL_UART_IRQHandler+0x128>
 80064d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064dc:	f003 0301 	and.w	r3, r3, #1
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00b      	beq.n	80064fc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2204      	movs	r2, #4
 80064ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f2:	f043 0202 	orr.w	r2, r3, #2
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80064fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006500:	f003 0308 	and.w	r3, r3, #8
 8006504:	2b00      	cmp	r3, #0
 8006506:	d017      	beq.n	8006538 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800650c:	f003 0320 	and.w	r3, r3, #32
 8006510:	2b00      	cmp	r3, #0
 8006512:	d105      	bne.n	8006520 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006514:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006518:	4b5c      	ldr	r3, [pc, #368]	; (800668c <HAL_UART_IRQHandler+0x2b8>)
 800651a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00b      	beq.n	8006538 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2208      	movs	r2, #8
 8006526:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800652e:	f043 0208 	orr.w	r2, r3, #8
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800653c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006540:	2b00      	cmp	r3, #0
 8006542:	d012      	beq.n	800656a <HAL_UART_IRQHandler+0x196>
 8006544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006548:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00c      	beq.n	800656a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006558:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006560:	f043 0220 	orr.w	r2, r3, #32
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006570:	2b00      	cmp	r3, #0
 8006572:	f000 82dd 	beq.w	8006b30 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800657a:	f003 0320 	and.w	r3, r3, #32
 800657e:	2b00      	cmp	r3, #0
 8006580:	d013      	beq.n	80065aa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006586:	f003 0320 	and.w	r3, r3, #32
 800658a:	2b00      	cmp	r3, #0
 800658c:	d105      	bne.n	800659a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800658e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d007      	beq.n	80065aa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065be:	2b40      	cmp	r3, #64	; 0x40
 80065c0:	d005      	beq.n	80065ce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80065c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d054      	beq.n	8006678 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f001 fc1c 	bl	8007e0c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065de:	2b40      	cmp	r3, #64	; 0x40
 80065e0:	d146      	bne.n	8006670 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	3308      	adds	r3, #8
 80065e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065f0:	e853 3f00 	ldrex	r3, [r3]
 80065f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80065f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006600:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	3308      	adds	r3, #8
 800660a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800660e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006612:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006616:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800661a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800661e:	e841 2300 	strex	r3, r2, [r1]
 8006622:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006626:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1d9      	bne.n	80065e2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006634:	2b00      	cmp	r3, #0
 8006636:	d017      	beq.n	8006668 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800663e:	4a15      	ldr	r2, [pc, #84]	; (8006694 <HAL_UART_IRQHandler+0x2c0>)
 8006640:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006648:	4618      	mov	r0, r3
 800664a:	f7fb fbc3 	bl	8001dd4 <HAL_DMA_Abort_IT>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d019      	beq.n	8006688 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800665a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006662:	4610      	mov	r0, r2
 8006664:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006666:	e00f      	b.n	8006688 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fa77 	bl	8006b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800666e:	e00b      	b.n	8006688 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 fa73 	bl	8006b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006676:	e007      	b.n	8006688 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 fa6f 	bl	8006b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006686:	e253      	b.n	8006b30 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006688:	bf00      	nop
    return;
 800668a:	e251      	b.n	8006b30 <HAL_UART_IRQHandler+0x75c>
 800668c:	10000001 	.word	0x10000001
 8006690:	04000120 	.word	0x04000120
 8006694:	08007ed9 	.word	0x08007ed9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800669c:	2b01      	cmp	r3, #1
 800669e:	f040 81e7 	bne.w	8006a70 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80066a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066a6:	f003 0310 	and.w	r3, r3, #16
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	f000 81e0 	beq.w	8006a70 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80066b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066b4:	f003 0310 	and.w	r3, r3, #16
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f000 81d9 	beq.w	8006a70 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2210      	movs	r2, #16
 80066c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d0:	2b40      	cmp	r3, #64	; 0x40
 80066d2:	f040 8151 	bne.w	8006978 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a96      	ldr	r2, [pc, #600]	; (8006938 <HAL_UART_IRQHandler+0x564>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d068      	beq.n	80067b6 <HAL_UART_IRQHandler+0x3e2>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a93      	ldr	r2, [pc, #588]	; (800693c <HAL_UART_IRQHandler+0x568>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d061      	beq.n	80067b6 <HAL_UART_IRQHandler+0x3e2>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a91      	ldr	r2, [pc, #580]	; (8006940 <HAL_UART_IRQHandler+0x56c>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d05a      	beq.n	80067b6 <HAL_UART_IRQHandler+0x3e2>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a8e      	ldr	r2, [pc, #568]	; (8006944 <HAL_UART_IRQHandler+0x570>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d053      	beq.n	80067b6 <HAL_UART_IRQHandler+0x3e2>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a8c      	ldr	r2, [pc, #560]	; (8006948 <HAL_UART_IRQHandler+0x574>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d04c      	beq.n	80067b6 <HAL_UART_IRQHandler+0x3e2>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a89      	ldr	r2, [pc, #548]	; (800694c <HAL_UART_IRQHandler+0x578>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d045      	beq.n	80067b6 <HAL_UART_IRQHandler+0x3e2>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a87      	ldr	r2, [pc, #540]	; (8006950 <HAL_UART_IRQHandler+0x57c>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d03e      	beq.n	80067b6 <HAL_UART_IRQHandler+0x3e2>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a84      	ldr	r2, [pc, #528]	; (8006954 <HAL_UART_IRQHandler+0x580>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d037      	beq.n	80067b6 <HAL_UART_IRQHandler+0x3e2>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a82      	ldr	r2, [pc, #520]	; (8006958 <HAL_UART_IRQHandler+0x584>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d030      	beq.n	80067b6 <HAL_UART_IRQHandler+0x3e2>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a7f      	ldr	r2, [pc, #508]	; (800695c <HAL_UART_IRQHandler+0x588>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d029      	beq.n	80067b6 <HAL_UART_IRQHandler+0x3e2>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a7d      	ldr	r2, [pc, #500]	; (8006960 <HAL_UART_IRQHandler+0x58c>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d022      	beq.n	80067b6 <HAL_UART_IRQHandler+0x3e2>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a7a      	ldr	r2, [pc, #488]	; (8006964 <HAL_UART_IRQHandler+0x590>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d01b      	beq.n	80067b6 <HAL_UART_IRQHandler+0x3e2>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a78      	ldr	r2, [pc, #480]	; (8006968 <HAL_UART_IRQHandler+0x594>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d014      	beq.n	80067b6 <HAL_UART_IRQHandler+0x3e2>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a75      	ldr	r2, [pc, #468]	; (800696c <HAL_UART_IRQHandler+0x598>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d00d      	beq.n	80067b6 <HAL_UART_IRQHandler+0x3e2>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a73      	ldr	r2, [pc, #460]	; (8006970 <HAL_UART_IRQHandler+0x59c>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d006      	beq.n	80067b6 <HAL_UART_IRQHandler+0x3e2>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a70      	ldr	r2, [pc, #448]	; (8006974 <HAL_UART_IRQHandler+0x5a0>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d106      	bne.n	80067c4 <HAL_UART_IRQHandler+0x3f0>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	e005      	b.n	80067d0 <HAL_UART_IRQHandler+0x3fc>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80067d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f000 81ab 	beq.w	8006b34 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80067e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067e8:	429a      	cmp	r2, r3
 80067ea:	f080 81a3 	bcs.w	8006b34 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067fe:	69db      	ldr	r3, [r3, #28]
 8006800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006804:	f000 8087 	beq.w	8006916 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006810:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006814:	e853 3f00 	ldrex	r3, [r3]
 8006818:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800681c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006824:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	461a      	mov	r2, r3
 800682e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006832:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006836:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800683e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006842:	e841 2300 	strex	r3, r2, [r1]
 8006846:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800684a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1da      	bne.n	8006808 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	3308      	adds	r3, #8
 8006858:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800685c:	e853 3f00 	ldrex	r3, [r3]
 8006860:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006862:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006864:	f023 0301 	bic.w	r3, r3, #1
 8006868:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	3308      	adds	r3, #8
 8006872:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006876:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800687a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800687e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006882:	e841 2300 	strex	r3, r2, [r1]
 8006886:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006888:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1e1      	bne.n	8006852 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3308      	adds	r3, #8
 8006894:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006896:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006898:	e853 3f00 	ldrex	r3, [r3]
 800689c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800689e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	3308      	adds	r3, #8
 80068ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80068b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80068b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80068b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80068ba:	e841 2300 	strex	r3, r2, [r1]
 80068be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80068c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1e3      	bne.n	800688e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2220      	movs	r2, #32
 80068ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068dc:	e853 3f00 	ldrex	r3, [r3]
 80068e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80068e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068e4:	f023 0310 	bic.w	r3, r3, #16
 80068e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	461a      	mov	r2, r3
 80068f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80068f8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80068fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068fe:	e841 2300 	strex	r3, r2, [r1]
 8006902:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1e4      	bne.n	80068d4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006910:	4618      	mov	r0, r3
 8006912:	f7fa ff41 	bl	8001798 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2202      	movs	r2, #2
 800691a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006928:	b29b      	uxth	r3, r3
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	b29b      	uxth	r3, r3
 800692e:	4619      	mov	r1, r3
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 f91d 	bl	8006b70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006936:	e0fd      	b.n	8006b34 <HAL_UART_IRQHandler+0x760>
 8006938:	40020010 	.word	0x40020010
 800693c:	40020028 	.word	0x40020028
 8006940:	40020040 	.word	0x40020040
 8006944:	40020058 	.word	0x40020058
 8006948:	40020070 	.word	0x40020070
 800694c:	40020088 	.word	0x40020088
 8006950:	400200a0 	.word	0x400200a0
 8006954:	400200b8 	.word	0x400200b8
 8006958:	40020410 	.word	0x40020410
 800695c:	40020428 	.word	0x40020428
 8006960:	40020440 	.word	0x40020440
 8006964:	40020458 	.word	0x40020458
 8006968:	40020470 	.word	0x40020470
 800696c:	40020488 	.word	0x40020488
 8006970:	400204a0 	.word	0x400204a0
 8006974:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006984:	b29b      	uxth	r3, r3
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006992:	b29b      	uxth	r3, r3
 8006994:	2b00      	cmp	r3, #0
 8006996:	f000 80cf 	beq.w	8006b38 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800699a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f000 80ca 	beq.w	8006b38 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ac:	e853 3f00 	ldrex	r3, [r3]
 80069b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	461a      	mov	r2, r3
 80069c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069c6:	647b      	str	r3, [r7, #68]	; 0x44
 80069c8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069ce:	e841 2300 	strex	r3, r2, [r1]
 80069d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1e4      	bne.n	80069a4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	3308      	adds	r3, #8
 80069e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e4:	e853 3f00 	ldrex	r3, [r3]
 80069e8:	623b      	str	r3, [r7, #32]
   return(result);
 80069ea:	6a3a      	ldr	r2, [r7, #32]
 80069ec:	4b55      	ldr	r3, [pc, #340]	; (8006b44 <HAL_UART_IRQHandler+0x770>)
 80069ee:	4013      	ands	r3, r2
 80069f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	3308      	adds	r3, #8
 80069fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80069fe:	633a      	str	r2, [r7, #48]	; 0x30
 8006a00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a06:	e841 2300 	strex	r3, r2, [r1]
 8006a0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1e3      	bne.n	80069da <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2220      	movs	r2, #32
 8006a16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	e853 3f00 	ldrex	r3, [r3]
 8006a32:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f023 0310 	bic.w	r3, r3, #16
 8006a3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	461a      	mov	r2, r3
 8006a44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a48:	61fb      	str	r3, [r7, #28]
 8006a4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4c:	69b9      	ldr	r1, [r7, #24]
 8006a4e:	69fa      	ldr	r2, [r7, #28]
 8006a50:	e841 2300 	strex	r3, r2, [r1]
 8006a54:	617b      	str	r3, [r7, #20]
   return(result);
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1e4      	bne.n	8006a26 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2202      	movs	r2, #2
 8006a60:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a66:	4619      	mov	r1, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 f881 	bl	8006b70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a6e:	e063      	b.n	8006b38 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00e      	beq.n	8006a9a <HAL_UART_IRQHandler+0x6c6>
 8006a7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d008      	beq.n	8006a9a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006a90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f001 ff7e 	bl	8008994 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a98:	e051      	b.n	8006b3e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d014      	beq.n	8006ad0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d105      	bne.n	8006abe <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006ab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ab6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d008      	beq.n	8006ad0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d03a      	beq.n	8006b3c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	4798      	blx	r3
    }
    return;
 8006ace:	e035      	b.n	8006b3c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d009      	beq.n	8006af0 <HAL_UART_IRQHandler+0x71c>
 8006adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d003      	beq.n	8006af0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f001 fa0b 	bl	8007f04 <UART_EndTransmit_IT>
    return;
 8006aee:	e026      	b.n	8006b3e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006af4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d009      	beq.n	8006b10 <HAL_UART_IRQHandler+0x73c>
 8006afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b00:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d003      	beq.n	8006b10 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f001 ff57 	bl	80089bc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b0e:	e016      	b.n	8006b3e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d010      	beq.n	8006b3e <HAL_UART_IRQHandler+0x76a>
 8006b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	da0c      	bge.n	8006b3e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f001 ff3f 	bl	80089a8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b2a:	e008      	b.n	8006b3e <HAL_UART_IRQHandler+0x76a>
      return;
 8006b2c:	bf00      	nop
 8006b2e:	e006      	b.n	8006b3e <HAL_UART_IRQHandler+0x76a>
    return;
 8006b30:	bf00      	nop
 8006b32:	e004      	b.n	8006b3e <HAL_UART_IRQHandler+0x76a>
      return;
 8006b34:	bf00      	nop
 8006b36:	e002      	b.n	8006b3e <HAL_UART_IRQHandler+0x76a>
      return;
 8006b38:	bf00      	nop
 8006b3a:	e000      	b.n	8006b3e <HAL_UART_IRQHandler+0x76a>
    return;
 8006b3c:	bf00      	nop
  }
}
 8006b3e:	37e8      	adds	r7, #232	; 0xe8
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	effffffe 	.word	0xeffffffe

08006b48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006b50:	bf00      	nop
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006b64:	bf00      	nop
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	460b      	mov	r3, r1
 8006b7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b7c:	bf00      	nop
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b8c:	b092      	sub	sp, #72	; 0x48
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b92:	2300      	movs	r3, #0
 8006b94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	689a      	ldr	r2, [r3, #8]
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	431a      	orrs	r2, r3
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	431a      	orrs	r2, r3
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	69db      	ldr	r3, [r3, #28]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	4bbe      	ldr	r3, [pc, #760]	; (8006eb0 <UART_SetConfig+0x328>)
 8006bb8:	4013      	ands	r3, r2
 8006bba:	697a      	ldr	r2, [r7, #20]
 8006bbc:	6812      	ldr	r2, [r2, #0]
 8006bbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006bc0:	430b      	orrs	r3, r1
 8006bc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	68da      	ldr	r2, [r3, #12]
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4ab3      	ldr	r2, [pc, #716]	; (8006eb4 <UART_SetConfig+0x32c>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d004      	beq.n	8006bf4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	6a1b      	ldr	r3, [r3, #32]
 8006bee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	689a      	ldr	r2, [r3, #8]
 8006bfa:	4baf      	ldr	r3, [pc, #700]	; (8006eb8 <UART_SetConfig+0x330>)
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	6812      	ldr	r2, [r2, #0]
 8006c02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c04:	430b      	orrs	r3, r1
 8006c06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c0e:	f023 010f 	bic.w	r1, r3, #15
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	430a      	orrs	r2, r1
 8006c1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4aa6      	ldr	r2, [pc, #664]	; (8006ebc <UART_SetConfig+0x334>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d177      	bne.n	8006d18 <UART_SetConfig+0x190>
 8006c28:	4ba5      	ldr	r3, [pc, #660]	; (8006ec0 <UART_SetConfig+0x338>)
 8006c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c30:	2b28      	cmp	r3, #40	; 0x28
 8006c32:	d86d      	bhi.n	8006d10 <UART_SetConfig+0x188>
 8006c34:	a201      	add	r2, pc, #4	; (adr r2, 8006c3c <UART_SetConfig+0xb4>)
 8006c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3a:	bf00      	nop
 8006c3c:	08006ce1 	.word	0x08006ce1
 8006c40:	08006d11 	.word	0x08006d11
 8006c44:	08006d11 	.word	0x08006d11
 8006c48:	08006d11 	.word	0x08006d11
 8006c4c:	08006d11 	.word	0x08006d11
 8006c50:	08006d11 	.word	0x08006d11
 8006c54:	08006d11 	.word	0x08006d11
 8006c58:	08006d11 	.word	0x08006d11
 8006c5c:	08006ce9 	.word	0x08006ce9
 8006c60:	08006d11 	.word	0x08006d11
 8006c64:	08006d11 	.word	0x08006d11
 8006c68:	08006d11 	.word	0x08006d11
 8006c6c:	08006d11 	.word	0x08006d11
 8006c70:	08006d11 	.word	0x08006d11
 8006c74:	08006d11 	.word	0x08006d11
 8006c78:	08006d11 	.word	0x08006d11
 8006c7c:	08006cf1 	.word	0x08006cf1
 8006c80:	08006d11 	.word	0x08006d11
 8006c84:	08006d11 	.word	0x08006d11
 8006c88:	08006d11 	.word	0x08006d11
 8006c8c:	08006d11 	.word	0x08006d11
 8006c90:	08006d11 	.word	0x08006d11
 8006c94:	08006d11 	.word	0x08006d11
 8006c98:	08006d11 	.word	0x08006d11
 8006c9c:	08006cf9 	.word	0x08006cf9
 8006ca0:	08006d11 	.word	0x08006d11
 8006ca4:	08006d11 	.word	0x08006d11
 8006ca8:	08006d11 	.word	0x08006d11
 8006cac:	08006d11 	.word	0x08006d11
 8006cb0:	08006d11 	.word	0x08006d11
 8006cb4:	08006d11 	.word	0x08006d11
 8006cb8:	08006d11 	.word	0x08006d11
 8006cbc:	08006d01 	.word	0x08006d01
 8006cc0:	08006d11 	.word	0x08006d11
 8006cc4:	08006d11 	.word	0x08006d11
 8006cc8:	08006d11 	.word	0x08006d11
 8006ccc:	08006d11 	.word	0x08006d11
 8006cd0:	08006d11 	.word	0x08006d11
 8006cd4:	08006d11 	.word	0x08006d11
 8006cd8:	08006d11 	.word	0x08006d11
 8006cdc:	08006d09 	.word	0x08006d09
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ce6:	e326      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006ce8:	2304      	movs	r3, #4
 8006cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cee:	e322      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006cf0:	2308      	movs	r3, #8
 8006cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cf6:	e31e      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006cf8:	2310      	movs	r3, #16
 8006cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cfe:	e31a      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006d00:	2320      	movs	r3, #32
 8006d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d06:	e316      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006d08:	2340      	movs	r3, #64	; 0x40
 8006d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d0e:	e312      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006d10:	2380      	movs	r3, #128	; 0x80
 8006d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d16:	e30e      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a69      	ldr	r2, [pc, #420]	; (8006ec4 <UART_SetConfig+0x33c>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d130      	bne.n	8006d84 <UART_SetConfig+0x1fc>
 8006d22:	4b67      	ldr	r3, [pc, #412]	; (8006ec0 <UART_SetConfig+0x338>)
 8006d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d26:	f003 0307 	and.w	r3, r3, #7
 8006d2a:	2b05      	cmp	r3, #5
 8006d2c:	d826      	bhi.n	8006d7c <UART_SetConfig+0x1f4>
 8006d2e:	a201      	add	r2, pc, #4	; (adr r2, 8006d34 <UART_SetConfig+0x1ac>)
 8006d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d34:	08006d4d 	.word	0x08006d4d
 8006d38:	08006d55 	.word	0x08006d55
 8006d3c:	08006d5d 	.word	0x08006d5d
 8006d40:	08006d65 	.word	0x08006d65
 8006d44:	08006d6d 	.word	0x08006d6d
 8006d48:	08006d75 	.word	0x08006d75
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d52:	e2f0      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006d54:	2304      	movs	r3, #4
 8006d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d5a:	e2ec      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006d5c:	2308      	movs	r3, #8
 8006d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d62:	e2e8      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006d64:	2310      	movs	r3, #16
 8006d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d6a:	e2e4      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006d6c:	2320      	movs	r3, #32
 8006d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d72:	e2e0      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006d74:	2340      	movs	r3, #64	; 0x40
 8006d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d7a:	e2dc      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006d7c:	2380      	movs	r3, #128	; 0x80
 8006d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d82:	e2d8      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a4f      	ldr	r2, [pc, #316]	; (8006ec8 <UART_SetConfig+0x340>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d130      	bne.n	8006df0 <UART_SetConfig+0x268>
 8006d8e:	4b4c      	ldr	r3, [pc, #304]	; (8006ec0 <UART_SetConfig+0x338>)
 8006d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d92:	f003 0307 	and.w	r3, r3, #7
 8006d96:	2b05      	cmp	r3, #5
 8006d98:	d826      	bhi.n	8006de8 <UART_SetConfig+0x260>
 8006d9a:	a201      	add	r2, pc, #4	; (adr r2, 8006da0 <UART_SetConfig+0x218>)
 8006d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da0:	08006db9 	.word	0x08006db9
 8006da4:	08006dc1 	.word	0x08006dc1
 8006da8:	08006dc9 	.word	0x08006dc9
 8006dac:	08006dd1 	.word	0x08006dd1
 8006db0:	08006dd9 	.word	0x08006dd9
 8006db4:	08006de1 	.word	0x08006de1
 8006db8:	2300      	movs	r3, #0
 8006dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dbe:	e2ba      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006dc0:	2304      	movs	r3, #4
 8006dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dc6:	e2b6      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006dc8:	2308      	movs	r3, #8
 8006dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dce:	e2b2      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006dd0:	2310      	movs	r3, #16
 8006dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dd6:	e2ae      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006dd8:	2320      	movs	r3, #32
 8006dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dde:	e2aa      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006de0:	2340      	movs	r3, #64	; 0x40
 8006de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006de6:	e2a6      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006de8:	2380      	movs	r3, #128	; 0x80
 8006dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dee:	e2a2      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a35      	ldr	r2, [pc, #212]	; (8006ecc <UART_SetConfig+0x344>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d130      	bne.n	8006e5c <UART_SetConfig+0x2d4>
 8006dfa:	4b31      	ldr	r3, [pc, #196]	; (8006ec0 <UART_SetConfig+0x338>)
 8006dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dfe:	f003 0307 	and.w	r3, r3, #7
 8006e02:	2b05      	cmp	r3, #5
 8006e04:	d826      	bhi.n	8006e54 <UART_SetConfig+0x2cc>
 8006e06:	a201      	add	r2, pc, #4	; (adr r2, 8006e0c <UART_SetConfig+0x284>)
 8006e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e0c:	08006e25 	.word	0x08006e25
 8006e10:	08006e2d 	.word	0x08006e2d
 8006e14:	08006e35 	.word	0x08006e35
 8006e18:	08006e3d 	.word	0x08006e3d
 8006e1c:	08006e45 	.word	0x08006e45
 8006e20:	08006e4d 	.word	0x08006e4d
 8006e24:	2300      	movs	r3, #0
 8006e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e2a:	e284      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006e2c:	2304      	movs	r3, #4
 8006e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e32:	e280      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006e34:	2308      	movs	r3, #8
 8006e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e3a:	e27c      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006e3c:	2310      	movs	r3, #16
 8006e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e42:	e278      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006e44:	2320      	movs	r3, #32
 8006e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e4a:	e274      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006e4c:	2340      	movs	r3, #64	; 0x40
 8006e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e52:	e270      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006e54:	2380      	movs	r3, #128	; 0x80
 8006e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e5a:	e26c      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a1b      	ldr	r2, [pc, #108]	; (8006ed0 <UART_SetConfig+0x348>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d142      	bne.n	8006eec <UART_SetConfig+0x364>
 8006e66:	4b16      	ldr	r3, [pc, #88]	; (8006ec0 <UART_SetConfig+0x338>)
 8006e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e6a:	f003 0307 	and.w	r3, r3, #7
 8006e6e:	2b05      	cmp	r3, #5
 8006e70:	d838      	bhi.n	8006ee4 <UART_SetConfig+0x35c>
 8006e72:	a201      	add	r2, pc, #4	; (adr r2, 8006e78 <UART_SetConfig+0x2f0>)
 8006e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e78:	08006e91 	.word	0x08006e91
 8006e7c:	08006e99 	.word	0x08006e99
 8006e80:	08006ea1 	.word	0x08006ea1
 8006e84:	08006ea9 	.word	0x08006ea9
 8006e88:	08006ed5 	.word	0x08006ed5
 8006e8c:	08006edd 	.word	0x08006edd
 8006e90:	2300      	movs	r3, #0
 8006e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e96:	e24e      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006e98:	2304      	movs	r3, #4
 8006e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e9e:	e24a      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006ea0:	2308      	movs	r3, #8
 8006ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ea6:	e246      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006ea8:	2310      	movs	r3, #16
 8006eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eae:	e242      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006eb0:	cfff69f3 	.word	0xcfff69f3
 8006eb4:	58000c00 	.word	0x58000c00
 8006eb8:	11fff4ff 	.word	0x11fff4ff
 8006ebc:	40011000 	.word	0x40011000
 8006ec0:	58024400 	.word	0x58024400
 8006ec4:	40004400 	.word	0x40004400
 8006ec8:	40004800 	.word	0x40004800
 8006ecc:	40004c00 	.word	0x40004c00
 8006ed0:	40005000 	.word	0x40005000
 8006ed4:	2320      	movs	r3, #32
 8006ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eda:	e22c      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006edc:	2340      	movs	r3, #64	; 0x40
 8006ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ee2:	e228      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006ee4:	2380      	movs	r3, #128	; 0x80
 8006ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eea:	e224      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4ab1      	ldr	r2, [pc, #708]	; (80071b8 <UART_SetConfig+0x630>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d176      	bne.n	8006fe4 <UART_SetConfig+0x45c>
 8006ef6:	4bb1      	ldr	r3, [pc, #708]	; (80071bc <UART_SetConfig+0x634>)
 8006ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006efa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006efe:	2b28      	cmp	r3, #40	; 0x28
 8006f00:	d86c      	bhi.n	8006fdc <UART_SetConfig+0x454>
 8006f02:	a201      	add	r2, pc, #4	; (adr r2, 8006f08 <UART_SetConfig+0x380>)
 8006f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f08:	08006fad 	.word	0x08006fad
 8006f0c:	08006fdd 	.word	0x08006fdd
 8006f10:	08006fdd 	.word	0x08006fdd
 8006f14:	08006fdd 	.word	0x08006fdd
 8006f18:	08006fdd 	.word	0x08006fdd
 8006f1c:	08006fdd 	.word	0x08006fdd
 8006f20:	08006fdd 	.word	0x08006fdd
 8006f24:	08006fdd 	.word	0x08006fdd
 8006f28:	08006fb5 	.word	0x08006fb5
 8006f2c:	08006fdd 	.word	0x08006fdd
 8006f30:	08006fdd 	.word	0x08006fdd
 8006f34:	08006fdd 	.word	0x08006fdd
 8006f38:	08006fdd 	.word	0x08006fdd
 8006f3c:	08006fdd 	.word	0x08006fdd
 8006f40:	08006fdd 	.word	0x08006fdd
 8006f44:	08006fdd 	.word	0x08006fdd
 8006f48:	08006fbd 	.word	0x08006fbd
 8006f4c:	08006fdd 	.word	0x08006fdd
 8006f50:	08006fdd 	.word	0x08006fdd
 8006f54:	08006fdd 	.word	0x08006fdd
 8006f58:	08006fdd 	.word	0x08006fdd
 8006f5c:	08006fdd 	.word	0x08006fdd
 8006f60:	08006fdd 	.word	0x08006fdd
 8006f64:	08006fdd 	.word	0x08006fdd
 8006f68:	08006fc5 	.word	0x08006fc5
 8006f6c:	08006fdd 	.word	0x08006fdd
 8006f70:	08006fdd 	.word	0x08006fdd
 8006f74:	08006fdd 	.word	0x08006fdd
 8006f78:	08006fdd 	.word	0x08006fdd
 8006f7c:	08006fdd 	.word	0x08006fdd
 8006f80:	08006fdd 	.word	0x08006fdd
 8006f84:	08006fdd 	.word	0x08006fdd
 8006f88:	08006fcd 	.word	0x08006fcd
 8006f8c:	08006fdd 	.word	0x08006fdd
 8006f90:	08006fdd 	.word	0x08006fdd
 8006f94:	08006fdd 	.word	0x08006fdd
 8006f98:	08006fdd 	.word	0x08006fdd
 8006f9c:	08006fdd 	.word	0x08006fdd
 8006fa0:	08006fdd 	.word	0x08006fdd
 8006fa4:	08006fdd 	.word	0x08006fdd
 8006fa8:	08006fd5 	.word	0x08006fd5
 8006fac:	2301      	movs	r3, #1
 8006fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fb2:	e1c0      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006fb4:	2304      	movs	r3, #4
 8006fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fba:	e1bc      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006fbc:	2308      	movs	r3, #8
 8006fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fc2:	e1b8      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006fc4:	2310      	movs	r3, #16
 8006fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fca:	e1b4      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006fcc:	2320      	movs	r3, #32
 8006fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fd2:	e1b0      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006fd4:	2340      	movs	r3, #64	; 0x40
 8006fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fda:	e1ac      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006fdc:	2380      	movs	r3, #128	; 0x80
 8006fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fe2:	e1a8      	b.n	8007336 <UART_SetConfig+0x7ae>
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a75      	ldr	r2, [pc, #468]	; (80071c0 <UART_SetConfig+0x638>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d130      	bne.n	8007050 <UART_SetConfig+0x4c8>
 8006fee:	4b73      	ldr	r3, [pc, #460]	; (80071bc <UART_SetConfig+0x634>)
 8006ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ff2:	f003 0307 	and.w	r3, r3, #7
 8006ff6:	2b05      	cmp	r3, #5
 8006ff8:	d826      	bhi.n	8007048 <UART_SetConfig+0x4c0>
 8006ffa:	a201      	add	r2, pc, #4	; (adr r2, 8007000 <UART_SetConfig+0x478>)
 8006ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007000:	08007019 	.word	0x08007019
 8007004:	08007021 	.word	0x08007021
 8007008:	08007029 	.word	0x08007029
 800700c:	08007031 	.word	0x08007031
 8007010:	08007039 	.word	0x08007039
 8007014:	08007041 	.word	0x08007041
 8007018:	2300      	movs	r3, #0
 800701a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800701e:	e18a      	b.n	8007336 <UART_SetConfig+0x7ae>
 8007020:	2304      	movs	r3, #4
 8007022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007026:	e186      	b.n	8007336 <UART_SetConfig+0x7ae>
 8007028:	2308      	movs	r3, #8
 800702a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800702e:	e182      	b.n	8007336 <UART_SetConfig+0x7ae>
 8007030:	2310      	movs	r3, #16
 8007032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007036:	e17e      	b.n	8007336 <UART_SetConfig+0x7ae>
 8007038:	2320      	movs	r3, #32
 800703a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800703e:	e17a      	b.n	8007336 <UART_SetConfig+0x7ae>
 8007040:	2340      	movs	r3, #64	; 0x40
 8007042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007046:	e176      	b.n	8007336 <UART_SetConfig+0x7ae>
 8007048:	2380      	movs	r3, #128	; 0x80
 800704a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800704e:	e172      	b.n	8007336 <UART_SetConfig+0x7ae>
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a5b      	ldr	r2, [pc, #364]	; (80071c4 <UART_SetConfig+0x63c>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d130      	bne.n	80070bc <UART_SetConfig+0x534>
 800705a:	4b58      	ldr	r3, [pc, #352]	; (80071bc <UART_SetConfig+0x634>)
 800705c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800705e:	f003 0307 	and.w	r3, r3, #7
 8007062:	2b05      	cmp	r3, #5
 8007064:	d826      	bhi.n	80070b4 <UART_SetConfig+0x52c>
 8007066:	a201      	add	r2, pc, #4	; (adr r2, 800706c <UART_SetConfig+0x4e4>)
 8007068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800706c:	08007085 	.word	0x08007085
 8007070:	0800708d 	.word	0x0800708d
 8007074:	08007095 	.word	0x08007095
 8007078:	0800709d 	.word	0x0800709d
 800707c:	080070a5 	.word	0x080070a5
 8007080:	080070ad 	.word	0x080070ad
 8007084:	2300      	movs	r3, #0
 8007086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800708a:	e154      	b.n	8007336 <UART_SetConfig+0x7ae>
 800708c:	2304      	movs	r3, #4
 800708e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007092:	e150      	b.n	8007336 <UART_SetConfig+0x7ae>
 8007094:	2308      	movs	r3, #8
 8007096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800709a:	e14c      	b.n	8007336 <UART_SetConfig+0x7ae>
 800709c:	2310      	movs	r3, #16
 800709e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070a2:	e148      	b.n	8007336 <UART_SetConfig+0x7ae>
 80070a4:	2320      	movs	r3, #32
 80070a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070aa:	e144      	b.n	8007336 <UART_SetConfig+0x7ae>
 80070ac:	2340      	movs	r3, #64	; 0x40
 80070ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070b2:	e140      	b.n	8007336 <UART_SetConfig+0x7ae>
 80070b4:	2380      	movs	r3, #128	; 0x80
 80070b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ba:	e13c      	b.n	8007336 <UART_SetConfig+0x7ae>
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a41      	ldr	r2, [pc, #260]	; (80071c8 <UART_SetConfig+0x640>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	f040 8082 	bne.w	80071cc <UART_SetConfig+0x644>
 80070c8:	4b3c      	ldr	r3, [pc, #240]	; (80071bc <UART_SetConfig+0x634>)
 80070ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070d0:	2b28      	cmp	r3, #40	; 0x28
 80070d2:	d86d      	bhi.n	80071b0 <UART_SetConfig+0x628>
 80070d4:	a201      	add	r2, pc, #4	; (adr r2, 80070dc <UART_SetConfig+0x554>)
 80070d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070da:	bf00      	nop
 80070dc:	08007181 	.word	0x08007181
 80070e0:	080071b1 	.word	0x080071b1
 80070e4:	080071b1 	.word	0x080071b1
 80070e8:	080071b1 	.word	0x080071b1
 80070ec:	080071b1 	.word	0x080071b1
 80070f0:	080071b1 	.word	0x080071b1
 80070f4:	080071b1 	.word	0x080071b1
 80070f8:	080071b1 	.word	0x080071b1
 80070fc:	08007189 	.word	0x08007189
 8007100:	080071b1 	.word	0x080071b1
 8007104:	080071b1 	.word	0x080071b1
 8007108:	080071b1 	.word	0x080071b1
 800710c:	080071b1 	.word	0x080071b1
 8007110:	080071b1 	.word	0x080071b1
 8007114:	080071b1 	.word	0x080071b1
 8007118:	080071b1 	.word	0x080071b1
 800711c:	08007191 	.word	0x08007191
 8007120:	080071b1 	.word	0x080071b1
 8007124:	080071b1 	.word	0x080071b1
 8007128:	080071b1 	.word	0x080071b1
 800712c:	080071b1 	.word	0x080071b1
 8007130:	080071b1 	.word	0x080071b1
 8007134:	080071b1 	.word	0x080071b1
 8007138:	080071b1 	.word	0x080071b1
 800713c:	08007199 	.word	0x08007199
 8007140:	080071b1 	.word	0x080071b1
 8007144:	080071b1 	.word	0x080071b1
 8007148:	080071b1 	.word	0x080071b1
 800714c:	080071b1 	.word	0x080071b1
 8007150:	080071b1 	.word	0x080071b1
 8007154:	080071b1 	.word	0x080071b1
 8007158:	080071b1 	.word	0x080071b1
 800715c:	080071a1 	.word	0x080071a1
 8007160:	080071b1 	.word	0x080071b1
 8007164:	080071b1 	.word	0x080071b1
 8007168:	080071b1 	.word	0x080071b1
 800716c:	080071b1 	.word	0x080071b1
 8007170:	080071b1 	.word	0x080071b1
 8007174:	080071b1 	.word	0x080071b1
 8007178:	080071b1 	.word	0x080071b1
 800717c:	080071a9 	.word	0x080071a9
 8007180:	2301      	movs	r3, #1
 8007182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007186:	e0d6      	b.n	8007336 <UART_SetConfig+0x7ae>
 8007188:	2304      	movs	r3, #4
 800718a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800718e:	e0d2      	b.n	8007336 <UART_SetConfig+0x7ae>
 8007190:	2308      	movs	r3, #8
 8007192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007196:	e0ce      	b.n	8007336 <UART_SetConfig+0x7ae>
 8007198:	2310      	movs	r3, #16
 800719a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800719e:	e0ca      	b.n	8007336 <UART_SetConfig+0x7ae>
 80071a0:	2320      	movs	r3, #32
 80071a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071a6:	e0c6      	b.n	8007336 <UART_SetConfig+0x7ae>
 80071a8:	2340      	movs	r3, #64	; 0x40
 80071aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ae:	e0c2      	b.n	8007336 <UART_SetConfig+0x7ae>
 80071b0:	2380      	movs	r3, #128	; 0x80
 80071b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071b6:	e0be      	b.n	8007336 <UART_SetConfig+0x7ae>
 80071b8:	40011400 	.word	0x40011400
 80071bc:	58024400 	.word	0x58024400
 80071c0:	40007800 	.word	0x40007800
 80071c4:	40007c00 	.word	0x40007c00
 80071c8:	40011800 	.word	0x40011800
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4aad      	ldr	r2, [pc, #692]	; (8007488 <UART_SetConfig+0x900>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d176      	bne.n	80072c4 <UART_SetConfig+0x73c>
 80071d6:	4bad      	ldr	r3, [pc, #692]	; (800748c <UART_SetConfig+0x904>)
 80071d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071de:	2b28      	cmp	r3, #40	; 0x28
 80071e0:	d86c      	bhi.n	80072bc <UART_SetConfig+0x734>
 80071e2:	a201      	add	r2, pc, #4	; (adr r2, 80071e8 <UART_SetConfig+0x660>)
 80071e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e8:	0800728d 	.word	0x0800728d
 80071ec:	080072bd 	.word	0x080072bd
 80071f0:	080072bd 	.word	0x080072bd
 80071f4:	080072bd 	.word	0x080072bd
 80071f8:	080072bd 	.word	0x080072bd
 80071fc:	080072bd 	.word	0x080072bd
 8007200:	080072bd 	.word	0x080072bd
 8007204:	080072bd 	.word	0x080072bd
 8007208:	08007295 	.word	0x08007295
 800720c:	080072bd 	.word	0x080072bd
 8007210:	080072bd 	.word	0x080072bd
 8007214:	080072bd 	.word	0x080072bd
 8007218:	080072bd 	.word	0x080072bd
 800721c:	080072bd 	.word	0x080072bd
 8007220:	080072bd 	.word	0x080072bd
 8007224:	080072bd 	.word	0x080072bd
 8007228:	0800729d 	.word	0x0800729d
 800722c:	080072bd 	.word	0x080072bd
 8007230:	080072bd 	.word	0x080072bd
 8007234:	080072bd 	.word	0x080072bd
 8007238:	080072bd 	.word	0x080072bd
 800723c:	080072bd 	.word	0x080072bd
 8007240:	080072bd 	.word	0x080072bd
 8007244:	080072bd 	.word	0x080072bd
 8007248:	080072a5 	.word	0x080072a5
 800724c:	080072bd 	.word	0x080072bd
 8007250:	080072bd 	.word	0x080072bd
 8007254:	080072bd 	.word	0x080072bd
 8007258:	080072bd 	.word	0x080072bd
 800725c:	080072bd 	.word	0x080072bd
 8007260:	080072bd 	.word	0x080072bd
 8007264:	080072bd 	.word	0x080072bd
 8007268:	080072ad 	.word	0x080072ad
 800726c:	080072bd 	.word	0x080072bd
 8007270:	080072bd 	.word	0x080072bd
 8007274:	080072bd 	.word	0x080072bd
 8007278:	080072bd 	.word	0x080072bd
 800727c:	080072bd 	.word	0x080072bd
 8007280:	080072bd 	.word	0x080072bd
 8007284:	080072bd 	.word	0x080072bd
 8007288:	080072b5 	.word	0x080072b5
 800728c:	2301      	movs	r3, #1
 800728e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007292:	e050      	b.n	8007336 <UART_SetConfig+0x7ae>
 8007294:	2304      	movs	r3, #4
 8007296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800729a:	e04c      	b.n	8007336 <UART_SetConfig+0x7ae>
 800729c:	2308      	movs	r3, #8
 800729e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072a2:	e048      	b.n	8007336 <UART_SetConfig+0x7ae>
 80072a4:	2310      	movs	r3, #16
 80072a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072aa:	e044      	b.n	8007336 <UART_SetConfig+0x7ae>
 80072ac:	2320      	movs	r3, #32
 80072ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072b2:	e040      	b.n	8007336 <UART_SetConfig+0x7ae>
 80072b4:	2340      	movs	r3, #64	; 0x40
 80072b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ba:	e03c      	b.n	8007336 <UART_SetConfig+0x7ae>
 80072bc:	2380      	movs	r3, #128	; 0x80
 80072be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072c2:	e038      	b.n	8007336 <UART_SetConfig+0x7ae>
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a71      	ldr	r2, [pc, #452]	; (8007490 <UART_SetConfig+0x908>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d130      	bne.n	8007330 <UART_SetConfig+0x7a8>
 80072ce:	4b6f      	ldr	r3, [pc, #444]	; (800748c <UART_SetConfig+0x904>)
 80072d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072d2:	f003 0307 	and.w	r3, r3, #7
 80072d6:	2b05      	cmp	r3, #5
 80072d8:	d826      	bhi.n	8007328 <UART_SetConfig+0x7a0>
 80072da:	a201      	add	r2, pc, #4	; (adr r2, 80072e0 <UART_SetConfig+0x758>)
 80072dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e0:	080072f9 	.word	0x080072f9
 80072e4:	08007301 	.word	0x08007301
 80072e8:	08007309 	.word	0x08007309
 80072ec:	08007311 	.word	0x08007311
 80072f0:	08007319 	.word	0x08007319
 80072f4:	08007321 	.word	0x08007321
 80072f8:	2302      	movs	r3, #2
 80072fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072fe:	e01a      	b.n	8007336 <UART_SetConfig+0x7ae>
 8007300:	2304      	movs	r3, #4
 8007302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007306:	e016      	b.n	8007336 <UART_SetConfig+0x7ae>
 8007308:	2308      	movs	r3, #8
 800730a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800730e:	e012      	b.n	8007336 <UART_SetConfig+0x7ae>
 8007310:	2310      	movs	r3, #16
 8007312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007316:	e00e      	b.n	8007336 <UART_SetConfig+0x7ae>
 8007318:	2320      	movs	r3, #32
 800731a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800731e:	e00a      	b.n	8007336 <UART_SetConfig+0x7ae>
 8007320:	2340      	movs	r3, #64	; 0x40
 8007322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007326:	e006      	b.n	8007336 <UART_SetConfig+0x7ae>
 8007328:	2380      	movs	r3, #128	; 0x80
 800732a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800732e:	e002      	b.n	8007336 <UART_SetConfig+0x7ae>
 8007330:	2380      	movs	r3, #128	; 0x80
 8007332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a55      	ldr	r2, [pc, #340]	; (8007490 <UART_SetConfig+0x908>)
 800733c:	4293      	cmp	r3, r2
 800733e:	f040 80f8 	bne.w	8007532 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007342:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007346:	2b20      	cmp	r3, #32
 8007348:	dc46      	bgt.n	80073d8 <UART_SetConfig+0x850>
 800734a:	2b02      	cmp	r3, #2
 800734c:	db75      	blt.n	800743a <UART_SetConfig+0x8b2>
 800734e:	3b02      	subs	r3, #2
 8007350:	2b1e      	cmp	r3, #30
 8007352:	d872      	bhi.n	800743a <UART_SetConfig+0x8b2>
 8007354:	a201      	add	r2, pc, #4	; (adr r2, 800735c <UART_SetConfig+0x7d4>)
 8007356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735a:	bf00      	nop
 800735c:	080073df 	.word	0x080073df
 8007360:	0800743b 	.word	0x0800743b
 8007364:	080073e7 	.word	0x080073e7
 8007368:	0800743b 	.word	0x0800743b
 800736c:	0800743b 	.word	0x0800743b
 8007370:	0800743b 	.word	0x0800743b
 8007374:	080073f7 	.word	0x080073f7
 8007378:	0800743b 	.word	0x0800743b
 800737c:	0800743b 	.word	0x0800743b
 8007380:	0800743b 	.word	0x0800743b
 8007384:	0800743b 	.word	0x0800743b
 8007388:	0800743b 	.word	0x0800743b
 800738c:	0800743b 	.word	0x0800743b
 8007390:	0800743b 	.word	0x0800743b
 8007394:	08007407 	.word	0x08007407
 8007398:	0800743b 	.word	0x0800743b
 800739c:	0800743b 	.word	0x0800743b
 80073a0:	0800743b 	.word	0x0800743b
 80073a4:	0800743b 	.word	0x0800743b
 80073a8:	0800743b 	.word	0x0800743b
 80073ac:	0800743b 	.word	0x0800743b
 80073b0:	0800743b 	.word	0x0800743b
 80073b4:	0800743b 	.word	0x0800743b
 80073b8:	0800743b 	.word	0x0800743b
 80073bc:	0800743b 	.word	0x0800743b
 80073c0:	0800743b 	.word	0x0800743b
 80073c4:	0800743b 	.word	0x0800743b
 80073c8:	0800743b 	.word	0x0800743b
 80073cc:	0800743b 	.word	0x0800743b
 80073d0:	0800743b 	.word	0x0800743b
 80073d4:	0800742d 	.word	0x0800742d
 80073d8:	2b40      	cmp	r3, #64	; 0x40
 80073da:	d02a      	beq.n	8007432 <UART_SetConfig+0x8aa>
 80073dc:	e02d      	b.n	800743a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80073de:	f7fd faf9 	bl	80049d4 <HAL_RCCEx_GetD3PCLK1Freq>
 80073e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80073e4:	e02f      	b.n	8007446 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7fd fb08 	bl	8004a00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80073f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073f4:	e027      	b.n	8007446 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073f6:	f107 0318 	add.w	r3, r7, #24
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fd fc54 	bl	8004ca8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007404:	e01f      	b.n	8007446 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007406:	4b21      	ldr	r3, [pc, #132]	; (800748c <UART_SetConfig+0x904>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 0320 	and.w	r3, r3, #32
 800740e:	2b00      	cmp	r3, #0
 8007410:	d009      	beq.n	8007426 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007412:	4b1e      	ldr	r3, [pc, #120]	; (800748c <UART_SetConfig+0x904>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	08db      	lsrs	r3, r3, #3
 8007418:	f003 0303 	and.w	r3, r3, #3
 800741c:	4a1d      	ldr	r2, [pc, #116]	; (8007494 <UART_SetConfig+0x90c>)
 800741e:	fa22 f303 	lsr.w	r3, r2, r3
 8007422:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007424:	e00f      	b.n	8007446 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007426:	4b1b      	ldr	r3, [pc, #108]	; (8007494 <UART_SetConfig+0x90c>)
 8007428:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800742a:	e00c      	b.n	8007446 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800742c:	4b1a      	ldr	r3, [pc, #104]	; (8007498 <UART_SetConfig+0x910>)
 800742e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007430:	e009      	b.n	8007446 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007436:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007438:	e005      	b.n	8007446 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800743a:	2300      	movs	r3, #0
 800743c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007444:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007448:	2b00      	cmp	r3, #0
 800744a:	f000 81ee 	beq.w	800782a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007452:	4a12      	ldr	r2, [pc, #72]	; (800749c <UART_SetConfig+0x914>)
 8007454:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007458:	461a      	mov	r2, r3
 800745a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800745c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007460:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	685a      	ldr	r2, [r3, #4]
 8007466:	4613      	mov	r3, r2
 8007468:	005b      	lsls	r3, r3, #1
 800746a:	4413      	add	r3, r2
 800746c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800746e:	429a      	cmp	r2, r3
 8007470:	d305      	bcc.n	800747e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800747a:	429a      	cmp	r2, r3
 800747c:	d910      	bls.n	80074a0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007484:	e1d1      	b.n	800782a <UART_SetConfig+0xca2>
 8007486:	bf00      	nop
 8007488:	40011c00 	.word	0x40011c00
 800748c:	58024400 	.word	0x58024400
 8007490:	58000c00 	.word	0x58000c00
 8007494:	03d09000 	.word	0x03d09000
 8007498:	003d0900 	.word	0x003d0900
 800749c:	08008c90 	.word	0x08008c90
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074a2:	2200      	movs	r2, #0
 80074a4:	60bb      	str	r3, [r7, #8]
 80074a6:	60fa      	str	r2, [r7, #12]
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ac:	4ac0      	ldr	r2, [pc, #768]	; (80077b0 <UART_SetConfig+0xc28>)
 80074ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	2200      	movs	r2, #0
 80074b6:	603b      	str	r3, [r7, #0]
 80074b8:	607a      	str	r2, [r7, #4]
 80074ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80074c2:	f7f8 ff13 	bl	80002ec <__aeabi_uldivmod>
 80074c6:	4602      	mov	r2, r0
 80074c8:	460b      	mov	r3, r1
 80074ca:	4610      	mov	r0, r2
 80074cc:	4619      	mov	r1, r3
 80074ce:	f04f 0200 	mov.w	r2, #0
 80074d2:	f04f 0300 	mov.w	r3, #0
 80074d6:	020b      	lsls	r3, r1, #8
 80074d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80074dc:	0202      	lsls	r2, r0, #8
 80074de:	6979      	ldr	r1, [r7, #20]
 80074e0:	6849      	ldr	r1, [r1, #4]
 80074e2:	0849      	lsrs	r1, r1, #1
 80074e4:	2000      	movs	r0, #0
 80074e6:	460c      	mov	r4, r1
 80074e8:	4605      	mov	r5, r0
 80074ea:	eb12 0804 	adds.w	r8, r2, r4
 80074ee:	eb43 0905 	adc.w	r9, r3, r5
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	469a      	mov	sl, r3
 80074fa:	4693      	mov	fp, r2
 80074fc:	4652      	mov	r2, sl
 80074fe:	465b      	mov	r3, fp
 8007500:	4640      	mov	r0, r8
 8007502:	4649      	mov	r1, r9
 8007504:	f7f8 fef2 	bl	80002ec <__aeabi_uldivmod>
 8007508:	4602      	mov	r2, r0
 800750a:	460b      	mov	r3, r1
 800750c:	4613      	mov	r3, r2
 800750e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007512:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007516:	d308      	bcc.n	800752a <UART_SetConfig+0x9a2>
 8007518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800751e:	d204      	bcs.n	800752a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007526:	60da      	str	r2, [r3, #12]
 8007528:	e17f      	b.n	800782a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007530:	e17b      	b.n	800782a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	69db      	ldr	r3, [r3, #28]
 8007536:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800753a:	f040 80bd 	bne.w	80076b8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800753e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007542:	2b20      	cmp	r3, #32
 8007544:	dc48      	bgt.n	80075d8 <UART_SetConfig+0xa50>
 8007546:	2b00      	cmp	r3, #0
 8007548:	db7b      	blt.n	8007642 <UART_SetConfig+0xaba>
 800754a:	2b20      	cmp	r3, #32
 800754c:	d879      	bhi.n	8007642 <UART_SetConfig+0xaba>
 800754e:	a201      	add	r2, pc, #4	; (adr r2, 8007554 <UART_SetConfig+0x9cc>)
 8007550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007554:	080075df 	.word	0x080075df
 8007558:	080075e7 	.word	0x080075e7
 800755c:	08007643 	.word	0x08007643
 8007560:	08007643 	.word	0x08007643
 8007564:	080075ef 	.word	0x080075ef
 8007568:	08007643 	.word	0x08007643
 800756c:	08007643 	.word	0x08007643
 8007570:	08007643 	.word	0x08007643
 8007574:	080075ff 	.word	0x080075ff
 8007578:	08007643 	.word	0x08007643
 800757c:	08007643 	.word	0x08007643
 8007580:	08007643 	.word	0x08007643
 8007584:	08007643 	.word	0x08007643
 8007588:	08007643 	.word	0x08007643
 800758c:	08007643 	.word	0x08007643
 8007590:	08007643 	.word	0x08007643
 8007594:	0800760f 	.word	0x0800760f
 8007598:	08007643 	.word	0x08007643
 800759c:	08007643 	.word	0x08007643
 80075a0:	08007643 	.word	0x08007643
 80075a4:	08007643 	.word	0x08007643
 80075a8:	08007643 	.word	0x08007643
 80075ac:	08007643 	.word	0x08007643
 80075b0:	08007643 	.word	0x08007643
 80075b4:	08007643 	.word	0x08007643
 80075b8:	08007643 	.word	0x08007643
 80075bc:	08007643 	.word	0x08007643
 80075c0:	08007643 	.word	0x08007643
 80075c4:	08007643 	.word	0x08007643
 80075c8:	08007643 	.word	0x08007643
 80075cc:	08007643 	.word	0x08007643
 80075d0:	08007643 	.word	0x08007643
 80075d4:	08007635 	.word	0x08007635
 80075d8:	2b40      	cmp	r3, #64	; 0x40
 80075da:	d02e      	beq.n	800763a <UART_SetConfig+0xab2>
 80075dc:	e031      	b.n	8007642 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075de:	f7fc f80f 	bl	8003600 <HAL_RCC_GetPCLK1Freq>
 80075e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80075e4:	e033      	b.n	800764e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075e6:	f7fc f821 	bl	800362c <HAL_RCC_GetPCLK2Freq>
 80075ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80075ec:	e02f      	b.n	800764e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7fd fa04 	bl	8004a00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80075f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075fc:	e027      	b.n	800764e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075fe:	f107 0318 	add.w	r3, r7, #24
 8007602:	4618      	mov	r0, r3
 8007604:	f7fd fb50 	bl	8004ca8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800760c:	e01f      	b.n	800764e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800760e:	4b69      	ldr	r3, [pc, #420]	; (80077b4 <UART_SetConfig+0xc2c>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 0320 	and.w	r3, r3, #32
 8007616:	2b00      	cmp	r3, #0
 8007618:	d009      	beq.n	800762e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800761a:	4b66      	ldr	r3, [pc, #408]	; (80077b4 <UART_SetConfig+0xc2c>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	08db      	lsrs	r3, r3, #3
 8007620:	f003 0303 	and.w	r3, r3, #3
 8007624:	4a64      	ldr	r2, [pc, #400]	; (80077b8 <UART_SetConfig+0xc30>)
 8007626:	fa22 f303 	lsr.w	r3, r2, r3
 800762a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800762c:	e00f      	b.n	800764e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800762e:	4b62      	ldr	r3, [pc, #392]	; (80077b8 <UART_SetConfig+0xc30>)
 8007630:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007632:	e00c      	b.n	800764e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007634:	4b61      	ldr	r3, [pc, #388]	; (80077bc <UART_SetConfig+0xc34>)
 8007636:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007638:	e009      	b.n	800764e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800763a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800763e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007640:	e005      	b.n	800764e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8007642:	2300      	movs	r3, #0
 8007644:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800764c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800764e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007650:	2b00      	cmp	r3, #0
 8007652:	f000 80ea 	beq.w	800782a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765a:	4a55      	ldr	r2, [pc, #340]	; (80077b0 <UART_SetConfig+0xc28>)
 800765c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007660:	461a      	mov	r2, r3
 8007662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007664:	fbb3 f3f2 	udiv	r3, r3, r2
 8007668:	005a      	lsls	r2, r3, #1
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	085b      	lsrs	r3, r3, #1
 8007670:	441a      	add	r2, r3
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	fbb2 f3f3 	udiv	r3, r2, r3
 800767a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800767c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800767e:	2b0f      	cmp	r3, #15
 8007680:	d916      	bls.n	80076b0 <UART_SetConfig+0xb28>
 8007682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007688:	d212      	bcs.n	80076b0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800768a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768c:	b29b      	uxth	r3, r3
 800768e:	f023 030f 	bic.w	r3, r3, #15
 8007692:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007696:	085b      	lsrs	r3, r3, #1
 8007698:	b29b      	uxth	r3, r3
 800769a:	f003 0307 	and.w	r3, r3, #7
 800769e:	b29a      	uxth	r2, r3
 80076a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80076a2:	4313      	orrs	r3, r2
 80076a4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80076ac:	60da      	str	r2, [r3, #12]
 80076ae:	e0bc      	b.n	800782a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80076b6:	e0b8      	b.n	800782a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80076b8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80076bc:	2b20      	cmp	r3, #32
 80076be:	dc4b      	bgt.n	8007758 <UART_SetConfig+0xbd0>
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f2c0 8087 	blt.w	80077d4 <UART_SetConfig+0xc4c>
 80076c6:	2b20      	cmp	r3, #32
 80076c8:	f200 8084 	bhi.w	80077d4 <UART_SetConfig+0xc4c>
 80076cc:	a201      	add	r2, pc, #4	; (adr r2, 80076d4 <UART_SetConfig+0xb4c>)
 80076ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d2:	bf00      	nop
 80076d4:	0800775f 	.word	0x0800775f
 80076d8:	08007767 	.word	0x08007767
 80076dc:	080077d5 	.word	0x080077d5
 80076e0:	080077d5 	.word	0x080077d5
 80076e4:	0800776f 	.word	0x0800776f
 80076e8:	080077d5 	.word	0x080077d5
 80076ec:	080077d5 	.word	0x080077d5
 80076f0:	080077d5 	.word	0x080077d5
 80076f4:	0800777f 	.word	0x0800777f
 80076f8:	080077d5 	.word	0x080077d5
 80076fc:	080077d5 	.word	0x080077d5
 8007700:	080077d5 	.word	0x080077d5
 8007704:	080077d5 	.word	0x080077d5
 8007708:	080077d5 	.word	0x080077d5
 800770c:	080077d5 	.word	0x080077d5
 8007710:	080077d5 	.word	0x080077d5
 8007714:	0800778f 	.word	0x0800778f
 8007718:	080077d5 	.word	0x080077d5
 800771c:	080077d5 	.word	0x080077d5
 8007720:	080077d5 	.word	0x080077d5
 8007724:	080077d5 	.word	0x080077d5
 8007728:	080077d5 	.word	0x080077d5
 800772c:	080077d5 	.word	0x080077d5
 8007730:	080077d5 	.word	0x080077d5
 8007734:	080077d5 	.word	0x080077d5
 8007738:	080077d5 	.word	0x080077d5
 800773c:	080077d5 	.word	0x080077d5
 8007740:	080077d5 	.word	0x080077d5
 8007744:	080077d5 	.word	0x080077d5
 8007748:	080077d5 	.word	0x080077d5
 800774c:	080077d5 	.word	0x080077d5
 8007750:	080077d5 	.word	0x080077d5
 8007754:	080077c7 	.word	0x080077c7
 8007758:	2b40      	cmp	r3, #64	; 0x40
 800775a:	d037      	beq.n	80077cc <UART_SetConfig+0xc44>
 800775c:	e03a      	b.n	80077d4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800775e:	f7fb ff4f 	bl	8003600 <HAL_RCC_GetPCLK1Freq>
 8007762:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007764:	e03c      	b.n	80077e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007766:	f7fb ff61 	bl	800362c <HAL_RCC_GetPCLK2Freq>
 800776a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800776c:	e038      	b.n	80077e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800776e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007772:	4618      	mov	r0, r3
 8007774:	f7fd f944 	bl	8004a00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800777a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800777c:	e030      	b.n	80077e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800777e:	f107 0318 	add.w	r3, r7, #24
 8007782:	4618      	mov	r0, r3
 8007784:	f7fd fa90 	bl	8004ca8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800778c:	e028      	b.n	80077e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800778e:	4b09      	ldr	r3, [pc, #36]	; (80077b4 <UART_SetConfig+0xc2c>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 0320 	and.w	r3, r3, #32
 8007796:	2b00      	cmp	r3, #0
 8007798:	d012      	beq.n	80077c0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800779a:	4b06      	ldr	r3, [pc, #24]	; (80077b4 <UART_SetConfig+0xc2c>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	08db      	lsrs	r3, r3, #3
 80077a0:	f003 0303 	and.w	r3, r3, #3
 80077a4:	4a04      	ldr	r2, [pc, #16]	; (80077b8 <UART_SetConfig+0xc30>)
 80077a6:	fa22 f303 	lsr.w	r3, r2, r3
 80077aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80077ac:	e018      	b.n	80077e0 <UART_SetConfig+0xc58>
 80077ae:	bf00      	nop
 80077b0:	08008c90 	.word	0x08008c90
 80077b4:	58024400 	.word	0x58024400
 80077b8:	03d09000 	.word	0x03d09000
 80077bc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80077c0:	4b24      	ldr	r3, [pc, #144]	; (8007854 <UART_SetConfig+0xccc>)
 80077c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077c4:	e00c      	b.n	80077e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80077c6:	4b24      	ldr	r3, [pc, #144]	; (8007858 <UART_SetConfig+0xcd0>)
 80077c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077ca:	e009      	b.n	80077e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077d2:	e005      	b.n	80077e0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80077d4:	2300      	movs	r3, #0
 80077d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80077de:	bf00      	nop
    }

    if (pclk != 0U)
 80077e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d021      	beq.n	800782a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ea:	4a1c      	ldr	r2, [pc, #112]	; (800785c <UART_SetConfig+0xcd4>)
 80077ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077f0:	461a      	mov	r2, r3
 80077f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077f4:	fbb3 f2f2 	udiv	r2, r3, r2
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	085b      	lsrs	r3, r3, #1
 80077fe:	441a      	add	r2, r3
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	fbb2 f3f3 	udiv	r3, r2, r3
 8007808:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800780a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800780c:	2b0f      	cmp	r3, #15
 800780e:	d909      	bls.n	8007824 <UART_SetConfig+0xc9c>
 8007810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007816:	d205      	bcs.n	8007824 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800781a:	b29a      	uxth	r2, r3
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	60da      	str	r2, [r3, #12]
 8007822:	e002      	b.n	800782a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	2201      	movs	r2, #1
 800782e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	2201      	movs	r2, #1
 8007836:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	2200      	movs	r2, #0
 800783e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	2200      	movs	r2, #0
 8007844:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007846:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800784a:	4618      	mov	r0, r3
 800784c:	3748      	adds	r7, #72	; 0x48
 800784e:	46bd      	mov	sp, r7
 8007850:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007854:	03d09000 	.word	0x03d09000
 8007858:	003d0900 	.word	0x003d0900
 800785c:	08008c90 	.word	0x08008c90

08007860 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800786c:	f003 0301 	and.w	r3, r3, #1
 8007870:	2b00      	cmp	r3, #0
 8007872:	d00a      	beq.n	800788a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	430a      	orrs	r2, r1
 8007888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788e:	f003 0302 	and.w	r3, r3, #2
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00a      	beq.n	80078ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	430a      	orrs	r2, r1
 80078aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b0:	f003 0304 	and.w	r3, r3, #4
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00a      	beq.n	80078ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	430a      	orrs	r2, r1
 80078cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d2:	f003 0308 	and.w	r3, r3, #8
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00a      	beq.n	80078f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	430a      	orrs	r2, r1
 80078ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f4:	f003 0310 	and.w	r3, r3, #16
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d00a      	beq.n	8007912 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	430a      	orrs	r2, r1
 8007910:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007916:	f003 0320 	and.w	r3, r3, #32
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00a      	beq.n	8007934 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	430a      	orrs	r2, r1
 8007932:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800793c:	2b00      	cmp	r3, #0
 800793e:	d01a      	beq.n	8007976 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	430a      	orrs	r2, r1
 8007954:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800795a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800795e:	d10a      	bne.n	8007976 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	430a      	orrs	r2, r1
 8007974:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800797a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00a      	beq.n	8007998 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	430a      	orrs	r2, r1
 8007996:	605a      	str	r2, [r3, #4]
  }
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b098      	sub	sp, #96	; 0x60
 80079a8:	af02      	add	r7, sp, #8
 80079aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80079b4:	f7f9 fdb0 	bl	8001518 <HAL_GetTick>
 80079b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 0308 	and.w	r3, r3, #8
 80079c4:	2b08      	cmp	r3, #8
 80079c6:	d12f      	bne.n	8007a28 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079cc:	9300      	str	r3, [sp, #0]
 80079ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079d0:	2200      	movs	r2, #0
 80079d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f88e 	bl	8007af8 <UART_WaitOnFlagUntilTimeout>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d022      	beq.n	8007a28 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ea:	e853 3f00 	ldrex	r3, [r3]
 80079ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079f6:	653b      	str	r3, [r7, #80]	; 0x50
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	461a      	mov	r2, r3
 80079fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a00:	647b      	str	r3, [r7, #68]	; 0x44
 8007a02:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a08:	e841 2300 	strex	r3, r2, [r1]
 8007a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d1e6      	bne.n	80079e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2220      	movs	r2, #32
 8007a18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a24:	2303      	movs	r3, #3
 8007a26:	e063      	b.n	8007af0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 0304 	and.w	r3, r3, #4
 8007a32:	2b04      	cmp	r3, #4
 8007a34:	d149      	bne.n	8007aca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a3a:	9300      	str	r3, [sp, #0]
 8007a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 f857 	bl	8007af8 <UART_WaitOnFlagUntilTimeout>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d03c      	beq.n	8007aca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a58:	e853 3f00 	ldrex	r3, [r3]
 8007a5c:	623b      	str	r3, [r7, #32]
   return(result);
 8007a5e:	6a3b      	ldr	r3, [r7, #32]
 8007a60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a6e:	633b      	str	r3, [r7, #48]	; 0x30
 8007a70:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a76:	e841 2300 	strex	r3, r2, [r1]
 8007a7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1e6      	bne.n	8007a50 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	3308      	adds	r3, #8
 8007a88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	e853 3f00 	ldrex	r3, [r3]
 8007a90:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f023 0301 	bic.w	r3, r3, #1
 8007a98:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	3308      	adds	r3, #8
 8007aa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007aa2:	61fa      	str	r2, [r7, #28]
 8007aa4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa6:	69b9      	ldr	r1, [r7, #24]
 8007aa8:	69fa      	ldr	r2, [r7, #28]
 8007aaa:	e841 2300 	strex	r3, r2, [r1]
 8007aae:	617b      	str	r3, [r7, #20]
   return(result);
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d1e5      	bne.n	8007a82 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2220      	movs	r2, #32
 8007aba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e012      	b.n	8007af0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2220      	movs	r2, #32
 8007ace:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2220      	movs	r2, #32
 8007ad6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3758      	adds	r7, #88	; 0x58
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	603b      	str	r3, [r7, #0]
 8007b04:	4613      	mov	r3, r2
 8007b06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b08:	e049      	b.n	8007b9e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b10:	d045      	beq.n	8007b9e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b12:	f7f9 fd01 	bl	8001518 <HAL_GetTick>
 8007b16:	4602      	mov	r2, r0
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	1ad3      	subs	r3, r2, r3
 8007b1c:	69ba      	ldr	r2, [r7, #24]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d302      	bcc.n	8007b28 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d101      	bne.n	8007b2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	e048      	b.n	8007bbe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f003 0304 	and.w	r3, r3, #4
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d031      	beq.n	8007b9e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	69db      	ldr	r3, [r3, #28]
 8007b40:	f003 0308 	and.w	r3, r3, #8
 8007b44:	2b08      	cmp	r3, #8
 8007b46:	d110      	bne.n	8007b6a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2208      	movs	r2, #8
 8007b4e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	f000 f95b 	bl	8007e0c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2208      	movs	r2, #8
 8007b5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e029      	b.n	8007bbe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	69db      	ldr	r3, [r3, #28]
 8007b70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b78:	d111      	bne.n	8007b9e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	f000 f941 	bl	8007e0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2220      	movs	r2, #32
 8007b8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	e00f      	b.n	8007bbe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	69da      	ldr	r2, [r3, #28]
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	4013      	ands	r3, r2
 8007ba8:	68ba      	ldr	r2, [r7, #8]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	bf0c      	ite	eq
 8007bae:	2301      	moveq	r3, #1
 8007bb0:	2300      	movne	r3, #0
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	79fb      	ldrb	r3, [r7, #7]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d0a6      	beq.n	8007b0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3710      	adds	r7, #16
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
	...

08007bc8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b0a3      	sub	sp, #140	; 0x8c
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	4613      	mov	r3, r2
 8007bd4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	68ba      	ldr	r2, [r7, #8]
 8007bda:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	88fa      	ldrh	r2, [r7, #6]
 8007be0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	88fa      	ldrh	r2, [r7, #6]
 8007be8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bfa:	d10e      	bne.n	8007c1a <UART_Start_Receive_IT+0x52>
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d105      	bne.n	8007c10 <UART_Start_Receive_IT+0x48>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007c0a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c0e:	e02d      	b.n	8007c6c <UART_Start_Receive_IT+0xa4>
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	22ff      	movs	r2, #255	; 0xff
 8007c14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c18:	e028      	b.n	8007c6c <UART_Start_Receive_IT+0xa4>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d10d      	bne.n	8007c3e <UART_Start_Receive_IT+0x76>
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d104      	bne.n	8007c34 <UART_Start_Receive_IT+0x6c>
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	22ff      	movs	r2, #255	; 0xff
 8007c2e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c32:	e01b      	b.n	8007c6c <UART_Start_Receive_IT+0xa4>
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	227f      	movs	r2, #127	; 0x7f
 8007c38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c3c:	e016      	b.n	8007c6c <UART_Start_Receive_IT+0xa4>
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c46:	d10d      	bne.n	8007c64 <UART_Start_Receive_IT+0x9c>
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d104      	bne.n	8007c5a <UART_Start_Receive_IT+0x92>
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	227f      	movs	r2, #127	; 0x7f
 8007c54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c58:	e008      	b.n	8007c6c <UART_Start_Receive_IT+0xa4>
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	223f      	movs	r2, #63	; 0x3f
 8007c5e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c62:	e003      	b.n	8007c6c <UART_Start_Receive_IT+0xa4>
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2222      	movs	r2, #34	; 0x22
 8007c78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	3308      	adds	r3, #8
 8007c82:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c86:	e853 3f00 	ldrex	r3, [r3]
 8007c8a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007c8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c8e:	f043 0301 	orr.w	r3, r3, #1
 8007c92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	3308      	adds	r3, #8
 8007c9c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007ca0:	673a      	str	r2, [r7, #112]	; 0x70
 8007ca2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007ca6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007ca8:	e841 2300 	strex	r3, r2, [r1]
 8007cac:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007cae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d1e3      	bne.n	8007c7c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cbc:	d14f      	bne.n	8007d5e <UART_Start_Receive_IT+0x196>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007cc4:	88fa      	ldrh	r2, [r7, #6]
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d349      	bcc.n	8007d5e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cd2:	d107      	bne.n	8007ce4 <UART_Start_Receive_IT+0x11c>
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	691b      	ldr	r3, [r3, #16]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d103      	bne.n	8007ce4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	4a47      	ldr	r2, [pc, #284]	; (8007dfc <UART_Start_Receive_IT+0x234>)
 8007ce0:	675a      	str	r2, [r3, #116]	; 0x74
 8007ce2:	e002      	b.n	8007cea <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	4a46      	ldr	r2, [pc, #280]	; (8007e00 <UART_Start_Receive_IT+0x238>)
 8007ce8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d01a      	beq.n	8007d28 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cfa:	e853 3f00 	ldrex	r3, [r3]
 8007cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	461a      	mov	r2, r3
 8007d10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007d14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d16:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d18:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d1a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007d1c:	e841 2300 	strex	r3, r2, [r1]
 8007d20:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007d22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d1e4      	bne.n	8007cf2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	3308      	adds	r3, #8
 8007d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d32:	e853 3f00 	ldrex	r3, [r3]
 8007d36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d3e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	3308      	adds	r3, #8
 8007d46:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007d48:	64ba      	str	r2, [r7, #72]	; 0x48
 8007d4a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007d4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d50:	e841 2300 	strex	r3, r2, [r1]
 8007d54:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007d56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d1e5      	bne.n	8007d28 <UART_Start_Receive_IT+0x160>
 8007d5c:	e046      	b.n	8007dec <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d66:	d107      	bne.n	8007d78 <UART_Start_Receive_IT+0x1b0>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d103      	bne.n	8007d78 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	4a24      	ldr	r2, [pc, #144]	; (8007e04 <UART_Start_Receive_IT+0x23c>)
 8007d74:	675a      	str	r2, [r3, #116]	; 0x74
 8007d76:	e002      	b.n	8007d7e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	4a23      	ldr	r2, [pc, #140]	; (8007e08 <UART_Start_Receive_IT+0x240>)
 8007d7c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d019      	beq.n	8007dba <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8e:	e853 3f00 	ldrex	r3, [r3]
 8007d92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d96:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007d9a:	677b      	str	r3, [r7, #116]	; 0x74
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	461a      	mov	r2, r3
 8007da2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007da4:	637b      	str	r3, [r7, #52]	; 0x34
 8007da6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007daa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007dac:	e841 2300 	strex	r3, r2, [r1]
 8007db0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d1e6      	bne.n	8007d86 <UART_Start_Receive_IT+0x1be>
 8007db8:	e018      	b.n	8007dec <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	e853 3f00 	ldrex	r3, [r3]
 8007dc6:	613b      	str	r3, [r7, #16]
   return(result);
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	f043 0320 	orr.w	r3, r3, #32
 8007dce:	67bb      	str	r3, [r7, #120]	; 0x78
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dd8:	623b      	str	r3, [r7, #32]
 8007dda:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ddc:	69f9      	ldr	r1, [r7, #28]
 8007dde:	6a3a      	ldr	r2, [r7, #32]
 8007de0:	e841 2300 	strex	r3, r2, [r1]
 8007de4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d1e6      	bne.n	8007dba <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	378c      	adds	r7, #140	; 0x8c
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop
 8007dfc:	0800862d 	.word	0x0800862d
 8007e00:	080082cd 	.word	0x080082cd
 8007e04:	08008115 	.word	0x08008115
 8007e08:	08007f5d 	.word	0x08007f5d

08007e0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b095      	sub	sp, #84	; 0x54
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e1c:	e853 3f00 	ldrex	r3, [r3]
 8007e20:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e32:	643b      	str	r3, [r7, #64]	; 0x40
 8007e34:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e3a:	e841 2300 	strex	r3, r2, [r1]
 8007e3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1e6      	bne.n	8007e14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	3308      	adds	r3, #8
 8007e4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4e:	6a3b      	ldr	r3, [r7, #32]
 8007e50:	e853 3f00 	ldrex	r3, [r3]
 8007e54:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e56:	69fa      	ldr	r2, [r7, #28]
 8007e58:	4b1e      	ldr	r3, [pc, #120]	; (8007ed4 <UART_EndRxTransfer+0xc8>)
 8007e5a:	4013      	ands	r3, r2
 8007e5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	3308      	adds	r3, #8
 8007e64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e68:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e6e:	e841 2300 	strex	r3, r2, [r1]
 8007e72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1e5      	bne.n	8007e46 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d118      	bne.n	8007eb4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	e853 3f00 	ldrex	r3, [r3]
 8007e8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	f023 0310 	bic.w	r3, r3, #16
 8007e96:	647b      	str	r3, [r7, #68]	; 0x44
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ea0:	61bb      	str	r3, [r7, #24]
 8007ea2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea4:	6979      	ldr	r1, [r7, #20]
 8007ea6:	69ba      	ldr	r2, [r7, #24]
 8007ea8:	e841 2300 	strex	r3, r2, [r1]
 8007eac:	613b      	str	r3, [r7, #16]
   return(result);
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d1e6      	bne.n	8007e82 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2220      	movs	r2, #32
 8007eb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007ec8:	bf00      	nop
 8007eca:	3754      	adds	r7, #84	; 0x54
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr
 8007ed4:	effffffe 	.word	0xeffffffe

08007ed8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	f7fe fe30 	bl	8006b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007efc:	bf00      	nop
 8007efe:	3710      	adds	r7, #16
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b088      	sub	sp, #32
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	e853 3f00 	ldrex	r3, [r3]
 8007f18:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f20:	61fb      	str	r3, [r7, #28]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	461a      	mov	r2, r3
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	61bb      	str	r3, [r7, #24]
 8007f2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2e:	6979      	ldr	r1, [r7, #20]
 8007f30:	69ba      	ldr	r2, [r7, #24]
 8007f32:	e841 2300 	strex	r3, r2, [r1]
 8007f36:	613b      	str	r3, [r7, #16]
   return(result);
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d1e6      	bne.n	8007f0c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2220      	movs	r2, #32
 8007f42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f7fe fdfb 	bl	8006b48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f52:	bf00      	nop
 8007f54:	3720      	adds	r7, #32
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
	...

08007f5c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b09c      	sub	sp, #112	; 0x70
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007f6a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f74:	2b22      	cmp	r3, #34	; 0x22
 8007f76:	f040 80be 	bne.w	80080f6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f80:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007f84:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007f88:	b2d9      	uxtb	r1, r3
 8007f8a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007f8e:	b2da      	uxtb	r2, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f94:	400a      	ands	r2, r1
 8007f96:	b2d2      	uxtb	r2, r2
 8007f98:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f9e:	1c5a      	adds	r2, r3, #1
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	3b01      	subs	r3, #1
 8007fae:	b29a      	uxth	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	f040 80a1 	bne.w	8008106 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fcc:	e853 3f00 	ldrex	r3, [r3]
 8007fd0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007fd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007fe2:	65bb      	str	r3, [r7, #88]	; 0x58
 8007fe4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007fe8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007fea:	e841 2300 	strex	r3, r2, [r1]
 8007fee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007ff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1e6      	bne.n	8007fc4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	3308      	adds	r3, #8
 8007ffc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008000:	e853 3f00 	ldrex	r3, [r3]
 8008004:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008008:	f023 0301 	bic.w	r3, r3, #1
 800800c:	667b      	str	r3, [r7, #100]	; 0x64
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	3308      	adds	r3, #8
 8008014:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008016:	647a      	str	r2, [r7, #68]	; 0x44
 8008018:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800801a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800801c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800801e:	e841 2300 	strex	r3, r2, [r1]
 8008022:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008026:	2b00      	cmp	r3, #0
 8008028:	d1e5      	bne.n	8007ff6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2220      	movs	r2, #32
 800802e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a33      	ldr	r2, [pc, #204]	; (8008110 <UART_RxISR_8BIT+0x1b4>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d01f      	beq.n	8008088 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008052:	2b00      	cmp	r3, #0
 8008054:	d018      	beq.n	8008088 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800805c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805e:	e853 3f00 	ldrex	r3, [r3]
 8008062:	623b      	str	r3, [r7, #32]
   return(result);
 8008064:	6a3b      	ldr	r3, [r7, #32]
 8008066:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800806a:	663b      	str	r3, [r7, #96]	; 0x60
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	461a      	mov	r2, r3
 8008072:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008074:	633b      	str	r3, [r7, #48]	; 0x30
 8008076:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008078:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800807a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800807c:	e841 2300 	strex	r3, r2, [r1]
 8008080:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008084:	2b00      	cmp	r3, #0
 8008086:	d1e6      	bne.n	8008056 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800808c:	2b01      	cmp	r3, #1
 800808e:	d12e      	bne.n	80080ee <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	e853 3f00 	ldrex	r3, [r3]
 80080a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f023 0310 	bic.w	r3, r3, #16
 80080aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	461a      	mov	r2, r3
 80080b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080b4:	61fb      	str	r3, [r7, #28]
 80080b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b8:	69b9      	ldr	r1, [r7, #24]
 80080ba:	69fa      	ldr	r2, [r7, #28]
 80080bc:	e841 2300 	strex	r3, r2, [r1]
 80080c0:	617b      	str	r3, [r7, #20]
   return(result);
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d1e6      	bne.n	8008096 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	69db      	ldr	r3, [r3, #28]
 80080ce:	f003 0310 	and.w	r3, r3, #16
 80080d2:	2b10      	cmp	r3, #16
 80080d4:	d103      	bne.n	80080de <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	2210      	movs	r2, #16
 80080dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80080e4:	4619      	mov	r1, r3
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f7fe fd42 	bl	8006b70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80080ec:	e00b      	b.n	8008106 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f7f9 f938 	bl	8001364 <HAL_UART_RxCpltCallback>
}
 80080f4:	e007      	b.n	8008106 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	699a      	ldr	r2, [r3, #24]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f042 0208 	orr.w	r2, r2, #8
 8008104:	619a      	str	r2, [r3, #24]
}
 8008106:	bf00      	nop
 8008108:	3770      	adds	r7, #112	; 0x70
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	58000c00 	.word	0x58000c00

08008114 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b09c      	sub	sp, #112	; 0x70
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008122:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800812c:	2b22      	cmp	r3, #34	; 0x22
 800812e:	f040 80be 	bne.w	80082ae <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008138:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008140:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008142:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008146:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800814a:	4013      	ands	r3, r2
 800814c:	b29a      	uxth	r2, r3
 800814e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008150:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008156:	1c9a      	adds	r2, r3, #2
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008162:	b29b      	uxth	r3, r3
 8008164:	3b01      	subs	r3, #1
 8008166:	b29a      	uxth	r2, r3
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008174:	b29b      	uxth	r3, r3
 8008176:	2b00      	cmp	r3, #0
 8008178:	f040 80a1 	bne.w	80082be <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008184:	e853 3f00 	ldrex	r3, [r3]
 8008188:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800818a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800818c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008190:	667b      	str	r3, [r7, #100]	; 0x64
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	461a      	mov	r2, r3
 8008198:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800819a:	657b      	str	r3, [r7, #84]	; 0x54
 800819c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80081a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80081a2:	e841 2300 	strex	r3, r2, [r1]
 80081a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80081a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d1e6      	bne.n	800817c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	3308      	adds	r3, #8
 80081b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081b8:	e853 3f00 	ldrex	r3, [r3]
 80081bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80081be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c0:	f023 0301 	bic.w	r3, r3, #1
 80081c4:	663b      	str	r3, [r7, #96]	; 0x60
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	3308      	adds	r3, #8
 80081cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80081ce:	643a      	str	r2, [r7, #64]	; 0x40
 80081d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80081d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081d6:	e841 2300 	strex	r3, r2, [r1]
 80081da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d1e5      	bne.n	80081ae <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2220      	movs	r2, #32
 80081e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a33      	ldr	r2, [pc, #204]	; (80082c8 <UART_RxISR_16BIT+0x1b4>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d01f      	beq.n	8008240 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800820a:	2b00      	cmp	r3, #0
 800820c:	d018      	beq.n	8008240 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008214:	6a3b      	ldr	r3, [r7, #32]
 8008216:	e853 3f00 	ldrex	r3, [r3]
 800821a:	61fb      	str	r3, [r7, #28]
   return(result);
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008222:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	461a      	mov	r2, r3
 800822a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800822c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800822e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008230:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008232:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008234:	e841 2300 	strex	r3, r2, [r1]
 8008238:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800823a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823c:	2b00      	cmp	r3, #0
 800823e:	d1e6      	bne.n	800820e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008244:	2b01      	cmp	r3, #1
 8008246:	d12e      	bne.n	80082a6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	e853 3f00 	ldrex	r3, [r3]
 800825a:	60bb      	str	r3, [r7, #8]
   return(result);
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	f023 0310 	bic.w	r3, r3, #16
 8008262:	65bb      	str	r3, [r7, #88]	; 0x58
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	461a      	mov	r2, r3
 800826a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800826c:	61bb      	str	r3, [r7, #24]
 800826e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008270:	6979      	ldr	r1, [r7, #20]
 8008272:	69ba      	ldr	r2, [r7, #24]
 8008274:	e841 2300 	strex	r3, r2, [r1]
 8008278:	613b      	str	r3, [r7, #16]
   return(result);
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d1e6      	bne.n	800824e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	69db      	ldr	r3, [r3, #28]
 8008286:	f003 0310 	and.w	r3, r3, #16
 800828a:	2b10      	cmp	r3, #16
 800828c:	d103      	bne.n	8008296 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2210      	movs	r2, #16
 8008294:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800829c:	4619      	mov	r1, r3
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f7fe fc66 	bl	8006b70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80082a4:	e00b      	b.n	80082be <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f7f9 f85c 	bl	8001364 <HAL_UART_RxCpltCallback>
}
 80082ac:	e007      	b.n	80082be <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	699a      	ldr	r2, [r3, #24]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f042 0208 	orr.w	r2, r2, #8
 80082bc:	619a      	str	r2, [r3, #24]
}
 80082be:	bf00      	nop
 80082c0:	3770      	adds	r7, #112	; 0x70
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	58000c00 	.word	0x58000c00

080082cc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b0ac      	sub	sp, #176	; 0xb0
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80082da:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	69db      	ldr	r3, [r3, #28]
 80082e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008302:	2b22      	cmp	r3, #34	; 0x22
 8008304:	f040 8180 	bne.w	8008608 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800830e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008312:	e123      	b.n	800855c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800831e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8008322:	b2d9      	uxtb	r1, r3
 8008324:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008328:	b2da      	uxtb	r2, r3
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800832e:	400a      	ands	r2, r1
 8008330:	b2d2      	uxtb	r2, r2
 8008332:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008338:	1c5a      	adds	r2, r3, #1
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008344:	b29b      	uxth	r3, r3
 8008346:	3b01      	subs	r3, #1
 8008348:	b29a      	uxth	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	69db      	ldr	r3, [r3, #28]
 8008356:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800835a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800835e:	f003 0307 	and.w	r3, r3, #7
 8008362:	2b00      	cmp	r3, #0
 8008364:	d053      	beq.n	800840e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008366:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800836a:	f003 0301 	and.w	r3, r3, #1
 800836e:	2b00      	cmp	r3, #0
 8008370:	d011      	beq.n	8008396 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008372:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00b      	beq.n	8008396 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2201      	movs	r2, #1
 8008384:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800838c:	f043 0201 	orr.w	r2, r3, #1
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008396:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800839a:	f003 0302 	and.w	r3, r3, #2
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d011      	beq.n	80083c6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80083a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80083a6:	f003 0301 	and.w	r3, r3, #1
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00b      	beq.n	80083c6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2202      	movs	r2, #2
 80083b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083bc:	f043 0204 	orr.w	r2, r3, #4
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083ca:	f003 0304 	and.w	r3, r3, #4
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d011      	beq.n	80083f6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80083d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80083d6:	f003 0301 	and.w	r3, r3, #1
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00b      	beq.n	80083f6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2204      	movs	r2, #4
 80083e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083ec:	f043 0202 	orr.w	r2, r3, #2
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d006      	beq.n	800840e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f7fe fbab 	bl	8006b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008414:	b29b      	uxth	r3, r3
 8008416:	2b00      	cmp	r3, #0
 8008418:	f040 80a0 	bne.w	800855c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008422:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008424:	e853 3f00 	ldrex	r3, [r3]
 8008428:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800842a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800842c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008430:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	461a      	mov	r2, r3
 800843a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800843e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008440:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008442:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008444:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008446:	e841 2300 	strex	r3, r2, [r1]
 800844a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800844c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800844e:	2b00      	cmp	r3, #0
 8008450:	d1e4      	bne.n	800841c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	3308      	adds	r3, #8
 8008458:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800845c:	e853 3f00 	ldrex	r3, [r3]
 8008460:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008462:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008464:	4b6e      	ldr	r3, [pc, #440]	; (8008620 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8008466:	4013      	ands	r3, r2
 8008468:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	3308      	adds	r3, #8
 8008472:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008476:	66ba      	str	r2, [r7, #104]	; 0x68
 8008478:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800847c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800847e:	e841 2300 	strex	r3, r2, [r1]
 8008482:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008484:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008486:	2b00      	cmp	r3, #0
 8008488:	d1e3      	bne.n	8008452 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2220      	movs	r2, #32
 800848e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a60      	ldr	r2, [pc, #384]	; (8008624 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d021      	beq.n	80084ec <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d01a      	beq.n	80084ec <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084be:	e853 3f00 	ldrex	r3, [r3]
 80084c2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80084c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80084ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	461a      	mov	r2, r3
 80084d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80084d8:	657b      	str	r3, [r7, #84]	; 0x54
 80084da:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084dc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80084de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80084e0:	e841 2300 	strex	r3, r2, [r1]
 80084e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80084e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d1e4      	bne.n	80084b6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d130      	bne.n	8008556 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008502:	e853 3f00 	ldrex	r3, [r3]
 8008506:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850a:	f023 0310 	bic.w	r3, r3, #16
 800850e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	461a      	mov	r2, r3
 8008518:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800851c:	643b      	str	r3, [r7, #64]	; 0x40
 800851e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008520:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008522:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008524:	e841 2300 	strex	r3, r2, [r1]
 8008528:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800852a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852c:	2b00      	cmp	r3, #0
 800852e:	d1e4      	bne.n	80084fa <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	69db      	ldr	r3, [r3, #28]
 8008536:	f003 0310 	and.w	r3, r3, #16
 800853a:	2b10      	cmp	r3, #16
 800853c:	d103      	bne.n	8008546 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2210      	movs	r2, #16
 8008544:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800854c:	4619      	mov	r1, r3
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f7fe fb0e 	bl	8006b70 <HAL_UARTEx_RxEventCallback>
 8008554:	e002      	b.n	800855c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f7f8 ff04 	bl	8001364 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800855c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008560:	2b00      	cmp	r3, #0
 8008562:	d006      	beq.n	8008572 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8008564:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008568:	f003 0320 	and.w	r3, r3, #32
 800856c:	2b00      	cmp	r3, #0
 800856e:	f47f aed1 	bne.w	8008314 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008578:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800857c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008580:	2b00      	cmp	r3, #0
 8008582:	d049      	beq.n	8008618 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800858a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800858e:	429a      	cmp	r2, r3
 8008590:	d242      	bcs.n	8008618 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	3308      	adds	r3, #8
 8008598:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859a:	6a3b      	ldr	r3, [r7, #32]
 800859c:	e853 3f00 	ldrex	r3, [r3]
 80085a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	3308      	adds	r3, #8
 80085b2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80085b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80085b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085be:	e841 2300 	strex	r3, r2, [r1]
 80085c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d1e3      	bne.n	8008592 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4a16      	ldr	r2, [pc, #88]	; (8008628 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80085ce:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	e853 3f00 	ldrex	r3, [r3]
 80085dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	f043 0320 	orr.w	r3, r3, #32
 80085e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	461a      	mov	r2, r3
 80085ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80085f2:	61bb      	str	r3, [r7, #24]
 80085f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f6:	6979      	ldr	r1, [r7, #20]
 80085f8:	69ba      	ldr	r2, [r7, #24]
 80085fa:	e841 2300 	strex	r3, r2, [r1]
 80085fe:	613b      	str	r3, [r7, #16]
   return(result);
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d1e4      	bne.n	80085d0 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008606:	e007      	b.n	8008618 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	699a      	ldr	r2, [r3, #24]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f042 0208 	orr.w	r2, r2, #8
 8008616:	619a      	str	r2, [r3, #24]
}
 8008618:	bf00      	nop
 800861a:	37b0      	adds	r7, #176	; 0xb0
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}
 8008620:	effffffe 	.word	0xeffffffe
 8008624:	58000c00 	.word	0x58000c00
 8008628:	08007f5d 	.word	0x08007f5d

0800862c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b0ae      	sub	sp, #184	; 0xb8
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800863a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	69db      	ldr	r3, [r3, #28]
 8008644:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008662:	2b22      	cmp	r3, #34	; 0x22
 8008664:	f040 8184 	bne.w	8008970 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800866e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008672:	e127      	b.n	80088c4 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800867a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008682:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008686:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800868a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800868e:	4013      	ands	r3, r2
 8008690:	b29a      	uxth	r2, r3
 8008692:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008696:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800869c:	1c9a      	adds	r2, r3, #2
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	3b01      	subs	r3, #1
 80086ac:	b29a      	uxth	r2, r3
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	69db      	ldr	r3, [r3, #28]
 80086ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80086be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80086c2:	f003 0307 	and.w	r3, r3, #7
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d053      	beq.n	8008772 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80086ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80086ce:	f003 0301 	and.w	r3, r3, #1
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d011      	beq.n	80086fa <UART_RxISR_16BIT_FIFOEN+0xce>
 80086d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d00b      	beq.n	80086fa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2201      	movs	r2, #1
 80086e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086f0:	f043 0201 	orr.w	r2, r3, #1
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80086fe:	f003 0302 	and.w	r3, r3, #2
 8008702:	2b00      	cmp	r3, #0
 8008704:	d011      	beq.n	800872a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008706:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800870a:	f003 0301 	and.w	r3, r3, #1
 800870e:	2b00      	cmp	r3, #0
 8008710:	d00b      	beq.n	800872a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	2202      	movs	r2, #2
 8008718:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008720:	f043 0204 	orr.w	r2, r3, #4
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800872a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800872e:	f003 0304 	and.w	r3, r3, #4
 8008732:	2b00      	cmp	r3, #0
 8008734:	d011      	beq.n	800875a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008736:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800873a:	f003 0301 	and.w	r3, r3, #1
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00b      	beq.n	800875a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2204      	movs	r2, #4
 8008748:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008750:	f043 0202 	orr.w	r2, r3, #2
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008760:	2b00      	cmp	r3, #0
 8008762:	d006      	beq.n	8008772 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f7fe f9f9 	bl	8006b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2200      	movs	r2, #0
 800876e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008778:	b29b      	uxth	r3, r3
 800877a:	2b00      	cmp	r3, #0
 800877c:	f040 80a2 	bne.w	80088c4 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008786:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008788:	e853 3f00 	ldrex	r3, [r3]
 800878c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800878e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008790:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008794:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	461a      	mov	r2, r3
 800879e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80087a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80087a6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80087aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80087ae:	e841 2300 	strex	r3, r2, [r1]
 80087b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80087b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d1e2      	bne.n	8008780 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	3308      	adds	r3, #8
 80087c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087c4:	e853 3f00 	ldrex	r3, [r3]
 80087c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80087ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80087cc:	4b6e      	ldr	r3, [pc, #440]	; (8008988 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 80087ce:	4013      	ands	r3, r2
 80087d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	3308      	adds	r3, #8
 80087da:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80087de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80087e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80087e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80087e6:	e841 2300 	strex	r3, r2, [r1]
 80087ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80087ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d1e3      	bne.n	80087ba <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2220      	movs	r2, #32
 80087f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a60      	ldr	r2, [pc, #384]	; (800898c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d021      	beq.n	8008854 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800881a:	2b00      	cmp	r3, #0
 800881c:	d01a      	beq.n	8008854 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008826:	e853 3f00 	ldrex	r3, [r3]
 800882a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800882c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800882e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008832:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	461a      	mov	r2, r3
 800883c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008840:	65bb      	str	r3, [r7, #88]	; 0x58
 8008842:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008844:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008846:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008848:	e841 2300 	strex	r3, r2, [r1]
 800884c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800884e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008850:	2b00      	cmp	r3, #0
 8008852:	d1e4      	bne.n	800881e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008858:	2b01      	cmp	r3, #1
 800885a:	d130      	bne.n	80088be <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886a:	e853 3f00 	ldrex	r3, [r3]
 800886e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008872:	f023 0310 	bic.w	r3, r3, #16
 8008876:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	461a      	mov	r2, r3
 8008880:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008884:	647b      	str	r3, [r7, #68]	; 0x44
 8008886:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008888:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800888a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800888c:	e841 2300 	strex	r3, r2, [r1]
 8008890:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008894:	2b00      	cmp	r3, #0
 8008896:	d1e4      	bne.n	8008862 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	69db      	ldr	r3, [r3, #28]
 800889e:	f003 0310 	and.w	r3, r3, #16
 80088a2:	2b10      	cmp	r3, #16
 80088a4:	d103      	bne.n	80088ae <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2210      	movs	r2, #16
 80088ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80088b4:	4619      	mov	r1, r3
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f7fe f95a 	bl	8006b70 <HAL_UARTEx_RxEventCallback>
 80088bc:	e002      	b.n	80088c4 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f7f8 fd50 	bl	8001364 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80088c4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d006      	beq.n	80088da <UART_RxISR_16BIT_FIFOEN+0x2ae>
 80088cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80088d0:	f003 0320 	and.w	r3, r3, #32
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	f47f aecd 	bne.w	8008674 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088e0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80088e4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d049      	beq.n	8008980 <UART_RxISR_16BIT_FIFOEN+0x354>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80088f2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d242      	bcs.n	8008980 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	3308      	adds	r3, #8
 8008900:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008904:	e853 3f00 	ldrex	r3, [r3]
 8008908:	623b      	str	r3, [r7, #32]
   return(result);
 800890a:	6a3b      	ldr	r3, [r7, #32]
 800890c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008910:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	3308      	adds	r3, #8
 800891a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800891e:	633a      	str	r2, [r7, #48]	; 0x30
 8008920:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008922:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008926:	e841 2300 	strex	r3, r2, [r1]
 800892a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800892c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892e:	2b00      	cmp	r3, #0
 8008930:	d1e3      	bne.n	80088fa <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4a16      	ldr	r2, [pc, #88]	; (8008990 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008936:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	e853 3f00 	ldrex	r3, [r3]
 8008944:	60fb      	str	r3, [r7, #12]
   return(result);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f043 0320 	orr.w	r3, r3, #32
 800894c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	461a      	mov	r2, r3
 8008956:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800895a:	61fb      	str	r3, [r7, #28]
 800895c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895e:	69b9      	ldr	r1, [r7, #24]
 8008960:	69fa      	ldr	r2, [r7, #28]
 8008962:	e841 2300 	strex	r3, r2, [r1]
 8008966:	617b      	str	r3, [r7, #20]
   return(result);
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d1e4      	bne.n	8008938 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800896e:	e007      	b.n	8008980 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	699a      	ldr	r2, [r3, #24]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f042 0208 	orr.w	r2, r2, #8
 800897e:	619a      	str	r2, [r3, #24]
}
 8008980:	bf00      	nop
 8008982:	37b8      	adds	r7, #184	; 0xb8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}
 8008988:	effffffe 	.word	0xeffffffe
 800898c:	58000c00 	.word	0x58000c00
 8008990:	08008115 	.word	0x08008115

08008994 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800899c:	bf00      	nop
 800899e:	370c      	adds	r7, #12
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr

080089a8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80089b0:	bf00      	nop
 80089b2:	370c      	adds	r7, #12
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr

080089bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80089c4:	bf00      	nop
 80089c6:	370c      	adds	r7, #12
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b085      	sub	sp, #20
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d101      	bne.n	80089e6 <HAL_UARTEx_DisableFifoMode+0x16>
 80089e2:	2302      	movs	r3, #2
 80089e4:	e027      	b.n	8008a36 <HAL_UARTEx_DisableFifoMode+0x66>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2201      	movs	r2, #1
 80089ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2224      	movs	r2, #36	; 0x24
 80089f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f022 0201 	bic.w	r2, r2, #1
 8008a0c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008a14:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	68fa      	ldr	r2, [r7, #12]
 8008a22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2220      	movs	r2, #32
 8008a28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3714      	adds	r7, #20
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr

08008a42 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b084      	sub	sp, #16
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
 8008a4a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d101      	bne.n	8008a5a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008a56:	2302      	movs	r3, #2
 8008a58:	e02d      	b.n	8008ab6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2224      	movs	r2, #36	; 0x24
 8008a66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f022 0201 	bic.w	r2, r2, #1
 8008a80:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	683a      	ldr	r2, [r7, #0]
 8008a92:	430a      	orrs	r2, r1
 8008a94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 f850 	bl	8008b3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	68fa      	ldr	r2, [r7, #12]
 8008aa2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2220      	movs	r2, #32
 8008aa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008ab4:	2300      	movs	r3, #0
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}

08008abe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b084      	sub	sp, #16
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
 8008ac6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d101      	bne.n	8008ad6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008ad2:	2302      	movs	r3, #2
 8008ad4:	e02d      	b.n	8008b32 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2224      	movs	r2, #36	; 0x24
 8008ae2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f022 0201 	bic.w	r2, r2, #1
 8008afc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	683a      	ldr	r2, [r7, #0]
 8008b0e:	430a      	orrs	r2, r1
 8008b10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f812 	bl	8008b3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	68fa      	ldr	r2, [r7, #12]
 8008b1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2220      	movs	r2, #32
 8008b24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
	...

08008b3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d108      	bne.n	8008b5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008b5c:	e031      	b.n	8008bc2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008b5e:	2310      	movs	r3, #16
 8008b60:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008b62:	2310      	movs	r3, #16
 8008b64:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	0e5b      	lsrs	r3, r3, #25
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	f003 0307 	and.w	r3, r3, #7
 8008b74:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	0f5b      	lsrs	r3, r3, #29
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	f003 0307 	and.w	r3, r3, #7
 8008b84:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b86:	7bbb      	ldrb	r3, [r7, #14]
 8008b88:	7b3a      	ldrb	r2, [r7, #12]
 8008b8a:	4911      	ldr	r1, [pc, #68]	; (8008bd0 <UARTEx_SetNbDataToProcess+0x94>)
 8008b8c:	5c8a      	ldrb	r2, [r1, r2]
 8008b8e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008b92:	7b3a      	ldrb	r2, [r7, #12]
 8008b94:	490f      	ldr	r1, [pc, #60]	; (8008bd4 <UARTEx_SetNbDataToProcess+0x98>)
 8008b96:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b98:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ba4:	7bfb      	ldrb	r3, [r7, #15]
 8008ba6:	7b7a      	ldrb	r2, [r7, #13]
 8008ba8:	4909      	ldr	r1, [pc, #36]	; (8008bd0 <UARTEx_SetNbDataToProcess+0x94>)
 8008baa:	5c8a      	ldrb	r2, [r1, r2]
 8008bac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008bb0:	7b7a      	ldrb	r2, [r7, #13]
 8008bb2:	4908      	ldr	r1, [pc, #32]	; (8008bd4 <UARTEx_SetNbDataToProcess+0x98>)
 8008bb4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bb6:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bba:	b29a      	uxth	r2, r3
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008bc2:	bf00      	nop
 8008bc4:	3714      	adds	r7, #20
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr
 8008bce:	bf00      	nop
 8008bd0:	08008ca8 	.word	0x08008ca8
 8008bd4:	08008cb0 	.word	0x08008cb0

08008bd8 <__libc_init_array>:
 8008bd8:	b570      	push	{r4, r5, r6, lr}
 8008bda:	4d0d      	ldr	r5, [pc, #52]	; (8008c10 <__libc_init_array+0x38>)
 8008bdc:	4c0d      	ldr	r4, [pc, #52]	; (8008c14 <__libc_init_array+0x3c>)
 8008bde:	1b64      	subs	r4, r4, r5
 8008be0:	10a4      	asrs	r4, r4, #2
 8008be2:	2600      	movs	r6, #0
 8008be4:	42a6      	cmp	r6, r4
 8008be6:	d109      	bne.n	8008bfc <__libc_init_array+0x24>
 8008be8:	4d0b      	ldr	r5, [pc, #44]	; (8008c18 <__libc_init_array+0x40>)
 8008bea:	4c0c      	ldr	r4, [pc, #48]	; (8008c1c <__libc_init_array+0x44>)
 8008bec:	f000 f820 	bl	8008c30 <_init>
 8008bf0:	1b64      	subs	r4, r4, r5
 8008bf2:	10a4      	asrs	r4, r4, #2
 8008bf4:	2600      	movs	r6, #0
 8008bf6:	42a6      	cmp	r6, r4
 8008bf8:	d105      	bne.n	8008c06 <__libc_init_array+0x2e>
 8008bfa:	bd70      	pop	{r4, r5, r6, pc}
 8008bfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c00:	4798      	blx	r3
 8008c02:	3601      	adds	r6, #1
 8008c04:	e7ee      	b.n	8008be4 <__libc_init_array+0xc>
 8008c06:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c0a:	4798      	blx	r3
 8008c0c:	3601      	adds	r6, #1
 8008c0e:	e7f2      	b.n	8008bf6 <__libc_init_array+0x1e>
 8008c10:	08008cc0 	.word	0x08008cc0
 8008c14:	08008cc0 	.word	0x08008cc0
 8008c18:	08008cc0 	.word	0x08008cc0
 8008c1c:	08008cc4 	.word	0x08008cc4

08008c20 <memset>:
 8008c20:	4402      	add	r2, r0
 8008c22:	4603      	mov	r3, r0
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d100      	bne.n	8008c2a <memset+0xa>
 8008c28:	4770      	bx	lr
 8008c2a:	f803 1b01 	strb.w	r1, [r3], #1
 8008c2e:	e7f9      	b.n	8008c24 <memset+0x4>

08008c30 <_init>:
 8008c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c32:	bf00      	nop
 8008c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c36:	bc08      	pop	{r3}
 8008c38:	469e      	mov	lr, r3
 8008c3a:	4770      	bx	lr

08008c3c <_fini>:
 8008c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c3e:	bf00      	nop
 8008c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c42:	bc08      	pop	{r3}
 8008c44:	469e      	mov	lr, r3
 8008c46:	4770      	bx	lr
