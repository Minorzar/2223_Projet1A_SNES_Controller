
NUCLEO-H7A3_NRF24_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a56c  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000678  0800a81c  0800a81c  0001a81c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ae94  0800ae94  0001ae94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ae9c  0800ae9c  0001ae9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800aea0  0800aea0  0001aea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000cc  24000000  0800aea4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000031c  240000d0  0800af70  000200d0  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  240003ec  0800af70  000203ec  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016a05  00000000  00000000  000200fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002b68  00000000  00000000  00036aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f10  00000000  00000000  00039668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000df8  00000000  00000000  0003a578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031398  00000000  00000000  0003b370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000160d2  00000000  00000000  0006c708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00138e5f  00000000  00000000  000827da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001bb639  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004144  00000000  00000000  001bb68c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240000d0 	.word	0x240000d0
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800a804 	.word	0x0800a804

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240000d4 	.word	0x240000d4
 80002ec:	0800a804 	.word	0x0800a804

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b974 	b.w	80006a0 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	468e      	mov	lr, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d14d      	bne.n	800047a <__udivmoddi4+0xaa>
 80003de:	428a      	cmp	r2, r1
 80003e0:	4694      	mov	ip, r2
 80003e2:	d969      	bls.n	80004b8 <__udivmoddi4+0xe8>
 80003e4:	fab2 f282 	clz	r2, r2
 80003e8:	b152      	cbz	r2, 8000400 <__udivmoddi4+0x30>
 80003ea:	fa01 f302 	lsl.w	r3, r1, r2
 80003ee:	f1c2 0120 	rsb	r1, r2, #32
 80003f2:	fa20 f101 	lsr.w	r1, r0, r1
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	ea41 0e03 	orr.w	lr, r1, r3
 80003fe:	4094      	lsls	r4, r2
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	0c21      	lsrs	r1, r4, #16
 8000406:	fbbe f6f8 	udiv	r6, lr, r8
 800040a:	fa1f f78c 	uxth.w	r7, ip
 800040e:	fb08 e316 	mls	r3, r8, r6, lr
 8000412:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000416:	fb06 f107 	mul.w	r1, r6, r7
 800041a:	4299      	cmp	r1, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x64>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f106 30ff 	add.w	r0, r6, #4294967295
 8000426:	f080 811f 	bcs.w	8000668 <__udivmoddi4+0x298>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 811c 	bls.w	8000668 <__udivmoddi4+0x298>
 8000430:	3e02      	subs	r6, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a5b      	subs	r3, r3, r1
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3310 	mls	r3, r8, r0, r3
 8000440:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000444:	fb00 f707 	mul.w	r7, r0, r7
 8000448:	42a7      	cmp	r7, r4
 800044a:	d90a      	bls.n	8000462 <__udivmoddi4+0x92>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 33ff 	add.w	r3, r0, #4294967295
 8000454:	f080 810a 	bcs.w	800066c <__udivmoddi4+0x29c>
 8000458:	42a7      	cmp	r7, r4
 800045a:	f240 8107 	bls.w	800066c <__udivmoddi4+0x29c>
 800045e:	4464      	add	r4, ip
 8000460:	3802      	subs	r0, #2
 8000462:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000466:	1be4      	subs	r4, r4, r7
 8000468:	2600      	movs	r6, #0
 800046a:	b11d      	cbz	r5, 8000474 <__udivmoddi4+0xa4>
 800046c:	40d4      	lsrs	r4, r2
 800046e:	2300      	movs	r3, #0
 8000470:	e9c5 4300 	strd	r4, r3, [r5]
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	428b      	cmp	r3, r1
 800047c:	d909      	bls.n	8000492 <__udivmoddi4+0xc2>
 800047e:	2d00      	cmp	r5, #0
 8000480:	f000 80ef 	beq.w	8000662 <__udivmoddi4+0x292>
 8000484:	2600      	movs	r6, #0
 8000486:	e9c5 0100 	strd	r0, r1, [r5]
 800048a:	4630      	mov	r0, r6
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	fab3 f683 	clz	r6, r3
 8000496:	2e00      	cmp	r6, #0
 8000498:	d14a      	bne.n	8000530 <__udivmoddi4+0x160>
 800049a:	428b      	cmp	r3, r1
 800049c:	d302      	bcc.n	80004a4 <__udivmoddi4+0xd4>
 800049e:	4282      	cmp	r2, r0
 80004a0:	f200 80f9 	bhi.w	8000696 <__udivmoddi4+0x2c6>
 80004a4:	1a84      	subs	r4, r0, r2
 80004a6:	eb61 0303 	sbc.w	r3, r1, r3
 80004aa:	2001      	movs	r0, #1
 80004ac:	469e      	mov	lr, r3
 80004ae:	2d00      	cmp	r5, #0
 80004b0:	d0e0      	beq.n	8000474 <__udivmoddi4+0xa4>
 80004b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004b6:	e7dd      	b.n	8000474 <__udivmoddi4+0xa4>
 80004b8:	b902      	cbnz	r2, 80004bc <__udivmoddi4+0xec>
 80004ba:	deff      	udf	#255	; 0xff
 80004bc:	fab2 f282 	clz	r2, r2
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	f040 8092 	bne.w	80005ea <__udivmoddi4+0x21a>
 80004c6:	eba1 010c 	sub.w	r1, r1, ip
 80004ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ce:	fa1f fe8c 	uxth.w	lr, ip
 80004d2:	2601      	movs	r6, #1
 80004d4:	0c20      	lsrs	r0, r4, #16
 80004d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004da:	fb07 1113 	mls	r1, r7, r3, r1
 80004de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e2:	fb0e f003 	mul.w	r0, lr, r3
 80004e6:	4288      	cmp	r0, r1
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x12c>
 80004ea:	eb1c 0101 	adds.w	r1, ip, r1
 80004ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x12a>
 80004f4:	4288      	cmp	r0, r1
 80004f6:	f200 80cb 	bhi.w	8000690 <__udivmoddi4+0x2c0>
 80004fa:	4643      	mov	r3, r8
 80004fc:	1a09      	subs	r1, r1, r0
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1110 	mls	r1, r7, r0, r1
 8000508:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800050c:	fb0e fe00 	mul.w	lr, lr, r0
 8000510:	45a6      	cmp	lr, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x156>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f100 31ff 	add.w	r1, r0, #4294967295
 800051c:	d202      	bcs.n	8000524 <__udivmoddi4+0x154>
 800051e:	45a6      	cmp	lr, r4
 8000520:	f200 80bb 	bhi.w	800069a <__udivmoddi4+0x2ca>
 8000524:	4608      	mov	r0, r1
 8000526:	eba4 040e 	sub.w	r4, r4, lr
 800052a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x9a>
 8000530:	f1c6 0720 	rsb	r7, r6, #32
 8000534:	40b3      	lsls	r3, r6
 8000536:	fa22 fc07 	lsr.w	ip, r2, r7
 800053a:	ea4c 0c03 	orr.w	ip, ip, r3
 800053e:	fa20 f407 	lsr.w	r4, r0, r7
 8000542:	fa01 f306 	lsl.w	r3, r1, r6
 8000546:	431c      	orrs	r4, r3
 8000548:	40f9      	lsrs	r1, r7
 800054a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800054e:	fa00 f306 	lsl.w	r3, r0, r6
 8000552:	fbb1 f8f9 	udiv	r8, r1, r9
 8000556:	0c20      	lsrs	r0, r4, #16
 8000558:	fa1f fe8c 	uxth.w	lr, ip
 800055c:	fb09 1118 	mls	r1, r9, r8, r1
 8000560:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000564:	fb08 f00e 	mul.w	r0, r8, lr
 8000568:	4288      	cmp	r0, r1
 800056a:	fa02 f206 	lsl.w	r2, r2, r6
 800056e:	d90b      	bls.n	8000588 <__udivmoddi4+0x1b8>
 8000570:	eb1c 0101 	adds.w	r1, ip, r1
 8000574:	f108 3aff 	add.w	sl, r8, #4294967295
 8000578:	f080 8088 	bcs.w	800068c <__udivmoddi4+0x2bc>
 800057c:	4288      	cmp	r0, r1
 800057e:	f240 8085 	bls.w	800068c <__udivmoddi4+0x2bc>
 8000582:	f1a8 0802 	sub.w	r8, r8, #2
 8000586:	4461      	add	r1, ip
 8000588:	1a09      	subs	r1, r1, r0
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000590:	fb09 1110 	mls	r1, r9, r0, r1
 8000594:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000598:	fb00 fe0e 	mul.w	lr, r0, lr
 800059c:	458e      	cmp	lr, r1
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x1e2>
 80005a0:	eb1c 0101 	adds.w	r1, ip, r1
 80005a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005a8:	d26c      	bcs.n	8000684 <__udivmoddi4+0x2b4>
 80005aa:	458e      	cmp	lr, r1
 80005ac:	d96a      	bls.n	8000684 <__udivmoddi4+0x2b4>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4461      	add	r1, ip
 80005b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005b6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ba:	eba1 010e 	sub.w	r1, r1, lr
 80005be:	42a1      	cmp	r1, r4
 80005c0:	46c8      	mov	r8, r9
 80005c2:	46a6      	mov	lr, r4
 80005c4:	d356      	bcc.n	8000674 <__udivmoddi4+0x2a4>
 80005c6:	d053      	beq.n	8000670 <__udivmoddi4+0x2a0>
 80005c8:	b15d      	cbz	r5, 80005e2 <__udivmoddi4+0x212>
 80005ca:	ebb3 0208 	subs.w	r2, r3, r8
 80005ce:	eb61 010e 	sbc.w	r1, r1, lr
 80005d2:	fa01 f707 	lsl.w	r7, r1, r7
 80005d6:	fa22 f306 	lsr.w	r3, r2, r6
 80005da:	40f1      	lsrs	r1, r6
 80005dc:	431f      	orrs	r7, r3
 80005de:	e9c5 7100 	strd	r7, r1, [r5]
 80005e2:	2600      	movs	r6, #0
 80005e4:	4631      	mov	r1, r6
 80005e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	40d8      	lsrs	r0, r3
 80005f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f4:	fa21 f303 	lsr.w	r3, r1, r3
 80005f8:	4091      	lsls	r1, r2
 80005fa:	4301      	orrs	r1, r0
 80005fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000600:	fa1f fe8c 	uxth.w	lr, ip
 8000604:	fbb3 f0f7 	udiv	r0, r3, r7
 8000608:	fb07 3610 	mls	r6, r7, r0, r3
 800060c:	0c0b      	lsrs	r3, r1, #16
 800060e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000612:	fb00 f60e 	mul.w	r6, r0, lr
 8000616:	429e      	cmp	r6, r3
 8000618:	fa04 f402 	lsl.w	r4, r4, r2
 800061c:	d908      	bls.n	8000630 <__udivmoddi4+0x260>
 800061e:	eb1c 0303 	adds.w	r3, ip, r3
 8000622:	f100 38ff 	add.w	r8, r0, #4294967295
 8000626:	d22f      	bcs.n	8000688 <__udivmoddi4+0x2b8>
 8000628:	429e      	cmp	r6, r3
 800062a:	d92d      	bls.n	8000688 <__udivmoddi4+0x2b8>
 800062c:	3802      	subs	r0, #2
 800062e:	4463      	add	r3, ip
 8000630:	1b9b      	subs	r3, r3, r6
 8000632:	b289      	uxth	r1, r1
 8000634:	fbb3 f6f7 	udiv	r6, r3, r7
 8000638:	fb07 3316 	mls	r3, r7, r6, r3
 800063c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000640:	fb06 f30e 	mul.w	r3, r6, lr
 8000644:	428b      	cmp	r3, r1
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x28a>
 8000648:	eb1c 0101 	adds.w	r1, ip, r1
 800064c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000650:	d216      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000652:	428b      	cmp	r3, r1
 8000654:	d914      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000656:	3e02      	subs	r6, #2
 8000658:	4461      	add	r1, ip
 800065a:	1ac9      	subs	r1, r1, r3
 800065c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000660:	e738      	b.n	80004d4 <__udivmoddi4+0x104>
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e705      	b.n	8000474 <__udivmoddi4+0xa4>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e3      	b.n	8000434 <__udivmoddi4+0x64>
 800066c:	4618      	mov	r0, r3
 800066e:	e6f8      	b.n	8000462 <__udivmoddi4+0x92>
 8000670:	454b      	cmp	r3, r9
 8000672:	d2a9      	bcs.n	80005c8 <__udivmoddi4+0x1f8>
 8000674:	ebb9 0802 	subs.w	r8, r9, r2
 8000678:	eb64 0e0c 	sbc.w	lr, r4, ip
 800067c:	3801      	subs	r0, #1
 800067e:	e7a3      	b.n	80005c8 <__udivmoddi4+0x1f8>
 8000680:	4646      	mov	r6, r8
 8000682:	e7ea      	b.n	800065a <__udivmoddi4+0x28a>
 8000684:	4620      	mov	r0, r4
 8000686:	e794      	b.n	80005b2 <__udivmoddi4+0x1e2>
 8000688:	4640      	mov	r0, r8
 800068a:	e7d1      	b.n	8000630 <__udivmoddi4+0x260>
 800068c:	46d0      	mov	r8, sl
 800068e:	e77b      	b.n	8000588 <__udivmoddi4+0x1b8>
 8000690:	3b02      	subs	r3, #2
 8000692:	4461      	add	r1, ip
 8000694:	e732      	b.n	80004fc <__udivmoddi4+0x12c>
 8000696:	4630      	mov	r0, r6
 8000698:	e709      	b.n	80004ae <__udivmoddi4+0xde>
 800069a:	4464      	add	r4, ip
 800069c:	3802      	subs	r0, #2
 800069e:	e742      	b.n	8000526 <__udivmoddi4+0x156>

080006a0 <__aeabi_idiv0>:
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <NRF24_DelayMicroSeconds>:
	}
}


void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80006b0:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <NRF24_DelayMicroSeconds+0x3c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a0b      	ldr	r2, [pc, #44]	; (80006e4 <NRF24_DelayMicroSeconds+0x40>)
 80006b6:	fba2 2303 	umull	r2, r3, r2, r3
 80006ba:	0c9a      	lsrs	r2, r3, #18
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	fb02 f303 	mul.w	r3, r2, r3
 80006c2:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80006c4:	bf00      	nop
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	1e5a      	subs	r2, r3, #1
 80006ca:	60fa      	str	r2, [r7, #12]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d1fa      	bne.n	80006c6 <NRF24_DelayMicroSeconds+0x22>
}
 80006d0:	bf00      	nop
 80006d2:	bf00      	nop
 80006d4:	3714      	adds	r7, #20
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	24000058 	.word	0x24000058
 80006e4:	165e9f81 	.word	0x165e9f81

080006e8 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_CSN_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d005      	beq.n	8000702 <NRF24_csn+0x1a>
 80006f6:	2201      	movs	r2, #1
 80006f8:	2110      	movs	r1, #16
 80006fa:	4806      	ldr	r0, [pc, #24]	; (8000714 <NRF24_csn+0x2c>)
 80006fc:	f003 f8d6 	bl	80038ac <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_CSN_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000700:	e004      	b.n	800070c <NRF24_csn+0x24>
	else HAL_GPIO_WritePin(nrf24_CSN_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	2110      	movs	r1, #16
 8000706:	4803      	ldr	r0, [pc, #12]	; (8000714 <NRF24_csn+0x2c>)
 8000708:	f003 f8d0 	bl	80038ac <HAL_GPIO_WritePin>
}
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	58020000 	.word	0x58020000

08000718 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_CE_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d005      	beq.n	8000732 <NRF24_ce+0x1a>
 8000726:	2201      	movs	r2, #1
 8000728:	2120      	movs	r1, #32
 800072a:	4806      	ldr	r0, [pc, #24]	; (8000744 <NRF24_ce+0x2c>)
 800072c:	f003 f8be 	bl	80038ac <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_CE_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000730:	e004      	b.n	800073c <NRF24_ce+0x24>
	else HAL_GPIO_WritePin(nrf24_CE_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	2120      	movs	r1, #32
 8000736:	4803      	ldr	r0, [pc, #12]	; (8000744 <NRF24_ce+0x2c>)
 8000738:	f003 f8b8 	bl	80038ac <HAL_GPIO_WritePin>
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	58020800 	.word	0x58020800

08000748 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000752:	2000      	movs	r0, #0
 8000754:	f7ff ffc8 	bl	80006e8 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	f003 031f 	and.w	r3, r3, #31
 800075e:	b2db      	uxtb	r3, r3
 8000760:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000762:	f107 010c 	add.w	r1, r7, #12
 8000766:	2364      	movs	r3, #100	; 0x64
 8000768:	2201      	movs	r2, #1
 800076a:	480a      	ldr	r0, [pc, #40]	; (8000794 <NRF24_read_register+0x4c>)
 800076c:	f005 ffee 	bl	800674c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	1c59      	adds	r1, r3, #1
 8000776:	2364      	movs	r3, #100	; 0x64
 8000778:	2201      	movs	r2, #1
 800077a:	4806      	ldr	r0, [pc, #24]	; (8000794 <NRF24_read_register+0x4c>)
 800077c:	f006 f9e2 	bl	8006b44 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000780:	7b7b      	ldrb	r3, [r7, #13]
 8000782:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000784:	2001      	movs	r0, #1
 8000786:	f7ff ffaf 	bl	80006e8 <NRF24_csn>
	return retData;
 800078a:	7bfb      	ldrb	r3, [r7, #15]
}
 800078c:	4618      	mov	r0, r3
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	24000100 	.word	0x24000100

08000798 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	6039      	str	r1, [r7, #0]
 80007a2:	71fb      	strb	r3, [r7, #7]
 80007a4:	4613      	mov	r3, r2
 80007a6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80007a8:	2000      	movs	r0, #0
 80007aa:	f7ff ff9d 	bl	80006e8 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	f003 031f 	and.w	r3, r3, #31
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80007b8:	f107 010c 	add.w	r1, r7, #12
 80007bc:	2364      	movs	r3, #100	; 0x64
 80007be:	2201      	movs	r2, #1
 80007c0:	4808      	ldr	r0, [pc, #32]	; (80007e4 <NRF24_read_registerN+0x4c>)
 80007c2:	f005 ffc3 	bl	800674c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 80007c6:	79bb      	ldrb	r3, [r7, #6]
 80007c8:	b29a      	uxth	r2, r3
 80007ca:	2364      	movs	r3, #100	; 0x64
 80007cc:	6839      	ldr	r1, [r7, #0]
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <NRF24_read_registerN+0x4c>)
 80007d0:	f006 f9b8 	bl	8006b44 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 80007d4:	2001      	movs	r0, #1
 80007d6:	f7ff ff87 	bl	80006e8 <NRF24_csn>
}
 80007da:	bf00      	nop
 80007dc:	3710      	adds	r7, #16
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	24000100 	.word	0x24000100

080007e8 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	460a      	mov	r2, r1
 80007f2:	71fb      	strb	r3, [r7, #7]
 80007f4:	4613      	mov	r3, r2
 80007f6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80007f8:	2000      	movs	r0, #0
 80007fa:	f7ff ff75 	bl	80006e8 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	f043 0320 	orr.w	r3, r3, #32
 8000804:	b2db      	uxtb	r3, r3
 8000806:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000808:	79bb      	ldrb	r3, [r7, #6]
 800080a:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 800080c:	f107 010c 	add.w	r1, r7, #12
 8000810:	2364      	movs	r3, #100	; 0x64
 8000812:	2202      	movs	r2, #2
 8000814:	4804      	ldr	r0, [pc, #16]	; (8000828 <NRF24_write_register+0x40>)
 8000816:	f005 ff99 	bl	800674c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800081a:	2001      	movs	r0, #1
 800081c:	f7ff ff64 	bl	80006e8 <NRF24_csn>
}
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	24000100 	.word	0x24000100

0800082c <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	6039      	str	r1, [r7, #0]
 8000836:	71fb      	strb	r3, [r7, #7]
 8000838:	4613      	mov	r3, r2
 800083a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800083c:	2000      	movs	r0, #0
 800083e:	f7ff ff53 	bl	80006e8 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	f043 0320 	orr.w	r3, r3, #32
 8000848:	b2db      	uxtb	r3, r3
 800084a:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800084c:	f107 010c 	add.w	r1, r7, #12
 8000850:	2364      	movs	r3, #100	; 0x64
 8000852:	2201      	movs	r2, #1
 8000854:	4808      	ldr	r0, [pc, #32]	; (8000878 <NRF24_write_registerN+0x4c>)
 8000856:	f005 ff79 	bl	800674c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 800085a:	79bb      	ldrb	r3, [r7, #6]
 800085c:	b29a      	uxth	r2, r3
 800085e:	2364      	movs	r3, #100	; 0x64
 8000860:	6839      	ldr	r1, [r7, #0]
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <NRF24_write_registerN+0x4c>)
 8000864:	f005 ff72 	bl	800674c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000868:	2001      	movs	r0, #1
 800086a:	f7ff ff3d 	bl	80006e8 <NRF24_csn>
}
 800086e:	bf00      	nop
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	24000100 	.word	0x24000100

0800087c <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	460b      	mov	r3, r1
 8000886:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8000888:	2000      	movs	r0, #0
 800088a:	f7ff ff2d 	bl	80006e8 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 800088e:	23a0      	movs	r3, #160	; 0xa0
 8000890:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8000892:	f107 010f 	add.w	r1, r7, #15
 8000896:	2364      	movs	r3, #100	; 0x64
 8000898:	2201      	movs	r2, #1
 800089a:	4808      	ldr	r0, [pc, #32]	; (80008bc <NRF24_write_payload+0x40>)
 800089c:	f005 ff56 	bl	800674c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 80008a0:	78fb      	ldrb	r3, [r7, #3]
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	2364      	movs	r3, #100	; 0x64
 80008a6:	6879      	ldr	r1, [r7, #4]
 80008a8:	4804      	ldr	r0, [pc, #16]	; (80008bc <NRF24_write_payload+0x40>)
 80008aa:	f005 ff4f 	bl	800674c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80008ae:	2001      	movs	r0, #1
 80008b0:	f7ff ff1a 	bl	80006e8 <NRF24_csn>
}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	24000100 	.word	0x24000100

080008c0 <NRF24_read_payload>:
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	460b      	mov	r3, r1
 80008ca:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 80008cc:	f000 fa72 	bl	8000db4 <NRF24_getPayloadSize>
 80008d0:	4603      	mov	r3, r0
 80008d2:	461a      	mov	r2, r3
 80008d4:	78fb      	ldrb	r3, [r7, #3]
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d303      	bcc.n	80008e2 <NRF24_read_payload+0x22>
 80008da:	f000 fa6b 	bl	8000db4 <NRF24_getPayloadSize>
 80008de:	4603      	mov	r3, r0
 80008e0:	e000      	b.n	80008e4 <NRF24_read_payload+0x24>
 80008e2:	78fb      	ldrb	r3, [r7, #3]
 80008e4:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80008e6:	2000      	movs	r0, #0
 80008e8:	f7ff fefe 	bl	80006e8 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80008ec:	2361      	movs	r3, #97	; 0x61
 80008ee:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 80008f0:	f107 010e 	add.w	r1, r7, #14
 80008f4:	2364      	movs	r3, #100	; 0x64
 80008f6:	2201      	movs	r2, #1
 80008f8:	4808      	ldr	r0, [pc, #32]	; (800091c <NRF24_read_payload+0x5c>)
 80008fa:	f005 ff27 	bl	800674c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 80008fe:	7bfb      	ldrb	r3, [r7, #15]
 8000900:	b29a      	uxth	r2, r3
 8000902:	2364      	movs	r3, #100	; 0x64
 8000904:	6879      	ldr	r1, [r7, #4]
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <NRF24_read_payload+0x5c>)
 8000908:	f006 f91c 	bl	8006b44 <HAL_SPI_Receive>
	NRF24_csn(1);
 800090c:	2001      	movs	r0, #1
 800090e:	f7ff feeb 	bl	80006e8 <NRF24_csn>
}
 8000912:	bf00      	nop
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	24000100 	.word	0x24000100

08000920 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000924:	21ff      	movs	r1, #255	; 0xff
 8000926:	20e1      	movs	r0, #225	; 0xe1
 8000928:	f7ff ff5e 	bl	80007e8 <NRF24_write_register>
}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}

08000930 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000934:	21ff      	movs	r1, #255	; 0xff
 8000936:	20e2      	movs	r0, #226	; 0xe2
 8000938:	f7ff ff56 	bl	80007e8 <NRF24_write_register>
}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}

08000940 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000946:	2007      	movs	r0, #7
 8000948:	f7ff fefe 	bl	8000748 <NRF24_read_register>
 800094c:	4603      	mov	r3, r0
 800094e:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000950:	79fb      	ldrb	r3, [r7, #7]
}
 8000952:	4618      	mov	r0, r3
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
	...

0800095c <NRF24_begin>:

//12. Begin function
void NRF24_begin(SPI_HandleTypeDef nrfSPI)
{
 800095c:	b084      	sub	sp, #16
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
 8000964:	f107 0c10 	add.w	ip, r7, #16
 8000968:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 800096c:	4b60      	ldr	r3, [pc, #384]	; (8000af0 <NRF24_begin+0x194>)
 800096e:	4618      	mov	r0, r3
 8000970:	f107 0310 	add.w	r3, r7, #16
 8000974:	2288      	movs	r2, #136	; 0x88
 8000976:	4619      	mov	r1, r3
 8000978:	f009 face 	bl	8009f18 <memcpy>

	//Put pins to idle state
	NRF24_csn(1);
 800097c:	2001      	movs	r0, #1
 800097e:	f7ff feb3 	bl	80006e8 <NRF24_csn>
	NRF24_ce(0);
 8000982:	2000      	movs	r0, #0
 8000984:	f7ff fec8 	bl	8000718 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000988:	2005      	movs	r0, #5
 800098a:	f001 ff47 	bl	800281c <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 800098e:	2108      	movs	r1, #8
 8000990:	2000      	movs	r0, #0
 8000992:	f7ff ff29 	bl	80007e8 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000996:	213f      	movs	r1, #63	; 0x3f
 8000998:	2001      	movs	r0, #1
 800099a:	f7ff ff25 	bl	80007e8 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 800099e:	2103      	movs	r1, #3
 80009a0:	2002      	movs	r0, #2
 80009a2:	f7ff ff21 	bl	80007e8 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 80009a6:	2103      	movs	r1, #3
 80009a8:	2003      	movs	r0, #3
 80009aa:	f7ff ff1d 	bl	80007e8 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 80009ae:	2103      	movs	r1, #3
 80009b0:	2004      	movs	r0, #4
 80009b2:	f7ff ff19 	bl	80007e8 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 80009b6:	2102      	movs	r1, #2
 80009b8:	2005      	movs	r0, #5
 80009ba:	f7ff ff15 	bl	80007e8 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80009be:	210f      	movs	r1, #15
 80009c0:	2006      	movs	r0, #6
 80009c2:	f7ff ff11 	bl	80007e8 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80009c6:	210e      	movs	r1, #14
 80009c8:	2007      	movs	r0, #7
 80009ca:	f7ff ff0d 	bl	80007e8 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80009ce:	2100      	movs	r1, #0
 80009d0:	2008      	movs	r0, #8
 80009d2:	f7ff ff09 	bl	80007e8 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80009d6:	2100      	movs	r1, #0
 80009d8:	2009      	movs	r0, #9
 80009da:	f7ff ff05 	bl	80007e8 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80009de:	23e7      	movs	r3, #231	; 0xe7
 80009e0:	713b      	strb	r3, [r7, #4]
 80009e2:	23e7      	movs	r3, #231	; 0xe7
 80009e4:	70fb      	strb	r3, [r7, #3]
 80009e6:	23e7      	movs	r3, #231	; 0xe7
 80009e8:	70bb      	strb	r3, [r7, #2]
 80009ea:	23e7      	movs	r3, #231	; 0xe7
 80009ec:	707b      	strb	r3, [r7, #1]
 80009ee:	23e7      	movs	r3, #231	; 0xe7
 80009f0:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80009f2:	463b      	mov	r3, r7
 80009f4:	2205      	movs	r2, #5
 80009f6:	4619      	mov	r1, r3
 80009f8:	200a      	movs	r0, #10
 80009fa:	f7ff ff17 	bl	800082c <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 80009fe:	23c2      	movs	r3, #194	; 0xc2
 8000a00:	713b      	strb	r3, [r7, #4]
 8000a02:	23c2      	movs	r3, #194	; 0xc2
 8000a04:	70fb      	strb	r3, [r7, #3]
 8000a06:	23c2      	movs	r3, #194	; 0xc2
 8000a08:	70bb      	strb	r3, [r7, #2]
 8000a0a:	23c2      	movs	r3, #194	; 0xc2
 8000a0c:	707b      	strb	r3, [r7, #1]
 8000a0e:	23c2      	movs	r3, #194	; 0xc2
 8000a10:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000a12:	463b      	mov	r3, r7
 8000a14:	2205      	movs	r2, #5
 8000a16:	4619      	mov	r1, r3
 8000a18:	200b      	movs	r0, #11
 8000a1a:	f7ff ff07 	bl	800082c <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000a1e:	21c3      	movs	r1, #195	; 0xc3
 8000a20:	200c      	movs	r0, #12
 8000a22:	f7ff fee1 	bl	80007e8 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000a26:	21c4      	movs	r1, #196	; 0xc4
 8000a28:	200d      	movs	r0, #13
 8000a2a:	f7ff fedd 	bl	80007e8 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000a2e:	21c5      	movs	r1, #197	; 0xc5
 8000a30:	200e      	movs	r0, #14
 8000a32:	f7ff fed9 	bl	80007e8 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000a36:	21c6      	movs	r1, #198	; 0xc6
 8000a38:	200f      	movs	r0, #15
 8000a3a:	f7ff fed5 	bl	80007e8 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000a3e:	23e7      	movs	r3, #231	; 0xe7
 8000a40:	713b      	strb	r3, [r7, #4]
 8000a42:	23e7      	movs	r3, #231	; 0xe7
 8000a44:	70fb      	strb	r3, [r7, #3]
 8000a46:	23e7      	movs	r3, #231	; 0xe7
 8000a48:	70bb      	strb	r3, [r7, #2]
 8000a4a:	23e7      	movs	r3, #231	; 0xe7
 8000a4c:	707b      	strb	r3, [r7, #1]
 8000a4e:	23e7      	movs	r3, #231	; 0xe7
 8000a50:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000a52:	463b      	mov	r3, r7
 8000a54:	2205      	movs	r2, #5
 8000a56:	4619      	mov	r1, r3
 8000a58:	2010      	movs	r0, #16
 8000a5a:	f7ff fee7 	bl	800082c <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2011      	movs	r0, #17
 8000a62:	f7ff fec1 	bl	80007e8 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000a66:	2100      	movs	r1, #0
 8000a68:	2012      	movs	r0, #18
 8000a6a:	f7ff febd 	bl	80007e8 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000a6e:	2100      	movs	r1, #0
 8000a70:	2013      	movs	r0, #19
 8000a72:	f7ff feb9 	bl	80007e8 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000a76:	2100      	movs	r1, #0
 8000a78:	2014      	movs	r0, #20
 8000a7a:	f7ff feb5 	bl	80007e8 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000a7e:	2100      	movs	r1, #0
 8000a80:	2015      	movs	r0, #21
 8000a82:	f7ff feb1 	bl	80007e8 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000a86:	2100      	movs	r1, #0
 8000a88:	2016      	movs	r0, #22
 8000a8a:	f7ff fead 	bl	80007e8 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8000a8e:	f000 fbad 	bl	80011ec <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000a92:	2100      	movs	r1, #0
 8000a94:	201c      	movs	r0, #28
 8000a96:	f7ff fea7 	bl	80007e8 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	201d      	movs	r0, #29
 8000a9e:	f7ff fea3 	bl	80007e8 <NRF24_write_register>
	printRadioSettings();
 8000aa2:	f000 fbbd 	bl	8001220 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000aa6:	210f      	movs	r1, #15
 8000aa8:	200f      	movs	r0, #15
 8000aaa:	f000 f93b 	bl	8000d24 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000aae:	2003      	movs	r0, #3
 8000ab0:	f000 fa21 	bl	8000ef6 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f000 fa57 	bl	8000f68 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000aba:	2002      	movs	r0, #2
 8000abc:	f000 fa9a 	bl	8000ff4 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000ac0:	f000 f9ec 	bl	8000e9c <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000ac4:	2020      	movs	r0, #32
 8000ac6:	f000 f95d 	bl	8000d84 <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8000aca:	f000 fb86 	bl	80011da <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000ace:	204c      	movs	r0, #76	; 0x4c
 8000ad0:	f000 f943 	bl	8000d5a <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000ad4:	f7ff ff24 	bl	8000920 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000ad8:	f7ff ff2a 	bl	8000930 <NRF24_flush_rx>

	NRF24_powerDown();
 8000adc:	f000 fab2 	bl	8001044 <NRF24_powerDown>

}
 8000ae0:	bf00      	nop
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000aea:	b004      	add	sp, #16
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	24000100 	.word	0x24000100

08000af4 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8000af8:	2000      	movs	r0, #0
 8000afa:	f7ff fe25 	bl	8000748 <NRF24_read_register>
 8000afe:	4603      	mov	r3, r0
 8000b00:	f043 0303 	orr.w	r3, r3, #3
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	4619      	mov	r1, r3
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f7ff fe6d 	bl	80007e8 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <NRF24_startListening+0x48>)
 8000b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	d004      	beq.n	8000b22 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8000b18:	2205      	movs	r2, #5
 8000b1a:	4908      	ldr	r1, [pc, #32]	; (8000b3c <NRF24_startListening+0x48>)
 8000b1c:	200a      	movs	r0, #10
 8000b1e:	f7ff fe85 	bl	800082c <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 8000b22:	f7ff fefd 	bl	8000920 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000b26:	f7ff ff03 	bl	8000930 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	f7ff fdf4 	bl	8000718 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8000b30:	2096      	movs	r0, #150	; 0x96
 8000b32:	f7ff fdb7 	bl	80006a4 <NRF24_DelayMicroSeconds>
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	240000f0 	.word	0x240000f0

08000b40 <NRF24_stopListening>:
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8000b44:	2000      	movs	r0, #0
 8000b46:	f7ff fde7 	bl	8000718 <NRF24_ce>
	NRF24_flush_tx();
 8000b4a:	f7ff fee9 	bl	8000920 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000b4e:	f7ff feef 	bl	8000930 <NRF24_flush_rx>
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8000b64:	f000 fb39 	bl	80011da <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8000b68:	78fb      	ldrb	r3, [r7, #3]
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f000 faa8 	bl	80010c2 <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8000b72:	f001 fe47 	bl	8002804 <HAL_GetTick>
 8000b76:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8000b78:	230a      	movs	r3, #10
 8000b7a:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8000b7c:	f107 030d 	add.w	r3, r7, #13
 8000b80:	2201      	movs	r2, #1
 8000b82:	4619      	mov	r1, r3
 8000b84:	2008      	movs	r0, #8
 8000b86:	f7ff fe07 	bl	8000798 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8000b8a:	f7ff fed9 	bl	8000940 <NRF24_get_status>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8000b92:	7bfb      	ldrb	r3, [r7, #15]
 8000b94:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d107      	bne.n	8000bac <NRF24_write+0x54>
 8000b9c:	f001 fe32 	bl	8002804 <HAL_GetTick>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d8e7      	bhi.n	8000b7c <NRF24_write+0x24>

//	printConfigReg();
//	printStatusReg();

	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8000bac:	f107 010b 	add.w	r1, r7, #11
 8000bb0:	f107 030c 	add.w	r3, r7, #12
 8000bb4:	4a0c      	ldr	r2, [pc, #48]	; (8000be8 <NRF24_write+0x90>)
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f000 fadc 	bl	8001174 <NRF24_whatHappened>
	retStatus = tx_ok;
 8000bbc:	7b3b      	ldrb	r3, [r7, #12]
 8000bbe:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <NRF24_write+0x90>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d005      	beq.n	8000bd4 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8000bc8:	f000 f900 	bl	8000dcc <NRF24_getDynamicPayloadSize>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	461a      	mov	r2, r3
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <NRF24_write+0x94>)
 8000bd2:	701a      	strb	r2, [r3, #0]
	}

	//Power down
	NRF24_available();
 8000bd4:	f000 f80c 	bl	8000bf0 <NRF24_available>
	NRF24_flush_tx();
 8000bd8:	f7ff fea2 	bl	8000920 <NRF24_flush_tx>
	return retStatus;
 8000bdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3718      	adds	r7, #24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	240000f8 	.word	0x240000f8
 8000bec:	240000f9 	.word	0x240000f9

08000bf0 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f000 fa34 	bl	8001062 <NRF24_availablePipe>
 8000bfa:	4603      	mov	r3, r0
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8000c0c:	78fb      	ldrb	r3, [r7, #3]
 8000c0e:	4619      	mov	r1, r3
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff fe55 	bl	80008c0 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8000c16:	2017      	movs	r0, #23
 8000c18:	f7ff fd96 	bl	8000748 <NRF24_read_register>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8000c24:	f7ff fe84 	bl	8000930 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8000c28:	f000 f8d0 	bl	8000dcc <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8000c2c:	7bfb      	ldrb	r3, [r7, #15]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	bf14      	ite	ne
 8000c32:	2301      	movne	r3, #1
 8000c34:	2300      	moveq	r3, #0
 8000c36:	b2db      	uxtb	r3, r3
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <NRF24_openWritingPipe>:
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8000c4a:	463b      	mov	r3, r7
 8000c4c:	2205      	movs	r2, #5
 8000c4e:	4619      	mov	r1, r3
 8000c50:	200a      	movs	r0, #10
 8000c52:	f7ff fdeb 	bl	800082c <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8000c56:	463b      	mov	r3, r7
 8000c58:	2205      	movs	r2, #5
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	2010      	movs	r0, #16
 8000c5e:	f7ff fde5 	bl	800082c <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
 8000c62:	2320      	movs	r3, #32
 8000c64:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8000c66:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <NRF24_openWritingPipe+0x44>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	7bfa      	ldrb	r2, [r7, #15]
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	bf28      	it	cs
 8000c70:	4613      	movcs	r3, r2
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	4619      	mov	r1, r3
 8000c76:	2011      	movs	r0, #17
 8000c78:	f7ff fdb6 	bl	80007e8 <NRF24_write_register>
}
 8000c7c:	bf00      	nop
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	240000fa 	.word	0x240000fa

08000c88 <NRF24_openReadingPipe>:
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4601      	mov	r1, r0
 8000c90:	e9c7 2300 	strd	r2, r3, [r7]
 8000c94:	460b      	mov	r3, r1
 8000c96:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8000c98:	7bfb      	ldrb	r3, [r7, #15]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d104      	bne.n	8000ca8 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8000c9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ca2:	491c      	ldr	r1, [pc, #112]	; (8000d14 <NRF24_openReadingPipe+0x8c>)
 8000ca4:	e9c1 2300 	strd	r2, r3, [r1]

	if(number <= 6)
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	2b06      	cmp	r3, #6
 8000cac:	d82d      	bhi.n	8000d0a <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d808      	bhi.n	8000cc6 <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
 8000cb6:	4a18      	ldr	r2, [pc, #96]	; (8000d18 <NRF24_openReadingPipe+0x90>)
 8000cb8:	5cd3      	ldrb	r3, [r2, r3]
 8000cba:	4639      	mov	r1, r7
 8000cbc:	2205      	movs	r2, #5
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fdb4 	bl	800082c <NRF24_write_registerN>
 8000cc4:	e007      	b.n	8000cd6 <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8000cc6:	7bfb      	ldrb	r3, [r7, #15]
 8000cc8:	4a13      	ldr	r2, [pc, #76]	; (8000d18 <NRF24_openReadingPipe+0x90>)
 8000cca:	5cd3      	ldrb	r3, [r2, r3]
 8000ccc:	4639      	mov	r1, r7
 8000cce:	2201      	movs	r2, #1
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fdab 	bl	800082c <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	4a10      	ldr	r2, [pc, #64]	; (8000d1c <NRF24_openReadingPipe+0x94>)
 8000cda:	5cd3      	ldrb	r3, [r2, r3]
 8000cdc:	4a10      	ldr	r2, [pc, #64]	; (8000d20 <NRF24_openReadingPipe+0x98>)
 8000cde:	7812      	ldrb	r2, [r2, #0]
 8000ce0:	4611      	mov	r1, r2
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fd80 	bl	80007e8 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8000ce8:	2002      	movs	r0, #2
 8000cea:	f7ff fd2d 	bl	8000748 <NRF24_read_register>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	b25a      	sxtb	r2, r3
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfa:	b25b      	sxtb	r3, r3
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	b25b      	sxtb	r3, r3
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	4619      	mov	r1, r3
 8000d04:	2002      	movs	r0, #2
 8000d06:	f7ff fd6f 	bl	80007e8 <NRF24_write_register>
	}

}
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	240000f0 	.word	0x240000f0
 8000d18:	0800ae18 	.word	0x0800ae18
 8000d1c:	0800ae20 	.word	0x0800ae20
 8000d20:	240000fa 	.word	0x240000fa

08000d24 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	460a      	mov	r2, r1
 8000d2e:	71fb      	strb	r3, [r7, #7]
 8000d30:	4613      	mov	r3, r2
 8000d32:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	011b      	lsls	r3, r3, #4
 8000d38:	b25a      	sxtb	r2, r3
 8000d3a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d3e:	f003 030f 	and.w	r3, r3, #15
 8000d42:	b25b      	sxtb	r3, r3
 8000d44:	4313      	orrs	r3, r2
 8000d46:	b25b      	sxtb	r3, r3
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	2004      	movs	r0, #4
 8000d4e:	f7ff fd4b 	bl	80007e8 <NRF24_write_register>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b084      	sub	sp, #16
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	4603      	mov	r3, r0
 8000d62:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000d64:	237f      	movs	r3, #127	; 0x7f
 8000d66:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000d68:	7bfa      	ldrb	r2, [r7, #15]
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	bf28      	it	cs
 8000d70:	4613      	movcs	r3, r2
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	4619      	mov	r1, r3
 8000d76:	2005      	movs	r0, #5
 8000d78:	f7ff fd36 	bl	80007e8 <NRF24_write_register>
}
 8000d7c:	bf00      	nop
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000d8e:	2320      	movs	r3, #32
 8000d90:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000d92:	7bfa      	ldrb	r2, [r7, #15]
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	4293      	cmp	r3, r2
 8000d98:	bf28      	it	cs
 8000d9a:	4613      	movcs	r3, r2
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <NRF24_setPayloadSize+0x2c>)
 8000da0:	701a      	strb	r2, [r3, #0]
}
 8000da2:	bf00      	nop
 8000da4:	3714      	adds	r7, #20
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	240000fa 	.word	0x240000fa

08000db4 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
	return payload_size;
 8000db8:	4b03      	ldr	r3, [pc, #12]	; (8000dc8 <NRF24_getPayloadSize+0x14>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	240000fa 	.word	0x240000fa

08000dcc <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000dd0:	2060      	movs	r0, #96	; 0x60
 8000dd2:	f7ff fcb9 	bl	8000748 <NRF24_read_register>
 8000dd6:	4603      	mov	r3, r0
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8000de0:	201d      	movs	r0, #29
 8000de2:	f7ff fcb1 	bl	8000748 <NRF24_read_register>
 8000de6:	4603      	mov	r3, r0
 8000de8:	f043 0306 	orr.w	r3, r3, #6
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	4619      	mov	r1, r3
 8000df0:	201d      	movs	r0, #29
 8000df2:	f7ff fcf9 	bl	80007e8 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8000df6:	201d      	movs	r0, #29
 8000df8:	f7ff fca6 	bl	8000748 <NRF24_read_register>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d10c      	bne.n	8000e1c <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8000e02:	f000 f9f3 	bl	80011ec <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8000e06:	201d      	movs	r0, #29
 8000e08:	f7ff fc9e 	bl	8000748 <NRF24_read_register>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	f043 0306 	orr.w	r3, r3, #6
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	4619      	mov	r1, r3
 8000e16:	201d      	movs	r0, #29
 8000e18:	f7ff fce6 	bl	80007e8 <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8000e1c:	201c      	movs	r0, #28
 8000e1e:	f7ff fc93 	bl	8000748 <NRF24_read_register>
 8000e22:	4603      	mov	r3, r0
 8000e24:	f043 0303 	orr.w	r3, r3, #3
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	201c      	movs	r0, #28
 8000e2e:	f7ff fcdb 	bl	80007e8 <NRF24_write_register>
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000e3c:	201d      	movs	r0, #29
 8000e3e:	f7ff fc83 	bl	8000748 <NRF24_read_register>
 8000e42:	4603      	mov	r3, r0
 8000e44:	f043 0304 	orr.w	r3, r3, #4
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	201d      	movs	r0, #29
 8000e4e:	f7ff fccb 	bl	80007e8 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8000e52:	201d      	movs	r0, #29
 8000e54:	f7ff fc78 	bl	8000748 <NRF24_read_register>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d10c      	bne.n	8000e78 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8000e5e:	f000 f9c5 	bl	80011ec <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000e62:	201d      	movs	r0, #29
 8000e64:	f7ff fc70 	bl	8000748 <NRF24_read_register>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	f043 0304 	orr.w	r3, r3, #4
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	4619      	mov	r1, r3
 8000e72:	201d      	movs	r0, #29
 8000e74:	f7ff fcb8 	bl	80007e8 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8000e78:	201c      	movs	r0, #28
 8000e7a:	f7ff fc65 	bl	8000748 <NRF24_read_register>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	4619      	mov	r1, r3
 8000e88:	201c      	movs	r0, #28
 8000e8a:	f7ff fcad 	bl	80007e8 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8000e8e:	4b02      	ldr	r3, [pc, #8]	; (8000e98 <NRF24_enableDynamicPayloads+0x60>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	701a      	strb	r2, [r3, #0]

}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	240000fb 	.word	0x240000fb

08000e9c <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000ea0:	201d      	movs	r0, #29
 8000ea2:	f7ff fc51 	bl	8000748 <NRF24_read_register>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	f023 0304 	bic.w	r3, r3, #4
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	4619      	mov	r1, r3
 8000eb0:	201d      	movs	r0, #29
 8000eb2:	f7ff fc99 	bl	80007e8 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	201c      	movs	r0, #28
 8000eba:	f7ff fc95 	bl	80007e8 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000ebe:	4b02      	ldr	r3, [pc, #8]	; (8000ec8 <NRF24_disableDynamicPayloads+0x2c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	240000fb 	.word	0x240000fb

08000ecc <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d004      	beq.n	8000ee6 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000edc:	213f      	movs	r1, #63	; 0x3f
 8000ede:	2001      	movs	r0, #1
 8000ee0:	f7ff fc82 	bl	80007e8 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000ee4:	e003      	b.n	8000eee <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f7ff fc7d 	bl	80007e8 <NRF24_write_register>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b084      	sub	sp, #16
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	4603      	mov	r3, r0
 8000efe:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000f00:	2006      	movs	r0, #6
 8000f02:	f7ff fc21 	bl	8000748 <NRF24_read_register>
 8000f06:	4603      	mov	r3, r0
 8000f08:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	f023 0306 	bic.w	r3, r3, #6
 8000f10:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d104      	bne.n	8000f22 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	f043 0306 	orr.w	r3, r3, #6
 8000f1e:	73fb      	strb	r3, [r7, #15]
 8000f20:	e019      	b.n	8000f56 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d104      	bne.n	8000f32 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	f043 0304 	orr.w	r3, r3, #4
 8000f2e:	73fb      	strb	r3, [r7, #15]
 8000f30:	e011      	b.n	8000f56 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d104      	bne.n	8000f42 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	f043 0302 	orr.w	r3, r3, #2
 8000f3e:	73fb      	strb	r3, [r7, #15]
 8000f40:	e009      	b.n	8000f56 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d006      	beq.n	8000f56 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	d103      	bne.n	8000f56 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	f043 0306 	orr.w	r3, r3, #6
 8000f54:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	2006      	movs	r0, #6
 8000f5c:	f7ff fc44 	bl	80007e8 <NRF24_write_register>
}
 8000f60:	bf00      	nop
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000f72:	2300      	movs	r3, #0
 8000f74:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000f76:	2006      	movs	r0, #6
 8000f78:	f7ff fbe6 	bl	8000748 <NRF24_read_register>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000f80:	4b1b      	ldr	r3, [pc, #108]	; (8000ff0 <NRF24_setDataRate+0x88>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000f86:	7bbb      	ldrb	r3, [r7, #14]
 8000f88:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000f8c:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d107      	bne.n	8000fa4 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000f94:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <NRF24_setDataRate+0x88>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000f9a:	7bbb      	ldrb	r3, [r7, #14]
 8000f9c:	f043 0320 	orr.w	r3, r3, #32
 8000fa0:	73bb      	strb	r3, [r7, #14]
 8000fa2:	e00d      	b.n	8000fc0 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d107      	bne.n	8000fba <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000faa:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <NRF24_setDataRate+0x88>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000fb0:	7bbb      	ldrb	r3, [r7, #14]
 8000fb2:	f043 0308 	orr.w	r3, r3, #8
 8000fb6:	73bb      	strb	r3, [r7, #14]
 8000fb8:	e002      	b.n	8000fc0 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000fba:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <NRF24_setDataRate+0x88>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000fc0:	7bbb      	ldrb	r3, [r7, #14]
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	2006      	movs	r0, #6
 8000fc6:	f7ff fc0f 	bl	80007e8 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000fca:	2006      	movs	r0, #6
 8000fcc:	f7ff fbbc 	bl	8000748 <NRF24_read_register>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	7bbb      	ldrb	r3, [r7, #14]
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d102      	bne.n	8000fe0 <NRF24_setDataRate+0x78>
  {
    result = true;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	73fb      	strb	r3, [r7, #15]
 8000fde:	e002      	b.n	8000fe6 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000fe0:	4b03      	ldr	r3, [pc, #12]	; (8000ff0 <NRF24_setDataRate+0x88>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	240000fc 	.word	0x240000fc

08000ff4 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000ffe:	2000      	movs	r0, #0
 8001000:	f7ff fba2 	bl	8000748 <NRF24_read_register>
 8001004:	4603      	mov	r3, r0
 8001006:	f023 030c 	bic.w	r3, r3, #12
 800100a:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d00f      	beq.n	8001032 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d104      	bne.n	8001022 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	f043 0308 	orr.w	r3, r3, #8
 800101e:	73fb      	strb	r3, [r7, #15]
 8001020:	e007      	b.n	8001032 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	f043 0308 	orr.w	r3, r3, #8
 8001028:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	f043 0304 	orr.w	r3, r3, #4
 8001030:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	4619      	mov	r1, r3
 8001036:	2000      	movs	r0, #0
 8001038:	f7ff fbd6 	bl	80007e8 <NRF24_write_register>
}
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001048:	2000      	movs	r0, #0
 800104a:	f7ff fb7d 	bl	8000748 <NRF24_read_register>
 800104e:	4603      	mov	r3, r0
 8001050:	f023 0302 	bic.w	r3, r3, #2
 8001054:	b2db      	uxtb	r3, r3
 8001056:	4619      	mov	r1, r3
 8001058:	2000      	movs	r0, #0
 800105a:	f7ff fbc5 	bl	80007e8 <NRF24_write_register>
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}

08001062 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b084      	sub	sp, #16
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 800106a:	f7ff fc69 	bl	8000940 <NRF24_get_status>
 800106e:	4603      	mov	r3, r0
 8001070:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001078:	2b00      	cmp	r3, #0
 800107a:	bf14      	ite	ne
 800107c:	2301      	movne	r3, #1
 800107e:	2300      	moveq	r3, #0
 8001080:	73bb      	strb	r3, [r7, #14]

  if (result)
 8001082:	7bbb      	ldrb	r3, [r7, #14]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d017      	beq.n	80010b8 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d007      	beq.n	800109e <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	085b      	lsrs	r3, r3, #1
 8001092:	b2db      	uxtb	r3, r3
 8001094:	f003 0307 	and.w	r3, r3, #7
 8001098:	b2da      	uxtb	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 800109e:	2140      	movs	r1, #64	; 0x40
 80010a0:	2007      	movs	r0, #7
 80010a2:	f7ff fba1 	bl	80007e8 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	f003 0320 	and.w	r3, r3, #32
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 80010b0:	2120      	movs	r1, #32
 80010b2:	2007      	movs	r0, #7
 80010b4:	f7ff fb98 	bl	80007e8 <NRF24_write_register>
    }
  }
  return result;
 80010b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
 80010ca:	460b      	mov	r3, r1
 80010cc:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 80010ce:	2000      	movs	r0, #0
 80010d0:	f7ff fb22 	bl	8000718 <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 80010d4:	2000      	movs	r0, #0
 80010d6:	f7ff fb37 	bl	8000748 <NRF24_read_register>
 80010da:	4603      	mov	r3, r0
 80010dc:	f043 0302 	orr.w	r3, r3, #2
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	f023 0301 	bic.w	r3, r3, #1
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	4619      	mov	r1, r3
 80010ea:	2000      	movs	r0, #0
 80010ec:	f7ff fb7c 	bl	80007e8 <NRF24_write_register>
  NRF24_ce(1);
 80010f0:	2001      	movs	r0, #1
 80010f2:	f7ff fb11 	bl	8000718 <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 80010f6:	2096      	movs	r0, #150	; 0x96
 80010f8:	f7ff fad4 	bl	80006a4 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 80010fc:	78fb      	ldrb	r3, [r7, #3]
 80010fe:	4619      	mov	r1, r3
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff fbbb 	bl	800087c <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8001106:	2001      	movs	r0, #1
 8001108:	f7ff fb06 	bl	8000718 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 800110c:	200f      	movs	r0, #15
 800110e:	f7ff fac9 	bl	80006a4 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8001112:	2000      	movs	r0, #0
 8001114:	f7ff fb00 	bl	8000718 <NRF24_ce>
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <NRF24_writeAckPayload>:
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	71fb      	strb	r3, [r7, #7]
 800112c:	4613      	mov	r3, r2
 800112e:	71bb      	strb	r3, [r7, #6]
	const uint8_t* current = (uint8_t *)buf;
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	60fb      	str	r3, [r7, #12]
	const uint8_t max_payload_size = 32;
 8001134:	2320      	movs	r3, #32
 8001136:	72fb      	strb	r3, [r7, #11]
  uint8_t data_len = MIN(len,max_payload_size);
 8001138:	7afa      	ldrb	r2, [r7, #11]
 800113a:	79bb      	ldrb	r3, [r7, #6]
 800113c:	4293      	cmp	r3, r2
 800113e:	bf28      	it	cs
 8001140:	4613      	movcs	r3, r2
 8001142:	72bb      	strb	r3, [r7, #10]

  NRF24_csn(0);
 8001144:	2000      	movs	r0, #0
 8001146:	f7ff facf 	bl	80006e8 <NRF24_csn>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | ( pipe & 0x7 ) , current, data_len);
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	b25b      	sxtb	r3, r3
 8001154:	f063 0357 	orn	r3, r3, #87	; 0x57
 8001158:	b25b      	sxtb	r3, r3
 800115a:	b2db      	uxtb	r3, r3
 800115c:	7aba      	ldrb	r2, [r7, #10]
 800115e:	68f9      	ldr	r1, [r7, #12]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fb63 	bl	800082c <NRF24_write_registerN>
  NRF24_csn(1);
 8001166:	2001      	movs	r0, #1
 8001168:	f7ff fabe 	bl	80006e8 <NRF24_csn>
}
 800116c:	bf00      	nop
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001180:	f7ff fbde 	bl	8000940 <NRF24_get_status>
 8001184:	4603      	mov	r3, r0
 8001186:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800118e:	2170      	movs	r1, #112	; 0x70
 8001190:	2007      	movs	r0, #7
 8001192:	f7ff fb29 	bl	80007e8 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8001196:	7dfb      	ldrb	r3, [r7, #23]
 8001198:	f003 0320 	and.w	r3, r3, #32
 800119c:	2b00      	cmp	r3, #0
 800119e:	bf14      	ite	ne
 80011a0:	2301      	movne	r3, #1
 80011a2:	2300      	moveq	r3, #0
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 80011aa:	7dfb      	ldrb	r3, [r7, #23]
 80011ac:	f003 0310 	and.w	r3, r3, #16
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	bf14      	ite	ne
 80011b4:	2301      	movne	r3, #1
 80011b6:	2300      	moveq	r3, #0
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 80011be:	7dfb      	ldrb	r3, [r7, #23]
 80011c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	bf14      	ite	ne
 80011c8:	2301      	movne	r3, #1
 80011ca:	2300      	moveq	r3, #0
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	701a      	strb	r2, [r3, #0]
}
 80011d2:	bf00      	nop
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80011de:	2170      	movs	r1, #112	; 0x70
 80011e0:	2007      	movs	r0, #7
 80011e2:	f7ff fb01 	bl	80007e8 <NRF24_write_register>
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80011f2:	2000      	movs	r0, #0
 80011f4:	f7ff fa78 	bl	80006e8 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80011f8:	2350      	movs	r3, #80	; 0x50
 80011fa:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 80011fc:	2373      	movs	r3, #115	; 0x73
 80011fe:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8001200:	1d39      	adds	r1, r7, #4
 8001202:	2364      	movs	r3, #100	; 0x64
 8001204:	2202      	movs	r2, #2
 8001206:	4805      	ldr	r0, [pc, #20]	; (800121c <NRF24_ACTIVATE_cmd+0x30>)
 8001208:	f005 faa0 	bl	800674c <HAL_SPI_Transmit>
	NRF24_csn(1);
 800120c:	2001      	movs	r0, #1
 800120e:	f7ff fa6b 	bl	80006e8 <NRF24_csn>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	24000100 	.word	0x24000100

08001220 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8001220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001222:	b0a1      	sub	sp, #132	; 0x84
 8001224:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001226:	f107 0308 	add.w	r3, r7, #8
 800122a:	49c3      	ldr	r1, [pc, #780]	; (8001538 <printRadioSettings+0x318>)
 800122c:	4618      	mov	r0, r3
 800122e:	f008 fe89 	bl	8009f44 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001232:	f107 0308 	add.w	r3, r7, #8
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f85a 	bl	80002f0 <strlen>
 800123c:	4603      	mov	r3, r0
 800123e:	b29a      	uxth	r2, r3
 8001240:	f107 0108 	add.w	r1, r7, #8
 8001244:	230a      	movs	r3, #10
 8001246:	48bd      	ldr	r0, [pc, #756]	; (800153c <printRadioSettings+0x31c>)
 8001248:	f006 f95f 	bl	800750a <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 800124c:	2000      	movs	r0, #0
 800124e:	f7ff fa7b 	bl	8000748 <NRF24_read_register>
 8001252:	4603      	mov	r3, r0
 8001254:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8001258:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800125c:	f003 0308 	and.w	r3, r3, #8
 8001260:	2b00      	cmp	r3, #0
 8001262:	d013      	beq.n	800128c <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8001264:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	2b00      	cmp	r3, #0
 800126e:	d006      	beq.n	800127e <printRadioSettings+0x5e>
 8001270:	f107 0308 	add.w	r3, r7, #8
 8001274:	49b2      	ldr	r1, [pc, #712]	; (8001540 <printRadioSettings+0x320>)
 8001276:	4618      	mov	r0, r3
 8001278:	f008 fe64 	bl	8009f44 <siprintf>
 800127c:	e00c      	b.n	8001298 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 800127e:	f107 0308 	add.w	r3, r7, #8
 8001282:	49b0      	ldr	r1, [pc, #704]	; (8001544 <printRadioSettings+0x324>)
 8001284:	4618      	mov	r0, r3
 8001286:	f008 fe5d 	bl	8009f44 <siprintf>
 800128a:	e005      	b.n	8001298 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 800128c:	f107 0308 	add.w	r3, r7, #8
 8001290:	49ad      	ldr	r1, [pc, #692]	; (8001548 <printRadioSettings+0x328>)
 8001292:	4618      	mov	r0, r3
 8001294:	f008 fe56 	bl	8009f44 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001298:	f107 0308 	add.w	r3, r7, #8
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f827 	bl	80002f0 <strlen>
 80012a2:	4603      	mov	r3, r0
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	f107 0108 	add.w	r1, r7, #8
 80012aa:	230a      	movs	r3, #10
 80012ac:	48a3      	ldr	r0, [pc, #652]	; (800153c <printRadioSettings+0x31c>)
 80012ae:	f006 f92c 	bl	800750a <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 80012b2:	2001      	movs	r0, #1
 80012b4:	f7ff fa48 	bl	8000748 <NRF24_read_register>
 80012b8:	4603      	mov	r3, r0
 80012ba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012be:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012c2:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	bfcc      	ite	gt
 80012ca:	2301      	movgt	r3, #1
 80012cc:	2300      	movle	r3, #0
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012d6:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012da:	2b00      	cmp	r3, #0
 80012dc:	bfcc      	ite	gt
 80012de:	2301      	movgt	r3, #1
 80012e0:	2300      	movle	r3, #0
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012e6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012ea:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	bfcc      	ite	gt
 80012f2:	2301      	movgt	r3, #1
 80012f4:	2300      	movle	r3, #0
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012fa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012fe:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001302:	2b00      	cmp	r3, #0
 8001304:	bfcc      	ite	gt
 8001306:	2301      	movgt	r3, #1
 8001308:	2300      	movle	r3, #0
 800130a:	b2db      	uxtb	r3, r3
 800130c:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800130e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001312:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001316:	2b00      	cmp	r3, #0
 8001318:	bfcc      	ite	gt
 800131a:	2301      	movgt	r3, #1
 800131c:	2300      	movle	r3, #0
 800131e:	b2db      	uxtb	r3, r3
 8001320:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001322:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001326:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800132a:	2b00      	cmp	r3, #0
 800132c:	bfcc      	ite	gt
 800132e:	2301      	movgt	r3, #1
 8001330:	2300      	movle	r3, #0
 8001332:	b2db      	uxtb	r3, r3
 8001334:	f107 0008 	add.w	r0, r7, #8
 8001338:	9303      	str	r3, [sp, #12]
 800133a:	9402      	str	r4, [sp, #8]
 800133c:	9101      	str	r1, [sp, #4]
 800133e:	9200      	str	r2, [sp, #0]
 8001340:	4633      	mov	r3, r6
 8001342:	462a      	mov	r2, r5
 8001344:	4981      	ldr	r1, [pc, #516]	; (800154c <printRadioSettings+0x32c>)
 8001346:	f008 fdfd 	bl	8009f44 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800134a:	f107 0308 	add.w	r3, r7, #8
 800134e:	4618      	mov	r0, r3
 8001350:	f7fe ffce 	bl	80002f0 <strlen>
 8001354:	4603      	mov	r3, r0
 8001356:	b29a      	uxth	r2, r3
 8001358:	f107 0108 	add.w	r1, r7, #8
 800135c:	230a      	movs	r3, #10
 800135e:	4877      	ldr	r0, [pc, #476]	; (800153c <printRadioSettings+0x31c>)
 8001360:	f006 f8d3 	bl	800750a <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8001364:	2002      	movs	r0, #2
 8001366:	f7ff f9ef 	bl	8000748 <NRF24_read_register>
 800136a:	4603      	mov	r3, r0
 800136c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001370:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001374:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001378:	2b00      	cmp	r3, #0
 800137a:	bfcc      	ite	gt
 800137c:	2301      	movgt	r3, #1
 800137e:	2300      	movle	r3, #0
 8001380:	b2db      	uxtb	r3, r3
 8001382:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001384:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001388:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800138c:	2b00      	cmp	r3, #0
 800138e:	bfcc      	ite	gt
 8001390:	2301      	movgt	r3, #1
 8001392:	2300      	movle	r3, #0
 8001394:	b2db      	uxtb	r3, r3
 8001396:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001398:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800139c:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	bfcc      	ite	gt
 80013a4:	2301      	movgt	r3, #1
 80013a6:	2300      	movle	r3, #0
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80013ac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013b0:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	bfcc      	ite	gt
 80013b8:	2301      	movgt	r3, #1
 80013ba:	2300      	movle	r3, #0
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80013c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013c4:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	bfcc      	ite	gt
 80013cc:	2301      	movgt	r3, #1
 80013ce:	2300      	movle	r3, #0
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80013d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013d8:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80013dc:	2b00      	cmp	r3, #0
 80013de:	bfcc      	ite	gt
 80013e0:	2301      	movgt	r3, #1
 80013e2:	2300      	movle	r3, #0
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	f107 0008 	add.w	r0, r7, #8
 80013ea:	9303      	str	r3, [sp, #12]
 80013ec:	9402      	str	r4, [sp, #8]
 80013ee:	9101      	str	r1, [sp, #4]
 80013f0:	9200      	str	r2, [sp, #0]
 80013f2:	4633      	mov	r3, r6
 80013f4:	462a      	mov	r2, r5
 80013f6:	4956      	ldr	r1, [pc, #344]	; (8001550 <printRadioSettings+0x330>)
 80013f8:	f008 fda4 	bl	8009f44 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013fc:	f107 0308 	add.w	r3, r7, #8
 8001400:	4618      	mov	r0, r3
 8001402:	f7fe ff75 	bl	80002f0 <strlen>
 8001406:	4603      	mov	r3, r0
 8001408:	b29a      	uxth	r2, r3
 800140a:	f107 0108 	add.w	r1, r7, #8
 800140e:	230a      	movs	r3, #10
 8001410:	484a      	ldr	r0, [pc, #296]	; (800153c <printRadioSettings+0x31c>)
 8001412:	f006 f87a 	bl	800750a <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8001416:	2003      	movs	r0, #3
 8001418:	f7ff f996 	bl	8000748 <NRF24_read_register>
 800141c:	4603      	mov	r3, r0
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8001426:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800142a:	3302      	adds	r3, #2
 800142c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8001430:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001434:	f107 0308 	add.w	r3, r7, #8
 8001438:	4946      	ldr	r1, [pc, #280]	; (8001554 <printRadioSettings+0x334>)
 800143a:	4618      	mov	r0, r3
 800143c:	f008 fd82 	bl	8009f44 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001440:	f107 0308 	add.w	r3, r7, #8
 8001444:	4618      	mov	r0, r3
 8001446:	f7fe ff53 	bl	80002f0 <strlen>
 800144a:	4603      	mov	r3, r0
 800144c:	b29a      	uxth	r2, r3
 800144e:	f107 0108 	add.w	r1, r7, #8
 8001452:	230a      	movs	r3, #10
 8001454:	4839      	ldr	r0, [pc, #228]	; (800153c <printRadioSettings+0x31c>)
 8001456:	f006 f858 	bl	800750a <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 800145a:	2005      	movs	r0, #5
 800145c:	f7ff f974 	bl	8000748 <NRF24_read_register>
 8001460:	4603      	mov	r3, r0
 8001462:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8001466:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800146a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800146e:	f107 0308 	add.w	r3, r7, #8
 8001472:	4939      	ldr	r1, [pc, #228]	; (8001558 <printRadioSettings+0x338>)
 8001474:	4618      	mov	r0, r3
 8001476:	f008 fd65 	bl	8009f44 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800147a:	f107 0308 	add.w	r3, r7, #8
 800147e:	4618      	mov	r0, r3
 8001480:	f7fe ff36 	bl	80002f0 <strlen>
 8001484:	4603      	mov	r3, r0
 8001486:	b29a      	uxth	r2, r3
 8001488:	f107 0108 	add.w	r1, r7, #8
 800148c:	230a      	movs	r3, #10
 800148e:	482b      	ldr	r0, [pc, #172]	; (800153c <printRadioSettings+0x31c>)
 8001490:	f006 f83b 	bl	800750a <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001494:	2006      	movs	r0, #6
 8001496:	f7ff f957 	bl	8000748 <NRF24_read_register>
 800149a:	4603      	mov	r3, r0
 800149c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 80014a0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014a4:	f003 0308 	and.w	r3, r3, #8
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d006      	beq.n	80014ba <printRadioSettings+0x29a>
 80014ac:	f107 0308 	add.w	r3, r7, #8
 80014b0:	492a      	ldr	r1, [pc, #168]	; (800155c <printRadioSettings+0x33c>)
 80014b2:	4618      	mov	r0, r3
 80014b4:	f008 fd46 	bl	8009f44 <siprintf>
 80014b8:	e005      	b.n	80014c6 <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	4928      	ldr	r1, [pc, #160]	; (8001560 <printRadioSettings+0x340>)
 80014c0:	4618      	mov	r0, r3
 80014c2:	f008 fd3f 	bl	8009f44 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014c6:	f107 0308 	add.w	r3, r7, #8
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7fe ff10 	bl	80002f0 <strlen>
 80014d0:	4603      	mov	r3, r0
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	f107 0108 	add.w	r1, r7, #8
 80014d8:	230a      	movs	r3, #10
 80014da:	4818      	ldr	r0, [pc, #96]	; (800153c <printRadioSettings+0x31c>)
 80014dc:	f006 f815 	bl	800750a <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 80014e0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014e4:	f003 0306 	and.w	r3, r3, #6
 80014e8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 80014ec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014f0:	085b      	lsrs	r3, r3, #1
 80014f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80014f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d106      	bne.n	800150c <printRadioSettings+0x2ec>
 80014fe:	f107 0308 	add.w	r3, r7, #8
 8001502:	4918      	ldr	r1, [pc, #96]	; (8001564 <printRadioSettings+0x344>)
 8001504:	4618      	mov	r0, r3
 8001506:	f008 fd1d 	bl	8009f44 <siprintf>
 800150a:	e03b      	b.n	8001584 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 800150c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001510:	2b01      	cmp	r3, #1
 8001512:	d106      	bne.n	8001522 <printRadioSettings+0x302>
 8001514:	f107 0308 	add.w	r3, r7, #8
 8001518:	4913      	ldr	r1, [pc, #76]	; (8001568 <printRadioSettings+0x348>)
 800151a:	4618      	mov	r0, r3
 800151c:	f008 fd12 	bl	8009f44 <siprintf>
 8001520:	e030      	b.n	8001584 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8001522:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001526:	2b02      	cmp	r3, #2
 8001528:	d122      	bne.n	8001570 <printRadioSettings+0x350>
 800152a:	f107 0308 	add.w	r3, r7, #8
 800152e:	490f      	ldr	r1, [pc, #60]	; (800156c <printRadioSettings+0x34c>)
 8001530:	4618      	mov	r0, r3
 8001532:	f008 fd07 	bl	8009f44 <siprintf>
 8001536:	e025      	b.n	8001584 <printRadioSettings+0x364>
 8001538:	0800a850 	.word	0x0800a850
 800153c:	24000188 	.word	0x24000188
 8001540:	0800a884 	.word	0x0800a884
 8001544:	0800a8a0 	.word	0x0800a8a0
 8001548:	0800a8bc 	.word	0x0800a8bc
 800154c:	0800a8d0 	.word	0x0800a8d0
 8001550:	0800a914 	.word	0x0800a914
 8001554:	0800a960 	.word	0x0800a960
 8001558:	0800a97c 	.word	0x0800a97c
 800155c:	0800a990 	.word	0x0800a990
 8001560:	0800a9a8 	.word	0x0800a9a8
 8001564:	0800a9c0 	.word	0x0800a9c0
 8001568:	0800a9d4 	.word	0x0800a9d4
 800156c:	0800a9e8 	.word	0x0800a9e8
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001570:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001574:	2b03      	cmp	r3, #3
 8001576:	d105      	bne.n	8001584 <printRadioSettings+0x364>
 8001578:	f107 0308 	add.w	r3, r7, #8
 800157c:	49d7      	ldr	r1, [pc, #860]	; (80018dc <printRadioSettings+0x6bc>)
 800157e:	4618      	mov	r0, r3
 8001580:	f008 fce0 	bl	8009f44 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001584:	f107 0308 	add.w	r3, r7, #8
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe feb1 	bl	80002f0 <strlen>
 800158e:	4603      	mov	r3, r0
 8001590:	b29a      	uxth	r2, r3
 8001592:	f107 0108 	add.w	r1, r7, #8
 8001596:	230a      	movs	r3, #10
 8001598:	48d1      	ldr	r0, [pc, #836]	; (80018e0 <printRadioSettings+0x6c0>)
 800159a:	f005 ffb6 	bl	800750a <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 800159e:	463b      	mov	r3, r7
 80015a0:	2205      	movs	r2, #5
 80015a2:	4619      	mov	r1, r3
 80015a4:	200a      	movs	r0, #10
 80015a6:	f7ff f8f7 	bl	8000798 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80015aa:	793b      	ldrb	r3, [r7, #4]
 80015ac:	461c      	mov	r4, r3
 80015ae:	78fb      	ldrb	r3, [r7, #3]
 80015b0:	461d      	mov	r5, r3
 80015b2:	78bb      	ldrb	r3, [r7, #2]
 80015b4:	787a      	ldrb	r2, [r7, #1]
 80015b6:	7839      	ldrb	r1, [r7, #0]
 80015b8:	f107 0008 	add.w	r0, r7, #8
 80015bc:	9102      	str	r1, [sp, #8]
 80015be:	9201      	str	r2, [sp, #4]
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	462b      	mov	r3, r5
 80015c4:	4622      	mov	r2, r4
 80015c6:	49c7      	ldr	r1, [pc, #796]	; (80018e4 <printRadioSettings+0x6c4>)
 80015c8:	f008 fcbc 	bl	8009f44 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015cc:	f107 0308 	add.w	r3, r7, #8
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe fe8d 	bl	80002f0 <strlen>
 80015d6:	4603      	mov	r3, r0
 80015d8:	b29a      	uxth	r2, r3
 80015da:	f107 0108 	add.w	r1, r7, #8
 80015de:	230a      	movs	r3, #10
 80015e0:	48bf      	ldr	r0, [pc, #764]	; (80018e0 <printRadioSettings+0x6c0>)
 80015e2:	f005 ff92 	bl	800750a <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 80015e6:	463b      	mov	r3, r7
 80015e8:	2205      	movs	r2, #5
 80015ea:	4619      	mov	r1, r3
 80015ec:	200b      	movs	r0, #11
 80015ee:	f7ff f8d3 	bl	8000798 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80015f2:	793b      	ldrb	r3, [r7, #4]
 80015f4:	461c      	mov	r4, r3
 80015f6:	78fb      	ldrb	r3, [r7, #3]
 80015f8:	461d      	mov	r5, r3
 80015fa:	78bb      	ldrb	r3, [r7, #2]
 80015fc:	787a      	ldrb	r2, [r7, #1]
 80015fe:	7839      	ldrb	r1, [r7, #0]
 8001600:	f107 0008 	add.w	r0, r7, #8
 8001604:	9102      	str	r1, [sp, #8]
 8001606:	9201      	str	r2, [sp, #4]
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	462b      	mov	r3, r5
 800160c:	4622      	mov	r2, r4
 800160e:	49b6      	ldr	r1, [pc, #728]	; (80018e8 <printRadioSettings+0x6c8>)
 8001610:	f008 fc98 	bl	8009f44 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001614:	f107 0308 	add.w	r3, r7, #8
 8001618:	4618      	mov	r0, r3
 800161a:	f7fe fe69 	bl	80002f0 <strlen>
 800161e:	4603      	mov	r3, r0
 8001620:	b29a      	uxth	r2, r3
 8001622:	f107 0108 	add.w	r1, r7, #8
 8001626:	230a      	movs	r3, #10
 8001628:	48ad      	ldr	r0, [pc, #692]	; (80018e0 <printRadioSettings+0x6c0>)
 800162a:	f005 ff6e 	bl	800750a <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 800162e:	463b      	mov	r3, r7
 8001630:	2201      	movs	r2, #1
 8001632:	4619      	mov	r1, r3
 8001634:	200c      	movs	r0, #12
 8001636:	f7ff f8af 	bl	8000798 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800163a:	783b      	ldrb	r3, [r7, #0]
 800163c:	461a      	mov	r2, r3
 800163e:	f107 0308 	add.w	r3, r7, #8
 8001642:	49aa      	ldr	r1, [pc, #680]	; (80018ec <printRadioSettings+0x6cc>)
 8001644:	4618      	mov	r0, r3
 8001646:	f008 fc7d 	bl	8009f44 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800164a:	f107 0308 	add.w	r3, r7, #8
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe fe4e 	bl	80002f0 <strlen>
 8001654:	4603      	mov	r3, r0
 8001656:	b29a      	uxth	r2, r3
 8001658:	f107 0108 	add.w	r1, r7, #8
 800165c:	230a      	movs	r3, #10
 800165e:	48a0      	ldr	r0, [pc, #640]	; (80018e0 <printRadioSettings+0x6c0>)
 8001660:	f005 ff53 	bl	800750a <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001664:	463b      	mov	r3, r7
 8001666:	2201      	movs	r2, #1
 8001668:	4619      	mov	r1, r3
 800166a:	200d      	movs	r0, #13
 800166c:	f7ff f894 	bl	8000798 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001670:	783b      	ldrb	r3, [r7, #0]
 8001672:	461a      	mov	r2, r3
 8001674:	f107 0308 	add.w	r3, r7, #8
 8001678:	499d      	ldr	r1, [pc, #628]	; (80018f0 <printRadioSettings+0x6d0>)
 800167a:	4618      	mov	r0, r3
 800167c:	f008 fc62 	bl	8009f44 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001680:	f107 0308 	add.w	r3, r7, #8
 8001684:	4618      	mov	r0, r3
 8001686:	f7fe fe33 	bl	80002f0 <strlen>
 800168a:	4603      	mov	r3, r0
 800168c:	b29a      	uxth	r2, r3
 800168e:	f107 0108 	add.w	r1, r7, #8
 8001692:	230a      	movs	r3, #10
 8001694:	4892      	ldr	r0, [pc, #584]	; (80018e0 <printRadioSettings+0x6c0>)
 8001696:	f005 ff38 	bl	800750a <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 800169a:	463b      	mov	r3, r7
 800169c:	2201      	movs	r2, #1
 800169e:	4619      	mov	r1, r3
 80016a0:	200e      	movs	r0, #14
 80016a2:	f7ff f879 	bl	8000798 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80016a6:	783b      	ldrb	r3, [r7, #0]
 80016a8:	461a      	mov	r2, r3
 80016aa:	f107 0308 	add.w	r3, r7, #8
 80016ae:	4991      	ldr	r1, [pc, #580]	; (80018f4 <printRadioSettings+0x6d4>)
 80016b0:	4618      	mov	r0, r3
 80016b2:	f008 fc47 	bl	8009f44 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016b6:	f107 0308 	add.w	r3, r7, #8
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe fe18 	bl	80002f0 <strlen>
 80016c0:	4603      	mov	r3, r0
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	f107 0108 	add.w	r1, r7, #8
 80016c8:	230a      	movs	r3, #10
 80016ca:	4885      	ldr	r0, [pc, #532]	; (80018e0 <printRadioSettings+0x6c0>)
 80016cc:	f005 ff1d 	bl	800750a <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 80016d0:	463b      	mov	r3, r7
 80016d2:	2201      	movs	r2, #1
 80016d4:	4619      	mov	r1, r3
 80016d6:	200f      	movs	r0, #15
 80016d8:	f7ff f85e 	bl	8000798 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80016dc:	783b      	ldrb	r3, [r7, #0]
 80016de:	461a      	mov	r2, r3
 80016e0:	f107 0308 	add.w	r3, r7, #8
 80016e4:	4984      	ldr	r1, [pc, #528]	; (80018f8 <printRadioSettings+0x6d8>)
 80016e6:	4618      	mov	r0, r3
 80016e8:	f008 fc2c 	bl	8009f44 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016ec:	f107 0308 	add.w	r3, r7, #8
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7fe fdfd 	bl	80002f0 <strlen>
 80016f6:	4603      	mov	r3, r0
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	f107 0108 	add.w	r1, r7, #8
 80016fe:	230a      	movs	r3, #10
 8001700:	4877      	ldr	r0, [pc, #476]	; (80018e0 <printRadioSettings+0x6c0>)
 8001702:	f005 ff02 	bl	800750a <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001706:	463b      	mov	r3, r7
 8001708:	2205      	movs	r2, #5
 800170a:	4619      	mov	r1, r3
 800170c:	2010      	movs	r0, #16
 800170e:	f7ff f843 	bl	8000798 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001712:	793b      	ldrb	r3, [r7, #4]
 8001714:	461c      	mov	r4, r3
 8001716:	78fb      	ldrb	r3, [r7, #3]
 8001718:	461d      	mov	r5, r3
 800171a:	78bb      	ldrb	r3, [r7, #2]
 800171c:	787a      	ldrb	r2, [r7, #1]
 800171e:	7839      	ldrb	r1, [r7, #0]
 8001720:	f107 0008 	add.w	r0, r7, #8
 8001724:	9102      	str	r1, [sp, #8]
 8001726:	9201      	str	r2, [sp, #4]
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	462b      	mov	r3, r5
 800172c:	4622      	mov	r2, r4
 800172e:	4973      	ldr	r1, [pc, #460]	; (80018fc <printRadioSettings+0x6dc>)
 8001730:	f008 fc08 	bl	8009f44 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001734:	f107 0308 	add.w	r3, r7, #8
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe fdd9 	bl	80002f0 <strlen>
 800173e:	4603      	mov	r3, r0
 8001740:	b29a      	uxth	r2, r3
 8001742:	f107 0108 	add.w	r1, r7, #8
 8001746:	230a      	movs	r3, #10
 8001748:	4865      	ldr	r0, [pc, #404]	; (80018e0 <printRadioSettings+0x6c0>)
 800174a:	f005 fede 	bl	800750a <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 800174e:	2011      	movs	r0, #17
 8001750:	f7fe fffa 	bl	8000748 <NRF24_read_register>
 8001754:	4603      	mov	r3, r0
 8001756:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800175a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800175e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001762:	f107 0308 	add.w	r3, r7, #8
 8001766:	4966      	ldr	r1, [pc, #408]	; (8001900 <printRadioSettings+0x6e0>)
 8001768:	4618      	mov	r0, r3
 800176a:	f008 fbeb 	bl	8009f44 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800176e:	f107 0308 	add.w	r3, r7, #8
 8001772:	4618      	mov	r0, r3
 8001774:	f7fe fdbc 	bl	80002f0 <strlen>
 8001778:	4603      	mov	r3, r0
 800177a:	b29a      	uxth	r2, r3
 800177c:	f107 0108 	add.w	r1, r7, #8
 8001780:	230a      	movs	r3, #10
 8001782:	4857      	ldr	r0, [pc, #348]	; (80018e0 <printRadioSettings+0x6c0>)
 8001784:	f005 fec1 	bl	800750a <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 8001788:	2012      	movs	r0, #18
 800178a:	f7fe ffdd 	bl	8000748 <NRF24_read_register>
 800178e:	4603      	mov	r3, r0
 8001790:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001794:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001798:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800179c:	f107 0308 	add.w	r3, r7, #8
 80017a0:	4958      	ldr	r1, [pc, #352]	; (8001904 <printRadioSettings+0x6e4>)
 80017a2:	4618      	mov	r0, r3
 80017a4:	f008 fbce 	bl	8009f44 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017a8:	f107 0308 	add.w	r3, r7, #8
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe fd9f 	bl	80002f0 <strlen>
 80017b2:	4603      	mov	r3, r0
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	f107 0108 	add.w	r1, r7, #8
 80017ba:	230a      	movs	r3, #10
 80017bc:	4848      	ldr	r0, [pc, #288]	; (80018e0 <printRadioSettings+0x6c0>)
 80017be:	f005 fea4 	bl	800750a <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 80017c2:	2013      	movs	r0, #19
 80017c4:	f7fe ffc0 	bl	8000748 <NRF24_read_register>
 80017c8:	4603      	mov	r3, r0
 80017ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80017ce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017d6:	f107 0308 	add.w	r3, r7, #8
 80017da:	494b      	ldr	r1, [pc, #300]	; (8001908 <printRadioSettings+0x6e8>)
 80017dc:	4618      	mov	r0, r3
 80017de:	f008 fbb1 	bl	8009f44 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017e2:	f107 0308 	add.w	r3, r7, #8
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7fe fd82 	bl	80002f0 <strlen>
 80017ec:	4603      	mov	r3, r0
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	f107 0108 	add.w	r1, r7, #8
 80017f4:	230a      	movs	r3, #10
 80017f6:	483a      	ldr	r0, [pc, #232]	; (80018e0 <printRadioSettings+0x6c0>)
 80017f8:	f005 fe87 	bl	800750a <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 80017fc:	2014      	movs	r0, #20
 80017fe:	f7fe ffa3 	bl	8000748 <NRF24_read_register>
 8001802:	4603      	mov	r3, r0
 8001804:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001808:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800180c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001810:	f107 0308 	add.w	r3, r7, #8
 8001814:	493d      	ldr	r1, [pc, #244]	; (800190c <printRadioSettings+0x6ec>)
 8001816:	4618      	mov	r0, r3
 8001818:	f008 fb94 	bl	8009f44 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800181c:	f107 0308 	add.w	r3, r7, #8
 8001820:	4618      	mov	r0, r3
 8001822:	f7fe fd65 	bl	80002f0 <strlen>
 8001826:	4603      	mov	r3, r0
 8001828:	b29a      	uxth	r2, r3
 800182a:	f107 0108 	add.w	r1, r7, #8
 800182e:	230a      	movs	r3, #10
 8001830:	482b      	ldr	r0, [pc, #172]	; (80018e0 <printRadioSettings+0x6c0>)
 8001832:	f005 fe6a 	bl	800750a <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 8001836:	2015      	movs	r0, #21
 8001838:	f7fe ff86 	bl	8000748 <NRF24_read_register>
 800183c:	4603      	mov	r3, r0
 800183e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001842:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001846:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800184a:	f107 0308 	add.w	r3, r7, #8
 800184e:	4930      	ldr	r1, [pc, #192]	; (8001910 <printRadioSettings+0x6f0>)
 8001850:	4618      	mov	r0, r3
 8001852:	f008 fb77 	bl	8009f44 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001856:	f107 0308 	add.w	r3, r7, #8
 800185a:	4618      	mov	r0, r3
 800185c:	f7fe fd48 	bl	80002f0 <strlen>
 8001860:	4603      	mov	r3, r0
 8001862:	b29a      	uxth	r2, r3
 8001864:	f107 0108 	add.w	r1, r7, #8
 8001868:	230a      	movs	r3, #10
 800186a:	481d      	ldr	r0, [pc, #116]	; (80018e0 <printRadioSettings+0x6c0>)
 800186c:	f005 fe4d 	bl	800750a <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 8001870:	2016      	movs	r0, #22
 8001872:	f7fe ff69 	bl	8000748 <NRF24_read_register>
 8001876:	4603      	mov	r3, r0
 8001878:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800187c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001880:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001884:	f107 0308 	add.w	r3, r7, #8
 8001888:	4922      	ldr	r1, [pc, #136]	; (8001914 <printRadioSettings+0x6f4>)
 800188a:	4618      	mov	r0, r3
 800188c:	f008 fb5a 	bl	8009f44 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001890:	f107 0308 	add.w	r3, r7, #8
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe fd2b 	bl	80002f0 <strlen>
 800189a:	4603      	mov	r3, r0
 800189c:	b29a      	uxth	r2, r3
 800189e:	f107 0108 	add.w	r1, r7, #8
 80018a2:	230a      	movs	r3, #10
 80018a4:	480e      	ldr	r0, [pc, #56]	; (80018e0 <printRadioSettings+0x6c0>)
 80018a6:	f005 fe30 	bl	800750a <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 80018aa:	201c      	movs	r0, #28
 80018ac:	f7fe ff4c 	bl	8000748 <NRF24_read_register>
 80018b0:	4603      	mov	r3, r0
 80018b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80018b6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80018ba:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80018be:	2b00      	cmp	r3, #0
 80018c0:	bfcc      	ite	gt
 80018c2:	2301      	movgt	r3, #1
 80018c4:	2300      	movle	r3, #0
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80018ca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80018ce:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	bfcc      	ite	gt
 80018d6:	2301      	movgt	r3, #1
 80018d8:	2300      	movle	r3, #0
 80018da:	e01d      	b.n	8001918 <printRadioSettings+0x6f8>
 80018dc:	0800a9fc 	.word	0x0800a9fc
 80018e0:	24000188 	.word	0x24000188
 80018e4:	0800aa10 	.word	0x0800aa10
 80018e8:	0800aa40 	.word	0x0800aa40
 80018ec:	0800aa70 	.word	0x0800aa70
 80018f0:	0800aa98 	.word	0x0800aa98
 80018f4:	0800aac0 	.word	0x0800aac0
 80018f8:	0800aae8 	.word	0x0800aae8
 80018fc:	0800ab10 	.word	0x0800ab10
 8001900:	0800ab3c 	.word	0x0800ab3c
 8001904:	0800ab58 	.word	0x0800ab58
 8001908:	0800ab74 	.word	0x0800ab74
 800190c:	0800ab90 	.word	0x0800ab90
 8001910:	0800abac 	.word	0x0800abac
 8001914:	0800abc8 	.word	0x0800abc8
 8001918:	b2db      	uxtb	r3, r3
 800191a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800191c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001920:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001924:	2b00      	cmp	r3, #0
 8001926:	bfcc      	ite	gt
 8001928:	2301      	movgt	r3, #1
 800192a:	2300      	movle	r3, #0
 800192c:	b2db      	uxtb	r3, r3
 800192e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001930:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001934:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001938:	2b00      	cmp	r3, #0
 800193a:	bfcc      	ite	gt
 800193c:	2301      	movgt	r3, #1
 800193e:	2300      	movle	r3, #0
 8001940:	b2db      	uxtb	r3, r3
 8001942:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001944:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001948:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800194c:	2b00      	cmp	r3, #0
 800194e:	bfcc      	ite	gt
 8001950:	2301      	movgt	r3, #1
 8001952:	2300      	movle	r3, #0
 8001954:	b2db      	uxtb	r3, r3
 8001956:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001958:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800195c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001960:	2b00      	cmp	r3, #0
 8001962:	bfcc      	ite	gt
 8001964:	2301      	movgt	r3, #1
 8001966:	2300      	movle	r3, #0
 8001968:	b2db      	uxtb	r3, r3
 800196a:	f107 0008 	add.w	r0, r7, #8
 800196e:	9303      	str	r3, [sp, #12]
 8001970:	9402      	str	r4, [sp, #8]
 8001972:	9101      	str	r1, [sp, #4]
 8001974:	9200      	str	r2, [sp, #0]
 8001976:	4633      	mov	r3, r6
 8001978:	462a      	mov	r2, r5
 800197a:	4936      	ldr	r1, [pc, #216]	; (8001a54 <printRadioSettings+0x834>)
 800197c:	f008 fae2 	bl	8009f44 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001980:	f107 0308 	add.w	r3, r7, #8
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fcb3 	bl	80002f0 <strlen>
 800198a:	4603      	mov	r3, r0
 800198c:	b29a      	uxth	r2, r3
 800198e:	f107 0108 	add.w	r1, r7, #8
 8001992:	230a      	movs	r3, #10
 8001994:	4830      	ldr	r0, [pc, #192]	; (8001a58 <printRadioSettings+0x838>)
 8001996:	f005 fdb8 	bl	800750a <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 800199a:	201d      	movs	r0, #29
 800199c:	f7fe fed4 	bl	8000748 <NRF24_read_register>
 80019a0:	4603      	mov	r3, r0
 80019a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 80019a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80019aa:	f003 0304 	and.w	r3, r3, #4
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d006      	beq.n	80019c0 <printRadioSettings+0x7a0>
 80019b2:	f107 0308 	add.w	r3, r7, #8
 80019b6:	4929      	ldr	r1, [pc, #164]	; (8001a5c <printRadioSettings+0x83c>)
 80019b8:	4618      	mov	r0, r3
 80019ba:	f008 fac3 	bl	8009f44 <siprintf>
 80019be:	e005      	b.n	80019cc <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 80019c0:	f107 0308 	add.w	r3, r7, #8
 80019c4:	4926      	ldr	r1, [pc, #152]	; (8001a60 <printRadioSettings+0x840>)
 80019c6:	4618      	mov	r0, r3
 80019c8:	f008 fabc 	bl	8009f44 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019cc:	f107 0308 	add.w	r3, r7, #8
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7fe fc8d 	bl	80002f0 <strlen>
 80019d6:	4603      	mov	r3, r0
 80019d8:	b29a      	uxth	r2, r3
 80019da:	f107 0108 	add.w	r1, r7, #8
 80019de:	230a      	movs	r3, #10
 80019e0:	481d      	ldr	r0, [pc, #116]	; (8001a58 <printRadioSettings+0x838>)
 80019e2:	f005 fd92 	bl	800750a <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 80019e6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d006      	beq.n	8001a00 <printRadioSettings+0x7e0>
 80019f2:	f107 0308 	add.w	r3, r7, #8
 80019f6:	491b      	ldr	r1, [pc, #108]	; (8001a64 <printRadioSettings+0x844>)
 80019f8:	4618      	mov	r0, r3
 80019fa:	f008 faa3 	bl	8009f44 <siprintf>
 80019fe:	e005      	b.n	8001a0c <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001a00:	f107 0308 	add.w	r3, r7, #8
 8001a04:	4918      	ldr	r1, [pc, #96]	; (8001a68 <printRadioSettings+0x848>)
 8001a06:	4618      	mov	r0, r3
 8001a08:	f008 fa9c 	bl	8009f44 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a0c:	f107 0308 	add.w	r3, r7, #8
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7fe fc6d 	bl	80002f0 <strlen>
 8001a16:	4603      	mov	r3, r0
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	f107 0108 	add.w	r1, r7, #8
 8001a1e:	230a      	movs	r3, #10
 8001a20:	480d      	ldr	r0, [pc, #52]	; (8001a58 <printRadioSettings+0x838>)
 8001a22:	f005 fd72 	bl	800750a <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001a26:	f107 0308 	add.w	r3, r7, #8
 8001a2a:	4910      	ldr	r1, [pc, #64]	; (8001a6c <printRadioSettings+0x84c>)
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f008 fa89 	bl	8009f44 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a32:	f107 0308 	add.w	r3, r7, #8
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7fe fc5a 	bl	80002f0 <strlen>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	f107 0108 	add.w	r1, r7, #8
 8001a44:	230a      	movs	r3, #10
 8001a46:	4804      	ldr	r0, [pc, #16]	; (8001a58 <printRadioSettings+0x838>)
 8001a48:	f005 fd5f 	bl	800750a <HAL_UART_Transmit>
}
 8001a4c:	bf00      	nop
 8001a4e:	3774      	adds	r7, #116	; 0x74
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a54:	0800abe4 	.word	0x0800abe4
 8001a58:	24000188 	.word	0x24000188
 8001a5c:	0800ac30 	.word	0x0800ac30
 8001a60:	0800ac48 	.word	0x0800ac48
 8001a64:	0800ac60 	.word	0x0800ac60
 8001a68:	0800ac7c 	.word	0x0800ac7c
 8001a6c:	0800a850 	.word	0x0800a850

08001a70 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8001a70:	b084      	sub	sp, #16
 8001a72:	b580      	push	{r7, lr}
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	f107 0c08 	add.w	ip, r7, #8
 8001a7a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8001a7e:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <nrf24_DebugUART_Init+0x2c>)
 8001a80:	4618      	mov	r0, r3
 8001a82:	f107 0308 	add.w	r3, r7, #8
 8001a86:	2294      	movs	r2, #148	; 0x94
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f008 fa45 	bl	8009f18 <memcpy>
}
 8001a8e:	bf00      	nop
 8001a90:	46bd      	mov	sp, r7
 8001a92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a96:	b004      	add	sp, #16
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	24000188 	.word	0x24000188

08001aa0 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08e      	sub	sp, #56	; 0x38
 8001aa4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	605a      	str	r2, [r3, #4]
 8001ab0:	609a      	str	r2, [r3, #8]
 8001ab2:	60da      	str	r2, [r3, #12]
 8001ab4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab6:	4b93      	ldr	r3, [pc, #588]	; (8001d04 <MX_GPIO_Init+0x264>)
 8001ab8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001abc:	4a91      	ldr	r2, [pc, #580]	; (8001d04 <MX_GPIO_Init+0x264>)
 8001abe:	f043 0304 	orr.w	r3, r3, #4
 8001ac2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001ac6:	4b8f      	ldr	r3, [pc, #572]	; (8001d04 <MX_GPIO_Init+0x264>)
 8001ac8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	623b      	str	r3, [r7, #32]
 8001ad2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ad4:	4b8b      	ldr	r3, [pc, #556]	; (8001d04 <MX_GPIO_Init+0x264>)
 8001ad6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001ada:	4a8a      	ldr	r2, [pc, #552]	; (8001d04 <MX_GPIO_Init+0x264>)
 8001adc:	f043 0320 	orr.w	r3, r3, #32
 8001ae0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001ae4:	4b87      	ldr	r3, [pc, #540]	; (8001d04 <MX_GPIO_Init+0x264>)
 8001ae6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001aea:	f003 0320 	and.w	r3, r3, #32
 8001aee:	61fb      	str	r3, [r7, #28]
 8001af0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001af2:	4b84      	ldr	r3, [pc, #528]	; (8001d04 <MX_GPIO_Init+0x264>)
 8001af4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001af8:	4a82      	ldr	r2, [pc, #520]	; (8001d04 <MX_GPIO_Init+0x264>)
 8001afa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001afe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001b02:	4b80      	ldr	r3, [pc, #512]	; (8001d04 <MX_GPIO_Init+0x264>)
 8001b04:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b0c:	61bb      	str	r3, [r7, #24]
 8001b0e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b10:	4b7c      	ldr	r3, [pc, #496]	; (8001d04 <MX_GPIO_Init+0x264>)
 8001b12:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b16:	4a7b      	ldr	r2, [pc, #492]	; (8001d04 <MX_GPIO_Init+0x264>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001b20:	4b78      	ldr	r3, [pc, #480]	; (8001d04 <MX_GPIO_Init+0x264>)
 8001b22:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2e:	4b75      	ldr	r3, [pc, #468]	; (8001d04 <MX_GPIO_Init+0x264>)
 8001b30:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b34:	4a73      	ldr	r2, [pc, #460]	; (8001d04 <MX_GPIO_Init+0x264>)
 8001b36:	f043 0302 	orr.w	r3, r3, #2
 8001b3a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001b3e:	4b71      	ldr	r3, [pc, #452]	; (8001d04 <MX_GPIO_Init+0x264>)
 8001b40:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b4c:	4b6d      	ldr	r3, [pc, #436]	; (8001d04 <MX_GPIO_Init+0x264>)
 8001b4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b52:	4a6c      	ldr	r2, [pc, #432]	; (8001d04 <MX_GPIO_Init+0x264>)
 8001b54:	f043 0308 	orr.w	r3, r3, #8
 8001b58:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001b5c:	4b69      	ldr	r3, [pc, #420]	; (8001d04 <MX_GPIO_Init+0x264>)
 8001b5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b6a:	4b66      	ldr	r3, [pc, #408]	; (8001d04 <MX_GPIO_Init+0x264>)
 8001b6c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b70:	4a64      	ldr	r2, [pc, #400]	; (8001d04 <MX_GPIO_Init+0x264>)
 8001b72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b76:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001b7a:	4b62      	ldr	r3, [pc, #392]	; (8001d04 <MX_GPIO_Init+0x264>)
 8001b7c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b88:	4b5e      	ldr	r3, [pc, #376]	; (8001d04 <MX_GPIO_Init+0x264>)
 8001b8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b8e:	4a5d      	ldr	r2, [pc, #372]	; (8001d04 <MX_GPIO_Init+0x264>)
 8001b90:	f043 0310 	orr.w	r3, r3, #16
 8001b94:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001b98:	4b5a      	ldr	r3, [pc, #360]	; (8001d04 <MX_GPIO_Init+0x264>)
 8001b9a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b9e:	f003 0310 	and.w	r3, r3, #16
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bac:	4856      	ldr	r0, [pc, #344]	; (8001d08 <MX_GPIO_Init+0x268>)
 8001bae:	f001 fe7d 	bl	80038ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_Pin_GPIO_Port, CSN_Pin_Pin, GPIO_PIN_RESET);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2110      	movs	r1, #16
 8001bb6:	4855      	ldr	r0, [pc, #340]	; (8001d0c <MX_GPIO_Init+0x26c>)
 8001bb8:	f001 fe78 	bl	80038ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_Pin_GPIO_Port, CE_Pin_Pin, GPIO_PIN_RESET);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	2120      	movs	r1, #32
 8001bc0:	4853      	ldr	r0, [pc, #332]	; (8001d10 <MX_GPIO_Init+0x270>)
 8001bc2:	f001 fe73 	bl	80038ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f244 0101 	movw	r1, #16385	; 0x4001
 8001bcc:	4851      	ldr	r0, [pc, #324]	; (8001d14 <MX_GPIO_Init+0x274>)
 8001bce:	f001 fe6d 	bl	80038ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2102      	movs	r1, #2
 8001bd6:	4850      	ldr	r0, [pc, #320]	; (8001d18 <MX_GPIO_Init+0x278>)
 8001bd8:	f001 fe68 	bl	80038ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001bdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be2:	2300      	movs	r3, #0
 8001be4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4847      	ldr	r0, [pc, #284]	; (8001d10 <MX_GPIO_Init+0x270>)
 8001bf2:	f001 fcab 	bl	800354c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8001bf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c04:	2300      	movs	r3, #0
 8001c06:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	483e      	ldr	r0, [pc, #248]	; (8001d08 <MX_GPIO_Init+0x268>)
 8001c10:	f001 fc9c 	bl	800354c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CSN_Pin_Pin;
 8001c14:	2310      	movs	r3, #16
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c20:	2300      	movs	r3, #0
 8001c22:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CSN_Pin_GPIO_Port, &GPIO_InitStruct);
 8001c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4838      	ldr	r0, [pc, #224]	; (8001d0c <MX_GPIO_Init+0x26c>)
 8001c2c:	f001 fc8e 	bl	800354c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CE_Pin_Pin;
 8001c30:	2320      	movs	r3, #32
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c34:	2301      	movs	r3, #1
 8001c36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CE_Pin_GPIO_Port, &GPIO_InitStruct);
 8001c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c44:	4619      	mov	r1, r3
 8001c46:	4832      	ldr	r0, [pc, #200]	; (8001d10 <MX_GPIO_Init+0x270>)
 8001c48:	f001 fc80 	bl	800354c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|LD3_Pin;
 8001c4c:	f244 0301 	movw	r3, #16385	; 0x4001
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c52:	2301      	movs	r3, #1
 8001c54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c62:	4619      	mov	r1, r3
 8001c64:	482b      	ldr	r0, [pc, #172]	; (8001d14 <MX_GPIO_Init+0x274>)
 8001c66:	f001 fc71 	bl	800354c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001c6a:	2380      	movs	r3, #128	; 0x80
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c6e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4827      	ldr	r0, [pc, #156]	; (8001d1c <MX_GPIO_Init+0x27c>)
 8001c80:	f001 fc64 	bl	800354c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001c84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c96:	4619      	mov	r1, r3
 8001c98:	481c      	ldr	r0, [pc, #112]	; (8001d0c <MX_GPIO_Init+0x26c>)
 8001c9a:	f001 fc57 	bl	800354c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001c9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ca2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cac:	2300      	movs	r3, #0
 8001cae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001cb0:	230a      	movs	r3, #10
 8001cb2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4814      	ldr	r0, [pc, #80]	; (8001d0c <MX_GPIO_Init+0x26c>)
 8001cbc:	f001 fc46 	bl	800354c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8001cc0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	480c      	ldr	r0, [pc, #48]	; (8001d0c <MX_GPIO_Init+0x26c>)
 8001cda:	f001 fc37 	bl	800354c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cea:	2300      	movs	r3, #0
 8001cec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4808      	ldr	r0, [pc, #32]	; (8001d18 <MX_GPIO_Init+0x278>)
 8001cf6:	f001 fc29 	bl	800354c <HAL_GPIO_Init>

}
 8001cfa:	bf00      	nop
 8001cfc:	3738      	adds	r7, #56	; 0x38
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	58024400 	.word	0x58024400
 8001d08:	58021400 	.word	0x58021400
 8001d0c:	58020000 	.word	0x58020000
 8001d10:	58020800 	.word	0x58020800
 8001d14:	58020400 	.word	0x58020400
 8001d18:	58021000 	.word	0x58021000
 8001d1c:	58021800 	.word	0x58021800

08001d20 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001d20:	b590      	push	{r4, r7, lr}
 8001d22:	b0b7      	sub	sp, #220	; 0xdc
 8001d24:	af22      	add	r7, sp, #136	; 0x88
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001d26:	f000 fce7 	bl	80026f8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001d2a:	f000 f911 	bl	8001f50 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8001d2e:	f000 f98b 	bl	8002048 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001d32:	f7ff feb5 	bl	8001aa0 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8001d36:	f000 fbc5 	bl	80024c4 <MX_USART3_UART_Init>
	MX_USB_OTG_HS_USB_Init();
 8001d3a:	f000 fcab 	bl	8002694 <MX_USB_OTG_HS_USB_Init>
	MX_SPI1_Init();
 8001d3e:	f000 f9a7 	bl	8002090 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Transmit(&huart3, (uint8_t*) "Booting...\r\n",12,100);
 8001d42:	2364      	movs	r3, #100	; 0x64
 8001d44:	220c      	movs	r2, #12
 8001d46:	4971      	ldr	r1, [pc, #452]	; (8001f0c <main+0x1ec>)
 8001d48:	4871      	ldr	r0, [pc, #452]	; (8001f10 <main+0x1f0>)
 8001d4a:	f005 fbde 	bl	800750a <HAL_UART_Transmit>

	// TX mode
	//mode = 0;

	//RX mode
	mode = 1;
 8001d4e:	4b71      	ldr	r3, [pc, #452]	; (8001f14 <main+0x1f4>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	601a      	str	r2, [r3, #0]



	switch(mode){
 8001d54:	4b6f      	ldr	r3, [pc, #444]	; (8001f14 <main+0x1f4>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d002      	beq.n	8001d62 <main+0x42>
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d031      	beq.n	8001dc4 <main+0xa4>
 8001d60:	e060      	b.n	8001e24 <main+0x104>
	case 0:
		NRF24_begin(hspi1);
 8001d62:	4c6d      	ldr	r4, [pc, #436]	; (8001f18 <main+0x1f8>)
 8001d64:	4668      	mov	r0, sp
 8001d66:	f104 0310 	add.w	r3, r4, #16
 8001d6a:	2278      	movs	r2, #120	; 0x78
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f008 f8d3 	bl	8009f18 <memcpy>
 8001d72:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d76:	f7fe fdf1 	bl	800095c <NRF24_begin>
		nrf24_DebugUART_Init(huart3);
 8001d7a:	4c65      	ldr	r4, [pc, #404]	; (8001f10 <main+0x1f0>)
 8001d7c:	4668      	mov	r0, sp
 8001d7e:	f104 0310 	add.w	r3, r4, #16
 8001d82:	2284      	movs	r2, #132	; 0x84
 8001d84:	4619      	mov	r1, r3
 8001d86:	f008 f8c7 	bl	8009f18 <memcpy>
 8001d8a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d8e:	f7ff fe6f 	bl	8001a70 <nrf24_DebugUART_Init>

		printRadioSettings();
 8001d92:	f7ff fa45 	bl	8001220 <printRadioSettings>

		NRF24_stopListening();
 8001d96:	f7fe fed3 	bl	8000b40 <NRF24_stopListening>
		NRF24_openWritingPipe(TxpipeAddrs);
 8001d9a:	4b60      	ldr	r3, [pc, #384]	; (8001f1c <main+0x1fc>)
 8001d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da0:	4610      	mov	r0, r2
 8001da2:	4619      	mov	r1, r3
 8001da4:	f7fe ff4c 	bl	8000c40 <NRF24_openWritingPipe>
		NRF24_setAutoAck(true);
 8001da8:	2001      	movs	r0, #1
 8001daa:	f7ff f88f 	bl	8000ecc <NRF24_setAutoAck>
		NRF24_setChannel(52);
 8001dae:	2034      	movs	r0, #52	; 0x34
 8001db0:	f7fe ffd3 	bl	8000d5a <NRF24_setChannel>
		NRF24_setPayloadSize(32);
 8001db4:	2020      	movs	r0, #32
 8001db6:	f7fe ffe5 	bl	8000d84 <NRF24_setPayloadSize>

		NRF24_enableDynamicPayloads();
 8001dba:	f7ff f83d 	bl	8000e38 <NRF24_enableDynamicPayloads>
		NRF24_enableAckPayload();
 8001dbe:	f7ff f80d 	bl	8000ddc <NRF24_enableAckPayload>
		break;
 8001dc2:	e02f      	b.n	8001e24 <main+0x104>
	case 1:
		NRF24_begin(hspi1);
 8001dc4:	4c54      	ldr	r4, [pc, #336]	; (8001f18 <main+0x1f8>)
 8001dc6:	4668      	mov	r0, sp
 8001dc8:	f104 0310 	add.w	r3, r4, #16
 8001dcc:	2278      	movs	r2, #120	; 0x78
 8001dce:	4619      	mov	r1, r3
 8001dd0:	f008 f8a2 	bl	8009f18 <memcpy>
 8001dd4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001dd8:	f7fe fdc0 	bl	800095c <NRF24_begin>
		nrf24_DebugUART_Init(huart3);
 8001ddc:	4c4c      	ldr	r4, [pc, #304]	; (8001f10 <main+0x1f0>)
 8001dde:	4668      	mov	r0, sp
 8001de0:	f104 0310 	add.w	r3, r4, #16
 8001de4:	2284      	movs	r2, #132	; 0x84
 8001de6:	4619      	mov	r1, r3
 8001de8:	f008 f896 	bl	8009f18 <memcpy>
 8001dec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001df0:	f7ff fe3e 	bl	8001a70 <nrf24_DebugUART_Init>

		printRadioSettings();
 8001df4:	f7ff fa14 	bl	8001220 <printRadioSettings>

		NRF24_setAutoAck(true);
 8001df8:	2001      	movs	r0, #1
 8001dfa:	f7ff f867 	bl	8000ecc <NRF24_setAutoAck>
		NRF24_setChannel(52);
 8001dfe:	2034      	movs	r0, #52	; 0x34
 8001e00:	f7fe ffab 	bl	8000d5a <NRF24_setChannel>
		NRF24_setPayloadSize(32);
 8001e04:	2020      	movs	r0, #32
 8001e06:	f7fe ffbd 	bl	8000d84 <NRF24_setPayloadSize>
		NRF24_openReadingPipe(1, RxpipeAddrs);
 8001e0a:	4b45      	ldr	r3, [pc, #276]	; (8001f20 <main+0x200>)
 8001e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e10:	2001      	movs	r0, #1
 8001e12:	f7fe ff39 	bl	8000c88 <NRF24_openReadingPipe>
		NRF24_enableDynamicPayloads();
 8001e16:	f7ff f80f 	bl	8000e38 <NRF24_enableDynamicPayloads>
		NRF24_enableAckPayload();
 8001e1a:	f7fe ffdf 	bl	8000ddc <NRF24_enableAckPayload>

		NRF24_startListening();
 8001e1e:	f7fe fe69 	bl	8000af4 <NRF24_startListening>
		break;
 8001e22:	bf00      	nop
	}


	printRadioSettings();
 8001e24:	f7ff f9fc 	bl	8001220 <printRadioSettings>
	/* USER CODE BEGIN WHILE */
	while (1){
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if(uartFlag == 1){
 8001e28:	4b3e      	ldr	r3, [pc, #248]	; (8001f24 <main+0x204>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d11d      	bne.n	8001e6c <main+0x14c>
			switch(uartRxBuffer[0]){
 8001e30:	4b3d      	ldr	r3, [pc, #244]	; (8001f28 <main+0x208>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b67      	cmp	r3, #103	; 0x67
 8001e36:	d106      	bne.n	8001e46 <main+0x126>
			case 'g' :
				HAL_UART_Transmit(&huart3,(uint8_t*) "et informations for nrf24\r\n",27,100);
 8001e38:	2364      	movs	r3, #100	; 0x64
 8001e3a:	221b      	movs	r2, #27
 8001e3c:	493b      	ldr	r1, [pc, #236]	; (8001f2c <main+0x20c>)
 8001e3e:	4834      	ldr	r0, [pc, #208]	; (8001f10 <main+0x1f0>)
 8001e40:	f005 fb63 	bl	800750a <HAL_UART_Transmit>
				void NRF24_ShowMemory() ;
				break;
 8001e44:	e00f      	b.n	8001e66 <main+0x146>
			default :
				HAL_GPIO_TogglePin(LED2_PORT,  LED2_PIN) ;
 8001e46:	2102      	movs	r1, #2
 8001e48:	4839      	ldr	r0, [pc, #228]	; (8001f30 <main+0x210>)
 8001e4a:	f001 fd48 	bl	80038de <HAL_GPIO_TogglePin>
				HAL_UART_Transmit(&huart3, (uint8_t*) msglu, 18, 100) ;
 8001e4e:	4b39      	ldr	r3, [pc, #228]	; (8001f34 <main+0x214>)
 8001e50:	6819      	ldr	r1, [r3, #0]
 8001e52:	2364      	movs	r3, #100	; 0x64
 8001e54:	2212      	movs	r2, #18
 8001e56:	482e      	ldr	r0, [pc, #184]	; (8001f10 <main+0x1f0>)
 8001e58:	f005 fb57 	bl	800750a <HAL_UART_Transmit>
				HAL_GPIO_TogglePin(LED2_PORT,  LED2_PIN) ;
 8001e5c:	2102      	movs	r1, #2
 8001e5e:	4834      	ldr	r0, [pc, #208]	; (8001f30 <main+0x210>)
 8001e60:	f001 fd3d 	bl	80038de <HAL_GPIO_TogglePin>
				break;
 8001e64:	bf00      	nop
			}
			uartFlag = 0 ;
 8001e66:	4b2f      	ldr	r3, [pc, #188]	; (8001f24 <main+0x204>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	701a      	strb	r2, [r3, #0]
		}

		switch(mode){
 8001e6c:	4b29      	ldr	r3, [pc, #164]	; (8001f14 <main+0x1f4>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d002      	beq.n	8001e7a <main+0x15a>
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d023      	beq.n	8001ec0 <main+0x1a0>
 8001e78:	e042      	b.n	8001f00 <main+0x1e0>
		case 0:
			if(NRF24_write(myTxData, 32)){
 8001e7a:	2120      	movs	r1, #32
 8001e7c:	482e      	ldr	r0, [pc, #184]	; (8001f38 <main+0x218>)
 8001e7e:	f7fe fe6b 	bl	8000b58 <NRF24_write>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d038      	beq.n	8001efa <main+0x1da>
				NRF24_read(AckPayload, 32);
 8001e88:	2120      	movs	r1, #32
 8001e8a:	482c      	ldr	r0, [pc, #176]	; (8001f3c <main+0x21c>)
 8001e8c:	f7fe feb8 	bl	8000c00 <NRF24_read>
				HAL_UART_Transmit(&huart3, (uint8_t *)"Transmitted Successfully\r\n", strlen("Transmitted Successfully\r\n"), 10);
 8001e90:	230a      	movs	r3, #10
 8001e92:	221a      	movs	r2, #26
 8001e94:	492a      	ldr	r1, [pc, #168]	; (8001f40 <main+0x220>)
 8001e96:	481e      	ldr	r0, [pc, #120]	; (8001f10 <main+0x1f0>)
 8001e98:	f005 fb37 	bl	800750a <HAL_UART_Transmit>

				char myDataack[80];
				sprintf(myDataack, "AckPayload:  %s \r\n", AckPayload);
 8001e9c:	463b      	mov	r3, r7
 8001e9e:	4a27      	ldr	r2, [pc, #156]	; (8001f3c <main+0x21c>)
 8001ea0:	4928      	ldr	r1, [pc, #160]	; (8001f44 <main+0x224>)
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f008 f84e 	bl	8009f44 <siprintf>
				HAL_UART_Transmit(&huart3, (uint8_t *)myDataack, strlen(myDataack), 10);
 8001ea8:	463b      	mov	r3, r7
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe fa20 	bl	80002f0 <strlen>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	4639      	mov	r1, r7
 8001eb6:	230a      	movs	r3, #10
 8001eb8:	4815      	ldr	r0, [pc, #84]	; (8001f10 <main+0x1f0>)
 8001eba:	f005 fb26 	bl	800750a <HAL_UART_Transmit>
			}
			break;
 8001ebe:	e01c      	b.n	8001efa <main+0x1da>
		case 1:
			if(NRF24_available()){
 8001ec0:	f7fe fe96 	bl	8000bf0 <NRF24_available>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d019      	beq.n	8001efe <main+0x1de>
				NRF24_read(myRxData, 32);
 8001eca:	2120      	movs	r1, #32
 8001ecc:	481e      	ldr	r0, [pc, #120]	; (8001f48 <main+0x228>)
 8001ece:	f7fe fe97 	bl	8000c00 <NRF24_read>
				NRF24_writeAckPayload(1, myAckPayload, 32);
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	491d      	ldr	r1, [pc, #116]	; (8001f4c <main+0x22c>)
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	f7ff f922 	bl	8001120 <NRF24_writeAckPayload>
				myRxData[32] = '\r'; myRxData[32+1] = '\n';
 8001edc:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <main+0x228>)
 8001ede:	220d      	movs	r2, #13
 8001ee0:	f883 2020 	strb.w	r2, [r3, #32]
 8001ee4:	4b18      	ldr	r3, [pc, #96]	; (8001f48 <main+0x228>)
 8001ee6:	220a      	movs	r2, #10
 8001ee8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				HAL_UART_Transmit(&huart3, (uint8_t *)myRxData, 32+2, 10);
 8001eec:	230a      	movs	r3, #10
 8001eee:	2222      	movs	r2, #34	; 0x22
 8001ef0:	4915      	ldr	r1, [pc, #84]	; (8001f48 <main+0x228>)
 8001ef2:	4807      	ldr	r0, [pc, #28]	; (8001f10 <main+0x1f0>)
 8001ef4:	f005 fb09 	bl	800750a <HAL_UART_Transmit>
			}
			break ;
 8001ef8:	e001      	b.n	8001efe <main+0x1de>
			break;
 8001efa:	bf00      	nop
 8001efc:	e000      	b.n	8001f00 <main+0x1e0>
			break ;
 8001efe:	bf00      	nop
		}

		HAL_Delay(1000);
 8001f00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f04:	f000 fc8a 	bl	800281c <HAL_Delay>
		if(uartFlag == 1){
 8001f08:	e78e      	b.n	8001e28 <main+0x108>
 8001f0a:	bf00      	nop
 8001f0c:	0800adbc 	.word	0x0800adbc
 8001f10:	24000344 	.word	0x24000344
 8001f14:	2400021c 	.word	0x2400021c
 8001f18:	24000274 	.word	0x24000274
 8001f1c:	24000030 	.word	0x24000030
 8001f20:	24000008 	.word	0x24000008
 8001f24:	24000300 	.word	0x24000300
 8001f28:	24000324 	.word	0x24000324
 8001f2c:	0800adcc 	.word	0x0800adcc
 8001f30:	58021000 	.word	0x58021000
 8001f34:	24000000 	.word	0x24000000
 8001f38:	24000038 	.word	0x24000038
 8001f3c:	24000254 	.word	0x24000254
 8001f40:	0800ade8 	.word	0x0800ade8
 8001f44:	0800ae04 	.word	0x0800ae04
 8001f48:	24000220 	.word	0x24000220
 8001f4c:	24000010 	.word	0x24000010

08001f50 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b09c      	sub	sp, #112	; 0x70
 8001f54:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f5a:	224c      	movs	r2, #76	; 0x4c
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f007 ffe8 	bl	8009f34 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f64:	1d3b      	adds	r3, r7, #4
 8001f66:	2220      	movs	r2, #32
 8001f68:	2100      	movs	r1, #0
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f007 ffe2 	bl	8009f34 <memset>

	/*AXI clock gating */
	RCC->CKGAENR = 0xFFFFFFFF;
 8001f70:	4b33      	ldr	r3, [pc, #204]	; (8002040 <SystemClock_Config+0xf0>)
 8001f72:	f04f 32ff 	mov.w	r2, #4294967295
 8001f76:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001f7a:	2004      	movs	r0, #4
 8001f7c:	f001 fcca 	bl	8003914 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001f80:	2300      	movs	r3, #0
 8001f82:	603b      	str	r3, [r7, #0]
 8001f84:	4b2f      	ldr	r3, [pc, #188]	; (8002044 <SystemClock_Config+0xf4>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	4a2e      	ldr	r2, [pc, #184]	; (8002044 <SystemClock_Config+0xf4>)
 8001f8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f8e:	6193      	str	r3, [r2, #24]
 8001f90:	4b2c      	ldr	r3, [pc, #176]	; (8002044 <SystemClock_Config+0xf4>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f98:	603b      	str	r3, [r7, #0]
 8001f9a:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001f9c:	bf00      	nop
 8001f9e:	4b29      	ldr	r3, [pc, #164]	; (8002044 <SystemClock_Config+0xf4>)
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001faa:	d1f8      	bne.n	8001f9e <SystemClock_Config+0x4e>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001fac:	2323      	movs	r3, #35	; 0x23
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
			|RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001fb0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001fb4:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV4;
 8001fb6:	2311      	movs	r3, #17
 8001fb8:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = 64;
 8001fba:	2340      	movs	r3, #64	; 0x40
 8001fbc:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001fca:	2304      	movs	r3, #4
 8001fcc:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 280;
 8001fce:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001fd2:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001fd8:	2304      	movs	r3, #4
 8001fda:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8001fe0:	2304      	movs	r3, #4
 8001fe2:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f001 fce9 	bl	80039c8 <HAL_RCC_OscConfig>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <SystemClock_Config+0xb0>
	{
		Error_Handler();
 8001ffc:	f000 f842 	bl	8002084 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002000:	233f      	movs	r3, #63	; 0x3f
 8002002:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002004:	2303      	movs	r3, #3
 8002006:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002008:	2300      	movs	r3, #0
 800200a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800200c:	2300      	movs	r3, #0
 800200e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002010:	2340      	movs	r3, #64	; 0x40
 8002012:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002014:	2340      	movs	r3, #64	; 0x40
 8002016:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002018:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800201c:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800201e:	2340      	movs	r3, #64	; 0x40
 8002020:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002022:	1d3b      	adds	r3, r7, #4
 8002024:	2107      	movs	r1, #7
 8002026:	4618      	mov	r0, r3
 8002028:	f002 f900 	bl	800422c <HAL_RCC_ClockConfig>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <SystemClock_Config+0xe6>
	{
		Error_Handler();
 8002032:	f000 f827 	bl	8002084 <Error_Handler>
	}
}
 8002036:	bf00      	nop
 8002038:	3770      	adds	r7, #112	; 0x70
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	58024400 	.word	0x58024400
 8002044:	58024800 	.word	0x58024800

08002048 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b0b0      	sub	sp, #192	; 0xc0
 800204c:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800204e:	463b      	mov	r3, r7
 8002050:	22c0      	movs	r2, #192	; 0xc0
 8002052:	2100      	movs	r1, #0
 8002054:	4618      	mov	r0, r3
 8002056:	f007 ff6d 	bl	8009f34 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 800205a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800205e:	f04f 0300 	mov.w	r3, #0
 8002062:	e9c7 2300 	strd	r2, r3, [r7]
	PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8002066:	2300      	movs	r3, #0
 8002068:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800206a:	463b      	mov	r3, r7
 800206c:	4618      	mov	r0, r3
 800206e:	f002 fc69 	bl	8004944 <HAL_RCCEx_PeriphCLKConfig>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <PeriphCommonClock_Config+0x34>
	{
		Error_Handler();
 8002078:	f000 f804 	bl	8002084 <Error_Handler>
	}
}
 800207c:	bf00      	nop
 800207e:	37c0      	adds	r7, #192	; 0xc0
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002088:	b672      	cpsid	i
}
 800208a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800208c:	e7fe      	b.n	800208c <Error_Handler+0x8>
	...

08002090 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002094:	4b27      	ldr	r3, [pc, #156]	; (8002134 <MX_SPI1_Init+0xa4>)
 8002096:	4a28      	ldr	r2, [pc, #160]	; (8002138 <MX_SPI1_Init+0xa8>)
 8002098:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800209a:	4b26      	ldr	r3, [pc, #152]	; (8002134 <MX_SPI1_Init+0xa4>)
 800209c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80020a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020a2:	4b24      	ldr	r3, [pc, #144]	; (8002134 <MX_SPI1_Init+0xa4>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020a8:	4b22      	ldr	r3, [pc, #136]	; (8002134 <MX_SPI1_Init+0xa4>)
 80020aa:	2207      	movs	r2, #7
 80020ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020ae:	4b21      	ldr	r3, [pc, #132]	; (8002134 <MX_SPI1_Init+0xa4>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020b4:	4b1f      	ldr	r3, [pc, #124]	; (8002134 <MX_SPI1_Init+0xa4>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020ba:	4b1e      	ldr	r3, [pc, #120]	; (8002134 <MX_SPI1_Init+0xa4>)
 80020bc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80020c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80020c2:	4b1c      	ldr	r3, [pc, #112]	; (8002134 <MX_SPI1_Init+0xa4>)
 80020c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020ca:	4b1a      	ldr	r3, [pc, #104]	; (8002134 <MX_SPI1_Init+0xa4>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020d0:	4b18      	ldr	r3, [pc, #96]	; (8002134 <MX_SPI1_Init+0xa4>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020d6:	4b17      	ldr	r3, [pc, #92]	; (8002134 <MX_SPI1_Init+0xa4>)
 80020d8:	2200      	movs	r2, #0
 80020da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80020dc:	4b15      	ldr	r3, [pc, #84]	; (8002134 <MX_SPI1_Init+0xa4>)
 80020de:	2200      	movs	r2, #0
 80020e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020e2:	4b14      	ldr	r3, [pc, #80]	; (8002134 <MX_SPI1_Init+0xa4>)
 80020e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020e8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80020ea:	4b12      	ldr	r3, [pc, #72]	; (8002134 <MX_SPI1_Init+0xa4>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80020f0:	4b10      	ldr	r3, [pc, #64]	; (8002134 <MX_SPI1_Init+0xa4>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80020f6:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <MX_SPI1_Init+0xa4>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80020fc:	4b0d      	ldr	r3, [pc, #52]	; (8002134 <MX_SPI1_Init+0xa4>)
 80020fe:	2200      	movs	r2, #0
 8002100:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002102:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <MX_SPI1_Init+0xa4>)
 8002104:	2200      	movs	r2, #0
 8002106:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002108:	4b0a      	ldr	r3, [pc, #40]	; (8002134 <MX_SPI1_Init+0xa4>)
 800210a:	2200      	movs	r2, #0
 800210c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800210e:	4b09      	ldr	r3, [pc, #36]	; (8002134 <MX_SPI1_Init+0xa4>)
 8002110:	2200      	movs	r2, #0
 8002112:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002114:	4b07      	ldr	r3, [pc, #28]	; (8002134 <MX_SPI1_Init+0xa4>)
 8002116:	2200      	movs	r2, #0
 8002118:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800211a:	4b06      	ldr	r3, [pc, #24]	; (8002134 <MX_SPI1_Init+0xa4>)
 800211c:	2200      	movs	r2, #0
 800211e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002120:	4804      	ldr	r0, [pc, #16]	; (8002134 <MX_SPI1_Init+0xa4>)
 8002122:	f004 f9ef 	bl	8006504 <HAL_SPI_Init>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800212c:	f7ff ffaa 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002130:	bf00      	nop
 8002132:	bd80      	pop	{r7, pc}
 8002134:	24000274 	.word	0x24000274
 8002138:	40013000 	.word	0x40013000

0800213c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b0bc      	sub	sp, #240	; 0xf0
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002144:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002154:	f107 0318 	add.w	r3, r7, #24
 8002158:	22c0      	movs	r2, #192	; 0xc0
 800215a:	2100      	movs	r1, #0
 800215c:	4618      	mov	r0, r3
 800215e:	f007 fee9 	bl	8009f34 <memset>
  if(spiHandle->Instance==SPI1)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a4f      	ldr	r2, [pc, #316]	; (80022a4 <HAL_SPI_MspInit+0x168>)
 8002168:	4293      	cmp	r3, r2
 800216a:	f040 8096 	bne.w	800229a <HAL_SPI_MspInit+0x15e>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800216e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002172:	f04f 0300 	mov.w	r3, #0
 8002176:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 800217a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800217e:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002180:	f107 0318 	add.w	r3, r7, #24
 8002184:	4618      	mov	r0, r3
 8002186:	f002 fbdd 	bl	8004944 <HAL_RCCEx_PeriphCLKConfig>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8002190:	f7ff ff78 	bl	8002084 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002194:	4b44      	ldr	r3, [pc, #272]	; (80022a8 <HAL_SPI_MspInit+0x16c>)
 8002196:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800219a:	4a43      	ldr	r2, [pc, #268]	; (80022a8 <HAL_SPI_MspInit+0x16c>)
 800219c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021a0:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80021a4:	4b40      	ldr	r3, [pc, #256]	; (80022a8 <HAL_SPI_MspInit+0x16c>)
 80021a6:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80021aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021ae:	617b      	str	r3, [r7, #20]
 80021b0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b2:	4b3d      	ldr	r3, [pc, #244]	; (80022a8 <HAL_SPI_MspInit+0x16c>)
 80021b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80021b8:	4a3b      	ldr	r2, [pc, #236]	; (80022a8 <HAL_SPI_MspInit+0x16c>)
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80021c2:	4b39      	ldr	r3, [pc, #228]	; (80022a8 <HAL_SPI_MspInit+0x16c>)
 80021c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	613b      	str	r3, [r7, #16]
 80021ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021d0:	4b35      	ldr	r3, [pc, #212]	; (80022a8 <HAL_SPI_MspInit+0x16c>)
 80021d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80021d6:	4a34      	ldr	r2, [pc, #208]	; (80022a8 <HAL_SPI_MspInit+0x16c>)
 80021d8:	f043 0308 	orr.w	r3, r3, #8
 80021dc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80021e0:	4b31      	ldr	r3, [pc, #196]	; (80022a8 <HAL_SPI_MspInit+0x16c>)
 80021e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ee:	4b2e      	ldr	r3, [pc, #184]	; (80022a8 <HAL_SPI_MspInit+0x16c>)
 80021f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80021f4:	4a2c      	ldr	r2, [pc, #176]	; (80022a8 <HAL_SPI_MspInit+0x16c>)
 80021f6:	f043 0302 	orr.w	r3, r3, #2
 80021fa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80021fe:	4b2a      	ldr	r3, [pc, #168]	; (80022a8 <HAL_SPI_MspInit+0x16c>)
 8002200:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800220c:	2340      	movs	r3, #64	; 0x40
 800220e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002212:	2302      	movs	r3, #2
 8002214:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221e:	2300      	movs	r3, #0
 8002220:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002224:	2305      	movs	r3, #5
 8002226:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800222a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800222e:	4619      	mov	r1, r3
 8002230:	481e      	ldr	r0, [pc, #120]	; (80022ac <HAL_SPI_MspInit+0x170>)
 8002232:	f001 f98b 	bl	800354c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002236:	2380      	movs	r3, #128	; 0x80
 8002238:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223c:	2302      	movs	r3, #2
 800223e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002248:	2300      	movs	r3, #0
 800224a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800224e:	2305      	movs	r3, #5
 8002250:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002254:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002258:	4619      	mov	r1, r3
 800225a:	4815      	ldr	r0, [pc, #84]	; (80022b0 <HAL_SPI_MspInit+0x174>)
 800225c:	f001 f976 	bl	800354c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002260:	2308      	movs	r3, #8
 8002262:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002266:	2302      	movs	r3, #2
 8002268:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	2300      	movs	r3, #0
 800226e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002272:	2300      	movs	r3, #0
 8002274:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002278:	2305      	movs	r3, #5
 800227a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800227e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002282:	4619      	mov	r1, r3
 8002284:	480b      	ldr	r0, [pc, #44]	; (80022b4 <HAL_SPI_MspInit+0x178>)
 8002286:	f001 f961 	bl	800354c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800228a:	2200      	movs	r2, #0
 800228c:	2100      	movs	r1, #0
 800228e:	2023      	movs	r0, #35	; 0x23
 8002290:	f000 fbc3 	bl	8002a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002294:	2023      	movs	r0, #35	; 0x23
 8002296:	f000 fbda 	bl	8002a4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800229a:	bf00      	nop
 800229c:	37f0      	adds	r7, #240	; 0xf0
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40013000 	.word	0x40013000
 80022a8:	58024400 	.word	0x58024400
 80022ac:	58020000 	.word	0x58020000
 80022b0:	58020c00 	.word	0x58020c00
 80022b4:	58020400 	.word	0x58020400

080022b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022be:	4b0a      	ldr	r3, [pc, #40]	; (80022e8 <HAL_MspInit+0x30>)
 80022c0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80022c4:	4a08      	ldr	r2, [pc, #32]	; (80022e8 <HAL_MspInit+0x30>)
 80022c6:	f043 0302 	orr.w	r3, r3, #2
 80022ca:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80022ce:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <HAL_MspInit+0x30>)
 80022d0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	607b      	str	r3, [r7, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	58024400 	.word	0x58024400

080022ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022f0:	e7fe      	b.n	80022f0 <NMI_Handler+0x4>

080022f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022f2:	b480      	push	{r7}
 80022f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022f6:	e7fe      	b.n	80022f6 <HardFault_Handler+0x4>

080022f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022fc:	e7fe      	b.n	80022fc <MemManage_Handler+0x4>

080022fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022fe:	b480      	push	{r7}
 8002300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002302:	e7fe      	b.n	8002302 <BusFault_Handler+0x4>

08002304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002308:	e7fe      	b.n	8002308 <UsageFault_Handler+0x4>

0800230a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800230a:	b480      	push	{r7}
 800230c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002326:	b480      	push	{r7}
 8002328:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002338:	f000 fa50 	bl	80027dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800233c:	bf00      	nop
 800233e:	bd80      	pop	{r7, pc}

08002340 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002344:	4802      	ldr	r0, [pc, #8]	; (8002350 <SPI1_IRQHandler+0x10>)
 8002346:	f004 fd8d 	bl	8006e64 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	24000274 	.word	0x24000274

08002354 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002358:	4802      	ldr	r0, [pc, #8]	; (8002364 <USART3_IRQHandler+0x10>)
 800235a:	f005 f9b1 	bl	80076c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	24000344 	.word	0x24000344

08002368 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002370:	4a14      	ldr	r2, [pc, #80]	; (80023c4 <_sbrk+0x5c>)
 8002372:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <_sbrk+0x60>)
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800237c:	4b13      	ldr	r3, [pc, #76]	; (80023cc <_sbrk+0x64>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d102      	bne.n	800238a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002384:	4b11      	ldr	r3, [pc, #68]	; (80023cc <_sbrk+0x64>)
 8002386:	4a12      	ldr	r2, [pc, #72]	; (80023d0 <_sbrk+0x68>)
 8002388:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800238a:	4b10      	ldr	r3, [pc, #64]	; (80023cc <_sbrk+0x64>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4413      	add	r3, r2
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	429a      	cmp	r2, r3
 8002396:	d207      	bcs.n	80023a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002398:	f007 fd94 	bl	8009ec4 <__errno>
 800239c:	4603      	mov	r3, r0
 800239e:	220c      	movs	r2, #12
 80023a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023a2:	f04f 33ff 	mov.w	r3, #4294967295
 80023a6:	e009      	b.n	80023bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023a8:	4b08      	ldr	r3, [pc, #32]	; (80023cc <_sbrk+0x64>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ae:	4b07      	ldr	r3, [pc, #28]	; (80023cc <_sbrk+0x64>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	4a05      	ldr	r2, [pc, #20]	; (80023cc <_sbrk+0x64>)
 80023b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ba:	68fb      	ldr	r3, [r7, #12]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	24100000 	.word	0x24100000
 80023c8:	00000400 	.word	0x00000400
 80023cc:	240002fc 	.word	0x240002fc
 80023d0:	240003f0 	.word	0x240003f0

080023d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80023d8:	4b32      	ldr	r3, [pc, #200]	; (80024a4 <SystemInit+0xd0>)
 80023da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023de:	4a31      	ldr	r2, [pc, #196]	; (80024a4 <SystemInit+0xd0>)
 80023e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80023e8:	4b2f      	ldr	r3, [pc, #188]	; (80024a8 <SystemInit+0xd4>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 030f 	and.w	r3, r3, #15
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d807      	bhi.n	8002404 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80023f4:	4b2c      	ldr	r3, [pc, #176]	; (80024a8 <SystemInit+0xd4>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f023 030f 	bic.w	r3, r3, #15
 80023fc:	4a2a      	ldr	r2, [pc, #168]	; (80024a8 <SystemInit+0xd4>)
 80023fe:	f043 0303 	orr.w	r3, r3, #3
 8002402:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002404:	4b29      	ldr	r3, [pc, #164]	; (80024ac <SystemInit+0xd8>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a28      	ldr	r2, [pc, #160]	; (80024ac <SystemInit+0xd8>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002410:	4b26      	ldr	r3, [pc, #152]	; (80024ac <SystemInit+0xd8>)
 8002412:	2200      	movs	r2, #0
 8002414:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002416:	4b25      	ldr	r3, [pc, #148]	; (80024ac <SystemInit+0xd8>)
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	4924      	ldr	r1, [pc, #144]	; (80024ac <SystemInit+0xd8>)
 800241c:	4b24      	ldr	r3, [pc, #144]	; (80024b0 <SystemInit+0xdc>)
 800241e:	4013      	ands	r3, r2
 8002420:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002422:	4b21      	ldr	r3, [pc, #132]	; (80024a8 <SystemInit+0xd4>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 030c 	and.w	r3, r3, #12
 800242a:	2b00      	cmp	r3, #0
 800242c:	d007      	beq.n	800243e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800242e:	4b1e      	ldr	r3, [pc, #120]	; (80024a8 <SystemInit+0xd4>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f023 030f 	bic.w	r3, r3, #15
 8002436:	4a1c      	ldr	r2, [pc, #112]	; (80024a8 <SystemInit+0xd4>)
 8002438:	f043 0303 	orr.w	r3, r3, #3
 800243c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800243e:	4b1b      	ldr	r3, [pc, #108]	; (80024ac <SystemInit+0xd8>)
 8002440:	2200      	movs	r2, #0
 8002442:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002444:	4b19      	ldr	r3, [pc, #100]	; (80024ac <SystemInit+0xd8>)
 8002446:	2200      	movs	r2, #0
 8002448:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800244a:	4b18      	ldr	r3, [pc, #96]	; (80024ac <SystemInit+0xd8>)
 800244c:	2200      	movs	r2, #0
 800244e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002450:	4b16      	ldr	r3, [pc, #88]	; (80024ac <SystemInit+0xd8>)
 8002452:	4a18      	ldr	r2, [pc, #96]	; (80024b4 <SystemInit+0xe0>)
 8002454:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002456:	4b15      	ldr	r3, [pc, #84]	; (80024ac <SystemInit+0xd8>)
 8002458:	4a17      	ldr	r2, [pc, #92]	; (80024b8 <SystemInit+0xe4>)
 800245a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800245c:	4b13      	ldr	r3, [pc, #76]	; (80024ac <SystemInit+0xd8>)
 800245e:	4a17      	ldr	r2, [pc, #92]	; (80024bc <SystemInit+0xe8>)
 8002460:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002462:	4b12      	ldr	r3, [pc, #72]	; (80024ac <SystemInit+0xd8>)
 8002464:	2200      	movs	r2, #0
 8002466:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002468:	4b10      	ldr	r3, [pc, #64]	; (80024ac <SystemInit+0xd8>)
 800246a:	4a14      	ldr	r2, [pc, #80]	; (80024bc <SystemInit+0xe8>)
 800246c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800246e:	4b0f      	ldr	r3, [pc, #60]	; (80024ac <SystemInit+0xd8>)
 8002470:	2200      	movs	r2, #0
 8002472:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002474:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <SystemInit+0xd8>)
 8002476:	4a11      	ldr	r2, [pc, #68]	; (80024bc <SystemInit+0xe8>)
 8002478:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800247a:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <SystemInit+0xd8>)
 800247c:	2200      	movs	r2, #0
 800247e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002480:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <SystemInit+0xd8>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a09      	ldr	r2, [pc, #36]	; (80024ac <SystemInit+0xd8>)
 8002486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800248a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800248c:	4b07      	ldr	r3, [pc, #28]	; (80024ac <SystemInit+0xd8>)
 800248e:	2200      	movs	r2, #0
 8002490:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002492:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <SystemInit+0xec>)
 8002494:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002498:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800249a:	bf00      	nop
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	e000ed00 	.word	0xe000ed00
 80024a8:	52002000 	.word	0x52002000
 80024ac:	58024400 	.word	0x58024400
 80024b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80024b4:	02020200 	.word	0x02020200
 80024b8:	01ff0000 	.word	0x01ff0000
 80024bc:	01010280 	.word	0x01010280
 80024c0:	52004000 	.word	0x52004000

080024c4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80024c8:	4b25      	ldr	r3, [pc, #148]	; (8002560 <MX_USART3_UART_Init+0x9c>)
 80024ca:	4a26      	ldr	r2, [pc, #152]	; (8002564 <MX_USART3_UART_Init+0xa0>)
 80024cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80024ce:	4b24      	ldr	r3, [pc, #144]	; (8002560 <MX_USART3_UART_Init+0x9c>)
 80024d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80024d6:	4b22      	ldr	r3, [pc, #136]	; (8002560 <MX_USART3_UART_Init+0x9c>)
 80024d8:	2200      	movs	r2, #0
 80024da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80024dc:	4b20      	ldr	r3, [pc, #128]	; (8002560 <MX_USART3_UART_Init+0x9c>)
 80024de:	2200      	movs	r2, #0
 80024e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80024e2:	4b1f      	ldr	r3, [pc, #124]	; (8002560 <MX_USART3_UART_Init+0x9c>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80024e8:	4b1d      	ldr	r3, [pc, #116]	; (8002560 <MX_USART3_UART_Init+0x9c>)
 80024ea:	220c      	movs	r2, #12
 80024ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ee:	4b1c      	ldr	r3, [pc, #112]	; (8002560 <MX_USART3_UART_Init+0x9c>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80024f4:	4b1a      	ldr	r3, [pc, #104]	; (8002560 <MX_USART3_UART_Init+0x9c>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024fa:	4b19      	ldr	r3, [pc, #100]	; (8002560 <MX_USART3_UART_Init+0x9c>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002500:	4b17      	ldr	r3, [pc, #92]	; (8002560 <MX_USART3_UART_Init+0x9c>)
 8002502:	2200      	movs	r2, #0
 8002504:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002506:	4b16      	ldr	r3, [pc, #88]	; (8002560 <MX_USART3_UART_Init+0x9c>)
 8002508:	2200      	movs	r2, #0
 800250a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800250c:	4814      	ldr	r0, [pc, #80]	; (8002560 <MX_USART3_UART_Init+0x9c>)
 800250e:	f004 ffac 	bl	800746a <HAL_UART_Init>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002518:	f7ff fdb4 	bl	8002084 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800251c:	2100      	movs	r1, #0
 800251e:	4810      	ldr	r0, [pc, #64]	; (8002560 <MX_USART3_UART_Init+0x9c>)
 8002520:	f007 fc05 	bl	8009d2e <HAL_UARTEx_SetTxFifoThreshold>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800252a:	f7ff fdab 	bl	8002084 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800252e:	2100      	movs	r1, #0
 8002530:	480b      	ldr	r0, [pc, #44]	; (8002560 <MX_USART3_UART_Init+0x9c>)
 8002532:	f007 fc3a 	bl	8009daa <HAL_UARTEx_SetRxFifoThreshold>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800253c:	f7ff fda2 	bl	8002084 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002540:	4807      	ldr	r0, [pc, #28]	; (8002560 <MX_USART3_UART_Init+0x9c>)
 8002542:	f007 fbbb 	bl	8009cbc <HAL_UARTEx_DisableFifoMode>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800254c:	f7ff fd9a 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  HAL_UART_Receive_IT(&huart3, (uint8_t*) uartRxBuffer, 1);
 8002550:	2201      	movs	r2, #1
 8002552:	4905      	ldr	r1, [pc, #20]	; (8002568 <MX_USART3_UART_Init+0xa4>)
 8002554:	4802      	ldr	r0, [pc, #8]	; (8002560 <MX_USART3_UART_Init+0x9c>)
 8002556:	f005 f867 	bl	8007628 <HAL_UART_Receive_IT>
  /* USER CODE END USART3_Init 2 */

}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	24000344 	.word	0x24000344
 8002564:	40004800 	.word	0x40004800
 8002568:	24000324 	.word	0x24000324

0800256c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b0ba      	sub	sp, #232	; 0xe8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002574:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	605a      	str	r2, [r3, #4]
 800257e:	609a      	str	r2, [r3, #8]
 8002580:	60da      	str	r2, [r3, #12]
 8002582:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002584:	f107 0310 	add.w	r3, r7, #16
 8002588:	22c0      	movs	r2, #192	; 0xc0
 800258a:	2100      	movs	r1, #0
 800258c:	4618      	mov	r0, r3
 800258e:	f007 fcd1 	bl	8009f34 <memset>
  if(uartHandle->Instance==USART3)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a2b      	ldr	r2, [pc, #172]	; (8002644 <HAL_UART_MspInit+0xd8>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d14e      	bne.n	800263a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800259c:	f04f 0202 	mov.w	r2, #2
 80025a0:	f04f 0300 	mov.w	r3, #0
 80025a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80025a8:	2300      	movs	r3, #0
 80025aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025ae:	f107 0310 	add.w	r3, r7, #16
 80025b2:	4618      	mov	r0, r3
 80025b4:	f002 f9c6 	bl	8004944 <HAL_RCCEx_PeriphCLKConfig>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80025be:	f7ff fd61 	bl	8002084 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80025c2:	4b21      	ldr	r3, [pc, #132]	; (8002648 <HAL_UART_MspInit+0xdc>)
 80025c4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80025c8:	4a1f      	ldr	r2, [pc, #124]	; (8002648 <HAL_UART_MspInit+0xdc>)
 80025ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025ce:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80025d2:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <HAL_UART_MspInit+0xdc>)
 80025d4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80025d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025e0:	4b19      	ldr	r3, [pc, #100]	; (8002648 <HAL_UART_MspInit+0xdc>)
 80025e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80025e6:	4a18      	ldr	r2, [pc, #96]	; (8002648 <HAL_UART_MspInit+0xdc>)
 80025e8:	f043 0308 	orr.w	r3, r3, #8
 80025ec:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80025f0:	4b15      	ldr	r3, [pc, #84]	; (8002648 <HAL_UART_MspInit+0xdc>)
 80025f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	60bb      	str	r3, [r7, #8]
 80025fc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80025fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002602:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002606:	2302      	movs	r3, #2
 8002608:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260c:	2300      	movs	r3, #0
 800260e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002612:	2300      	movs	r3, #0
 8002614:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002618:	2307      	movs	r3, #7
 800261a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800261e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002622:	4619      	mov	r1, r3
 8002624:	4809      	ldr	r0, [pc, #36]	; (800264c <HAL_UART_MspInit+0xe0>)
 8002626:	f000 ff91 	bl	800354c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800262a:	2200      	movs	r2, #0
 800262c:	2100      	movs	r1, #0
 800262e:	2027      	movs	r0, #39	; 0x27
 8002630:	f000 f9f3 	bl	8002a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002634:	2027      	movs	r0, #39	; 0x27
 8002636:	f000 fa0a 	bl	8002a4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800263a:	bf00      	nop
 800263c:	37e8      	adds	r7, #232	; 0xe8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40004800 	.word	0x40004800
 8002648:	58024400 	.word	0x58024400
 800264c:	58020c00 	.word	0x58020c00

08002650 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
	uartFlag = 1;
 8002658:	4b0a      	ldr	r3, [pc, #40]	; (8002684 <HAL_UART_RxCpltCallback+0x34>)
 800265a:	2201      	movs	r2, #1
 800265c:	701a      	strb	r2, [r3, #0]
	uartTxBuffer[0]=uartRxBuffer[0];
 800265e:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <HAL_UART_RxCpltCallback+0x38>)
 8002660:	781a      	ldrb	r2, [r3, #0]
 8002662:	4b0a      	ldr	r3, [pc, #40]	; (800268c <HAL_UART_RxCpltCallback+0x3c>)
 8002664:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*) uartTxBuffer, 1, 100);
 8002666:	2364      	movs	r3, #100	; 0x64
 8002668:	2201      	movs	r2, #1
 800266a:	4908      	ldr	r1, [pc, #32]	; (800268c <HAL_UART_RxCpltCallback+0x3c>)
 800266c:	4808      	ldr	r0, [pc, #32]	; (8002690 <HAL_UART_RxCpltCallback+0x40>)
 800266e:	f004 ff4c 	bl	800750a <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart3, (uint8_t*) uartRxBuffer, 1);
 8002672:	2201      	movs	r2, #1
 8002674:	4904      	ldr	r1, [pc, #16]	; (8002688 <HAL_UART_RxCpltCallback+0x38>)
 8002676:	4806      	ldr	r0, [pc, #24]	; (8002690 <HAL_UART_RxCpltCallback+0x40>)
 8002678:	f004 ffd6 	bl	8007628 <HAL_UART_Receive_IT>

}
 800267c:	bf00      	nop
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	24000300 	.word	0x24000300
 8002688:	24000324 	.word	0x24000324
 800268c:	24000304 	.word	0x24000304
 8002690:	24000344 	.word	0x24000344

08002694 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
	...

080026a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80026a8:	f7ff fe94 	bl	80023d4 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026ac:	480c      	ldr	r0, [pc, #48]	; (80026e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026ae:	490d      	ldr	r1, [pc, #52]	; (80026e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026b0:	4a0d      	ldr	r2, [pc, #52]	; (80026e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026b4:	e002      	b.n	80026bc <LoopCopyDataInit>

080026b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ba:	3304      	adds	r3, #4

080026bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80026bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026c0:	d3f9      	bcc.n	80026b6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026c2:	4a0a      	ldr	r2, [pc, #40]	; (80026ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026c4:	4c0a      	ldr	r4, [pc, #40]	; (80026f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026c8:	e001      	b.n	80026ce <LoopFillZerobss>

080026ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026cc:	3204      	adds	r2, #4

080026ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026d0:	d3fb      	bcc.n	80026ca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80026d2:	f007 fbfd 	bl	8009ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026d6:	f7ff fb23 	bl	8001d20 <main>
  bx  lr
 80026da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026dc:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80026e0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80026e4:	240000cc 	.word	0x240000cc
  ldr r2, =_sidata
 80026e8:	0800aea4 	.word	0x0800aea4
  ldr r2, =_sbss
 80026ec:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 80026f0:	240003ec 	.word	0x240003ec

080026f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026f4:	e7fe      	b.n	80026f4 <ADC_IRQHandler>
	...

080026f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026fe:	2003      	movs	r0, #3
 8002700:	f000 f980 	bl	8002a04 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002704:	f001 ff48 	bl	8004598 <HAL_RCC_GetSysClockFreq>
 8002708:	4602      	mov	r2, r0
 800270a:	4b15      	ldr	r3, [pc, #84]	; (8002760 <HAL_Init+0x68>)
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	0a1b      	lsrs	r3, r3, #8
 8002710:	f003 030f 	and.w	r3, r3, #15
 8002714:	4913      	ldr	r1, [pc, #76]	; (8002764 <HAL_Init+0x6c>)
 8002716:	5ccb      	ldrb	r3, [r1, r3]
 8002718:	f003 031f 	and.w	r3, r3, #31
 800271c:	fa22 f303 	lsr.w	r3, r2, r3
 8002720:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002722:	4b0f      	ldr	r3, [pc, #60]	; (8002760 <HAL_Init+0x68>)
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	4a0e      	ldr	r2, [pc, #56]	; (8002764 <HAL_Init+0x6c>)
 800272c:	5cd3      	ldrb	r3, [r2, r3]
 800272e:	f003 031f 	and.w	r3, r3, #31
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	fa22 f303 	lsr.w	r3, r2, r3
 8002738:	4a0b      	ldr	r2, [pc, #44]	; (8002768 <HAL_Init+0x70>)
 800273a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800273c:	4a0b      	ldr	r2, [pc, #44]	; (800276c <HAL_Init+0x74>)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002742:	2000      	movs	r0, #0
 8002744:	f000 f814 	bl	8002770 <HAL_InitTick>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e002      	b.n	8002758 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002752:	f7ff fdb1 	bl	80022b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	58024400 	.word	0x58024400
 8002764:	0800ae28 	.word	0x0800ae28
 8002768:	2400005c 	.word	0x2400005c
 800276c:	24000058 	.word	0x24000058

08002770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002778:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <HAL_InitTick+0x60>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e021      	b.n	80027c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002784:	4b13      	ldr	r3, [pc, #76]	; (80027d4 <HAL_InitTick+0x64>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4b11      	ldr	r3, [pc, #68]	; (80027d0 <HAL_InitTick+0x60>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	4619      	mov	r1, r3
 800278e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002792:	fbb3 f3f1 	udiv	r3, r3, r1
 8002796:	fbb2 f3f3 	udiv	r3, r2, r3
 800279a:	4618      	mov	r0, r3
 800279c:	f000 f965 	bl	8002a6a <HAL_SYSTICK_Config>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e00e      	b.n	80027c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b0f      	cmp	r3, #15
 80027ae:	d80a      	bhi.n	80027c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027b0:	2200      	movs	r2, #0
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	f04f 30ff 	mov.w	r0, #4294967295
 80027b8:	f000 f92f 	bl	8002a1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027bc:	4a06      	ldr	r2, [pc, #24]	; (80027d8 <HAL_InitTick+0x68>)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
 80027c4:	e000      	b.n	80027c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	24000064 	.word	0x24000064
 80027d4:	24000058 	.word	0x24000058
 80027d8:	24000060 	.word	0x24000060

080027dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027e0:	4b06      	ldr	r3, [pc, #24]	; (80027fc <HAL_IncTick+0x20>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	461a      	mov	r2, r3
 80027e6:	4b06      	ldr	r3, [pc, #24]	; (8002800 <HAL_IncTick+0x24>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4413      	add	r3, r2
 80027ec:	4a04      	ldr	r2, [pc, #16]	; (8002800 <HAL_IncTick+0x24>)
 80027ee:	6013      	str	r3, [r2, #0]
}
 80027f0:	bf00      	nop
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	24000064 	.word	0x24000064
 8002800:	240003d8 	.word	0x240003d8

08002804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return uwTick;
 8002808:	4b03      	ldr	r3, [pc, #12]	; (8002818 <HAL_GetTick+0x14>)
 800280a:	681b      	ldr	r3, [r3, #0]
}
 800280c:	4618      	mov	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	240003d8 	.word	0x240003d8

0800281c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002824:	f7ff ffee 	bl	8002804 <HAL_GetTick>
 8002828:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002834:	d005      	beq.n	8002842 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002836:	4b0a      	ldr	r3, [pc, #40]	; (8002860 <HAL_Delay+0x44>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	461a      	mov	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4413      	add	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002842:	bf00      	nop
 8002844:	f7ff ffde 	bl	8002804 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	429a      	cmp	r2, r3
 8002852:	d8f7      	bhi.n	8002844 <HAL_Delay+0x28>
  {
  }
}
 8002854:	bf00      	nop
 8002856:	bf00      	nop
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	24000064 	.word	0x24000064

08002864 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002874:	4b0b      	ldr	r3, [pc, #44]	; (80028a4 <__NVIC_SetPriorityGrouping+0x40>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800287a:	68ba      	ldr	r2, [r7, #8]
 800287c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002880:	4013      	ands	r3, r2
 8002882:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800288c:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <__NVIC_SetPriorityGrouping+0x44>)
 800288e:	4313      	orrs	r3, r2
 8002890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002892:	4a04      	ldr	r2, [pc, #16]	; (80028a4 <__NVIC_SetPriorityGrouping+0x40>)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	60d3      	str	r3, [r2, #12]
}
 8002898:	bf00      	nop
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	e000ed00 	.word	0xe000ed00
 80028a8:	05fa0000 	.word	0x05fa0000

080028ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028b0:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <__NVIC_GetPriorityGrouping+0x18>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	0a1b      	lsrs	r3, r3, #8
 80028b6:	f003 0307 	and.w	r3, r3, #7
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	e000ed00 	.word	0xe000ed00

080028c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	4603      	mov	r3, r0
 80028d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	db0b      	blt.n	80028f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028da:	88fb      	ldrh	r3, [r7, #6]
 80028dc:	f003 021f 	and.w	r2, r3, #31
 80028e0:	4907      	ldr	r1, [pc, #28]	; (8002900 <__NVIC_EnableIRQ+0x38>)
 80028e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028e6:	095b      	lsrs	r3, r3, #5
 80028e8:	2001      	movs	r0, #1
 80028ea:	fa00 f202 	lsl.w	r2, r0, r2
 80028ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	e000e100 	.word	0xe000e100

08002904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	4603      	mov	r3, r0
 800290c:	6039      	str	r1, [r7, #0]
 800290e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002910:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002914:	2b00      	cmp	r3, #0
 8002916:	db0a      	blt.n	800292e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	b2da      	uxtb	r2, r3
 800291c:	490c      	ldr	r1, [pc, #48]	; (8002950 <__NVIC_SetPriority+0x4c>)
 800291e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002922:	0112      	lsls	r2, r2, #4
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	440b      	add	r3, r1
 8002928:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800292c:	e00a      	b.n	8002944 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	b2da      	uxtb	r2, r3
 8002932:	4908      	ldr	r1, [pc, #32]	; (8002954 <__NVIC_SetPriority+0x50>)
 8002934:	88fb      	ldrh	r3, [r7, #6]
 8002936:	f003 030f 	and.w	r3, r3, #15
 800293a:	3b04      	subs	r3, #4
 800293c:	0112      	lsls	r2, r2, #4
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	440b      	add	r3, r1
 8002942:	761a      	strb	r2, [r3, #24]
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	e000e100 	.word	0xe000e100
 8002954:	e000ed00 	.word	0xe000ed00

08002958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002958:	b480      	push	{r7}
 800295a:	b089      	sub	sp, #36	; 0x24
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f1c3 0307 	rsb	r3, r3, #7
 8002972:	2b04      	cmp	r3, #4
 8002974:	bf28      	it	cs
 8002976:	2304      	movcs	r3, #4
 8002978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	3304      	adds	r3, #4
 800297e:	2b06      	cmp	r3, #6
 8002980:	d902      	bls.n	8002988 <NVIC_EncodePriority+0x30>
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	3b03      	subs	r3, #3
 8002986:	e000      	b.n	800298a <NVIC_EncodePriority+0x32>
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800298c:	f04f 32ff 	mov.w	r2, #4294967295
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	43da      	mvns	r2, r3
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	401a      	ands	r2, r3
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029a0:	f04f 31ff 	mov.w	r1, #4294967295
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	fa01 f303 	lsl.w	r3, r1, r3
 80029aa:	43d9      	mvns	r1, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b0:	4313      	orrs	r3, r2
         );
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3724      	adds	r7, #36	; 0x24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
	...

080029c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3b01      	subs	r3, #1
 80029cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029d0:	d301      	bcc.n	80029d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029d2:	2301      	movs	r3, #1
 80029d4:	e00f      	b.n	80029f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029d6:	4a0a      	ldr	r2, [pc, #40]	; (8002a00 <SysTick_Config+0x40>)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3b01      	subs	r3, #1
 80029dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029de:	210f      	movs	r1, #15
 80029e0:	f04f 30ff 	mov.w	r0, #4294967295
 80029e4:	f7ff ff8e 	bl	8002904 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029e8:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <SysTick_Config+0x40>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ee:	4b04      	ldr	r3, [pc, #16]	; (8002a00 <SysTick_Config+0x40>)
 80029f0:	2207      	movs	r2, #7
 80029f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	e000e010 	.word	0xe000e010

08002a04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7ff ff29 	bl	8002864 <__NVIC_SetPriorityGrouping>
}
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b086      	sub	sp, #24
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	4603      	mov	r3, r0
 8002a22:	60b9      	str	r1, [r7, #8]
 8002a24:	607a      	str	r2, [r7, #4]
 8002a26:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a28:	f7ff ff40 	bl	80028ac <__NVIC_GetPriorityGrouping>
 8002a2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	68b9      	ldr	r1, [r7, #8]
 8002a32:	6978      	ldr	r0, [r7, #20]
 8002a34:	f7ff ff90 	bl	8002958 <NVIC_EncodePriority>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a3e:	4611      	mov	r1, r2
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff ff5f 	bl	8002904 <__NVIC_SetPriority>
}
 8002a46:	bf00      	nop
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	4603      	mov	r3, r0
 8002a56:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff ff33 	bl	80028c8 <__NVIC_EnableIRQ>
}
 8002a62:	bf00      	nop
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b082      	sub	sp, #8
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7ff ffa4 	bl	80029c0 <SysTick_Config>
 8002a78:	4603      	mov	r3, r0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
	...

08002a84 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002a8c:	f7ff feba 	bl	8002804 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e2dc      	b.n	8003056 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d008      	beq.n	8002aba <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2280      	movs	r2, #128	; 0x80
 8002aac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e2cd      	b.n	8003056 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a76      	ldr	r2, [pc, #472]	; (8002c98 <HAL_DMA_Abort+0x214>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d04a      	beq.n	8002b5a <HAL_DMA_Abort+0xd6>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a74      	ldr	r2, [pc, #464]	; (8002c9c <HAL_DMA_Abort+0x218>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d045      	beq.n	8002b5a <HAL_DMA_Abort+0xd6>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a73      	ldr	r2, [pc, #460]	; (8002ca0 <HAL_DMA_Abort+0x21c>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d040      	beq.n	8002b5a <HAL_DMA_Abort+0xd6>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a71      	ldr	r2, [pc, #452]	; (8002ca4 <HAL_DMA_Abort+0x220>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d03b      	beq.n	8002b5a <HAL_DMA_Abort+0xd6>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a70      	ldr	r2, [pc, #448]	; (8002ca8 <HAL_DMA_Abort+0x224>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d036      	beq.n	8002b5a <HAL_DMA_Abort+0xd6>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a6e      	ldr	r2, [pc, #440]	; (8002cac <HAL_DMA_Abort+0x228>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d031      	beq.n	8002b5a <HAL_DMA_Abort+0xd6>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a6d      	ldr	r2, [pc, #436]	; (8002cb0 <HAL_DMA_Abort+0x22c>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d02c      	beq.n	8002b5a <HAL_DMA_Abort+0xd6>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a6b      	ldr	r2, [pc, #428]	; (8002cb4 <HAL_DMA_Abort+0x230>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d027      	beq.n	8002b5a <HAL_DMA_Abort+0xd6>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a6a      	ldr	r2, [pc, #424]	; (8002cb8 <HAL_DMA_Abort+0x234>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d022      	beq.n	8002b5a <HAL_DMA_Abort+0xd6>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a68      	ldr	r2, [pc, #416]	; (8002cbc <HAL_DMA_Abort+0x238>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d01d      	beq.n	8002b5a <HAL_DMA_Abort+0xd6>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a67      	ldr	r2, [pc, #412]	; (8002cc0 <HAL_DMA_Abort+0x23c>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d018      	beq.n	8002b5a <HAL_DMA_Abort+0xd6>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a65      	ldr	r2, [pc, #404]	; (8002cc4 <HAL_DMA_Abort+0x240>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d013      	beq.n	8002b5a <HAL_DMA_Abort+0xd6>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a64      	ldr	r2, [pc, #400]	; (8002cc8 <HAL_DMA_Abort+0x244>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d00e      	beq.n	8002b5a <HAL_DMA_Abort+0xd6>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a62      	ldr	r2, [pc, #392]	; (8002ccc <HAL_DMA_Abort+0x248>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d009      	beq.n	8002b5a <HAL_DMA_Abort+0xd6>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a61      	ldr	r2, [pc, #388]	; (8002cd0 <HAL_DMA_Abort+0x24c>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d004      	beq.n	8002b5a <HAL_DMA_Abort+0xd6>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a5f      	ldr	r2, [pc, #380]	; (8002cd4 <HAL_DMA_Abort+0x250>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d101      	bne.n	8002b5e <HAL_DMA_Abort+0xda>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <HAL_DMA_Abort+0xdc>
 8002b5e:	2300      	movs	r3, #0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d013      	beq.n	8002b8c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 021e 	bic.w	r2, r2, #30
 8002b72:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695a      	ldr	r2, [r3, #20]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b82:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	617b      	str	r3, [r7, #20]
 8002b8a:	e00a      	b.n	8002ba2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 020e 	bic.w	r2, r2, #14
 8002b9a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a3c      	ldr	r2, [pc, #240]	; (8002c98 <HAL_DMA_Abort+0x214>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d072      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a3a      	ldr	r2, [pc, #232]	; (8002c9c <HAL_DMA_Abort+0x218>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d06d      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a39      	ldr	r2, [pc, #228]	; (8002ca0 <HAL_DMA_Abort+0x21c>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d068      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a37      	ldr	r2, [pc, #220]	; (8002ca4 <HAL_DMA_Abort+0x220>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d063      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a36      	ldr	r2, [pc, #216]	; (8002ca8 <HAL_DMA_Abort+0x224>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d05e      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a34      	ldr	r2, [pc, #208]	; (8002cac <HAL_DMA_Abort+0x228>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d059      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a33      	ldr	r2, [pc, #204]	; (8002cb0 <HAL_DMA_Abort+0x22c>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d054      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a31      	ldr	r2, [pc, #196]	; (8002cb4 <HAL_DMA_Abort+0x230>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d04f      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a30      	ldr	r2, [pc, #192]	; (8002cb8 <HAL_DMA_Abort+0x234>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d04a      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a2e      	ldr	r2, [pc, #184]	; (8002cbc <HAL_DMA_Abort+0x238>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d045      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a2d      	ldr	r2, [pc, #180]	; (8002cc0 <HAL_DMA_Abort+0x23c>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d040      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a2b      	ldr	r2, [pc, #172]	; (8002cc4 <HAL_DMA_Abort+0x240>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d03b      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a2a      	ldr	r2, [pc, #168]	; (8002cc8 <HAL_DMA_Abort+0x244>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d036      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a28      	ldr	r2, [pc, #160]	; (8002ccc <HAL_DMA_Abort+0x248>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d031      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a27      	ldr	r2, [pc, #156]	; (8002cd0 <HAL_DMA_Abort+0x24c>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d02c      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a25      	ldr	r2, [pc, #148]	; (8002cd4 <HAL_DMA_Abort+0x250>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d027      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a24      	ldr	r2, [pc, #144]	; (8002cd8 <HAL_DMA_Abort+0x254>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d022      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a22      	ldr	r2, [pc, #136]	; (8002cdc <HAL_DMA_Abort+0x258>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d01d      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a21      	ldr	r2, [pc, #132]	; (8002ce0 <HAL_DMA_Abort+0x25c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d018      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a1f      	ldr	r2, [pc, #124]	; (8002ce4 <HAL_DMA_Abort+0x260>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d013      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a1e      	ldr	r2, [pc, #120]	; (8002ce8 <HAL_DMA_Abort+0x264>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d00e      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a1c      	ldr	r2, [pc, #112]	; (8002cec <HAL_DMA_Abort+0x268>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d009      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a1b      	ldr	r2, [pc, #108]	; (8002cf0 <HAL_DMA_Abort+0x26c>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d004      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a19      	ldr	r2, [pc, #100]	; (8002cf4 <HAL_DMA_Abort+0x270>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d132      	bne.n	8002cf8 <HAL_DMA_Abort+0x274>
 8002c92:	2301      	movs	r3, #1
 8002c94:	e031      	b.n	8002cfa <HAL_DMA_Abort+0x276>
 8002c96:	bf00      	nop
 8002c98:	40020010 	.word	0x40020010
 8002c9c:	40020028 	.word	0x40020028
 8002ca0:	40020040 	.word	0x40020040
 8002ca4:	40020058 	.word	0x40020058
 8002ca8:	40020070 	.word	0x40020070
 8002cac:	40020088 	.word	0x40020088
 8002cb0:	400200a0 	.word	0x400200a0
 8002cb4:	400200b8 	.word	0x400200b8
 8002cb8:	40020410 	.word	0x40020410
 8002cbc:	40020428 	.word	0x40020428
 8002cc0:	40020440 	.word	0x40020440
 8002cc4:	40020458 	.word	0x40020458
 8002cc8:	40020470 	.word	0x40020470
 8002ccc:	40020488 	.word	0x40020488
 8002cd0:	400204a0 	.word	0x400204a0
 8002cd4:	400204b8 	.word	0x400204b8
 8002cd8:	58025408 	.word	0x58025408
 8002cdc:	5802541c 	.word	0x5802541c
 8002ce0:	58025430 	.word	0x58025430
 8002ce4:	58025444 	.word	0x58025444
 8002ce8:	58025458 	.word	0x58025458
 8002cec:	5802546c 	.word	0x5802546c
 8002cf0:	58025480 	.word	0x58025480
 8002cf4:	58025494 	.word	0x58025494
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d007      	beq.n	8002d0e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a6d      	ldr	r2, [pc, #436]	; (8002ec8 <HAL_DMA_Abort+0x444>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d04a      	beq.n	8002dae <HAL_DMA_Abort+0x32a>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a6b      	ldr	r2, [pc, #428]	; (8002ecc <HAL_DMA_Abort+0x448>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d045      	beq.n	8002dae <HAL_DMA_Abort+0x32a>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a6a      	ldr	r2, [pc, #424]	; (8002ed0 <HAL_DMA_Abort+0x44c>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d040      	beq.n	8002dae <HAL_DMA_Abort+0x32a>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a68      	ldr	r2, [pc, #416]	; (8002ed4 <HAL_DMA_Abort+0x450>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d03b      	beq.n	8002dae <HAL_DMA_Abort+0x32a>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a67      	ldr	r2, [pc, #412]	; (8002ed8 <HAL_DMA_Abort+0x454>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d036      	beq.n	8002dae <HAL_DMA_Abort+0x32a>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a65      	ldr	r2, [pc, #404]	; (8002edc <HAL_DMA_Abort+0x458>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d031      	beq.n	8002dae <HAL_DMA_Abort+0x32a>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a64      	ldr	r2, [pc, #400]	; (8002ee0 <HAL_DMA_Abort+0x45c>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d02c      	beq.n	8002dae <HAL_DMA_Abort+0x32a>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a62      	ldr	r2, [pc, #392]	; (8002ee4 <HAL_DMA_Abort+0x460>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d027      	beq.n	8002dae <HAL_DMA_Abort+0x32a>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a61      	ldr	r2, [pc, #388]	; (8002ee8 <HAL_DMA_Abort+0x464>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d022      	beq.n	8002dae <HAL_DMA_Abort+0x32a>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a5f      	ldr	r2, [pc, #380]	; (8002eec <HAL_DMA_Abort+0x468>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d01d      	beq.n	8002dae <HAL_DMA_Abort+0x32a>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a5e      	ldr	r2, [pc, #376]	; (8002ef0 <HAL_DMA_Abort+0x46c>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d018      	beq.n	8002dae <HAL_DMA_Abort+0x32a>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a5c      	ldr	r2, [pc, #368]	; (8002ef4 <HAL_DMA_Abort+0x470>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d013      	beq.n	8002dae <HAL_DMA_Abort+0x32a>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a5b      	ldr	r2, [pc, #364]	; (8002ef8 <HAL_DMA_Abort+0x474>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d00e      	beq.n	8002dae <HAL_DMA_Abort+0x32a>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a59      	ldr	r2, [pc, #356]	; (8002efc <HAL_DMA_Abort+0x478>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d009      	beq.n	8002dae <HAL_DMA_Abort+0x32a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a58      	ldr	r2, [pc, #352]	; (8002f00 <HAL_DMA_Abort+0x47c>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d004      	beq.n	8002dae <HAL_DMA_Abort+0x32a>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a56      	ldr	r2, [pc, #344]	; (8002f04 <HAL_DMA_Abort+0x480>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d108      	bne.n	8002dc0 <HAL_DMA_Abort+0x33c>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0201 	bic.w	r2, r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	e007      	b.n	8002dd0 <HAL_DMA_Abort+0x34c>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 0201 	bic.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002dd0:	e013      	b.n	8002dfa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dd2:	f7ff fd17 	bl	8002804 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b05      	cmp	r3, #5
 8002dde:	d90c      	bls.n	8002dfa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2220      	movs	r2, #32
 8002de4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2203      	movs	r2, #3
 8002dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e12d      	b.n	8003056 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1e5      	bne.n	8002dd2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a2f      	ldr	r2, [pc, #188]	; (8002ec8 <HAL_DMA_Abort+0x444>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d04a      	beq.n	8002ea6 <HAL_DMA_Abort+0x422>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a2d      	ldr	r2, [pc, #180]	; (8002ecc <HAL_DMA_Abort+0x448>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d045      	beq.n	8002ea6 <HAL_DMA_Abort+0x422>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a2c      	ldr	r2, [pc, #176]	; (8002ed0 <HAL_DMA_Abort+0x44c>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d040      	beq.n	8002ea6 <HAL_DMA_Abort+0x422>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a2a      	ldr	r2, [pc, #168]	; (8002ed4 <HAL_DMA_Abort+0x450>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d03b      	beq.n	8002ea6 <HAL_DMA_Abort+0x422>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a29      	ldr	r2, [pc, #164]	; (8002ed8 <HAL_DMA_Abort+0x454>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d036      	beq.n	8002ea6 <HAL_DMA_Abort+0x422>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a27      	ldr	r2, [pc, #156]	; (8002edc <HAL_DMA_Abort+0x458>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d031      	beq.n	8002ea6 <HAL_DMA_Abort+0x422>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a26      	ldr	r2, [pc, #152]	; (8002ee0 <HAL_DMA_Abort+0x45c>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d02c      	beq.n	8002ea6 <HAL_DMA_Abort+0x422>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a24      	ldr	r2, [pc, #144]	; (8002ee4 <HAL_DMA_Abort+0x460>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d027      	beq.n	8002ea6 <HAL_DMA_Abort+0x422>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a23      	ldr	r2, [pc, #140]	; (8002ee8 <HAL_DMA_Abort+0x464>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d022      	beq.n	8002ea6 <HAL_DMA_Abort+0x422>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a21      	ldr	r2, [pc, #132]	; (8002eec <HAL_DMA_Abort+0x468>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d01d      	beq.n	8002ea6 <HAL_DMA_Abort+0x422>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a20      	ldr	r2, [pc, #128]	; (8002ef0 <HAL_DMA_Abort+0x46c>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d018      	beq.n	8002ea6 <HAL_DMA_Abort+0x422>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a1e      	ldr	r2, [pc, #120]	; (8002ef4 <HAL_DMA_Abort+0x470>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d013      	beq.n	8002ea6 <HAL_DMA_Abort+0x422>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a1d      	ldr	r2, [pc, #116]	; (8002ef8 <HAL_DMA_Abort+0x474>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d00e      	beq.n	8002ea6 <HAL_DMA_Abort+0x422>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a1b      	ldr	r2, [pc, #108]	; (8002efc <HAL_DMA_Abort+0x478>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d009      	beq.n	8002ea6 <HAL_DMA_Abort+0x422>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a1a      	ldr	r2, [pc, #104]	; (8002f00 <HAL_DMA_Abort+0x47c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d004      	beq.n	8002ea6 <HAL_DMA_Abort+0x422>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a18      	ldr	r2, [pc, #96]	; (8002f04 <HAL_DMA_Abort+0x480>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d101      	bne.n	8002eaa <HAL_DMA_Abort+0x426>
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e000      	b.n	8002eac <HAL_DMA_Abort+0x428>
 8002eaa:	2300      	movs	r3, #0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d02b      	beq.n	8002f08 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eba:	f003 031f 	and.w	r3, r3, #31
 8002ebe:	223f      	movs	r2, #63	; 0x3f
 8002ec0:	409a      	lsls	r2, r3
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	609a      	str	r2, [r3, #8]
 8002ec6:	e02a      	b.n	8002f1e <HAL_DMA_Abort+0x49a>
 8002ec8:	40020010 	.word	0x40020010
 8002ecc:	40020028 	.word	0x40020028
 8002ed0:	40020040 	.word	0x40020040
 8002ed4:	40020058 	.word	0x40020058
 8002ed8:	40020070 	.word	0x40020070
 8002edc:	40020088 	.word	0x40020088
 8002ee0:	400200a0 	.word	0x400200a0
 8002ee4:	400200b8 	.word	0x400200b8
 8002ee8:	40020410 	.word	0x40020410
 8002eec:	40020428 	.word	0x40020428
 8002ef0:	40020440 	.word	0x40020440
 8002ef4:	40020458 	.word	0x40020458
 8002ef8:	40020470 	.word	0x40020470
 8002efc:	40020488 	.word	0x40020488
 8002f00:	400204a0 	.word	0x400204a0
 8002f04:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f12:	f003 031f 	and.w	r3, r3, #31
 8002f16:	2201      	movs	r2, #1
 8002f18:	409a      	lsls	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a4f      	ldr	r2, [pc, #316]	; (8003060 <HAL_DMA_Abort+0x5dc>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d072      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a4d      	ldr	r2, [pc, #308]	; (8003064 <HAL_DMA_Abort+0x5e0>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d06d      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a4c      	ldr	r2, [pc, #304]	; (8003068 <HAL_DMA_Abort+0x5e4>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d068      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a4a      	ldr	r2, [pc, #296]	; (800306c <HAL_DMA_Abort+0x5e8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d063      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a49      	ldr	r2, [pc, #292]	; (8003070 <HAL_DMA_Abort+0x5ec>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d05e      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a47      	ldr	r2, [pc, #284]	; (8003074 <HAL_DMA_Abort+0x5f0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d059      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a46      	ldr	r2, [pc, #280]	; (8003078 <HAL_DMA_Abort+0x5f4>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d054      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a44      	ldr	r2, [pc, #272]	; (800307c <HAL_DMA_Abort+0x5f8>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d04f      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a43      	ldr	r2, [pc, #268]	; (8003080 <HAL_DMA_Abort+0x5fc>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d04a      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a41      	ldr	r2, [pc, #260]	; (8003084 <HAL_DMA_Abort+0x600>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d045      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a40      	ldr	r2, [pc, #256]	; (8003088 <HAL_DMA_Abort+0x604>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d040      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a3e      	ldr	r2, [pc, #248]	; (800308c <HAL_DMA_Abort+0x608>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d03b      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a3d      	ldr	r2, [pc, #244]	; (8003090 <HAL_DMA_Abort+0x60c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d036      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a3b      	ldr	r2, [pc, #236]	; (8003094 <HAL_DMA_Abort+0x610>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d031      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a3a      	ldr	r2, [pc, #232]	; (8003098 <HAL_DMA_Abort+0x614>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d02c      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a38      	ldr	r2, [pc, #224]	; (800309c <HAL_DMA_Abort+0x618>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d027      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a37      	ldr	r2, [pc, #220]	; (80030a0 <HAL_DMA_Abort+0x61c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d022      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a35      	ldr	r2, [pc, #212]	; (80030a4 <HAL_DMA_Abort+0x620>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d01d      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a34      	ldr	r2, [pc, #208]	; (80030a8 <HAL_DMA_Abort+0x624>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d018      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a32      	ldr	r2, [pc, #200]	; (80030ac <HAL_DMA_Abort+0x628>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d013      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a31      	ldr	r2, [pc, #196]	; (80030b0 <HAL_DMA_Abort+0x62c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d00e      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a2f      	ldr	r2, [pc, #188]	; (80030b4 <HAL_DMA_Abort+0x630>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d009      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a2e      	ldr	r2, [pc, #184]	; (80030b8 <HAL_DMA_Abort+0x634>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d004      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a2c      	ldr	r2, [pc, #176]	; (80030bc <HAL_DMA_Abort+0x638>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d101      	bne.n	8003012 <HAL_DMA_Abort+0x58e>
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <HAL_DMA_Abort+0x590>
 8003012:	2300      	movs	r3, #0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d015      	beq.n	8003044 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003020:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00c      	beq.n	8003044 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003034:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003038:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003042:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40020010 	.word	0x40020010
 8003064:	40020028 	.word	0x40020028
 8003068:	40020040 	.word	0x40020040
 800306c:	40020058 	.word	0x40020058
 8003070:	40020070 	.word	0x40020070
 8003074:	40020088 	.word	0x40020088
 8003078:	400200a0 	.word	0x400200a0
 800307c:	400200b8 	.word	0x400200b8
 8003080:	40020410 	.word	0x40020410
 8003084:	40020428 	.word	0x40020428
 8003088:	40020440 	.word	0x40020440
 800308c:	40020458 	.word	0x40020458
 8003090:	40020470 	.word	0x40020470
 8003094:	40020488 	.word	0x40020488
 8003098:	400204a0 	.word	0x400204a0
 800309c:	400204b8 	.word	0x400204b8
 80030a0:	58025408 	.word	0x58025408
 80030a4:	5802541c 	.word	0x5802541c
 80030a8:	58025430 	.word	0x58025430
 80030ac:	58025444 	.word	0x58025444
 80030b0:	58025458 	.word	0x58025458
 80030b4:	5802546c 	.word	0x5802546c
 80030b8:	58025480 	.word	0x58025480
 80030bc:	58025494 	.word	0x58025494

080030c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e237      	b.n	8003542 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d004      	beq.n	80030e8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2280      	movs	r2, #128	; 0x80
 80030e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e22c      	b.n	8003542 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a5c      	ldr	r2, [pc, #368]	; (8003260 <HAL_DMA_Abort_IT+0x1a0>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d04a      	beq.n	8003188 <HAL_DMA_Abort_IT+0xc8>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a5b      	ldr	r2, [pc, #364]	; (8003264 <HAL_DMA_Abort_IT+0x1a4>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d045      	beq.n	8003188 <HAL_DMA_Abort_IT+0xc8>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a59      	ldr	r2, [pc, #356]	; (8003268 <HAL_DMA_Abort_IT+0x1a8>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d040      	beq.n	8003188 <HAL_DMA_Abort_IT+0xc8>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a58      	ldr	r2, [pc, #352]	; (800326c <HAL_DMA_Abort_IT+0x1ac>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d03b      	beq.n	8003188 <HAL_DMA_Abort_IT+0xc8>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a56      	ldr	r2, [pc, #344]	; (8003270 <HAL_DMA_Abort_IT+0x1b0>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d036      	beq.n	8003188 <HAL_DMA_Abort_IT+0xc8>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a55      	ldr	r2, [pc, #340]	; (8003274 <HAL_DMA_Abort_IT+0x1b4>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d031      	beq.n	8003188 <HAL_DMA_Abort_IT+0xc8>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a53      	ldr	r2, [pc, #332]	; (8003278 <HAL_DMA_Abort_IT+0x1b8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d02c      	beq.n	8003188 <HAL_DMA_Abort_IT+0xc8>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a52      	ldr	r2, [pc, #328]	; (800327c <HAL_DMA_Abort_IT+0x1bc>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d027      	beq.n	8003188 <HAL_DMA_Abort_IT+0xc8>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a50      	ldr	r2, [pc, #320]	; (8003280 <HAL_DMA_Abort_IT+0x1c0>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d022      	beq.n	8003188 <HAL_DMA_Abort_IT+0xc8>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a4f      	ldr	r2, [pc, #316]	; (8003284 <HAL_DMA_Abort_IT+0x1c4>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d01d      	beq.n	8003188 <HAL_DMA_Abort_IT+0xc8>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a4d      	ldr	r2, [pc, #308]	; (8003288 <HAL_DMA_Abort_IT+0x1c8>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d018      	beq.n	8003188 <HAL_DMA_Abort_IT+0xc8>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a4c      	ldr	r2, [pc, #304]	; (800328c <HAL_DMA_Abort_IT+0x1cc>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d013      	beq.n	8003188 <HAL_DMA_Abort_IT+0xc8>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a4a      	ldr	r2, [pc, #296]	; (8003290 <HAL_DMA_Abort_IT+0x1d0>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d00e      	beq.n	8003188 <HAL_DMA_Abort_IT+0xc8>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a49      	ldr	r2, [pc, #292]	; (8003294 <HAL_DMA_Abort_IT+0x1d4>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d009      	beq.n	8003188 <HAL_DMA_Abort_IT+0xc8>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a47      	ldr	r2, [pc, #284]	; (8003298 <HAL_DMA_Abort_IT+0x1d8>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d004      	beq.n	8003188 <HAL_DMA_Abort_IT+0xc8>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a46      	ldr	r2, [pc, #280]	; (800329c <HAL_DMA_Abort_IT+0x1dc>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d101      	bne.n	800318c <HAL_DMA_Abort_IT+0xcc>
 8003188:	2301      	movs	r3, #1
 800318a:	e000      	b.n	800318e <HAL_DMA_Abort_IT+0xce>
 800318c:	2300      	movs	r3, #0
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 8086 	beq.w	80032a0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2204      	movs	r2, #4
 8003198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a2f      	ldr	r2, [pc, #188]	; (8003260 <HAL_DMA_Abort_IT+0x1a0>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d04a      	beq.n	800323c <HAL_DMA_Abort_IT+0x17c>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a2e      	ldr	r2, [pc, #184]	; (8003264 <HAL_DMA_Abort_IT+0x1a4>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d045      	beq.n	800323c <HAL_DMA_Abort_IT+0x17c>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a2c      	ldr	r2, [pc, #176]	; (8003268 <HAL_DMA_Abort_IT+0x1a8>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d040      	beq.n	800323c <HAL_DMA_Abort_IT+0x17c>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a2b      	ldr	r2, [pc, #172]	; (800326c <HAL_DMA_Abort_IT+0x1ac>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d03b      	beq.n	800323c <HAL_DMA_Abort_IT+0x17c>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a29      	ldr	r2, [pc, #164]	; (8003270 <HAL_DMA_Abort_IT+0x1b0>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d036      	beq.n	800323c <HAL_DMA_Abort_IT+0x17c>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a28      	ldr	r2, [pc, #160]	; (8003274 <HAL_DMA_Abort_IT+0x1b4>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d031      	beq.n	800323c <HAL_DMA_Abort_IT+0x17c>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a26      	ldr	r2, [pc, #152]	; (8003278 <HAL_DMA_Abort_IT+0x1b8>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d02c      	beq.n	800323c <HAL_DMA_Abort_IT+0x17c>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a25      	ldr	r2, [pc, #148]	; (800327c <HAL_DMA_Abort_IT+0x1bc>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d027      	beq.n	800323c <HAL_DMA_Abort_IT+0x17c>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a23      	ldr	r2, [pc, #140]	; (8003280 <HAL_DMA_Abort_IT+0x1c0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d022      	beq.n	800323c <HAL_DMA_Abort_IT+0x17c>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a22      	ldr	r2, [pc, #136]	; (8003284 <HAL_DMA_Abort_IT+0x1c4>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d01d      	beq.n	800323c <HAL_DMA_Abort_IT+0x17c>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a20      	ldr	r2, [pc, #128]	; (8003288 <HAL_DMA_Abort_IT+0x1c8>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d018      	beq.n	800323c <HAL_DMA_Abort_IT+0x17c>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a1f      	ldr	r2, [pc, #124]	; (800328c <HAL_DMA_Abort_IT+0x1cc>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d013      	beq.n	800323c <HAL_DMA_Abort_IT+0x17c>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a1d      	ldr	r2, [pc, #116]	; (8003290 <HAL_DMA_Abort_IT+0x1d0>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d00e      	beq.n	800323c <HAL_DMA_Abort_IT+0x17c>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a1c      	ldr	r2, [pc, #112]	; (8003294 <HAL_DMA_Abort_IT+0x1d4>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d009      	beq.n	800323c <HAL_DMA_Abort_IT+0x17c>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a1a      	ldr	r2, [pc, #104]	; (8003298 <HAL_DMA_Abort_IT+0x1d8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d004      	beq.n	800323c <HAL_DMA_Abort_IT+0x17c>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a19      	ldr	r2, [pc, #100]	; (800329c <HAL_DMA_Abort_IT+0x1dc>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d108      	bne.n	800324e <HAL_DMA_Abort_IT+0x18e>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0201 	bic.w	r2, r2, #1
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	e178      	b.n	8003540 <HAL_DMA_Abort_IT+0x480>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0201 	bic.w	r2, r2, #1
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	e16f      	b.n	8003540 <HAL_DMA_Abort_IT+0x480>
 8003260:	40020010 	.word	0x40020010
 8003264:	40020028 	.word	0x40020028
 8003268:	40020040 	.word	0x40020040
 800326c:	40020058 	.word	0x40020058
 8003270:	40020070 	.word	0x40020070
 8003274:	40020088 	.word	0x40020088
 8003278:	400200a0 	.word	0x400200a0
 800327c:	400200b8 	.word	0x400200b8
 8003280:	40020410 	.word	0x40020410
 8003284:	40020428 	.word	0x40020428
 8003288:	40020440 	.word	0x40020440
 800328c:	40020458 	.word	0x40020458
 8003290:	40020470 	.word	0x40020470
 8003294:	40020488 	.word	0x40020488
 8003298:	400204a0 	.word	0x400204a0
 800329c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 020e 	bic.w	r2, r2, #14
 80032ae:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a6c      	ldr	r2, [pc, #432]	; (8003468 <HAL_DMA_Abort_IT+0x3a8>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d04a      	beq.n	8003350 <HAL_DMA_Abort_IT+0x290>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a6b      	ldr	r2, [pc, #428]	; (800346c <HAL_DMA_Abort_IT+0x3ac>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d045      	beq.n	8003350 <HAL_DMA_Abort_IT+0x290>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a69      	ldr	r2, [pc, #420]	; (8003470 <HAL_DMA_Abort_IT+0x3b0>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d040      	beq.n	8003350 <HAL_DMA_Abort_IT+0x290>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a68      	ldr	r2, [pc, #416]	; (8003474 <HAL_DMA_Abort_IT+0x3b4>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d03b      	beq.n	8003350 <HAL_DMA_Abort_IT+0x290>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a66      	ldr	r2, [pc, #408]	; (8003478 <HAL_DMA_Abort_IT+0x3b8>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d036      	beq.n	8003350 <HAL_DMA_Abort_IT+0x290>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a65      	ldr	r2, [pc, #404]	; (800347c <HAL_DMA_Abort_IT+0x3bc>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d031      	beq.n	8003350 <HAL_DMA_Abort_IT+0x290>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a63      	ldr	r2, [pc, #396]	; (8003480 <HAL_DMA_Abort_IT+0x3c0>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d02c      	beq.n	8003350 <HAL_DMA_Abort_IT+0x290>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a62      	ldr	r2, [pc, #392]	; (8003484 <HAL_DMA_Abort_IT+0x3c4>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d027      	beq.n	8003350 <HAL_DMA_Abort_IT+0x290>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a60      	ldr	r2, [pc, #384]	; (8003488 <HAL_DMA_Abort_IT+0x3c8>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d022      	beq.n	8003350 <HAL_DMA_Abort_IT+0x290>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a5f      	ldr	r2, [pc, #380]	; (800348c <HAL_DMA_Abort_IT+0x3cc>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d01d      	beq.n	8003350 <HAL_DMA_Abort_IT+0x290>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a5d      	ldr	r2, [pc, #372]	; (8003490 <HAL_DMA_Abort_IT+0x3d0>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d018      	beq.n	8003350 <HAL_DMA_Abort_IT+0x290>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a5c      	ldr	r2, [pc, #368]	; (8003494 <HAL_DMA_Abort_IT+0x3d4>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d013      	beq.n	8003350 <HAL_DMA_Abort_IT+0x290>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a5a      	ldr	r2, [pc, #360]	; (8003498 <HAL_DMA_Abort_IT+0x3d8>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d00e      	beq.n	8003350 <HAL_DMA_Abort_IT+0x290>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a59      	ldr	r2, [pc, #356]	; (800349c <HAL_DMA_Abort_IT+0x3dc>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d009      	beq.n	8003350 <HAL_DMA_Abort_IT+0x290>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a57      	ldr	r2, [pc, #348]	; (80034a0 <HAL_DMA_Abort_IT+0x3e0>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d004      	beq.n	8003350 <HAL_DMA_Abort_IT+0x290>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a56      	ldr	r2, [pc, #344]	; (80034a4 <HAL_DMA_Abort_IT+0x3e4>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d108      	bne.n	8003362 <HAL_DMA_Abort_IT+0x2a2>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0201 	bic.w	r2, r2, #1
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	e007      	b.n	8003372 <HAL_DMA_Abort_IT+0x2b2>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 0201 	bic.w	r2, r2, #1
 8003370:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a3c      	ldr	r2, [pc, #240]	; (8003468 <HAL_DMA_Abort_IT+0x3a8>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d072      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a3a      	ldr	r2, [pc, #232]	; (800346c <HAL_DMA_Abort_IT+0x3ac>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d06d      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a39      	ldr	r2, [pc, #228]	; (8003470 <HAL_DMA_Abort_IT+0x3b0>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d068      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a37      	ldr	r2, [pc, #220]	; (8003474 <HAL_DMA_Abort_IT+0x3b4>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d063      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a36      	ldr	r2, [pc, #216]	; (8003478 <HAL_DMA_Abort_IT+0x3b8>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d05e      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a34      	ldr	r2, [pc, #208]	; (800347c <HAL_DMA_Abort_IT+0x3bc>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d059      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a33      	ldr	r2, [pc, #204]	; (8003480 <HAL_DMA_Abort_IT+0x3c0>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d054      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a31      	ldr	r2, [pc, #196]	; (8003484 <HAL_DMA_Abort_IT+0x3c4>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d04f      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a30      	ldr	r2, [pc, #192]	; (8003488 <HAL_DMA_Abort_IT+0x3c8>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d04a      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a2e      	ldr	r2, [pc, #184]	; (800348c <HAL_DMA_Abort_IT+0x3cc>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d045      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a2d      	ldr	r2, [pc, #180]	; (8003490 <HAL_DMA_Abort_IT+0x3d0>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d040      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a2b      	ldr	r2, [pc, #172]	; (8003494 <HAL_DMA_Abort_IT+0x3d4>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d03b      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a2a      	ldr	r2, [pc, #168]	; (8003498 <HAL_DMA_Abort_IT+0x3d8>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d036      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a28      	ldr	r2, [pc, #160]	; (800349c <HAL_DMA_Abort_IT+0x3dc>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d031      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a27      	ldr	r2, [pc, #156]	; (80034a0 <HAL_DMA_Abort_IT+0x3e0>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d02c      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a25      	ldr	r2, [pc, #148]	; (80034a4 <HAL_DMA_Abort_IT+0x3e4>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d027      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a24      	ldr	r2, [pc, #144]	; (80034a8 <HAL_DMA_Abort_IT+0x3e8>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d022      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a22      	ldr	r2, [pc, #136]	; (80034ac <HAL_DMA_Abort_IT+0x3ec>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d01d      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a21      	ldr	r2, [pc, #132]	; (80034b0 <HAL_DMA_Abort_IT+0x3f0>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d018      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a1f      	ldr	r2, [pc, #124]	; (80034b4 <HAL_DMA_Abort_IT+0x3f4>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d013      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a1e      	ldr	r2, [pc, #120]	; (80034b8 <HAL_DMA_Abort_IT+0x3f8>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d00e      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a1c      	ldr	r2, [pc, #112]	; (80034bc <HAL_DMA_Abort_IT+0x3fc>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d009      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a1b      	ldr	r2, [pc, #108]	; (80034c0 <HAL_DMA_Abort_IT+0x400>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d004      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a19      	ldr	r2, [pc, #100]	; (80034c4 <HAL_DMA_Abort_IT+0x404>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d132      	bne.n	80034c8 <HAL_DMA_Abort_IT+0x408>
 8003462:	2301      	movs	r3, #1
 8003464:	e031      	b.n	80034ca <HAL_DMA_Abort_IT+0x40a>
 8003466:	bf00      	nop
 8003468:	40020010 	.word	0x40020010
 800346c:	40020028 	.word	0x40020028
 8003470:	40020040 	.word	0x40020040
 8003474:	40020058 	.word	0x40020058
 8003478:	40020070 	.word	0x40020070
 800347c:	40020088 	.word	0x40020088
 8003480:	400200a0 	.word	0x400200a0
 8003484:	400200b8 	.word	0x400200b8
 8003488:	40020410 	.word	0x40020410
 800348c:	40020428 	.word	0x40020428
 8003490:	40020440 	.word	0x40020440
 8003494:	40020458 	.word	0x40020458
 8003498:	40020470 	.word	0x40020470
 800349c:	40020488 	.word	0x40020488
 80034a0:	400204a0 	.word	0x400204a0
 80034a4:	400204b8 	.word	0x400204b8
 80034a8:	58025408 	.word	0x58025408
 80034ac:	5802541c 	.word	0x5802541c
 80034b0:	58025430 	.word	0x58025430
 80034b4:	58025444 	.word	0x58025444
 80034b8:	58025458 	.word	0x58025458
 80034bc:	5802546c 	.word	0x5802546c
 80034c0:	58025480 	.word	0x58025480
 80034c4:	58025494 	.word	0x58025494
 80034c8:	2300      	movs	r3, #0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d028      	beq.n	8003520 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034dc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e8:	f003 031f 	and.w	r3, r3, #31
 80034ec:	2201      	movs	r2, #1
 80034ee:	409a      	lsls	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80034fc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00c      	beq.n	8003520 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003510:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003514:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800351e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003534:	2b00      	cmp	r3, #0
 8003536:	d003      	beq.n	8003540 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop

0800354c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800354c:	b480      	push	{r7}
 800354e:	b089      	sub	sp, #36	; 0x24
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003556:	2300      	movs	r3, #0
 8003558:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800355a:	4b89      	ldr	r3, [pc, #548]	; (8003780 <HAL_GPIO_Init+0x234>)
 800355c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800355e:	e194      	b.n	800388a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	2101      	movs	r1, #1
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	fa01 f303 	lsl.w	r3, r1, r3
 800356c:	4013      	ands	r3, r2
 800356e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 8186 	beq.w	8003884 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 0303 	and.w	r3, r3, #3
 8003580:	2b01      	cmp	r3, #1
 8003582:	d005      	beq.n	8003590 <HAL_GPIO_Init+0x44>
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f003 0303 	and.w	r3, r3, #3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d130      	bne.n	80035f2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	2203      	movs	r2, #3
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	43db      	mvns	r3, r3
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	4013      	ands	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	68da      	ldr	r2, [r3, #12]
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035c6:	2201      	movs	r2, #1
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	43db      	mvns	r3, r3
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	4013      	ands	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	091b      	lsrs	r3, r3, #4
 80035dc:	f003 0201 	and.w	r2, r3, #1
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	fa02 f303 	lsl.w	r3, r2, r3
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f003 0303 	and.w	r3, r3, #3
 80035fa:	2b03      	cmp	r3, #3
 80035fc:	d017      	beq.n	800362e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	2203      	movs	r2, #3
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	43db      	mvns	r3, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4013      	ands	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	4313      	orrs	r3, r2
 8003626:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d123      	bne.n	8003682 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	08da      	lsrs	r2, r3, #3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	3208      	adds	r2, #8
 8003642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003646:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	220f      	movs	r2, #15
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	43db      	mvns	r3, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4013      	ands	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	691a      	ldr	r2, [r3, #16]
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	f003 0307 	and.w	r3, r3, #7
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4313      	orrs	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	08da      	lsrs	r2, r3, #3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3208      	adds	r2, #8
 800367c:	69b9      	ldr	r1, [r7, #24]
 800367e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	2203      	movs	r2, #3
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	43db      	mvns	r3, r3
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	4013      	ands	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f003 0203 	and.w	r2, r3, #3
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 80e0 	beq.w	8003884 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036c4:	4b2f      	ldr	r3, [pc, #188]	; (8003784 <HAL_GPIO_Init+0x238>)
 80036c6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80036ca:	4a2e      	ldr	r2, [pc, #184]	; (8003784 <HAL_GPIO_Init+0x238>)
 80036cc:	f043 0302 	orr.w	r3, r3, #2
 80036d0:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80036d4:	4b2b      	ldr	r3, [pc, #172]	; (8003784 <HAL_GPIO_Init+0x238>)
 80036d6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036e2:	4a29      	ldr	r2, [pc, #164]	; (8003788 <HAL_GPIO_Init+0x23c>)
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	089b      	lsrs	r3, r3, #2
 80036e8:	3302      	adds	r3, #2
 80036ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	220f      	movs	r2, #15
 80036fa:	fa02 f303 	lsl.w	r3, r2, r3
 80036fe:	43db      	mvns	r3, r3
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	4013      	ands	r3, r2
 8003704:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a20      	ldr	r2, [pc, #128]	; (800378c <HAL_GPIO_Init+0x240>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d052      	beq.n	80037b4 <HAL_GPIO_Init+0x268>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a1f      	ldr	r2, [pc, #124]	; (8003790 <HAL_GPIO_Init+0x244>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d031      	beq.n	800377a <HAL_GPIO_Init+0x22e>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a1e      	ldr	r2, [pc, #120]	; (8003794 <HAL_GPIO_Init+0x248>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d02b      	beq.n	8003776 <HAL_GPIO_Init+0x22a>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a1d      	ldr	r2, [pc, #116]	; (8003798 <HAL_GPIO_Init+0x24c>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d025      	beq.n	8003772 <HAL_GPIO_Init+0x226>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a1c      	ldr	r2, [pc, #112]	; (800379c <HAL_GPIO_Init+0x250>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d01f      	beq.n	800376e <HAL_GPIO_Init+0x222>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a1b      	ldr	r2, [pc, #108]	; (80037a0 <HAL_GPIO_Init+0x254>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d019      	beq.n	800376a <HAL_GPIO_Init+0x21e>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a1a      	ldr	r2, [pc, #104]	; (80037a4 <HAL_GPIO_Init+0x258>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d013      	beq.n	8003766 <HAL_GPIO_Init+0x21a>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a19      	ldr	r2, [pc, #100]	; (80037a8 <HAL_GPIO_Init+0x25c>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d00d      	beq.n	8003762 <HAL_GPIO_Init+0x216>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a18      	ldr	r2, [pc, #96]	; (80037ac <HAL_GPIO_Init+0x260>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d007      	beq.n	800375e <HAL_GPIO_Init+0x212>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a17      	ldr	r2, [pc, #92]	; (80037b0 <HAL_GPIO_Init+0x264>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d101      	bne.n	800375a <HAL_GPIO_Init+0x20e>
 8003756:	2309      	movs	r3, #9
 8003758:	e02d      	b.n	80037b6 <HAL_GPIO_Init+0x26a>
 800375a:	230a      	movs	r3, #10
 800375c:	e02b      	b.n	80037b6 <HAL_GPIO_Init+0x26a>
 800375e:	2308      	movs	r3, #8
 8003760:	e029      	b.n	80037b6 <HAL_GPIO_Init+0x26a>
 8003762:	2307      	movs	r3, #7
 8003764:	e027      	b.n	80037b6 <HAL_GPIO_Init+0x26a>
 8003766:	2306      	movs	r3, #6
 8003768:	e025      	b.n	80037b6 <HAL_GPIO_Init+0x26a>
 800376a:	2305      	movs	r3, #5
 800376c:	e023      	b.n	80037b6 <HAL_GPIO_Init+0x26a>
 800376e:	2304      	movs	r3, #4
 8003770:	e021      	b.n	80037b6 <HAL_GPIO_Init+0x26a>
 8003772:	2303      	movs	r3, #3
 8003774:	e01f      	b.n	80037b6 <HAL_GPIO_Init+0x26a>
 8003776:	2302      	movs	r3, #2
 8003778:	e01d      	b.n	80037b6 <HAL_GPIO_Init+0x26a>
 800377a:	2301      	movs	r3, #1
 800377c:	e01b      	b.n	80037b6 <HAL_GPIO_Init+0x26a>
 800377e:	bf00      	nop
 8003780:	58000080 	.word	0x58000080
 8003784:	58024400 	.word	0x58024400
 8003788:	58000400 	.word	0x58000400
 800378c:	58020000 	.word	0x58020000
 8003790:	58020400 	.word	0x58020400
 8003794:	58020800 	.word	0x58020800
 8003798:	58020c00 	.word	0x58020c00
 800379c:	58021000 	.word	0x58021000
 80037a0:	58021400 	.word	0x58021400
 80037a4:	58021800 	.word	0x58021800
 80037a8:	58021c00 	.word	0x58021c00
 80037ac:	58022000 	.word	0x58022000
 80037b0:	58022400 	.word	0x58022400
 80037b4:	2300      	movs	r3, #0
 80037b6:	69fa      	ldr	r2, [r7, #28]
 80037b8:	f002 0203 	and.w	r2, r2, #3
 80037bc:	0092      	lsls	r2, r2, #2
 80037be:	4093      	lsls	r3, r2
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037c6:	4938      	ldr	r1, [pc, #224]	; (80038a8 <HAL_GPIO_Init+0x35c>)
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	089b      	lsrs	r3, r3, #2
 80037cc:	3302      	adds	r3, #2
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	43db      	mvns	r3, r3
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	4013      	ands	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80037fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	43db      	mvns	r3, r3
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	4013      	ands	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4313      	orrs	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003828:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	43db      	mvns	r3, r3
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	4013      	ands	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d003      	beq.n	8003854 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	4313      	orrs	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	43db      	mvns	r3, r3
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	4013      	ands	r3, r2
 8003868:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	4313      	orrs	r3, r2
 800387c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	3301      	adds	r3, #1
 8003888:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	fa22 f303 	lsr.w	r3, r2, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	f47f ae63 	bne.w	8003560 <HAL_GPIO_Init+0x14>
  }
}
 800389a:	bf00      	nop
 800389c:	bf00      	nop
 800389e:	3724      	adds	r7, #36	; 0x24
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	58000400 	.word	0x58000400

080038ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	460b      	mov	r3, r1
 80038b6:	807b      	strh	r3, [r7, #2]
 80038b8:	4613      	mov	r3, r2
 80038ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038bc:	787b      	ldrb	r3, [r7, #1]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038c2:	887a      	ldrh	r2, [r7, #2]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80038c8:	e003      	b.n	80038d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80038ca:	887b      	ldrh	r3, [r7, #2]
 80038cc:	041a      	lsls	r2, r3, #16
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	619a      	str	r2, [r3, #24]
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038de:	b480      	push	{r7}
 80038e0:	b085      	sub	sp, #20
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
 80038e6:	460b      	mov	r3, r1
 80038e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038f0:	887a      	ldrh	r2, [r7, #2]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4013      	ands	r3, r2
 80038f6:	041a      	lsls	r2, r3, #16
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	43d9      	mvns	r1, r3
 80038fc:	887b      	ldrh	r3, [r7, #2]
 80038fe:	400b      	ands	r3, r1
 8003900:	431a      	orrs	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	619a      	str	r2, [r3, #24]
}
 8003906:	bf00      	nop
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
	...

08003914 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800391c:	4b29      	ldr	r3, [pc, #164]	; (80039c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	2b06      	cmp	r3, #6
 8003926:	d00a      	beq.n	800393e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003928:	4b26      	ldr	r3, [pc, #152]	; (80039c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	429a      	cmp	r2, r3
 8003934:	d001      	beq.n	800393a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e040      	b.n	80039bc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	e03e      	b.n	80039bc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800393e:	4b21      	ldr	r3, [pc, #132]	; (80039c4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003946:	491f      	ldr	r1, [pc, #124]	; (80039c4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4313      	orrs	r3, r2
 800394c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800394e:	f7fe ff59 	bl	8002804 <HAL_GetTick>
 8003952:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003954:	e009      	b.n	800396a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003956:	f7fe ff55 	bl	8002804 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003964:	d901      	bls.n	800396a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e028      	b.n	80039bc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800396a:	4b16      	ldr	r3, [pc, #88]	; (80039c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003976:	d1ee      	bne.n	8003956 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b1e      	cmp	r3, #30
 800397c:	d008      	beq.n	8003990 <HAL_PWREx_ConfigSupply+0x7c>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b2e      	cmp	r3, #46	; 0x2e
 8003982:	d005      	beq.n	8003990 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b1d      	cmp	r3, #29
 8003988:	d002      	beq.n	8003990 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b2d      	cmp	r3, #45	; 0x2d
 800398e:	d114      	bne.n	80039ba <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003990:	f7fe ff38 	bl	8002804 <HAL_GetTick>
 8003994:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003996:	e009      	b.n	80039ac <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003998:	f7fe ff34 	bl	8002804 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039a6:	d901      	bls.n	80039ac <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e007      	b.n	80039bc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80039ac:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <HAL_PWREx_ConfigSupply+0xb0>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b8:	d1ee      	bne.n	8003998 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	58024800 	.word	0x58024800

080039c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b08c      	sub	sp, #48	; 0x30
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d102      	bne.n	80039dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	f000 bc1f 	b.w	800421a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 80b3 	beq.w	8003b50 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039ea:	4b95      	ldr	r3, [pc, #596]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039f4:	4b92      	ldr	r3, [pc, #584]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 80039f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80039fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fc:	2b10      	cmp	r3, #16
 80039fe:	d007      	beq.n	8003a10 <HAL_RCC_OscConfig+0x48>
 8003a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a02:	2b18      	cmp	r3, #24
 8003a04:	d112      	bne.n	8003a2c <HAL_RCC_OscConfig+0x64>
 8003a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a08:	f003 0303 	and.w	r3, r3, #3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d10d      	bne.n	8003a2c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a10:	4b8b      	ldr	r3, [pc, #556]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 8098 	beq.w	8003b4e <HAL_RCC_OscConfig+0x186>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f040 8093 	bne.w	8003b4e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e3f6      	b.n	800421a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a34:	d106      	bne.n	8003a44 <HAL_RCC_OscConfig+0x7c>
 8003a36:	4b82      	ldr	r3, [pc, #520]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a81      	ldr	r2, [pc, #516]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a40:	6013      	str	r3, [r2, #0]
 8003a42:	e058      	b.n	8003af6 <HAL_RCC_OscConfig+0x12e>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d112      	bne.n	8003a72 <HAL_RCC_OscConfig+0xaa>
 8003a4c:	4b7c      	ldr	r3, [pc, #496]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a7b      	ldr	r2, [pc, #492]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a56:	6013      	str	r3, [r2, #0]
 8003a58:	4b79      	ldr	r3, [pc, #484]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a78      	ldr	r2, [pc, #480]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003a5e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003a62:	6013      	str	r3, [r2, #0]
 8003a64:	4b76      	ldr	r3, [pc, #472]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a75      	ldr	r2, [pc, #468]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a6e:	6013      	str	r3, [r2, #0]
 8003a70:	e041      	b.n	8003af6 <HAL_RCC_OscConfig+0x12e>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a7a:	d112      	bne.n	8003aa2 <HAL_RCC_OscConfig+0xda>
 8003a7c:	4b70      	ldr	r3, [pc, #448]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a6f      	ldr	r2, [pc, #444]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003a82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a86:	6013      	str	r3, [r2, #0]
 8003a88:	4b6d      	ldr	r3, [pc, #436]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a6c      	ldr	r2, [pc, #432]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003a8e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	4b6a      	ldr	r3, [pc, #424]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a69      	ldr	r2, [pc, #420]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a9e:	6013      	str	r3, [r2, #0]
 8003aa0:	e029      	b.n	8003af6 <HAL_RCC_OscConfig+0x12e>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003aaa:	d112      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x10a>
 8003aac:	4b64      	ldr	r3, [pc, #400]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a63      	ldr	r2, [pc, #396]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003ab2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ab6:	6013      	str	r3, [r2, #0]
 8003ab8:	4b61      	ldr	r3, [pc, #388]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a60      	ldr	r2, [pc, #384]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003abe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	4b5e      	ldr	r3, [pc, #376]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a5d      	ldr	r2, [pc, #372]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003aca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ace:	6013      	str	r3, [r2, #0]
 8003ad0:	e011      	b.n	8003af6 <HAL_RCC_OscConfig+0x12e>
 8003ad2:	4b5b      	ldr	r3, [pc, #364]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a5a      	ldr	r2, [pc, #360]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	4b58      	ldr	r3, [pc, #352]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a57      	ldr	r2, [pc, #348]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003ae4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ae8:	6013      	str	r3, [r2, #0]
 8003aea:	4b55      	ldr	r3, [pc, #340]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a54      	ldr	r2, [pc, #336]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003af0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003af4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d013      	beq.n	8003b26 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afe:	f7fe fe81 	bl	8002804 <HAL_GetTick>
 8003b02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b06:	f7fe fe7d 	bl	8002804 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b64      	cmp	r3, #100	; 0x64
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e380      	b.n	800421a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b18:	4b49      	ldr	r3, [pc, #292]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0f0      	beq.n	8003b06 <HAL_RCC_OscConfig+0x13e>
 8003b24:	e014      	b.n	8003b50 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b26:	f7fe fe6d 	bl	8002804 <HAL_GetTick>
 8003b2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b2c:	e008      	b.n	8003b40 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b2e:	f7fe fe69 	bl	8002804 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b64      	cmp	r3, #100	; 0x64
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e36c      	b.n	800421a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b40:	4b3f      	ldr	r3, [pc, #252]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1f0      	bne.n	8003b2e <HAL_RCC_OscConfig+0x166>
 8003b4c:	e000      	b.n	8003b50 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b4e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 808c 	beq.w	8003c76 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b5e:	4b38      	ldr	r3, [pc, #224]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b66:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b68:	4b35      	ldr	r3, [pc, #212]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003b6e:	6a3b      	ldr	r3, [r7, #32]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d007      	beq.n	8003b84 <HAL_RCC_OscConfig+0x1bc>
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	2b18      	cmp	r3, #24
 8003b78:	d137      	bne.n	8003bea <HAL_RCC_OscConfig+0x222>
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	f003 0303 	and.w	r3, r3, #3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d132      	bne.n	8003bea <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b84:	4b2e      	ldr	r3, [pc, #184]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d005      	beq.n	8003b9c <HAL_RCC_OscConfig+0x1d4>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e33e      	b.n	800421a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b9c:	4b28      	ldr	r3, [pc, #160]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f023 0219 	bic.w	r2, r3, #25
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	4925      	ldr	r1, [pc, #148]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bae:	f7fe fe29 	bl	8002804 <HAL_GetTick>
 8003bb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bb4:	e008      	b.n	8003bc8 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bb6:	f7fe fe25 	bl	8002804 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e328      	b.n	800421a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bc8:	4b1d      	ldr	r3, [pc, #116]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d0f0      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd4:	4b1a      	ldr	r3, [pc, #104]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	061b      	lsls	r3, r3, #24
 8003be2:	4917      	ldr	r1, [pc, #92]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003be8:	e045      	b.n	8003c76 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d028      	beq.n	8003c44 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003bf2:	4b13      	ldr	r3, [pc, #76]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f023 0219 	bic.w	r2, r3, #25
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	4910      	ldr	r1, [pc, #64]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c04:	f7fe fdfe 	bl	8002804 <HAL_GetTick>
 8003c08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c0c:	f7fe fdfa 	bl	8002804 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e2fd      	b.n	800421a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c1e:	4b08      	ldr	r3, [pc, #32]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0f0      	beq.n	8003c0c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c2a:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	061b      	lsls	r3, r3, #24
 8003c38:	4901      	ldr	r1, [pc, #4]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	604b      	str	r3, [r1, #4]
 8003c3e:	e01a      	b.n	8003c76 <HAL_RCC_OscConfig+0x2ae>
 8003c40:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c44:	4b97      	ldr	r3, [pc, #604]	; (8003ea4 <HAL_RCC_OscConfig+0x4dc>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a96      	ldr	r2, [pc, #600]	; (8003ea4 <HAL_RCC_OscConfig+0x4dc>)
 8003c4a:	f023 0301 	bic.w	r3, r3, #1
 8003c4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c50:	f7fe fdd8 	bl	8002804 <HAL_GetTick>
 8003c54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c58:	f7fe fdd4 	bl	8002804 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e2d7      	b.n	800421a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c6a:	4b8e      	ldr	r3, [pc, #568]	; (8003ea4 <HAL_RCC_OscConfig+0x4dc>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0304 	and.w	r3, r3, #4
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1f0      	bne.n	8003c58 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0310 	and.w	r3, r3, #16
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d06a      	beq.n	8003d58 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c82:	4b88      	ldr	r3, [pc, #544]	; (8003ea4 <HAL_RCC_OscConfig+0x4dc>)
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c8a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c8c:	4b85      	ldr	r3, [pc, #532]	; (8003ea4 <HAL_RCC_OscConfig+0x4dc>)
 8003c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c90:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	2b08      	cmp	r3, #8
 8003c96:	d007      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x2e0>
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	2b18      	cmp	r3, #24
 8003c9c:	d11b      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x30e>
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f003 0303 	and.w	r3, r3, #3
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d116      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ca8:	4b7e      	ldr	r3, [pc, #504]	; (8003ea4 <HAL_RCC_OscConfig+0x4dc>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d005      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x2f8>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	69db      	ldr	r3, [r3, #28]
 8003cb8:	2b80      	cmp	r3, #128	; 0x80
 8003cba:	d001      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e2ac      	b.n	800421a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003cc0:	4b78      	ldr	r3, [pc, #480]	; (8003ea4 <HAL_RCC_OscConfig+0x4dc>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	061b      	lsls	r3, r3, #24
 8003cce:	4975      	ldr	r1, [pc, #468]	; (8003ea4 <HAL_RCC_OscConfig+0x4dc>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003cd4:	e040      	b.n	8003d58 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d023      	beq.n	8003d26 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003cde:	4b71      	ldr	r3, [pc, #452]	; (8003ea4 <HAL_RCC_OscConfig+0x4dc>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a70      	ldr	r2, [pc, #448]	; (8003ea4 <HAL_RCC_OscConfig+0x4dc>)
 8003ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cea:	f7fe fd8b 	bl	8002804 <HAL_GetTick>
 8003cee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003cf0:	e008      	b.n	8003d04 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003cf2:	f7fe fd87 	bl	8002804 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e28a      	b.n	800421a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d04:	4b67      	ldr	r3, [pc, #412]	; (8003ea4 <HAL_RCC_OscConfig+0x4dc>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0f0      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d10:	4b64      	ldr	r3, [pc, #400]	; (8003ea4 <HAL_RCC_OscConfig+0x4dc>)
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	061b      	lsls	r3, r3, #24
 8003d1e:	4961      	ldr	r1, [pc, #388]	; (8003ea4 <HAL_RCC_OscConfig+0x4dc>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	60cb      	str	r3, [r1, #12]
 8003d24:	e018      	b.n	8003d58 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003d26:	4b5f      	ldr	r3, [pc, #380]	; (8003ea4 <HAL_RCC_OscConfig+0x4dc>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a5e      	ldr	r2, [pc, #376]	; (8003ea4 <HAL_RCC_OscConfig+0x4dc>)
 8003d2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d32:	f7fe fd67 	bl	8002804 <HAL_GetTick>
 8003d36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003d38:	e008      	b.n	8003d4c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003d3a:	f7fe fd63 	bl	8002804 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e266      	b.n	800421a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003d4c:	4b55      	ldr	r3, [pc, #340]	; (8003ea4 <HAL_RCC_OscConfig+0x4dc>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1f0      	bne.n	8003d3a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0308 	and.w	r3, r3, #8
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d036      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d019      	beq.n	8003da0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d6c:	4b4d      	ldr	r3, [pc, #308]	; (8003ea4 <HAL_RCC_OscConfig+0x4dc>)
 8003d6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d70:	4a4c      	ldr	r2, [pc, #304]	; (8003ea4 <HAL_RCC_OscConfig+0x4dc>)
 8003d72:	f043 0301 	orr.w	r3, r3, #1
 8003d76:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d78:	f7fe fd44 	bl	8002804 <HAL_GetTick>
 8003d7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d80:	f7fe fd40 	bl	8002804 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e243      	b.n	800421a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d92:	4b44      	ldr	r3, [pc, #272]	; (8003ea4 <HAL_RCC_OscConfig+0x4dc>)
 8003d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0f0      	beq.n	8003d80 <HAL_RCC_OscConfig+0x3b8>
 8003d9e:	e018      	b.n	8003dd2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003da0:	4b40      	ldr	r3, [pc, #256]	; (8003ea4 <HAL_RCC_OscConfig+0x4dc>)
 8003da2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da4:	4a3f      	ldr	r2, [pc, #252]	; (8003ea4 <HAL_RCC_OscConfig+0x4dc>)
 8003da6:	f023 0301 	bic.w	r3, r3, #1
 8003daa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dac:	f7fe fd2a 	bl	8002804 <HAL_GetTick>
 8003db0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003db4:	f7fe fd26 	bl	8002804 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e229      	b.n	800421a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003dc6:	4b37      	ldr	r3, [pc, #220]	; (8003ea4 <HAL_RCC_OscConfig+0x4dc>)
 8003dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1f0      	bne.n	8003db4 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0320 	and.w	r3, r3, #32
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d036      	beq.n	8003e4c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d019      	beq.n	8003e1a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003de6:	4b2f      	ldr	r3, [pc, #188]	; (8003ea4 <HAL_RCC_OscConfig+0x4dc>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a2e      	ldr	r2, [pc, #184]	; (8003ea4 <HAL_RCC_OscConfig+0x4dc>)
 8003dec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003df0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003df2:	f7fe fd07 	bl	8002804 <HAL_GetTick>
 8003df6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003df8:	e008      	b.n	8003e0c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dfa:	f7fe fd03 	bl	8002804 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e206      	b.n	800421a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e0c:	4b25      	ldr	r3, [pc, #148]	; (8003ea4 <HAL_RCC_OscConfig+0x4dc>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0f0      	beq.n	8003dfa <HAL_RCC_OscConfig+0x432>
 8003e18:	e018      	b.n	8003e4c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e1a:	4b22      	ldr	r3, [pc, #136]	; (8003ea4 <HAL_RCC_OscConfig+0x4dc>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a21      	ldr	r2, [pc, #132]	; (8003ea4 <HAL_RCC_OscConfig+0x4dc>)
 8003e20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e24:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003e26:	f7fe fced 	bl	8002804 <HAL_GetTick>
 8003e2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e2c:	e008      	b.n	8003e40 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e2e:	f7fe fce9 	bl	8002804 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e1ec      	b.n	800421a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e40:	4b18      	ldr	r3, [pc, #96]	; (8003ea4 <HAL_RCC_OscConfig+0x4dc>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1f0      	bne.n	8003e2e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 80af 	beq.w	8003fb8 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e5a:	4b13      	ldr	r3, [pc, #76]	; (8003ea8 <HAL_RCC_OscConfig+0x4e0>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a12      	ldr	r2, [pc, #72]	; (8003ea8 <HAL_RCC_OscConfig+0x4e0>)
 8003e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e66:	f7fe fccd 	bl	8002804 <HAL_GetTick>
 8003e6a:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e6c:	e008      	b.n	8003e80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e6e:	f7fe fcc9 	bl	8002804 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b64      	cmp	r3, #100	; 0x64
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e1cc      	b.n	800421a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e80:	4b09      	ldr	r3, [pc, #36]	; (8003ea8 <HAL_RCC_OscConfig+0x4e0>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0f0      	beq.n	8003e6e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d10b      	bne.n	8003eac <HAL_RCC_OscConfig+0x4e4>
 8003e94:	4b03      	ldr	r3, [pc, #12]	; (8003ea4 <HAL_RCC_OscConfig+0x4dc>)
 8003e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e98:	4a02      	ldr	r2, [pc, #8]	; (8003ea4 <HAL_RCC_OscConfig+0x4dc>)
 8003e9a:	f043 0301 	orr.w	r3, r3, #1
 8003e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea0:	e05b      	b.n	8003f5a <HAL_RCC_OscConfig+0x592>
 8003ea2:	bf00      	nop
 8003ea4:	58024400 	.word	0x58024400
 8003ea8:	58024800 	.word	0x58024800
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d112      	bne.n	8003eda <HAL_RCC_OscConfig+0x512>
 8003eb4:	4b9d      	ldr	r3, [pc, #628]	; (800412c <HAL_RCC_OscConfig+0x764>)
 8003eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb8:	4a9c      	ldr	r2, [pc, #624]	; (800412c <HAL_RCC_OscConfig+0x764>)
 8003eba:	f023 0301 	bic.w	r3, r3, #1
 8003ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec0:	4b9a      	ldr	r3, [pc, #616]	; (800412c <HAL_RCC_OscConfig+0x764>)
 8003ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec4:	4a99      	ldr	r2, [pc, #612]	; (800412c <HAL_RCC_OscConfig+0x764>)
 8003ec6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eca:	6713      	str	r3, [r2, #112]	; 0x70
 8003ecc:	4b97      	ldr	r3, [pc, #604]	; (800412c <HAL_RCC_OscConfig+0x764>)
 8003ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed0:	4a96      	ldr	r2, [pc, #600]	; (800412c <HAL_RCC_OscConfig+0x764>)
 8003ed2:	f023 0304 	bic.w	r3, r3, #4
 8003ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed8:	e03f      	b.n	8003f5a <HAL_RCC_OscConfig+0x592>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	2b05      	cmp	r3, #5
 8003ee0:	d112      	bne.n	8003f08 <HAL_RCC_OscConfig+0x540>
 8003ee2:	4b92      	ldr	r3, [pc, #584]	; (800412c <HAL_RCC_OscConfig+0x764>)
 8003ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee6:	4a91      	ldr	r2, [pc, #580]	; (800412c <HAL_RCC_OscConfig+0x764>)
 8003ee8:	f043 0304 	orr.w	r3, r3, #4
 8003eec:	6713      	str	r3, [r2, #112]	; 0x70
 8003eee:	4b8f      	ldr	r3, [pc, #572]	; (800412c <HAL_RCC_OscConfig+0x764>)
 8003ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef2:	4a8e      	ldr	r2, [pc, #568]	; (800412c <HAL_RCC_OscConfig+0x764>)
 8003ef4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8003efa:	4b8c      	ldr	r3, [pc, #560]	; (800412c <HAL_RCC_OscConfig+0x764>)
 8003efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efe:	4a8b      	ldr	r2, [pc, #556]	; (800412c <HAL_RCC_OscConfig+0x764>)
 8003f00:	f043 0301 	orr.w	r3, r3, #1
 8003f04:	6713      	str	r3, [r2, #112]	; 0x70
 8003f06:	e028      	b.n	8003f5a <HAL_RCC_OscConfig+0x592>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	2b85      	cmp	r3, #133	; 0x85
 8003f0e:	d112      	bne.n	8003f36 <HAL_RCC_OscConfig+0x56e>
 8003f10:	4b86      	ldr	r3, [pc, #536]	; (800412c <HAL_RCC_OscConfig+0x764>)
 8003f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f14:	4a85      	ldr	r2, [pc, #532]	; (800412c <HAL_RCC_OscConfig+0x764>)
 8003f16:	f043 0304 	orr.w	r3, r3, #4
 8003f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f1c:	4b83      	ldr	r3, [pc, #524]	; (800412c <HAL_RCC_OscConfig+0x764>)
 8003f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f20:	4a82      	ldr	r2, [pc, #520]	; (800412c <HAL_RCC_OscConfig+0x764>)
 8003f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f26:	6713      	str	r3, [r2, #112]	; 0x70
 8003f28:	4b80      	ldr	r3, [pc, #512]	; (800412c <HAL_RCC_OscConfig+0x764>)
 8003f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2c:	4a7f      	ldr	r2, [pc, #508]	; (800412c <HAL_RCC_OscConfig+0x764>)
 8003f2e:	f043 0301 	orr.w	r3, r3, #1
 8003f32:	6713      	str	r3, [r2, #112]	; 0x70
 8003f34:	e011      	b.n	8003f5a <HAL_RCC_OscConfig+0x592>
 8003f36:	4b7d      	ldr	r3, [pc, #500]	; (800412c <HAL_RCC_OscConfig+0x764>)
 8003f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3a:	4a7c      	ldr	r2, [pc, #496]	; (800412c <HAL_RCC_OscConfig+0x764>)
 8003f3c:	f023 0301 	bic.w	r3, r3, #1
 8003f40:	6713      	str	r3, [r2, #112]	; 0x70
 8003f42:	4b7a      	ldr	r3, [pc, #488]	; (800412c <HAL_RCC_OscConfig+0x764>)
 8003f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f46:	4a79      	ldr	r2, [pc, #484]	; (800412c <HAL_RCC_OscConfig+0x764>)
 8003f48:	f023 0304 	bic.w	r3, r3, #4
 8003f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f4e:	4b77      	ldr	r3, [pc, #476]	; (800412c <HAL_RCC_OscConfig+0x764>)
 8003f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f52:	4a76      	ldr	r2, [pc, #472]	; (800412c <HAL_RCC_OscConfig+0x764>)
 8003f54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d015      	beq.n	8003f8e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f62:	f7fe fc4f 	bl	8002804 <HAL_GetTick>
 8003f66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f68:	e00a      	b.n	8003f80 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f6a:	f7fe fc4b 	bl	8002804 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d901      	bls.n	8003f80 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e14c      	b.n	800421a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f80:	4b6a      	ldr	r3, [pc, #424]	; (800412c <HAL_RCC_OscConfig+0x764>)
 8003f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d0ee      	beq.n	8003f6a <HAL_RCC_OscConfig+0x5a2>
 8003f8c:	e014      	b.n	8003fb8 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f8e:	f7fe fc39 	bl	8002804 <HAL_GetTick>
 8003f92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f94:	e00a      	b.n	8003fac <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f96:	f7fe fc35 	bl	8002804 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e136      	b.n	800421a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003fac:	4b5f      	ldr	r3, [pc, #380]	; (800412c <HAL_RCC_OscConfig+0x764>)
 8003fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1ee      	bne.n	8003f96 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 812b 	beq.w	8004218 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003fc2:	4b5a      	ldr	r3, [pc, #360]	; (800412c <HAL_RCC_OscConfig+0x764>)
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fca:	2b18      	cmp	r3, #24
 8003fcc:	f000 80bb 	beq.w	8004146 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	f040 8095 	bne.w	8004104 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fda:	4b54      	ldr	r3, [pc, #336]	; (800412c <HAL_RCC_OscConfig+0x764>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a53      	ldr	r2, [pc, #332]	; (800412c <HAL_RCC_OscConfig+0x764>)
 8003fe0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe6:	f7fe fc0d 	bl	8002804 <HAL_GetTick>
 8003fea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fec:	e008      	b.n	8004000 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fee:	f7fe fc09 	bl	8002804 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e10c      	b.n	800421a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004000:	4b4a      	ldr	r3, [pc, #296]	; (800412c <HAL_RCC_OscConfig+0x764>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1f0      	bne.n	8003fee <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800400c:	4b47      	ldr	r3, [pc, #284]	; (800412c <HAL_RCC_OscConfig+0x764>)
 800400e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004010:	4b47      	ldr	r3, [pc, #284]	; (8004130 <HAL_RCC_OscConfig+0x768>)
 8004012:	4013      	ands	r3, r2
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800401c:	0112      	lsls	r2, r2, #4
 800401e:	430a      	orrs	r2, r1
 8004020:	4942      	ldr	r1, [pc, #264]	; (800412c <HAL_RCC_OscConfig+0x764>)
 8004022:	4313      	orrs	r3, r2
 8004024:	628b      	str	r3, [r1, #40]	; 0x28
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402a:	3b01      	subs	r3, #1
 800402c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004034:	3b01      	subs	r3, #1
 8004036:	025b      	lsls	r3, r3, #9
 8004038:	b29b      	uxth	r3, r3
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004040:	3b01      	subs	r3, #1
 8004042:	041b      	lsls	r3, r3, #16
 8004044:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004048:	431a      	orrs	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800404e:	3b01      	subs	r3, #1
 8004050:	061b      	lsls	r3, r3, #24
 8004052:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004056:	4935      	ldr	r1, [pc, #212]	; (800412c <HAL_RCC_OscConfig+0x764>)
 8004058:	4313      	orrs	r3, r2
 800405a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800405c:	4b33      	ldr	r3, [pc, #204]	; (800412c <HAL_RCC_OscConfig+0x764>)
 800405e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004060:	4a32      	ldr	r2, [pc, #200]	; (800412c <HAL_RCC_OscConfig+0x764>)
 8004062:	f023 0301 	bic.w	r3, r3, #1
 8004066:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004068:	4b30      	ldr	r3, [pc, #192]	; (800412c <HAL_RCC_OscConfig+0x764>)
 800406a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800406c:	4b31      	ldr	r3, [pc, #196]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 800406e:	4013      	ands	r3, r2
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004074:	00d2      	lsls	r2, r2, #3
 8004076:	492d      	ldr	r1, [pc, #180]	; (800412c <HAL_RCC_OscConfig+0x764>)
 8004078:	4313      	orrs	r3, r2
 800407a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800407c:	4b2b      	ldr	r3, [pc, #172]	; (800412c <HAL_RCC_OscConfig+0x764>)
 800407e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004080:	f023 020c 	bic.w	r2, r3, #12
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004088:	4928      	ldr	r1, [pc, #160]	; (800412c <HAL_RCC_OscConfig+0x764>)
 800408a:	4313      	orrs	r3, r2
 800408c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800408e:	4b27      	ldr	r3, [pc, #156]	; (800412c <HAL_RCC_OscConfig+0x764>)
 8004090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004092:	f023 0202 	bic.w	r2, r3, #2
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409a:	4924      	ldr	r1, [pc, #144]	; (800412c <HAL_RCC_OscConfig+0x764>)
 800409c:	4313      	orrs	r3, r2
 800409e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80040a0:	4b22      	ldr	r3, [pc, #136]	; (800412c <HAL_RCC_OscConfig+0x764>)
 80040a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a4:	4a21      	ldr	r2, [pc, #132]	; (800412c <HAL_RCC_OscConfig+0x764>)
 80040a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040ac:	4b1f      	ldr	r3, [pc, #124]	; (800412c <HAL_RCC_OscConfig+0x764>)
 80040ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b0:	4a1e      	ldr	r2, [pc, #120]	; (800412c <HAL_RCC_OscConfig+0x764>)
 80040b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80040b8:	4b1c      	ldr	r3, [pc, #112]	; (800412c <HAL_RCC_OscConfig+0x764>)
 80040ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040bc:	4a1b      	ldr	r2, [pc, #108]	; (800412c <HAL_RCC_OscConfig+0x764>)
 80040be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80040c4:	4b19      	ldr	r3, [pc, #100]	; (800412c <HAL_RCC_OscConfig+0x764>)
 80040c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c8:	4a18      	ldr	r2, [pc, #96]	; (800412c <HAL_RCC_OscConfig+0x764>)
 80040ca:	f043 0301 	orr.w	r3, r3, #1
 80040ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040d0:	4b16      	ldr	r3, [pc, #88]	; (800412c <HAL_RCC_OscConfig+0x764>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a15      	ldr	r2, [pc, #84]	; (800412c <HAL_RCC_OscConfig+0x764>)
 80040d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040dc:	f7fe fb92 	bl	8002804 <HAL_GetTick>
 80040e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040e2:	e008      	b.n	80040f6 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040e4:	f7fe fb8e 	bl	8002804 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e091      	b.n	800421a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040f6:	4b0d      	ldr	r3, [pc, #52]	; (800412c <HAL_RCC_OscConfig+0x764>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d0f0      	beq.n	80040e4 <HAL_RCC_OscConfig+0x71c>
 8004102:	e089      	b.n	8004218 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004104:	4b09      	ldr	r3, [pc, #36]	; (800412c <HAL_RCC_OscConfig+0x764>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a08      	ldr	r2, [pc, #32]	; (800412c <HAL_RCC_OscConfig+0x764>)
 800410a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800410e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004110:	f7fe fb78 	bl	8002804 <HAL_GetTick>
 8004114:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004116:	e00f      	b.n	8004138 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004118:	f7fe fb74 	bl	8002804 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d908      	bls.n	8004138 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e077      	b.n	800421a <HAL_RCC_OscConfig+0x852>
 800412a:	bf00      	nop
 800412c:	58024400 	.word	0x58024400
 8004130:	fffffc0c 	.word	0xfffffc0c
 8004134:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004138:	4b3a      	ldr	r3, [pc, #232]	; (8004224 <HAL_RCC_OscConfig+0x85c>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1e9      	bne.n	8004118 <HAL_RCC_OscConfig+0x750>
 8004144:	e068      	b.n	8004218 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004146:	4b37      	ldr	r3, [pc, #220]	; (8004224 <HAL_RCC_OscConfig+0x85c>)
 8004148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800414c:	4b35      	ldr	r3, [pc, #212]	; (8004224 <HAL_RCC_OscConfig+0x85c>)
 800414e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004150:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004156:	2b01      	cmp	r3, #1
 8004158:	d031      	beq.n	80041be <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	f003 0203 	and.w	r2, r3, #3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004164:	429a      	cmp	r2, r3
 8004166:	d12a      	bne.n	80041be <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	091b      	lsrs	r3, r3, #4
 800416c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004174:	429a      	cmp	r2, r3
 8004176:	d122      	bne.n	80041be <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004182:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004184:	429a      	cmp	r2, r3
 8004186:	d11a      	bne.n	80041be <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	0a5b      	lsrs	r3, r3, #9
 800418c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004194:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004196:	429a      	cmp	r2, r3
 8004198:	d111      	bne.n	80041be <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	0c1b      	lsrs	r3, r3, #16
 800419e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d108      	bne.n	80041be <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	0e1b      	lsrs	r3, r3, #24
 80041b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d001      	beq.n	80041c2 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e02b      	b.n	800421a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80041c2:	4b18      	ldr	r3, [pc, #96]	; (8004224 <HAL_RCC_OscConfig+0x85c>)
 80041c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c6:	08db      	lsrs	r3, r3, #3
 80041c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041cc:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d01f      	beq.n	8004218 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80041d8:	4b12      	ldr	r3, [pc, #72]	; (8004224 <HAL_RCC_OscConfig+0x85c>)
 80041da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041dc:	4a11      	ldr	r2, [pc, #68]	; (8004224 <HAL_RCC_OscConfig+0x85c>)
 80041de:	f023 0301 	bic.w	r3, r3, #1
 80041e2:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80041e4:	f7fe fb0e 	bl	8002804 <HAL_GetTick>
 80041e8:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80041ea:	bf00      	nop
 80041ec:	f7fe fb0a 	bl	8002804 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d0f9      	beq.n	80041ec <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80041f8:	4b0a      	ldr	r3, [pc, #40]	; (8004224 <HAL_RCC_OscConfig+0x85c>)
 80041fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041fc:	4b0a      	ldr	r3, [pc, #40]	; (8004228 <HAL_RCC_OscConfig+0x860>)
 80041fe:	4013      	ands	r3, r2
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004204:	00d2      	lsls	r2, r2, #3
 8004206:	4907      	ldr	r1, [pc, #28]	; (8004224 <HAL_RCC_OscConfig+0x85c>)
 8004208:	4313      	orrs	r3, r2
 800420a:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800420c:	4b05      	ldr	r3, [pc, #20]	; (8004224 <HAL_RCC_OscConfig+0x85c>)
 800420e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004210:	4a04      	ldr	r2, [pc, #16]	; (8004224 <HAL_RCC_OscConfig+0x85c>)
 8004212:	f043 0301 	orr.w	r3, r3, #1
 8004216:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3730      	adds	r7, #48	; 0x30
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	58024400 	.word	0x58024400
 8004228:	ffff0007 	.word	0xffff0007

0800422c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e19c      	b.n	800457a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004240:	4b8a      	ldr	r3, [pc, #552]	; (800446c <HAL_RCC_ClockConfig+0x240>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 030f 	and.w	r3, r3, #15
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d910      	bls.n	8004270 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424e:	4b87      	ldr	r3, [pc, #540]	; (800446c <HAL_RCC_ClockConfig+0x240>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f023 020f 	bic.w	r2, r3, #15
 8004256:	4985      	ldr	r1, [pc, #532]	; (800446c <HAL_RCC_ClockConfig+0x240>)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	4313      	orrs	r3, r2
 800425c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800425e:	4b83      	ldr	r3, [pc, #524]	; (800446c <HAL_RCC_ClockConfig+0x240>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	429a      	cmp	r2, r3
 800426a:	d001      	beq.n	8004270 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e184      	b.n	800457a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	d010      	beq.n	800429e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	4b7b      	ldr	r3, [pc, #492]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004288:	429a      	cmp	r2, r3
 800428a:	d908      	bls.n	800429e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800428c:	4b78      	ldr	r3, [pc, #480]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	4975      	ldr	r1, [pc, #468]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 800429a:	4313      	orrs	r3, r2
 800429c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0308 	and.w	r3, r3, #8
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d010      	beq.n	80042cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	695a      	ldr	r2, [r3, #20]
 80042ae:	4b70      	ldr	r3, [pc, #448]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d908      	bls.n	80042cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80042ba:	4b6d      	ldr	r3, [pc, #436]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	496a      	ldr	r1, [pc, #424]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0310 	and.w	r3, r3, #16
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d010      	beq.n	80042fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	699a      	ldr	r2, [r3, #24]
 80042dc:	4b64      	ldr	r3, [pc, #400]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 80042de:	69db      	ldr	r3, [r3, #28]
 80042e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d908      	bls.n	80042fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80042e8:	4b61      	ldr	r3, [pc, #388]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 80042ea:	69db      	ldr	r3, [r3, #28]
 80042ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	495e      	ldr	r1, [pc, #376]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0320 	and.w	r3, r3, #32
 8004302:	2b00      	cmp	r3, #0
 8004304:	d010      	beq.n	8004328 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	69da      	ldr	r2, [r3, #28]
 800430a:	4b59      	ldr	r3, [pc, #356]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004312:	429a      	cmp	r2, r3
 8004314:	d908      	bls.n	8004328 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004316:	4b56      	ldr	r3, [pc, #344]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	4953      	ldr	r1, [pc, #332]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 8004324:	4313      	orrs	r3, r2
 8004326:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d010      	beq.n	8004356 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68da      	ldr	r2, [r3, #12]
 8004338:	4b4d      	ldr	r3, [pc, #308]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	f003 030f 	and.w	r3, r3, #15
 8004340:	429a      	cmp	r2, r3
 8004342:	d908      	bls.n	8004356 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004344:	4b4a      	ldr	r3, [pc, #296]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	f023 020f 	bic.w	r2, r3, #15
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	4947      	ldr	r1, [pc, #284]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 8004352:	4313      	orrs	r3, r2
 8004354:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d055      	beq.n	800440e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004362:	4b43      	ldr	r3, [pc, #268]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	4940      	ldr	r1, [pc, #256]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 8004370:	4313      	orrs	r3, r2
 8004372:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2b02      	cmp	r3, #2
 800437a:	d107      	bne.n	800438c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800437c:	4b3c      	ldr	r3, [pc, #240]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d121      	bne.n	80043cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e0f6      	b.n	800457a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2b03      	cmp	r3, #3
 8004392:	d107      	bne.n	80043a4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004394:	4b36      	ldr	r3, [pc, #216]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d115      	bne.n	80043cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e0ea      	b.n	800457a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d107      	bne.n	80043bc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80043ac:	4b30      	ldr	r3, [pc, #192]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d109      	bne.n	80043cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e0de      	b.n	800457a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043bc:	4b2c      	ldr	r3, [pc, #176]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e0d6      	b.n	800457a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043cc:	4b28      	ldr	r3, [pc, #160]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	f023 0207 	bic.w	r2, r3, #7
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	4925      	ldr	r1, [pc, #148]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043de:	f7fe fa11 	bl	8002804 <HAL_GetTick>
 80043e2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e4:	e00a      	b.n	80043fc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043e6:	f7fe fa0d 	bl	8002804 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e0be      	b.n	800457a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043fc:	4b1c      	ldr	r3, [pc, #112]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	00db      	lsls	r3, r3, #3
 800440a:	429a      	cmp	r2, r3
 800440c:	d1eb      	bne.n	80043e6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d010      	beq.n	800443c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	4b14      	ldr	r3, [pc, #80]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	429a      	cmp	r2, r3
 8004428:	d208      	bcs.n	800443c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800442a:	4b11      	ldr	r3, [pc, #68]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	f023 020f 	bic.w	r2, r3, #15
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	490e      	ldr	r1, [pc, #56]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 8004438:	4313      	orrs	r3, r2
 800443a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800443c:	4b0b      	ldr	r3, [pc, #44]	; (800446c <HAL_RCC_ClockConfig+0x240>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 030f 	and.w	r3, r3, #15
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	429a      	cmp	r2, r3
 8004448:	d214      	bcs.n	8004474 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800444a:	4b08      	ldr	r3, [pc, #32]	; (800446c <HAL_RCC_ClockConfig+0x240>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f023 020f 	bic.w	r2, r3, #15
 8004452:	4906      	ldr	r1, [pc, #24]	; (800446c <HAL_RCC_ClockConfig+0x240>)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	4313      	orrs	r3, r2
 8004458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800445a:	4b04      	ldr	r3, [pc, #16]	; (800446c <HAL_RCC_ClockConfig+0x240>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 030f 	and.w	r3, r3, #15
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	429a      	cmp	r2, r3
 8004466:	d005      	beq.n	8004474 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e086      	b.n	800457a <HAL_RCC_ClockConfig+0x34e>
 800446c:	52002000 	.word	0x52002000
 8004470:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0304 	and.w	r3, r3, #4
 800447c:	2b00      	cmp	r3, #0
 800447e:	d010      	beq.n	80044a2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	691a      	ldr	r2, [r3, #16]
 8004484:	4b3f      	ldr	r3, [pc, #252]	; (8004584 <HAL_RCC_ClockConfig+0x358>)
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800448c:	429a      	cmp	r2, r3
 800448e:	d208      	bcs.n	80044a2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004490:	4b3c      	ldr	r3, [pc, #240]	; (8004584 <HAL_RCC_ClockConfig+0x358>)
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	4939      	ldr	r1, [pc, #228]	; (8004584 <HAL_RCC_ClockConfig+0x358>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0308 	and.w	r3, r3, #8
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d010      	beq.n	80044d0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	695a      	ldr	r2, [r3, #20]
 80044b2:	4b34      	ldr	r3, [pc, #208]	; (8004584 <HAL_RCC_ClockConfig+0x358>)
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d208      	bcs.n	80044d0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80044be:	4b31      	ldr	r3, [pc, #196]	; (8004584 <HAL_RCC_ClockConfig+0x358>)
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	492e      	ldr	r1, [pc, #184]	; (8004584 <HAL_RCC_ClockConfig+0x358>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0310 	and.w	r3, r3, #16
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d010      	beq.n	80044fe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	699a      	ldr	r2, [r3, #24]
 80044e0:	4b28      	ldr	r3, [pc, #160]	; (8004584 <HAL_RCC_ClockConfig+0x358>)
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d208      	bcs.n	80044fe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80044ec:	4b25      	ldr	r3, [pc, #148]	; (8004584 <HAL_RCC_ClockConfig+0x358>)
 80044ee:	69db      	ldr	r3, [r3, #28]
 80044f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	4922      	ldr	r1, [pc, #136]	; (8004584 <HAL_RCC_ClockConfig+0x358>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0320 	and.w	r3, r3, #32
 8004506:	2b00      	cmp	r3, #0
 8004508:	d010      	beq.n	800452c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	69da      	ldr	r2, [r3, #28]
 800450e:	4b1d      	ldr	r3, [pc, #116]	; (8004584 <HAL_RCC_ClockConfig+0x358>)
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004516:	429a      	cmp	r2, r3
 8004518:	d208      	bcs.n	800452c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800451a:	4b1a      	ldr	r3, [pc, #104]	; (8004584 <HAL_RCC_ClockConfig+0x358>)
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	4917      	ldr	r1, [pc, #92]	; (8004584 <HAL_RCC_ClockConfig+0x358>)
 8004528:	4313      	orrs	r3, r2
 800452a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800452c:	f000 f834 	bl	8004598 <HAL_RCC_GetSysClockFreq>
 8004530:	4602      	mov	r2, r0
 8004532:	4b14      	ldr	r3, [pc, #80]	; (8004584 <HAL_RCC_ClockConfig+0x358>)
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	0a1b      	lsrs	r3, r3, #8
 8004538:	f003 030f 	and.w	r3, r3, #15
 800453c:	4912      	ldr	r1, [pc, #72]	; (8004588 <HAL_RCC_ClockConfig+0x35c>)
 800453e:	5ccb      	ldrb	r3, [r1, r3]
 8004540:	f003 031f 	and.w	r3, r3, #31
 8004544:	fa22 f303 	lsr.w	r3, r2, r3
 8004548:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800454a:	4b0e      	ldr	r3, [pc, #56]	; (8004584 <HAL_RCC_ClockConfig+0x358>)
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	f003 030f 	and.w	r3, r3, #15
 8004552:	4a0d      	ldr	r2, [pc, #52]	; (8004588 <HAL_RCC_ClockConfig+0x35c>)
 8004554:	5cd3      	ldrb	r3, [r2, r3]
 8004556:	f003 031f 	and.w	r3, r3, #31
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	fa22 f303 	lsr.w	r3, r2, r3
 8004560:	4a0a      	ldr	r2, [pc, #40]	; (800458c <HAL_RCC_ClockConfig+0x360>)
 8004562:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004564:	4a0a      	ldr	r2, [pc, #40]	; (8004590 <HAL_RCC_ClockConfig+0x364>)
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800456a:	4b0a      	ldr	r3, [pc, #40]	; (8004594 <HAL_RCC_ClockConfig+0x368>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4618      	mov	r0, r3
 8004570:	f7fe f8fe 	bl	8002770 <HAL_InitTick>
 8004574:	4603      	mov	r3, r0
 8004576:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004578:	7bfb      	ldrb	r3, [r7, #15]
}
 800457a:	4618      	mov	r0, r3
 800457c:	3718      	adds	r7, #24
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	58024400 	.word	0x58024400
 8004588:	0800ae28 	.word	0x0800ae28
 800458c:	2400005c 	.word	0x2400005c
 8004590:	24000058 	.word	0x24000058
 8004594:	24000060 	.word	0x24000060

08004598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004598:	b480      	push	{r7}
 800459a:	b089      	sub	sp, #36	; 0x24
 800459c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800459e:	4bb3      	ldr	r3, [pc, #716]	; (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045a6:	2b18      	cmp	r3, #24
 80045a8:	f200 8155 	bhi.w	8004856 <HAL_RCC_GetSysClockFreq+0x2be>
 80045ac:	a201      	add	r2, pc, #4	; (adr r2, 80045b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80045ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b2:	bf00      	nop
 80045b4:	08004619 	.word	0x08004619
 80045b8:	08004857 	.word	0x08004857
 80045bc:	08004857 	.word	0x08004857
 80045c0:	08004857 	.word	0x08004857
 80045c4:	08004857 	.word	0x08004857
 80045c8:	08004857 	.word	0x08004857
 80045cc:	08004857 	.word	0x08004857
 80045d0:	08004857 	.word	0x08004857
 80045d4:	0800463f 	.word	0x0800463f
 80045d8:	08004857 	.word	0x08004857
 80045dc:	08004857 	.word	0x08004857
 80045e0:	08004857 	.word	0x08004857
 80045e4:	08004857 	.word	0x08004857
 80045e8:	08004857 	.word	0x08004857
 80045ec:	08004857 	.word	0x08004857
 80045f0:	08004857 	.word	0x08004857
 80045f4:	08004645 	.word	0x08004645
 80045f8:	08004857 	.word	0x08004857
 80045fc:	08004857 	.word	0x08004857
 8004600:	08004857 	.word	0x08004857
 8004604:	08004857 	.word	0x08004857
 8004608:	08004857 	.word	0x08004857
 800460c:	08004857 	.word	0x08004857
 8004610:	08004857 	.word	0x08004857
 8004614:	0800464b 	.word	0x0800464b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004618:	4b94      	ldr	r3, [pc, #592]	; (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	2b00      	cmp	r3, #0
 8004622:	d009      	beq.n	8004638 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004624:	4b91      	ldr	r3, [pc, #580]	; (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	08db      	lsrs	r3, r3, #3
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	4a90      	ldr	r2, [pc, #576]	; (8004870 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004630:	fa22 f303 	lsr.w	r3, r2, r3
 8004634:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004636:	e111      	b.n	800485c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004638:	4b8d      	ldr	r3, [pc, #564]	; (8004870 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800463a:	61bb      	str	r3, [r7, #24]
      break;
 800463c:	e10e      	b.n	800485c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800463e:	4b8d      	ldr	r3, [pc, #564]	; (8004874 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004640:	61bb      	str	r3, [r7, #24]
      break;
 8004642:	e10b      	b.n	800485c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004644:	4b8c      	ldr	r3, [pc, #560]	; (8004878 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004646:	61bb      	str	r3, [r7, #24]
      break;
 8004648:	e108      	b.n	800485c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800464a:	4b88      	ldr	r3, [pc, #544]	; (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800464c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464e:	f003 0303 	and.w	r3, r3, #3
 8004652:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004654:	4b85      	ldr	r3, [pc, #532]	; (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004658:	091b      	lsrs	r3, r3, #4
 800465a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800465e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004660:	4b82      	ldr	r3, [pc, #520]	; (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800466a:	4b80      	ldr	r3, [pc, #512]	; (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800466c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800466e:	08db      	lsrs	r3, r3, #3
 8004670:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	fb02 f303 	mul.w	r3, r2, r3
 800467a:	ee07 3a90 	vmov	s15, r3
 800467e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004682:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 80e1 	beq.w	8004850 <HAL_RCC_GetSysClockFreq+0x2b8>
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	2b02      	cmp	r3, #2
 8004692:	f000 8083 	beq.w	800479c <HAL_RCC_GetSysClockFreq+0x204>
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2b02      	cmp	r3, #2
 800469a:	f200 80a1 	bhi.w	80047e0 <HAL_RCC_GetSysClockFreq+0x248>
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d003      	beq.n	80046ac <HAL_RCC_GetSysClockFreq+0x114>
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d056      	beq.n	8004758 <HAL_RCC_GetSysClockFreq+0x1c0>
 80046aa:	e099      	b.n	80047e0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046ac:	4b6f      	ldr	r3, [pc, #444]	; (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0320 	and.w	r3, r3, #32
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d02d      	beq.n	8004714 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80046b8:	4b6c      	ldr	r3, [pc, #432]	; (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	08db      	lsrs	r3, r3, #3
 80046be:	f003 0303 	and.w	r3, r3, #3
 80046c2:	4a6b      	ldr	r2, [pc, #428]	; (8004870 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80046c4:	fa22 f303 	lsr.w	r3, r2, r3
 80046c8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	ee07 3a90 	vmov	s15, r3
 80046d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	ee07 3a90 	vmov	s15, r3
 80046da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046e2:	4b62      	ldr	r3, [pc, #392]	; (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ea:	ee07 3a90 	vmov	s15, r3
 80046ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80046f6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800487c <HAL_RCC_GetSysClockFreq+0x2e4>
 80046fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004702:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800470a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800470e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004712:	e087      	b.n	8004824 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	ee07 3a90 	vmov	s15, r3
 800471a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800471e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004880 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004726:	4b51      	ldr	r3, [pc, #324]	; (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800472e:	ee07 3a90 	vmov	s15, r3
 8004732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004736:	ed97 6a02 	vldr	s12, [r7, #8]
 800473a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800487c <HAL_RCC_GetSysClockFreq+0x2e4>
 800473e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004742:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004746:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800474a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800474e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004752:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004756:	e065      	b.n	8004824 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	ee07 3a90 	vmov	s15, r3
 800475e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004762:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004884 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800476a:	4b40      	ldr	r3, [pc, #256]	; (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800476c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004772:	ee07 3a90 	vmov	s15, r3
 8004776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800477a:	ed97 6a02 	vldr	s12, [r7, #8]
 800477e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800487c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800478a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800478e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004796:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800479a:	e043      	b.n	8004824 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	ee07 3a90 	vmov	s15, r3
 80047a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047a6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004888 <HAL_RCC_GetSysClockFreq+0x2f0>
 80047aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ae:	4b2f      	ldr	r3, [pc, #188]	; (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047b6:	ee07 3a90 	vmov	s15, r3
 80047ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047be:	ed97 6a02 	vldr	s12, [r7, #8]
 80047c2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800487c <HAL_RCC_GetSysClockFreq+0x2e4>
 80047c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80047de:	e021      	b.n	8004824 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	ee07 3a90 	vmov	s15, r3
 80047e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ea:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004884 <HAL_RCC_GetSysClockFreq+0x2ec>
 80047ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047f2:	4b1e      	ldr	r3, [pc, #120]	; (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047fa:	ee07 3a90 	vmov	s15, r3
 80047fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004802:	ed97 6a02 	vldr	s12, [r7, #8]
 8004806:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800487c <HAL_RCC_GetSysClockFreq+0x2e4>
 800480a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800480e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004812:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800481a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800481e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004822:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004824:	4b11      	ldr	r3, [pc, #68]	; (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004828:	0a5b      	lsrs	r3, r3, #9
 800482a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800482e:	3301      	adds	r3, #1
 8004830:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	ee07 3a90 	vmov	s15, r3
 8004838:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800483c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004840:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004844:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004848:	ee17 3a90 	vmov	r3, s15
 800484c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800484e:	e005      	b.n	800485c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	61bb      	str	r3, [r7, #24]
      break;
 8004854:	e002      	b.n	800485c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004856:	4b07      	ldr	r3, [pc, #28]	; (8004874 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004858:	61bb      	str	r3, [r7, #24]
      break;
 800485a:	bf00      	nop
  }

  return sysclockfreq;
 800485c:	69bb      	ldr	r3, [r7, #24]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3724      	adds	r7, #36	; 0x24
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	58024400 	.word	0x58024400
 8004870:	03d09000 	.word	0x03d09000
 8004874:	003d0900 	.word	0x003d0900
 8004878:	007a1200 	.word	0x007a1200
 800487c:	46000000 	.word	0x46000000
 8004880:	4c742400 	.word	0x4c742400
 8004884:	4a742400 	.word	0x4a742400
 8004888:	4af42400 	.word	0x4af42400

0800488c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8004892:	f7ff fe81 	bl	8004598 <HAL_RCC_GetSysClockFreq>
 8004896:	4602      	mov	r2, r0
 8004898:	4b10      	ldr	r3, [pc, #64]	; (80048dc <HAL_RCC_GetHCLKFreq+0x50>)
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	0a1b      	lsrs	r3, r3, #8
 800489e:	f003 030f 	and.w	r3, r3, #15
 80048a2:	490f      	ldr	r1, [pc, #60]	; (80048e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80048a4:	5ccb      	ldrb	r3, [r1, r3]
 80048a6:	f003 031f 	and.w	r3, r3, #31
 80048aa:	fa22 f303 	lsr.w	r3, r2, r3
 80048ae:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80048b0:	4b0a      	ldr	r3, [pc, #40]	; (80048dc <HAL_RCC_GetHCLKFreq+0x50>)
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	f003 030f 	and.w	r3, r3, #15
 80048b8:	4a09      	ldr	r2, [pc, #36]	; (80048e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80048ba:	5cd3      	ldrb	r3, [r2, r3]
 80048bc:	f003 031f 	and.w	r3, r3, #31
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	fa22 f303 	lsr.w	r3, r2, r3
 80048c6:	4a07      	ldr	r2, [pc, #28]	; (80048e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80048c8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80048ca:	4a07      	ldr	r2, [pc, #28]	; (80048e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80048d0:	4b04      	ldr	r3, [pc, #16]	; (80048e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80048d2:	681b      	ldr	r3, [r3, #0]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3708      	adds	r7, #8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	58024400 	.word	0x58024400
 80048e0:	0800ae28 	.word	0x0800ae28
 80048e4:	2400005c 	.word	0x2400005c
 80048e8:	24000058 	.word	0x24000058

080048ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80048f0:	f7ff ffcc 	bl	800488c <HAL_RCC_GetHCLKFreq>
 80048f4:	4602      	mov	r2, r0
 80048f6:	4b06      	ldr	r3, [pc, #24]	; (8004910 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	091b      	lsrs	r3, r3, #4
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	4904      	ldr	r1, [pc, #16]	; (8004914 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004902:	5ccb      	ldrb	r3, [r1, r3]
 8004904:	f003 031f 	and.w	r3, r3, #31
 8004908:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800490c:	4618      	mov	r0, r3
 800490e:	bd80      	pop	{r7, pc}
 8004910:	58024400 	.word	0x58024400
 8004914:	0800ae28 	.word	0x0800ae28

08004918 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800491c:	f7ff ffb6 	bl	800488c <HAL_RCC_GetHCLKFreq>
 8004920:	4602      	mov	r2, r0
 8004922:	4b06      	ldr	r3, [pc, #24]	; (800493c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004924:	69db      	ldr	r3, [r3, #28]
 8004926:	0a1b      	lsrs	r3, r3, #8
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	4904      	ldr	r1, [pc, #16]	; (8004940 <HAL_RCC_GetPCLK2Freq+0x28>)
 800492e:	5ccb      	ldrb	r3, [r1, r3]
 8004930:	f003 031f 	and.w	r3, r3, #31
 8004934:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004938:	4618      	mov	r0, r3
 800493a:	bd80      	pop	{r7, pc}
 800493c:	58024400 	.word	0x58024400
 8004940:	0800ae28 	.word	0x0800ae28

08004944 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004948:	b0c8      	sub	sp, #288	; 0x120
 800494a:	af00      	add	r7, sp, #0
 800494c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004950:	2300      	movs	r3, #0
 8004952:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004956:	2300      	movs	r3, #0
 8004958:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800495c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004964:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004968:	2500      	movs	r5, #0
 800496a:	ea54 0305 	orrs.w	r3, r4, r5
 800496e:	d049      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004970:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004976:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800497a:	d02f      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800497c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004980:	d828      	bhi.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004982:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004986:	d01a      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004988:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800498c:	d822      	bhi.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004992:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004996:	d007      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004998:	e01c      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800499a:	4ba7      	ldr	r3, [pc, #668]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800499c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499e:	4aa6      	ldr	r2, [pc, #664]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80049a6:	e01a      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80049a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049ac:	3308      	adds	r3, #8
 80049ae:	2102      	movs	r1, #2
 80049b0:	4618      	mov	r0, r3
 80049b2:	f001 fc43 	bl	800623c <RCCEx_PLL2_Config>
 80049b6:	4603      	mov	r3, r0
 80049b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80049bc:	e00f      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049c2:	3328      	adds	r3, #40	; 0x28
 80049c4:	2102      	movs	r1, #2
 80049c6:	4618      	mov	r0, r3
 80049c8:	f001 fcea 	bl	80063a0 <RCCEx_PLL3_Config>
 80049cc:	4603      	mov	r3, r0
 80049ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80049d2:	e004      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80049da:	e000      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80049dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049de:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10a      	bne.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80049e6:	4b94      	ldr	r3, [pc, #592]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ea:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80049ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049f4:	4a90      	ldr	r2, [pc, #576]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049f6:	430b      	orrs	r3, r1
 80049f8:	6513      	str	r3, [r2, #80]	; 0x50
 80049fa:	e003      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a00:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004a04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004a10:	f04f 0900 	mov.w	r9, #0
 8004a14:	ea58 0309 	orrs.w	r3, r8, r9
 8004a18:	d047      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004a1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a20:	2b04      	cmp	r3, #4
 8004a22:	d82a      	bhi.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004a24:	a201      	add	r2, pc, #4	; (adr r2, 8004a2c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2a:	bf00      	nop
 8004a2c:	08004a41 	.word	0x08004a41
 8004a30:	08004a4f 	.word	0x08004a4f
 8004a34:	08004a65 	.word	0x08004a65
 8004a38:	08004a83 	.word	0x08004a83
 8004a3c:	08004a83 	.word	0x08004a83
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a40:	4b7d      	ldr	r3, [pc, #500]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a44:	4a7c      	ldr	r2, [pc, #496]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a4c:	e01a      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a52:	3308      	adds	r3, #8
 8004a54:	2100      	movs	r1, #0
 8004a56:	4618      	mov	r0, r3
 8004a58:	f001 fbf0 	bl	800623c <RCCEx_PLL2_Config>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a62:	e00f      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a68:	3328      	adds	r3, #40	; 0x28
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f001 fc97 	bl	80063a0 <RCCEx_PLL3_Config>
 8004a72:	4603      	mov	r3, r0
 8004a74:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a78:	e004      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004a80:	e000      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004a82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a84:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10a      	bne.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a8c:	4b6a      	ldr	r3, [pc, #424]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a90:	f023 0107 	bic.w	r1, r3, #7
 8004a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9a:	4a67      	ldr	r2, [pc, #412]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a9c:	430b      	orrs	r3, r1
 8004a9e:	6513      	str	r3, [r2, #80]	; 0x50
 8004aa0:	e003      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004aa6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8004aaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8004ab6:	f04f 0b00 	mov.w	fp, #0
 8004aba:	ea5a 030b 	orrs.w	r3, sl, fp
 8004abe:	d054      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8004ac0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004aca:	d036      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004acc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004ad0:	d82f      	bhi.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ad6:	d032      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004ad8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004adc:	d829      	bhi.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004ade:	2bc0      	cmp	r3, #192	; 0xc0
 8004ae0:	d02f      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8004ae2:	2bc0      	cmp	r3, #192	; 0xc0
 8004ae4:	d825      	bhi.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004ae6:	2b80      	cmp	r3, #128	; 0x80
 8004ae8:	d018      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8004aea:	2b80      	cmp	r3, #128	; 0x80
 8004aec:	d821      	bhi.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d002      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8004af2:	2b40      	cmp	r3, #64	; 0x40
 8004af4:	d007      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8004af6:	e01c      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004af8:	4b4f      	ldr	r3, [pc, #316]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afc:	4a4e      	ldr	r2, [pc, #312]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004afe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004b04:	e01e      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b0a:	3308      	adds	r3, #8
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f001 fb94 	bl	800623c <RCCEx_PLL2_Config>
 8004b14:	4603      	mov	r3, r0
 8004b16:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004b1a:	e013      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b20:	3328      	adds	r3, #40	; 0x28
 8004b22:	2100      	movs	r1, #0
 8004b24:	4618      	mov	r0, r3
 8004b26:	f001 fc3b 	bl	80063a0 <RCCEx_PLL3_Config>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004b30:	e008      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004b38:	e004      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004b3a:	bf00      	nop
 8004b3c:	e002      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004b3e:	bf00      	nop
 8004b40:	e000      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004b42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b44:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10a      	bne.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004b4c:	4b3a      	ldr	r3, [pc, #232]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b50:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004b54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b5a:	4a37      	ldr	r2, [pc, #220]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b5c:	430b      	orrs	r3, r1
 8004b5e:	6513      	str	r3, [r2, #80]	; 0x50
 8004b60:	e003      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b62:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b66:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b72:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004b76:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004b80:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004b84:	460b      	mov	r3, r1
 8004b86:	4313      	orrs	r3, r2
 8004b88:	d05c      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8004b8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b90:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004b94:	d03b      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004b96:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004b9a:	d834      	bhi.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004b9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ba0:	d037      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8004ba2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ba6:	d82e      	bhi.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004ba8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004bac:	d033      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004bae:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004bb2:	d828      	bhi.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bb8:	d01a      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bbe:	d822      	bhi.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d003      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x288>
 8004bc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bc8:	d007      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004bca:	e01c      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bcc:	4b1a      	ldr	r3, [pc, #104]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd0:	4a19      	ldr	r2, [pc, #100]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004bd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004bd8:	e01e      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bde:	3308      	adds	r3, #8
 8004be0:	2100      	movs	r1, #0
 8004be2:	4618      	mov	r0, r3
 8004be4:	f001 fb2a 	bl	800623c <RCCEx_PLL2_Config>
 8004be8:	4603      	mov	r3, r0
 8004bea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004bee:	e013      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004bf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bf4:	3328      	adds	r3, #40	; 0x28
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f001 fbd1 	bl	80063a0 <RCCEx_PLL3_Config>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004c04:	e008      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004c0c:	e004      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004c0e:	bf00      	nop
 8004c10:	e002      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004c12:	bf00      	nop
 8004c14:	e000      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004c16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c18:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10d      	bne.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8004c20:	4b05      	ldr	r3, [pc, #20]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c24:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8004c28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c2e:	4a02      	ldr	r2, [pc, #8]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c30:	430b      	orrs	r3, r1
 8004c32:	6513      	str	r3, [r2, #80]	; 0x50
 8004c34:	e006      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8004c36:	bf00      	nop
 8004c38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c3c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c40:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004c44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004c50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004c54:	2300      	movs	r3, #0
 8004c56:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004c5a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004c5e:	460b      	mov	r3, r1
 8004c60:	4313      	orrs	r3, r2
 8004c62:	d03a      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004c64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c6a:	2b30      	cmp	r3, #48	; 0x30
 8004c6c:	d01f      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004c6e:	2b30      	cmp	r3, #48	; 0x30
 8004c70:	d819      	bhi.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004c72:	2b20      	cmp	r3, #32
 8004c74:	d00c      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004c76:	2b20      	cmp	r3, #32
 8004c78:	d815      	bhi.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d019      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004c7e:	2b10      	cmp	r3, #16
 8004c80:	d111      	bne.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c82:	4bae      	ldr	r3, [pc, #696]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c86:	4aad      	ldr	r2, [pc, #692]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004c8e:	e011      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c94:	3308      	adds	r3, #8
 8004c96:	2102      	movs	r1, #2
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f001 facf 	bl	800623c <RCCEx_PLL2_Config>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004ca4:	e006      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004cac:	e002      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004cae:	bf00      	nop
 8004cb0:	e000      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004cb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cb4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10a      	bne.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004cbc:	4b9f      	ldr	r3, [pc, #636]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cc0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cca:	4a9c      	ldr	r2, [pc, #624]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ccc:	430b      	orrs	r3, r1
 8004cce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cd0:	e003      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004cd6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004cda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004ce6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004cea:	2300      	movs	r3, #0
 8004cec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004cf0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	d051      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d04:	d035      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004d06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d0a:	d82e      	bhi.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004d0c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d10:	d031      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8004d12:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d16:	d828      	bhi.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004d18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d1c:	d01a      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004d1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d22:	d822      	bhi.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d003      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d2c:	d007      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8004d2e:	e01c      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d30:	4b82      	ldr	r3, [pc, #520]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d34:	4a81      	ldr	r2, [pc, #516]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004d3c:	e01c      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d42:	3308      	adds	r3, #8
 8004d44:	2100      	movs	r1, #0
 8004d46:	4618      	mov	r0, r3
 8004d48:	f001 fa78 	bl	800623c <RCCEx_PLL2_Config>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004d52:	e011      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d58:	3328      	adds	r3, #40	; 0x28
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f001 fb1f 	bl	80063a0 <RCCEx_PLL3_Config>
 8004d62:	4603      	mov	r3, r0
 8004d64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004d68:	e006      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004d70:	e002      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004d72:	bf00      	nop
 8004d74:	e000      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004d76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d78:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10a      	bne.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004d80:	4b6e      	ldr	r3, [pc, #440]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d84:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004d88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d8e:	4a6b      	ldr	r2, [pc, #428]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d90:	430b      	orrs	r3, r1
 8004d92:	6513      	str	r3, [r2, #80]	; 0x50
 8004d94:	e003      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d96:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d9a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004daa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004dae:	2300      	movs	r3, #0
 8004db0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004db4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004db8:	460b      	mov	r3, r1
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	d053      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dc8:	d033      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8004dca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dce:	d82c      	bhi.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004dd0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004dd4:	d02f      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8004dd6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004dda:	d826      	bhi.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004ddc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004de0:	d02b      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004de2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004de6:	d820      	bhi.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004de8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dec:	d012      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004dee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004df2:	d81a      	bhi.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d022      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dfc:	d115      	bne.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004dfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e02:	3308      	adds	r3, #8
 8004e04:	2101      	movs	r1, #1
 8004e06:	4618      	mov	r0, r3
 8004e08:	f001 fa18 	bl	800623c <RCCEx_PLL2_Config>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004e12:	e015      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e18:	3328      	adds	r3, #40	; 0x28
 8004e1a:	2101      	movs	r1, #1
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f001 fabf 	bl	80063a0 <RCCEx_PLL3_Config>
 8004e22:	4603      	mov	r3, r0
 8004e24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004e28:	e00a      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004e30:	e006      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004e32:	bf00      	nop
 8004e34:	e004      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004e36:	bf00      	nop
 8004e38:	e002      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004e3a:	bf00      	nop
 8004e3c:	e000      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004e3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10a      	bne.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004e48:	4b3c      	ldr	r3, [pc, #240]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e4c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004e50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e56:	4a39      	ldr	r2, [pc, #228]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e58:	430b      	orrs	r3, r1
 8004e5a:	6513      	str	r3, [r2, #80]	; 0x50
 8004e5c:	e003      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e5e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e62:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004e66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004e72:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e76:	2300      	movs	r3, #0
 8004e78:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e7c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004e80:	460b      	mov	r3, r1
 8004e82:	4313      	orrs	r3, r2
 8004e84:	d060      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004e86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e8e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004e92:	d039      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8004e94:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004e98:	d832      	bhi.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004e9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e9e:	d035      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004ea0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ea4:	d82c      	bhi.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eaa:	d031      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb0:	d826      	bhi.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004eb2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004eb6:	d02d      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004eb8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ebc:	d820      	bhi.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004ebe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ec2:	d012      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004ec4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ec8:	d81a      	bhi.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d024      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004ece:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ed2:	d115      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ed8:	3308      	adds	r3, #8
 8004eda:	2101      	movs	r1, #1
 8004edc:	4618      	mov	r0, r3
 8004ede:	f001 f9ad 	bl	800623c <RCCEx_PLL2_Config>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ee8:	e017      	b.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004eea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eee:	3328      	adds	r3, #40	; 0x28
 8004ef0:	2101      	movs	r1, #1
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f001 fa54 	bl	80063a0 <RCCEx_PLL3_Config>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004efe:	e00c      	b.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004f06:	e008      	b.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004f08:	bf00      	nop
 8004f0a:	e006      	b.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004f0c:	bf00      	nop
 8004f0e:	e004      	b.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004f10:	bf00      	nop
 8004f12:	e002      	b.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004f14:	bf00      	nop
 8004f16:	e000      	b.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004f18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f1a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10e      	bne.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004f22:	4b06      	ldr	r3, [pc, #24]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f26:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004f2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f32:	4a02      	ldr	r2, [pc, #8]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004f34:	430b      	orrs	r3, r1
 8004f36:	6593      	str	r3, [r2, #88]	; 0x58
 8004f38:	e006      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004f3a:	bf00      	nop
 8004f3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f44:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f50:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004f54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f58:	2300      	movs	r3, #0
 8004f5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004f5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004f62:	460b      	mov	r3, r1
 8004f64:	4313      	orrs	r3, r2
 8004f66:	d037      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004f68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f72:	d00e      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004f74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f78:	d816      	bhi.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d018      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004f7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f82:	d111      	bne.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f84:	4bc4      	ldr	r3, [pc, #784]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f88:	4ac3      	ldr	r2, [pc, #780]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004f90:	e00f      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f96:	3308      	adds	r3, #8
 8004f98:	2101      	movs	r1, #1
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f001 f94e 	bl	800623c <RCCEx_PLL2_Config>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004fa6:	e004      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004fae:	e000      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004fb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fb2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10a      	bne.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004fba:	4bb7      	ldr	r3, [pc, #732]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fbe:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004fc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fc8:	4ab3      	ldr	r2, [pc, #716]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fca:	430b      	orrs	r3, r1
 8004fcc:	6513      	str	r3, [r2, #80]	; 0x50
 8004fce:	e003      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004fd4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004fd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004fe4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fe8:	2300      	movs	r3, #0
 8004fea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004fee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	d039      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004ff8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ffe:	2b03      	cmp	r3, #3
 8005000:	d81c      	bhi.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005002:	a201      	add	r2, pc, #4	; (adr r2, 8005008 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005008:	08005045 	.word	0x08005045
 800500c:	08005019 	.word	0x08005019
 8005010:	08005027 	.word	0x08005027
 8005014:	08005045 	.word	0x08005045
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005018:	4b9f      	ldr	r3, [pc, #636]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800501a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501c:	4a9e      	ldr	r2, [pc, #632]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800501e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005022:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005024:	e00f      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005026:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800502a:	3308      	adds	r3, #8
 800502c:	2102      	movs	r1, #2
 800502e:	4618      	mov	r0, r3
 8005030:	f001 f904 	bl	800623c <RCCEx_PLL2_Config>
 8005034:	4603      	mov	r3, r0
 8005036:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800503a:	e004      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005042:	e000      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005044:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005046:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10a      	bne.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800504e:	4b92      	ldr	r3, [pc, #584]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005052:	f023 0103 	bic.w	r1, r3, #3
 8005056:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800505a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800505c:	4a8e      	ldr	r2, [pc, #568]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800505e:	430b      	orrs	r3, r1
 8005060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005062:	e003      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005064:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005068:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800506c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005074:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005078:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800507c:	2300      	movs	r3, #0
 800507e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005082:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005086:	460b      	mov	r3, r1
 8005088:	4313      	orrs	r3, r2
 800508a:	f000 8099 	beq.w	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800508e:	4b83      	ldr	r3, [pc, #524]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a82      	ldr	r2, [pc, #520]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005098:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800509a:	f7fd fbb3 	bl	8002804 <HAL_GetTick>
 800509e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050a2:	e00b      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050a4:	f7fd fbae 	bl	8002804 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	2b64      	cmp	r3, #100	; 0x64
 80050b2:	d903      	bls.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80050ba:	e005      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050bc:	4b77      	ldr	r3, [pc, #476]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0ed      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80050c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d173      	bne.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80050d0:	4b71      	ldr	r3, [pc, #452]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80050dc:	4053      	eors	r3, r2
 80050de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d015      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050e6:	4b6c      	ldr	r3, [pc, #432]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050f2:	4b69      	ldr	r3, [pc, #420]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f6:	4a68      	ldr	r2, [pc, #416]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050fc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050fe:	4b66      	ldr	r3, [pc, #408]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005102:	4a65      	ldr	r2, [pc, #404]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005104:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005108:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800510a:	4a63      	ldr	r2, [pc, #396]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800510c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005110:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005112:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005116:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800511a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800511e:	d118      	bne.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005120:	f7fd fb70 	bl	8002804 <HAL_GetTick>
 8005124:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005128:	e00d      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800512a:	f7fd fb6b 	bl	8002804 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005134:	1ad2      	subs	r2, r2, r3
 8005136:	f241 3388 	movw	r3, #5000	; 0x1388
 800513a:	429a      	cmp	r2, r3
 800513c:	d903      	bls.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8005144:	e005      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005146:	4b54      	ldr	r3, [pc, #336]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d0eb      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005152:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005156:	2b00      	cmp	r3, #0
 8005158:	d129      	bne.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800515a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800515e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005166:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800516a:	d10e      	bne.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800516c:	4b4a      	ldr	r3, [pc, #296]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005174:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005178:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800517c:	091a      	lsrs	r2, r3, #4
 800517e:	4b48      	ldr	r3, [pc, #288]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005180:	4013      	ands	r3, r2
 8005182:	4a45      	ldr	r2, [pc, #276]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005184:	430b      	orrs	r3, r1
 8005186:	6113      	str	r3, [r2, #16]
 8005188:	e005      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800518a:	4b43      	ldr	r3, [pc, #268]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	4a42      	ldr	r2, [pc, #264]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005190:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005194:	6113      	str	r3, [r2, #16]
 8005196:	4b40      	ldr	r3, [pc, #256]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005198:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800519a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800519e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80051a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051a6:	4a3c      	ldr	r2, [pc, #240]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80051a8:	430b      	orrs	r3, r1
 80051aa:	6713      	str	r3, [r2, #112]	; 0x70
 80051ac:	e008      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051ae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80051b2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80051b6:	e003      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80051bc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80051c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c8:	f002 0301 	and.w	r3, r2, #1
 80051cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051d0:	2300      	movs	r3, #0
 80051d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80051d6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80051da:	460b      	mov	r3, r1
 80051dc:	4313      	orrs	r3, r2
 80051de:	f000 8090 	beq.w	8005302 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80051e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051ea:	2b28      	cmp	r3, #40	; 0x28
 80051ec:	d870      	bhi.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80051ee:	a201      	add	r2, pc, #4	; (adr r2, 80051f4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80051f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f4:	080052d9 	.word	0x080052d9
 80051f8:	080052d1 	.word	0x080052d1
 80051fc:	080052d1 	.word	0x080052d1
 8005200:	080052d1 	.word	0x080052d1
 8005204:	080052d1 	.word	0x080052d1
 8005208:	080052d1 	.word	0x080052d1
 800520c:	080052d1 	.word	0x080052d1
 8005210:	080052d1 	.word	0x080052d1
 8005214:	080052a5 	.word	0x080052a5
 8005218:	080052d1 	.word	0x080052d1
 800521c:	080052d1 	.word	0x080052d1
 8005220:	080052d1 	.word	0x080052d1
 8005224:	080052d1 	.word	0x080052d1
 8005228:	080052d1 	.word	0x080052d1
 800522c:	080052d1 	.word	0x080052d1
 8005230:	080052d1 	.word	0x080052d1
 8005234:	080052bb 	.word	0x080052bb
 8005238:	080052d1 	.word	0x080052d1
 800523c:	080052d1 	.word	0x080052d1
 8005240:	080052d1 	.word	0x080052d1
 8005244:	080052d1 	.word	0x080052d1
 8005248:	080052d1 	.word	0x080052d1
 800524c:	080052d1 	.word	0x080052d1
 8005250:	080052d1 	.word	0x080052d1
 8005254:	080052d9 	.word	0x080052d9
 8005258:	080052d1 	.word	0x080052d1
 800525c:	080052d1 	.word	0x080052d1
 8005260:	080052d1 	.word	0x080052d1
 8005264:	080052d1 	.word	0x080052d1
 8005268:	080052d1 	.word	0x080052d1
 800526c:	080052d1 	.word	0x080052d1
 8005270:	080052d1 	.word	0x080052d1
 8005274:	080052d9 	.word	0x080052d9
 8005278:	080052d1 	.word	0x080052d1
 800527c:	080052d1 	.word	0x080052d1
 8005280:	080052d1 	.word	0x080052d1
 8005284:	080052d1 	.word	0x080052d1
 8005288:	080052d1 	.word	0x080052d1
 800528c:	080052d1 	.word	0x080052d1
 8005290:	080052d1 	.word	0x080052d1
 8005294:	080052d9 	.word	0x080052d9
 8005298:	58024400 	.word	0x58024400
 800529c:	58024800 	.word	0x58024800
 80052a0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052a8:	3308      	adds	r3, #8
 80052aa:	2101      	movs	r1, #1
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 ffc5 	bl	800623c <RCCEx_PLL2_Config>
 80052b2:	4603      	mov	r3, r0
 80052b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80052b8:	e00f      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052be:	3328      	adds	r3, #40	; 0x28
 80052c0:	2101      	movs	r1, #1
 80052c2:	4618      	mov	r0, r3
 80052c4:	f001 f86c 	bl	80063a0 <RCCEx_PLL3_Config>
 80052c8:	4603      	mov	r3, r0
 80052ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80052ce:	e004      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80052d6:	e000      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80052d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052da:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10b      	bne.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80052e2:	4bc0      	ldr	r3, [pc, #768]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80052e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80052ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052f2:	4abc      	ldr	r2, [pc, #752]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80052f4:	430b      	orrs	r3, r1
 80052f6:	6553      	str	r3, [r2, #84]	; 0x54
 80052f8:	e003      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80052fe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005302:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530a:	f002 0302 	and.w	r3, r2, #2
 800530e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005312:	2300      	movs	r3, #0
 8005314:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005318:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800531c:	460b      	mov	r3, r1
 800531e:	4313      	orrs	r3, r2
 8005320:	d043      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005322:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005326:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800532a:	2b05      	cmp	r3, #5
 800532c:	d824      	bhi.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800532e:	a201      	add	r2, pc, #4	; (adr r2, 8005334 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8005330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005334:	08005381 	.word	0x08005381
 8005338:	0800534d 	.word	0x0800534d
 800533c:	08005363 	.word	0x08005363
 8005340:	08005381 	.word	0x08005381
 8005344:	08005381 	.word	0x08005381
 8005348:	08005381 	.word	0x08005381
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800534c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005350:	3308      	adds	r3, #8
 8005352:	2101      	movs	r1, #1
 8005354:	4618      	mov	r0, r3
 8005356:	f000 ff71 	bl	800623c <RCCEx_PLL2_Config>
 800535a:	4603      	mov	r3, r0
 800535c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005360:	e00f      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005362:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005366:	3328      	adds	r3, #40	; 0x28
 8005368:	2101      	movs	r1, #1
 800536a:	4618      	mov	r0, r3
 800536c:	f001 f818 	bl	80063a0 <RCCEx_PLL3_Config>
 8005370:	4603      	mov	r3, r0
 8005372:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005376:	e004      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800537e:	e000      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8005380:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005382:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10b      	bne.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800538a:	4b96      	ldr	r3, [pc, #600]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800538c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800538e:	f023 0107 	bic.w	r1, r3, #7
 8005392:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800539a:	4a92      	ldr	r2, [pc, #584]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800539c:	430b      	orrs	r3, r1
 800539e:	6553      	str	r3, [r2, #84]	; 0x54
 80053a0:	e003      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053a2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80053a6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b2:	f002 0304 	and.w	r3, r2, #4
 80053b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053ba:	2300      	movs	r3, #0
 80053bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053c0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80053c4:	460b      	mov	r3, r1
 80053c6:	4313      	orrs	r3, r2
 80053c8:	d043      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80053ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053d2:	2b05      	cmp	r3, #5
 80053d4:	d824      	bhi.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80053d6:	a201      	add	r2, pc, #4	; (adr r2, 80053dc <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80053d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053dc:	08005429 	.word	0x08005429
 80053e0:	080053f5 	.word	0x080053f5
 80053e4:	0800540b 	.word	0x0800540b
 80053e8:	08005429 	.word	0x08005429
 80053ec:	08005429 	.word	0x08005429
 80053f0:	08005429 	.word	0x08005429
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053f8:	3308      	adds	r3, #8
 80053fa:	2101      	movs	r1, #1
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 ff1d 	bl	800623c <RCCEx_PLL2_Config>
 8005402:	4603      	mov	r3, r0
 8005404:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005408:	e00f      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800540a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800540e:	3328      	adds	r3, #40	; 0x28
 8005410:	2101      	movs	r1, #1
 8005412:	4618      	mov	r0, r3
 8005414:	f000 ffc4 	bl	80063a0 <RCCEx_PLL3_Config>
 8005418:	4603      	mov	r3, r0
 800541a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800541e:	e004      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005426:	e000      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8005428:	bf00      	nop
    }

    if (ret == HAL_OK)
 800542a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800542e:	2b00      	cmp	r3, #0
 8005430:	d10b      	bne.n	800544a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005432:	4b6c      	ldr	r3, [pc, #432]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005436:	f023 0107 	bic.w	r1, r3, #7
 800543a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800543e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005442:	4a68      	ldr	r2, [pc, #416]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005444:	430b      	orrs	r3, r1
 8005446:	6593      	str	r3, [r2, #88]	; 0x58
 8005448:	e003      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800544a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800544e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005452:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545a:	f002 0320 	and.w	r3, r2, #32
 800545e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005462:	2300      	movs	r3, #0
 8005464:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005468:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800546c:	460b      	mov	r3, r1
 800546e:	4313      	orrs	r3, r2
 8005470:	d055      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005472:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005476:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800547a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800547e:	d033      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005480:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005484:	d82c      	bhi.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800548a:	d02f      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800548c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005490:	d826      	bhi.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005492:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005496:	d02b      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005498:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800549c:	d820      	bhi.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800549e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054a2:	d012      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80054a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054a8:	d81a      	bhi.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d022      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80054ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054b2:	d115      	bne.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054b8:	3308      	adds	r3, #8
 80054ba:	2100      	movs	r1, #0
 80054bc:	4618      	mov	r0, r3
 80054be:	f000 febd 	bl	800623c <RCCEx_PLL2_Config>
 80054c2:	4603      	mov	r3, r0
 80054c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80054c8:	e015      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80054ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054ce:	3328      	adds	r3, #40	; 0x28
 80054d0:	2102      	movs	r1, #2
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 ff64 	bl	80063a0 <RCCEx_PLL3_Config>
 80054d8:	4603      	mov	r3, r0
 80054da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80054de:	e00a      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80054e6:	e006      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80054e8:	bf00      	nop
 80054ea:	e004      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80054ec:	bf00      	nop
 80054ee:	e002      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80054f0:	bf00      	nop
 80054f2:	e000      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80054f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10b      	bne.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054fe:	4b39      	ldr	r3, [pc, #228]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005502:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005506:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800550a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800550e:	4a35      	ldr	r2, [pc, #212]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005510:	430b      	orrs	r3, r1
 8005512:	6553      	str	r3, [r2, #84]	; 0x54
 8005514:	e003      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005516:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800551a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800551e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005526:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800552a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800552e:	2300      	movs	r3, #0
 8005530:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005534:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005538:	460b      	mov	r3, r1
 800553a:	4313      	orrs	r3, r2
 800553c:	d058      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800553e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005542:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005546:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800554a:	d033      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800554c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005550:	d82c      	bhi.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005556:	d02f      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800555c:	d826      	bhi.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800555e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005562:	d02b      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005564:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005568:	d820      	bhi.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800556a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800556e:	d012      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8005570:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005574:	d81a      	bhi.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005576:	2b00      	cmp	r3, #0
 8005578:	d022      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800557a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800557e:	d115      	bne.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005580:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005584:	3308      	adds	r3, #8
 8005586:	2100      	movs	r1, #0
 8005588:	4618      	mov	r0, r3
 800558a:	f000 fe57 	bl	800623c <RCCEx_PLL2_Config>
 800558e:	4603      	mov	r3, r0
 8005590:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005594:	e015      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005596:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800559a:	3328      	adds	r3, #40	; 0x28
 800559c:	2102      	movs	r1, #2
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 fefe 	bl	80063a0 <RCCEx_PLL3_Config>
 80055a4:	4603      	mov	r3, r0
 80055a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80055aa:	e00a      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80055b2:	e006      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80055b4:	bf00      	nop
 80055b6:	e004      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80055b8:	bf00      	nop
 80055ba:	e002      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80055bc:	bf00      	nop
 80055be:	e000      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80055c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10e      	bne.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80055ca:	4b06      	ldr	r3, [pc, #24]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80055cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ce:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80055d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80055da:	4a02      	ldr	r2, [pc, #8]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80055dc:	430b      	orrs	r3, r1
 80055de:	6593      	str	r3, [r2, #88]	; 0x58
 80055e0:	e006      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80055e2:	bf00      	nop
 80055e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80055ec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80055f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80055fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005600:	2300      	movs	r3, #0
 8005602:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005606:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800560a:	460b      	mov	r3, r1
 800560c:	4313      	orrs	r3, r2
 800560e:	d055      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005610:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005614:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005618:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800561c:	d033      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800561e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005622:	d82c      	bhi.n	800567e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005628:	d02f      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800562a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800562e:	d826      	bhi.n	800567e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005630:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005634:	d02b      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005636:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800563a:	d820      	bhi.n	800567e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800563c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005640:	d012      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8005642:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005646:	d81a      	bhi.n	800567e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005648:	2b00      	cmp	r3, #0
 800564a:	d022      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800564c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005650:	d115      	bne.n	800567e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005652:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005656:	3308      	adds	r3, #8
 8005658:	2100      	movs	r1, #0
 800565a:	4618      	mov	r0, r3
 800565c:	f000 fdee 	bl	800623c <RCCEx_PLL2_Config>
 8005660:	4603      	mov	r3, r0
 8005662:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005666:	e015      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005668:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800566c:	3328      	adds	r3, #40	; 0x28
 800566e:	2102      	movs	r1, #2
 8005670:	4618      	mov	r0, r3
 8005672:	f000 fe95 	bl	80063a0 <RCCEx_PLL3_Config>
 8005676:	4603      	mov	r3, r0
 8005678:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800567c:	e00a      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005684:	e006      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005686:	bf00      	nop
 8005688:	e004      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800568a:	bf00      	nop
 800568c:	e002      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800568e:	bf00      	nop
 8005690:	e000      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005692:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005694:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10b      	bne.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800569c:	4ba1      	ldr	r3, [pc, #644]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800569e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80056a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80056ac:	4a9d      	ldr	r2, [pc, #628]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80056ae:	430b      	orrs	r3, r1
 80056b0:	6593      	str	r3, [r2, #88]	; 0x58
 80056b2:	e003      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80056b8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80056bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c4:	f002 0308 	and.w	r3, r2, #8
 80056c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80056cc:	2300      	movs	r3, #0
 80056ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80056d2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80056d6:	460b      	mov	r3, r1
 80056d8:	4313      	orrs	r3, r2
 80056da:	d01e      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80056dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e8:	d10c      	bne.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80056ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056ee:	3328      	adds	r3, #40	; 0x28
 80056f0:	2102      	movs	r1, #2
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 fe54 	bl	80063a0 <RCCEx_PLL3_Config>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d002      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005704:	4b87      	ldr	r3, [pc, #540]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005708:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800570c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005710:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005714:	4a83      	ldr	r2, [pc, #524]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005716:	430b      	orrs	r3, r1
 8005718:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800571a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800571e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005722:	f002 0310 	and.w	r3, r2, #16
 8005726:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800572a:	2300      	movs	r3, #0
 800572c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005730:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005734:	460b      	mov	r3, r1
 8005736:	4313      	orrs	r3, r2
 8005738:	d01e      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800573a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800573e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005746:	d10c      	bne.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005748:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800574c:	3328      	adds	r3, #40	; 0x28
 800574e:	2102      	movs	r1, #2
 8005750:	4618      	mov	r0, r3
 8005752:	f000 fe25 	bl	80063a0 <RCCEx_PLL3_Config>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d002      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005762:	4b70      	ldr	r3, [pc, #448]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005766:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800576a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800576e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005772:	4a6c      	ldr	r2, [pc, #432]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005774:	430b      	orrs	r3, r1
 8005776:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005778:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800577c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005780:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005784:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005788:	2300      	movs	r3, #0
 800578a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800578e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005792:	460b      	mov	r3, r1
 8005794:	4313      	orrs	r3, r2
 8005796:	d03e      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005798:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800579c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80057a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057a4:	d022      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80057a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057aa:	d81b      	bhi.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d003      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80057b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057b4:	d00b      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80057b6:	e015      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057bc:	3308      	adds	r3, #8
 80057be:	2100      	movs	r1, #0
 80057c0:	4618      	mov	r0, r3
 80057c2:	f000 fd3b 	bl	800623c <RCCEx_PLL2_Config>
 80057c6:	4603      	mov	r3, r0
 80057c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80057cc:	e00f      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80057ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057d2:	3328      	adds	r3, #40	; 0x28
 80057d4:	2102      	movs	r1, #2
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 fde2 	bl	80063a0 <RCCEx_PLL3_Config>
 80057dc:	4603      	mov	r3, r0
 80057de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80057e2:	e004      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80057ea:	e000      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80057ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10b      	bne.n	800580e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057f6:	4b4b      	ldr	r3, [pc, #300]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80057f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057fa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80057fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005802:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005806:	4a47      	ldr	r2, [pc, #284]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005808:	430b      	orrs	r3, r1
 800580a:	6593      	str	r3, [r2, #88]	; 0x58
 800580c:	e003      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800580e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005812:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005816:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800581a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005822:	67bb      	str	r3, [r7, #120]	; 0x78
 8005824:	2300      	movs	r3, #0
 8005826:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005828:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800582c:	460b      	mov	r3, r1
 800582e:	4313      	orrs	r3, r2
 8005830:	d03b      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005832:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800583a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800583e:	d01f      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8005840:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005844:	d818      	bhi.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005846:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800584a:	d003      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800584c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005850:	d007      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8005852:	e011      	b.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005854:	4b33      	ldr	r3, [pc, #204]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005858:	4a32      	ldr	r2, [pc, #200]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800585a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800585e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005860:	e00f      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005862:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005866:	3328      	adds	r3, #40	; 0x28
 8005868:	2101      	movs	r1, #1
 800586a:	4618      	mov	r0, r3
 800586c:	f000 fd98 	bl	80063a0 <RCCEx_PLL3_Config>
 8005870:	4603      	mov	r3, r0
 8005872:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8005876:	e004      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800587e:	e000      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8005880:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005882:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10b      	bne.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800588a:	4b26      	ldr	r3, [pc, #152]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800588c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800588e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005892:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800589a:	4a22      	ldr	r2, [pc, #136]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800589c:	430b      	orrs	r3, r1
 800589e:	6553      	str	r3, [r2, #84]	; 0x54
 80058a0:	e003      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058a2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80058a6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80058aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80058b6:	673b      	str	r3, [r7, #112]	; 0x70
 80058b8:	2300      	movs	r3, #0
 80058ba:	677b      	str	r3, [r7, #116]	; 0x74
 80058bc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80058c0:	460b      	mov	r3, r1
 80058c2:	4313      	orrs	r3, r2
 80058c4:	d034      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80058c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d003      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80058d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058d4:	d007      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80058d6:	e011      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058d8:	4b12      	ldr	r3, [pc, #72]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80058da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058dc:	4a11      	ldr	r2, [pc, #68]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80058de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80058e4:	e00e      	b.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058ea:	3308      	adds	r3, #8
 80058ec:	2102      	movs	r1, #2
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 fca4 	bl	800623c <RCCEx_PLL2_Config>
 80058f4:	4603      	mov	r3, r0
 80058f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80058fa:	e003      	b.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005902:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005904:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10d      	bne.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800590c:	4b05      	ldr	r3, [pc, #20]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800590e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005910:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005914:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800591a:	4a02      	ldr	r2, [pc, #8]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800591c:	430b      	orrs	r3, r1
 800591e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005920:	e006      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8005922:	bf00      	nop
 8005924:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005928:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800592c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005930:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005938:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800593c:	66bb      	str	r3, [r7, #104]	; 0x68
 800593e:	2300      	movs	r3, #0
 8005940:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005942:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005946:	460b      	mov	r3, r1
 8005948:	4313      	orrs	r3, r2
 800594a:	d00c      	beq.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800594c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005950:	3328      	adds	r3, #40	; 0x28
 8005952:	2102      	movs	r1, #2
 8005954:	4618      	mov	r0, r3
 8005956:	f000 fd23 	bl	80063a0 <RCCEx_PLL3_Config>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d002      	beq.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005966:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800596a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005972:	663b      	str	r3, [r7, #96]	; 0x60
 8005974:	2300      	movs	r3, #0
 8005976:	667b      	str	r3, [r7, #100]	; 0x64
 8005978:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800597c:	460b      	mov	r3, r1
 800597e:	4313      	orrs	r3, r2
 8005980:	d038      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005982:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800598a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800598e:	d018      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8005990:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005994:	d811      	bhi.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8005996:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800599a:	d014      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800599c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059a0:	d80b      	bhi.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d011      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80059a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059aa:	d106      	bne.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059ac:	4bc3      	ldr	r3, [pc, #780]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80059ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b0:	4ac2      	ldr	r2, [pc, #776]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80059b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80059b8:	e008      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80059c0:	e004      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80059c2:	bf00      	nop
 80059c4:	e002      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80059c6:	bf00      	nop
 80059c8:	e000      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80059ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10b      	bne.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80059d4:	4bb9      	ldr	r3, [pc, #740]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80059d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80059dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e4:	4ab5      	ldr	r2, [pc, #724]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80059e6:	430b      	orrs	r3, r1
 80059e8:	6553      	str	r3, [r2, #84]	; 0x54
 80059ea:	e003      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80059f0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80059f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005a00:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a02:	2300      	movs	r3, #0
 8005a04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a06:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	d009      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005a10:	4baa      	ldr	r3, [pc, #680]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a14:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005a18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a1e:	4aa7      	ldr	r2, [pc, #668]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a20:	430b      	orrs	r3, r1
 8005a22:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005a30:	653b      	str	r3, [r7, #80]	; 0x50
 8005a32:	2300      	movs	r3, #0
 8005a34:	657b      	str	r3, [r7, #84]	; 0x54
 8005a36:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	d009      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a40:	4b9e      	ldr	r3, [pc, #632]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a44:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005a48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a4e:	4a9b      	ldr	r2, [pc, #620]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a50:	430b      	orrs	r3, r1
 8005a52:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005a54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005a60:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a62:	2300      	movs	r3, #0
 8005a64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a66:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	d009      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005a70:	4b92      	ldr	r3, [pc, #584]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a74:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8005a78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a7e:	4a8f      	ldr	r2, [pc, #572]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a80:	430b      	orrs	r3, r1
 8005a82:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005a84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005a90:	643b      	str	r3, [r7, #64]	; 0x40
 8005a92:	2300      	movs	r3, #0
 8005a94:	647b      	str	r3, [r7, #68]	; 0x44
 8005a96:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	d00e      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005aa0:	4b86      	ldr	r3, [pc, #536]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	4a85      	ldr	r2, [pc, #532]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005aa6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005aaa:	6113      	str	r3, [r2, #16]
 8005aac:	4b83      	ldr	r3, [pc, #524]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005aae:	6919      	ldr	r1, [r3, #16]
 8005ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ab4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005ab8:	4a80      	ldr	r2, [pc, #512]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005aba:	430b      	orrs	r3, r1
 8005abc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005abe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac6:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005aca:	63bb      	str	r3, [r7, #56]	; 0x38
 8005acc:	2300      	movs	r3, #0
 8005ace:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ad0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	d009      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005ada:	4b78      	ldr	r3, [pc, #480]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ade:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005ae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae8:	4a74      	ldr	r2, [pc, #464]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005aea:	430b      	orrs	r3, r1
 8005aec:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005aee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005afa:	633b      	str	r3, [r7, #48]	; 0x30
 8005afc:	2300      	movs	r3, #0
 8005afe:	637b      	str	r3, [r7, #52]	; 0x34
 8005b00:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005b04:	460b      	mov	r3, r1
 8005b06:	4313      	orrs	r3, r2
 8005b08:	d00a      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005b0a:	4b6c      	ldr	r3, [pc, #432]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b0e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005b12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b1a:	4a68      	ldr	r2, [pc, #416]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005b1c:	430b      	orrs	r3, r1
 8005b1e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005b20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b28:	2100      	movs	r1, #0
 8005b2a:	62b9      	str	r1, [r7, #40]	; 0x28
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b32:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005b36:	460b      	mov	r3, r1
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	d011      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b40:	3308      	adds	r3, #8
 8005b42:	2100      	movs	r1, #0
 8005b44:	4618      	mov	r0, r3
 8005b46:	f000 fb79 	bl	800623c <RCCEx_PLL2_Config>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005b50:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d003      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005b5c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005b60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b68:	2100      	movs	r1, #0
 8005b6a:	6239      	str	r1, [r7, #32]
 8005b6c:	f003 0302 	and.w	r3, r3, #2
 8005b70:	627b      	str	r3, [r7, #36]	; 0x24
 8005b72:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005b76:	460b      	mov	r3, r1
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	d011      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b80:	3308      	adds	r3, #8
 8005b82:	2101      	movs	r1, #1
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 fb59 	bl	800623c <RCCEx_PLL2_Config>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005b90:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d003      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b98:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005b9c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005ba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba8:	2100      	movs	r1, #0
 8005baa:	61b9      	str	r1, [r7, #24]
 8005bac:	f003 0304 	and.w	r3, r3, #4
 8005bb0:	61fb      	str	r3, [r7, #28]
 8005bb2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	d011      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005bbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bc0:	3308      	adds	r3, #8
 8005bc2:	2102      	movs	r1, #2
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f000 fb39 	bl	800623c <RCCEx_PLL2_Config>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005bd0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d003      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005bdc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005be0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be8:	2100      	movs	r1, #0
 8005bea:	6139      	str	r1, [r7, #16]
 8005bec:	f003 0308 	and.w	r3, r3, #8
 8005bf0:	617b      	str	r3, [r7, #20]
 8005bf2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	d011      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c00:	3328      	adds	r3, #40	; 0x28
 8005c02:	2100      	movs	r1, #0
 8005c04:	4618      	mov	r0, r3
 8005c06:	f000 fbcb 	bl	80063a0 <RCCEx_PLL3_Config>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8005c10:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d003      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c18:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c1c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c28:	2100      	movs	r1, #0
 8005c2a:	60b9      	str	r1, [r7, #8]
 8005c2c:	f003 0310 	and.w	r3, r3, #16
 8005c30:	60fb      	str	r3, [r7, #12]
 8005c32:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005c36:	460b      	mov	r3, r1
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	d011      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c40:	3328      	adds	r3, #40	; 0x28
 8005c42:	2101      	movs	r1, #1
 8005c44:	4618      	mov	r0, r3
 8005c46:	f000 fbab 	bl	80063a0 <RCCEx_PLL3_Config>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005c50:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d003      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c5c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005c60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c68:	2100      	movs	r1, #0
 8005c6a:	6039      	str	r1, [r7, #0]
 8005c6c:	f003 0320 	and.w	r3, r3, #32
 8005c70:	607b      	str	r3, [r7, #4]
 8005c72:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005c76:	460b      	mov	r3, r1
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	d011      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c80:	3328      	adds	r3, #40	; 0x28
 8005c82:	2102      	movs	r1, #2
 8005c84:	4618      	mov	r0, r3
 8005c86:	f000 fb8b 	bl	80063a0 <RCCEx_PLL3_Config>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005c90:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d003      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c98:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c9c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8005ca0:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d101      	bne.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	e000      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cba:	bf00      	nop
 8005cbc:	58024400 	.word	0x58024400

08005cc0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005cc4:	f7fe fde2 	bl	800488c <HAL_RCC_GetHCLKFreq>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	4b06      	ldr	r3, [pc, #24]	; (8005ce4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	091b      	lsrs	r3, r3, #4
 8005cd0:	f003 0307 	and.w	r3, r3, #7
 8005cd4:	4904      	ldr	r1, [pc, #16]	; (8005ce8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005cd6:	5ccb      	ldrb	r3, [r1, r3]
 8005cd8:	f003 031f 	and.w	r3, r3, #31
 8005cdc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	58024400 	.word	0x58024400
 8005ce8:	0800ae28 	.word	0x0800ae28

08005cec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b089      	sub	sp, #36	; 0x24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005cf4:	4ba1      	ldr	r3, [pc, #644]	; (8005f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf8:	f003 0303 	and.w	r3, r3, #3
 8005cfc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005cfe:	4b9f      	ldr	r3, [pc, #636]	; (8005f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d02:	0b1b      	lsrs	r3, r3, #12
 8005d04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d08:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005d0a:	4b9c      	ldr	r3, [pc, #624]	; (8005f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0e:	091b      	lsrs	r3, r3, #4
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005d16:	4b99      	ldr	r3, [pc, #612]	; (8005f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1a:	08db      	lsrs	r3, r3, #3
 8005d1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	fb02 f303 	mul.w	r3, r2, r3
 8005d26:	ee07 3a90 	vmov	s15, r3
 8005d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f000 8111 	beq.w	8005f5c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	f000 8083 	beq.w	8005e48 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	f200 80a1 	bhi.w	8005e8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d003      	beq.n	8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d056      	beq.n	8005e04 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005d56:	e099      	b.n	8005e8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d58:	4b88      	ldr	r3, [pc, #544]	; (8005f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0320 	and.w	r3, r3, #32
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d02d      	beq.n	8005dc0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d64:	4b85      	ldr	r3, [pc, #532]	; (8005f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	08db      	lsrs	r3, r3, #3
 8005d6a:	f003 0303 	and.w	r3, r3, #3
 8005d6e:	4a84      	ldr	r2, [pc, #528]	; (8005f80 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005d70:	fa22 f303 	lsr.w	r3, r2, r3
 8005d74:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	ee07 3a90 	vmov	s15, r3
 8005d7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	ee07 3a90 	vmov	s15, r3
 8005d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d8e:	4b7b      	ldr	r3, [pc, #492]	; (8005f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d96:	ee07 3a90 	vmov	s15, r3
 8005d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005da2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005f84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005dbe:	e087      	b.n	8005ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	ee07 3a90 	vmov	s15, r3
 8005dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005f88 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dd2:	4b6a      	ldr	r3, [pc, #424]	; (8005f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dda:	ee07 3a90 	vmov	s15, r3
 8005dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005de2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005de6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005f84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005dea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005df2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e02:	e065      	b.n	8005ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	ee07 3a90 	vmov	s15, r3
 8005e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e0e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005f8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e16:	4b59      	ldr	r3, [pc, #356]	; (8005f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e1e:	ee07 3a90 	vmov	s15, r3
 8005e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e26:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e2a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005f84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e46:	e043      	b.n	8005ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	ee07 3a90 	vmov	s15, r3
 8005e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e52:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005f90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e5a:	4b48      	ldr	r3, [pc, #288]	; (8005f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e62:	ee07 3a90 	vmov	s15, r3
 8005e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e6e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005f84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e8a:	e021      	b.n	8005ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	ee07 3a90 	vmov	s15, r3
 8005e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e96:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005f8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e9e:	4b37      	ldr	r3, [pc, #220]	; (8005f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ea6:	ee07 3a90 	vmov	s15, r3
 8005eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eae:	ed97 6a03 	vldr	s12, [r7, #12]
 8005eb2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005f84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ebe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ece:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005ed0:	4b2a      	ldr	r3, [pc, #168]	; (8005f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed4:	0a5b      	lsrs	r3, r3, #9
 8005ed6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eda:	ee07 3a90 	vmov	s15, r3
 8005ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ee6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005eea:	edd7 6a07 	vldr	s13, [r7, #28]
 8005eee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ef2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ef6:	ee17 2a90 	vmov	r2, s15
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005efe:	4b1f      	ldr	r3, [pc, #124]	; (8005f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f02:	0c1b      	lsrs	r3, r3, #16
 8005f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f08:	ee07 3a90 	vmov	s15, r3
 8005f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f18:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f24:	ee17 2a90 	vmov	r2, s15
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005f2c:	4b13      	ldr	r3, [pc, #76]	; (8005f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f30:	0e1b      	lsrs	r3, r3, #24
 8005f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f36:	ee07 3a90 	vmov	s15, r3
 8005f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f46:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f52:	ee17 2a90 	vmov	r2, s15
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005f5a:	e008      	b.n	8005f6e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	609a      	str	r2, [r3, #8]
}
 8005f6e:	bf00      	nop
 8005f70:	3724      	adds	r7, #36	; 0x24
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	58024400 	.word	0x58024400
 8005f80:	03d09000 	.word	0x03d09000
 8005f84:	46000000 	.word	0x46000000
 8005f88:	4c742400 	.word	0x4c742400
 8005f8c:	4a742400 	.word	0x4a742400
 8005f90:	4af42400 	.word	0x4af42400

08005f94 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b089      	sub	sp, #36	; 0x24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f9c:	4ba1      	ldr	r3, [pc, #644]	; (8006224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa0:	f003 0303 	and.w	r3, r3, #3
 8005fa4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005fa6:	4b9f      	ldr	r3, [pc, #636]	; (8006224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005faa:	0d1b      	lsrs	r3, r3, #20
 8005fac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fb0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005fb2:	4b9c      	ldr	r3, [pc, #624]	; (8006224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb6:	0a1b      	lsrs	r3, r3, #8
 8005fb8:	f003 0301 	and.w	r3, r3, #1
 8005fbc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005fbe:	4b99      	ldr	r3, [pc, #612]	; (8006224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fc2:	08db      	lsrs	r3, r3, #3
 8005fc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	fb02 f303 	mul.w	r3, r2, r3
 8005fce:	ee07 3a90 	vmov	s15, r3
 8005fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fd6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f000 8111 	beq.w	8006204 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	f000 8083 	beq.w	80060f0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	f200 80a1 	bhi.w	8006134 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d003      	beq.n	8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d056      	beq.n	80060ac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005ffe:	e099      	b.n	8006134 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006000:	4b88      	ldr	r3, [pc, #544]	; (8006224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0320 	and.w	r3, r3, #32
 8006008:	2b00      	cmp	r3, #0
 800600a:	d02d      	beq.n	8006068 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800600c:	4b85      	ldr	r3, [pc, #532]	; (8006224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	08db      	lsrs	r3, r3, #3
 8006012:	f003 0303 	and.w	r3, r3, #3
 8006016:	4a84      	ldr	r2, [pc, #528]	; (8006228 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006018:	fa22 f303 	lsr.w	r3, r2, r3
 800601c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	ee07 3a90 	vmov	s15, r3
 8006024:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	ee07 3a90 	vmov	s15, r3
 800602e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006036:	4b7b      	ldr	r3, [pc, #492]	; (8006224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800603e:	ee07 3a90 	vmov	s15, r3
 8006042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006046:	ed97 6a03 	vldr	s12, [r7, #12]
 800604a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800622c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800604e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006056:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800605a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800605e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006062:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006066:	e087      	b.n	8006178 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	ee07 3a90 	vmov	s15, r3
 800606e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006072:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006230 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800607a:	4b6a      	ldr	r3, [pc, #424]	; (8006224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800607c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006082:	ee07 3a90 	vmov	s15, r3
 8006086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800608a:	ed97 6a03 	vldr	s12, [r7, #12]
 800608e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800622c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800609a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800609e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060aa:	e065      	b.n	8006178 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	ee07 3a90 	vmov	s15, r3
 80060b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006234 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80060ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060be:	4b59      	ldr	r3, [pc, #356]	; (8006224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060c6:	ee07 3a90 	vmov	s15, r3
 80060ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80060d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800622c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060ee:	e043      	b.n	8006178 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	ee07 3a90 	vmov	s15, r3
 80060f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006238 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80060fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006102:	4b48      	ldr	r3, [pc, #288]	; (8006224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800610a:	ee07 3a90 	vmov	s15, r3
 800610e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006112:	ed97 6a03 	vldr	s12, [r7, #12]
 8006116:	eddf 5a45 	vldr	s11, [pc, #276]	; 800622c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800611a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800611e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800612a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800612e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006132:	e021      	b.n	8006178 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	ee07 3a90 	vmov	s15, r3
 800613a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800613e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006234 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006146:	4b37      	ldr	r3, [pc, #220]	; (8006224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800614e:	ee07 3a90 	vmov	s15, r3
 8006152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006156:	ed97 6a03 	vldr	s12, [r7, #12]
 800615a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800622c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800615e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800616a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800616e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006172:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006176:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006178:	4b2a      	ldr	r3, [pc, #168]	; (8006224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800617a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617c:	0a5b      	lsrs	r3, r3, #9
 800617e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006182:	ee07 3a90 	vmov	s15, r3
 8006186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800618a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800618e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006192:	edd7 6a07 	vldr	s13, [r7, #28]
 8006196:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800619a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800619e:	ee17 2a90 	vmov	r2, s15
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80061a6:	4b1f      	ldr	r3, [pc, #124]	; (8006224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061aa:	0c1b      	lsrs	r3, r3, #16
 80061ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061b0:	ee07 3a90 	vmov	s15, r3
 80061b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80061c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061cc:	ee17 2a90 	vmov	r2, s15
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80061d4:	4b13      	ldr	r3, [pc, #76]	; (8006224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d8:	0e1b      	lsrs	r3, r3, #24
 80061da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061de:	ee07 3a90 	vmov	s15, r3
 80061e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80061f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061fa:	ee17 2a90 	vmov	r2, s15
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006202:	e008      	b.n	8006216 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	609a      	str	r2, [r3, #8]
}
 8006216:	bf00      	nop
 8006218:	3724      	adds	r7, #36	; 0x24
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	58024400 	.word	0x58024400
 8006228:	03d09000 	.word	0x03d09000
 800622c:	46000000 	.word	0x46000000
 8006230:	4c742400 	.word	0x4c742400
 8006234:	4a742400 	.word	0x4a742400
 8006238:	4af42400 	.word	0x4af42400

0800623c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006246:	2300      	movs	r3, #0
 8006248:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800624a:	4b53      	ldr	r3, [pc, #332]	; (8006398 <RCCEx_PLL2_Config+0x15c>)
 800624c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800624e:	f003 0303 	and.w	r3, r3, #3
 8006252:	2b03      	cmp	r3, #3
 8006254:	d101      	bne.n	800625a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e099      	b.n	800638e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800625a:	4b4f      	ldr	r3, [pc, #316]	; (8006398 <RCCEx_PLL2_Config+0x15c>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a4e      	ldr	r2, [pc, #312]	; (8006398 <RCCEx_PLL2_Config+0x15c>)
 8006260:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006264:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006266:	f7fc facd 	bl	8002804 <HAL_GetTick>
 800626a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800626c:	e008      	b.n	8006280 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800626e:	f7fc fac9 	bl	8002804 <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	2b02      	cmp	r3, #2
 800627a:	d901      	bls.n	8006280 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e086      	b.n	800638e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006280:	4b45      	ldr	r3, [pc, #276]	; (8006398 <RCCEx_PLL2_Config+0x15c>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1f0      	bne.n	800626e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800628c:	4b42      	ldr	r3, [pc, #264]	; (8006398 <RCCEx_PLL2_Config+0x15c>)
 800628e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006290:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	031b      	lsls	r3, r3, #12
 800629a:	493f      	ldr	r1, [pc, #252]	; (8006398 <RCCEx_PLL2_Config+0x15c>)
 800629c:	4313      	orrs	r3, r2
 800629e:	628b      	str	r3, [r1, #40]	; 0x28
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	3b01      	subs	r3, #1
 80062a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	3b01      	subs	r3, #1
 80062b0:	025b      	lsls	r3, r3, #9
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	431a      	orrs	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	3b01      	subs	r3, #1
 80062bc:	041b      	lsls	r3, r3, #16
 80062be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80062c2:	431a      	orrs	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	3b01      	subs	r3, #1
 80062ca:	061b      	lsls	r3, r3, #24
 80062cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80062d0:	4931      	ldr	r1, [pc, #196]	; (8006398 <RCCEx_PLL2_Config+0x15c>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80062d6:	4b30      	ldr	r3, [pc, #192]	; (8006398 <RCCEx_PLL2_Config+0x15c>)
 80062d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	492d      	ldr	r1, [pc, #180]	; (8006398 <RCCEx_PLL2_Config+0x15c>)
 80062e4:	4313      	orrs	r3, r2
 80062e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80062e8:	4b2b      	ldr	r3, [pc, #172]	; (8006398 <RCCEx_PLL2_Config+0x15c>)
 80062ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ec:	f023 0220 	bic.w	r2, r3, #32
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	4928      	ldr	r1, [pc, #160]	; (8006398 <RCCEx_PLL2_Config+0x15c>)
 80062f6:	4313      	orrs	r3, r2
 80062f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80062fa:	4b27      	ldr	r3, [pc, #156]	; (8006398 <RCCEx_PLL2_Config+0x15c>)
 80062fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fe:	4a26      	ldr	r2, [pc, #152]	; (8006398 <RCCEx_PLL2_Config+0x15c>)
 8006300:	f023 0310 	bic.w	r3, r3, #16
 8006304:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006306:	4b24      	ldr	r3, [pc, #144]	; (8006398 <RCCEx_PLL2_Config+0x15c>)
 8006308:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800630a:	4b24      	ldr	r3, [pc, #144]	; (800639c <RCCEx_PLL2_Config+0x160>)
 800630c:	4013      	ands	r3, r2
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	69d2      	ldr	r2, [r2, #28]
 8006312:	00d2      	lsls	r2, r2, #3
 8006314:	4920      	ldr	r1, [pc, #128]	; (8006398 <RCCEx_PLL2_Config+0x15c>)
 8006316:	4313      	orrs	r3, r2
 8006318:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800631a:	4b1f      	ldr	r3, [pc, #124]	; (8006398 <RCCEx_PLL2_Config+0x15c>)
 800631c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631e:	4a1e      	ldr	r2, [pc, #120]	; (8006398 <RCCEx_PLL2_Config+0x15c>)
 8006320:	f043 0310 	orr.w	r3, r3, #16
 8006324:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d106      	bne.n	800633a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800632c:	4b1a      	ldr	r3, [pc, #104]	; (8006398 <RCCEx_PLL2_Config+0x15c>)
 800632e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006330:	4a19      	ldr	r2, [pc, #100]	; (8006398 <RCCEx_PLL2_Config+0x15c>)
 8006332:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006336:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006338:	e00f      	b.n	800635a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d106      	bne.n	800634e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006340:	4b15      	ldr	r3, [pc, #84]	; (8006398 <RCCEx_PLL2_Config+0x15c>)
 8006342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006344:	4a14      	ldr	r2, [pc, #80]	; (8006398 <RCCEx_PLL2_Config+0x15c>)
 8006346:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800634a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800634c:	e005      	b.n	800635a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800634e:	4b12      	ldr	r3, [pc, #72]	; (8006398 <RCCEx_PLL2_Config+0x15c>)
 8006350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006352:	4a11      	ldr	r2, [pc, #68]	; (8006398 <RCCEx_PLL2_Config+0x15c>)
 8006354:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006358:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800635a:	4b0f      	ldr	r3, [pc, #60]	; (8006398 <RCCEx_PLL2_Config+0x15c>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a0e      	ldr	r2, [pc, #56]	; (8006398 <RCCEx_PLL2_Config+0x15c>)
 8006360:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006364:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006366:	f7fc fa4d 	bl	8002804 <HAL_GetTick>
 800636a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800636c:	e008      	b.n	8006380 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800636e:	f7fc fa49 	bl	8002804 <HAL_GetTick>
 8006372:	4602      	mov	r2, r0
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	2b02      	cmp	r3, #2
 800637a:	d901      	bls.n	8006380 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e006      	b.n	800638e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006380:	4b05      	ldr	r3, [pc, #20]	; (8006398 <RCCEx_PLL2_Config+0x15c>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d0f0      	beq.n	800636e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800638c:	7bfb      	ldrb	r3, [r7, #15]
}
 800638e:	4618      	mov	r0, r3
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	58024400 	.word	0x58024400
 800639c:	ffff0007 	.word	0xffff0007

080063a0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80063ae:	4b53      	ldr	r3, [pc, #332]	; (80064fc <RCCEx_PLL3_Config+0x15c>)
 80063b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b2:	f003 0303 	and.w	r3, r3, #3
 80063b6:	2b03      	cmp	r3, #3
 80063b8:	d101      	bne.n	80063be <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e099      	b.n	80064f2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80063be:	4b4f      	ldr	r3, [pc, #316]	; (80064fc <RCCEx_PLL3_Config+0x15c>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a4e      	ldr	r2, [pc, #312]	; (80064fc <RCCEx_PLL3_Config+0x15c>)
 80063c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063ca:	f7fc fa1b 	bl	8002804 <HAL_GetTick>
 80063ce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80063d0:	e008      	b.n	80063e4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80063d2:	f7fc fa17 	bl	8002804 <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d901      	bls.n	80063e4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e086      	b.n	80064f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80063e4:	4b45      	ldr	r3, [pc, #276]	; (80064fc <RCCEx_PLL3_Config+0x15c>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1f0      	bne.n	80063d2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80063f0:	4b42      	ldr	r3, [pc, #264]	; (80064fc <RCCEx_PLL3_Config+0x15c>)
 80063f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	051b      	lsls	r3, r3, #20
 80063fe:	493f      	ldr	r1, [pc, #252]	; (80064fc <RCCEx_PLL3_Config+0x15c>)
 8006400:	4313      	orrs	r3, r2
 8006402:	628b      	str	r3, [r1, #40]	; 0x28
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	3b01      	subs	r3, #1
 800640a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	3b01      	subs	r3, #1
 8006414:	025b      	lsls	r3, r3, #9
 8006416:	b29b      	uxth	r3, r3
 8006418:	431a      	orrs	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	3b01      	subs	r3, #1
 8006420:	041b      	lsls	r3, r3, #16
 8006422:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006426:	431a      	orrs	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	3b01      	subs	r3, #1
 800642e:	061b      	lsls	r3, r3, #24
 8006430:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006434:	4931      	ldr	r1, [pc, #196]	; (80064fc <RCCEx_PLL3_Config+0x15c>)
 8006436:	4313      	orrs	r3, r2
 8006438:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800643a:	4b30      	ldr	r3, [pc, #192]	; (80064fc <RCCEx_PLL3_Config+0x15c>)
 800643c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	492d      	ldr	r1, [pc, #180]	; (80064fc <RCCEx_PLL3_Config+0x15c>)
 8006448:	4313      	orrs	r3, r2
 800644a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800644c:	4b2b      	ldr	r3, [pc, #172]	; (80064fc <RCCEx_PLL3_Config+0x15c>)
 800644e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006450:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	4928      	ldr	r1, [pc, #160]	; (80064fc <RCCEx_PLL3_Config+0x15c>)
 800645a:	4313      	orrs	r3, r2
 800645c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800645e:	4b27      	ldr	r3, [pc, #156]	; (80064fc <RCCEx_PLL3_Config+0x15c>)
 8006460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006462:	4a26      	ldr	r2, [pc, #152]	; (80064fc <RCCEx_PLL3_Config+0x15c>)
 8006464:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006468:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800646a:	4b24      	ldr	r3, [pc, #144]	; (80064fc <RCCEx_PLL3_Config+0x15c>)
 800646c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800646e:	4b24      	ldr	r3, [pc, #144]	; (8006500 <RCCEx_PLL3_Config+0x160>)
 8006470:	4013      	ands	r3, r2
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	69d2      	ldr	r2, [r2, #28]
 8006476:	00d2      	lsls	r2, r2, #3
 8006478:	4920      	ldr	r1, [pc, #128]	; (80064fc <RCCEx_PLL3_Config+0x15c>)
 800647a:	4313      	orrs	r3, r2
 800647c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800647e:	4b1f      	ldr	r3, [pc, #124]	; (80064fc <RCCEx_PLL3_Config+0x15c>)
 8006480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006482:	4a1e      	ldr	r2, [pc, #120]	; (80064fc <RCCEx_PLL3_Config+0x15c>)
 8006484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006488:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d106      	bne.n	800649e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006490:	4b1a      	ldr	r3, [pc, #104]	; (80064fc <RCCEx_PLL3_Config+0x15c>)
 8006492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006494:	4a19      	ldr	r2, [pc, #100]	; (80064fc <RCCEx_PLL3_Config+0x15c>)
 8006496:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800649a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800649c:	e00f      	b.n	80064be <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d106      	bne.n	80064b2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80064a4:	4b15      	ldr	r3, [pc, #84]	; (80064fc <RCCEx_PLL3_Config+0x15c>)
 80064a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a8:	4a14      	ldr	r2, [pc, #80]	; (80064fc <RCCEx_PLL3_Config+0x15c>)
 80064aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80064ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80064b0:	e005      	b.n	80064be <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80064b2:	4b12      	ldr	r3, [pc, #72]	; (80064fc <RCCEx_PLL3_Config+0x15c>)
 80064b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b6:	4a11      	ldr	r2, [pc, #68]	; (80064fc <RCCEx_PLL3_Config+0x15c>)
 80064b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80064be:	4b0f      	ldr	r3, [pc, #60]	; (80064fc <RCCEx_PLL3_Config+0x15c>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a0e      	ldr	r2, [pc, #56]	; (80064fc <RCCEx_PLL3_Config+0x15c>)
 80064c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064ca:	f7fc f99b 	bl	8002804 <HAL_GetTick>
 80064ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80064d0:	e008      	b.n	80064e4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80064d2:	f7fc f997 	bl	8002804 <HAL_GetTick>
 80064d6:	4602      	mov	r2, r0
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d901      	bls.n	80064e4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e006      	b.n	80064f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80064e4:	4b05      	ldr	r3, [pc, #20]	; (80064fc <RCCEx_PLL3_Config+0x15c>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d0f0      	beq.n	80064d2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80064f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	58024400 	.word	0x58024400
 8006500:	ffff0007 	.word	0xffff0007

08006504 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e10f      	b.n	8006736 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a87      	ldr	r2, [pc, #540]	; (8006740 <HAL_SPI_Init+0x23c>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d00f      	beq.n	8006546 <HAL_SPI_Init+0x42>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a86      	ldr	r2, [pc, #536]	; (8006744 <HAL_SPI_Init+0x240>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d00a      	beq.n	8006546 <HAL_SPI_Init+0x42>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a84      	ldr	r2, [pc, #528]	; (8006748 <HAL_SPI_Init+0x244>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d005      	beq.n	8006546 <HAL_SPI_Init+0x42>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	2b0f      	cmp	r3, #15
 8006540:	d901      	bls.n	8006546 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e0f7      	b.n	8006736 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 ff74 	bl	8007434 <SPI_GetPacketSize>
 800654c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a7b      	ldr	r2, [pc, #492]	; (8006740 <HAL_SPI_Init+0x23c>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d00c      	beq.n	8006572 <HAL_SPI_Init+0x6e>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a79      	ldr	r2, [pc, #484]	; (8006744 <HAL_SPI_Init+0x240>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d007      	beq.n	8006572 <HAL_SPI_Init+0x6e>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a78      	ldr	r2, [pc, #480]	; (8006748 <HAL_SPI_Init+0x244>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d002      	beq.n	8006572 <HAL_SPI_Init+0x6e>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2b08      	cmp	r3, #8
 8006570:	d811      	bhi.n	8006596 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006576:	4a72      	ldr	r2, [pc, #456]	; (8006740 <HAL_SPI_Init+0x23c>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d009      	beq.n	8006590 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a70      	ldr	r2, [pc, #448]	; (8006744 <HAL_SPI_Init+0x240>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d004      	beq.n	8006590 <HAL_SPI_Init+0x8c>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a6f      	ldr	r2, [pc, #444]	; (8006748 <HAL_SPI_Init+0x244>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d104      	bne.n	800659a <HAL_SPI_Init+0x96>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2b10      	cmp	r3, #16
 8006594:	d901      	bls.n	800659a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e0cd      	b.n	8006736 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d106      	bne.n	80065b4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f7fb fdc4 	bl	800213c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2202      	movs	r2, #2
 80065b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f022 0201 	bic.w	r2, r2, #1
 80065ca:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80065d6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065e0:	d119      	bne.n	8006616 <HAL_SPI_Init+0x112>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065ea:	d103      	bne.n	80065f4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d008      	beq.n	8006606 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10c      	bne.n	8006616 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006600:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006604:	d107      	bne.n	8006616 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006614:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00f      	beq.n	8006642 <HAL_SPI_Init+0x13e>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	2b06      	cmp	r3, #6
 8006628:	d90b      	bls.n	8006642 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	430a      	orrs	r2, r1
 800663e:	601a      	str	r2, [r3, #0]
 8006640:	e007      	b.n	8006652 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006650:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	69da      	ldr	r2, [r3, #28]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800665a:	431a      	orrs	r2, r3
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	431a      	orrs	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006664:	ea42 0103 	orr.w	r1, r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	68da      	ldr	r2, [r3, #12]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	430a      	orrs	r2, r1
 8006672:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667c:	431a      	orrs	r2, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006682:	431a      	orrs	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	431a      	orrs	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	431a      	orrs	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	695b      	ldr	r3, [r3, #20]
 8006694:	431a      	orrs	r2, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	431a      	orrs	r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	431a      	orrs	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066a6:	431a      	orrs	r2, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	431a      	orrs	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066b2:	ea42 0103 	orr.w	r1, r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	430a      	orrs	r2, r1
 80066c0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d113      	bne.n	80066f2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066dc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80066f0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f022 0201 	bic.w	r2, r2, #1
 8006700:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00a      	beq.n	8006724 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	430a      	orrs	r2, r1
 8006722:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	40013000 	.word	0x40013000
 8006744:	40003800 	.word	0x40003800
 8006748:	40003c00 	.word	0x40003c00

0800674c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b08a      	sub	sp, #40	; 0x28
 8006750:	af02      	add	r7, sp, #8
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	603b      	str	r3, [r7, #0]
 8006758:	4613      	mov	r3, r2
 800675a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	3320      	adds	r3, #32
 8006762:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006764:	2300      	movs	r3, #0
 8006766:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800676e:	2b01      	cmp	r3, #1
 8006770:	d101      	bne.n	8006776 <HAL_SPI_Transmit+0x2a>
 8006772:	2302      	movs	r3, #2
 8006774:	e1e1      	b.n	8006b3a <HAL_SPI_Transmit+0x3ee>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800677e:	f7fc f841 	bl	8002804 <HAL_GetTick>
 8006782:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800678a:	b2db      	uxtb	r3, r3
 800678c:	2b01      	cmp	r3, #1
 800678e:	d007      	beq.n	80067a0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8006790:	2302      	movs	r3, #2
 8006792:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800679c:	7efb      	ldrb	r3, [r7, #27]
 800679e:	e1cc      	b.n	8006b3a <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d002      	beq.n	80067ac <HAL_SPI_Transmit+0x60>
 80067a6:	88fb      	ldrh	r3, [r7, #6]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d107      	bne.n	80067bc <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80067b8:	7efb      	ldrb	r3, [r7, #27]
 80067ba:	e1be      	b.n	8006b3a <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2203      	movs	r2, #3
 80067c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	88fa      	ldrh	r2, [r7, #6]
 80067d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	88fa      	ldrh	r2, [r7, #6]
 80067de:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800680c:	d108      	bne.n	8006820 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800681c:	601a      	str	r2, [r3, #0]
 800681e:	e009      	b.n	8006834 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006832:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685a      	ldr	r2, [r3, #4]
 800683a:	4b96      	ldr	r3, [pc, #600]	; (8006a94 <HAL_SPI_Transmit+0x348>)
 800683c:	4013      	ands	r3, r2
 800683e:	88f9      	ldrh	r1, [r7, #6]
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	6812      	ldr	r2, [r2, #0]
 8006844:	430b      	orrs	r3, r1
 8006846:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f042 0201 	orr.w	r2, r2, #1
 8006856:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006860:	d107      	bne.n	8006872 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006870:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	2b0f      	cmp	r3, #15
 8006878:	d947      	bls.n	800690a <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800687a:	e03f      	b.n	80068fc <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	2b02      	cmp	r3, #2
 8006888:	d114      	bne.n	80068b4 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	6812      	ldr	r2, [r2, #0]
 8006894:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800689a:	1d1a      	adds	r2, r3, #4
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	3b01      	subs	r3, #1
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80068b2:	e023      	b.n	80068fc <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068b4:	f7fb ffa6 	bl	8002804 <HAL_GetTick>
 80068b8:	4602      	mov	r2, r0
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	683a      	ldr	r2, [r7, #0]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d803      	bhi.n	80068cc <HAL_SPI_Transmit+0x180>
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ca:	d102      	bne.n	80068d2 <HAL_SPI_Transmit+0x186>
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d114      	bne.n	80068fc <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80068d2:	68f8      	ldr	r0, [r7, #12]
 80068d4:	f000 fce0 	bl	8007298 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80068f8:	2303      	movs	r3, #3
 80068fa:	e11e      	b.n	8006b3a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006902:	b29b      	uxth	r3, r3
 8006904:	2b00      	cmp	r3, #0
 8006906:	d1b9      	bne.n	800687c <HAL_SPI_Transmit+0x130>
 8006908:	e0f1      	b.n	8006aee <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	2b07      	cmp	r3, #7
 8006910:	f240 80e6 	bls.w	8006ae0 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006914:	e05d      	b.n	80069d2 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	f003 0302 	and.w	r3, r3, #2
 8006920:	2b02      	cmp	r3, #2
 8006922:	d132      	bne.n	800698a <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800692a:	b29b      	uxth	r3, r3
 800692c:	2b01      	cmp	r3, #1
 800692e:	d918      	bls.n	8006962 <HAL_SPI_Transmit+0x216>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006934:	2b00      	cmp	r3, #0
 8006936:	d014      	beq.n	8006962 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6812      	ldr	r2, [r2, #0]
 8006942:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006948:	1d1a      	adds	r2, r3, #4
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006954:	b29b      	uxth	r3, r3
 8006956:	3b02      	subs	r3, #2
 8006958:	b29a      	uxth	r2, r3
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006960:	e037      	b.n	80069d2 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006966:	881a      	ldrh	r2, [r3, #0]
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006970:	1c9a      	adds	r2, r3, #2
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800697c:	b29b      	uxth	r3, r3
 800697e:	3b01      	subs	r3, #1
 8006980:	b29a      	uxth	r2, r3
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006988:	e023      	b.n	80069d2 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800698a:	f7fb ff3b 	bl	8002804 <HAL_GetTick>
 800698e:	4602      	mov	r2, r0
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	683a      	ldr	r2, [r7, #0]
 8006996:	429a      	cmp	r2, r3
 8006998:	d803      	bhi.n	80069a2 <HAL_SPI_Transmit+0x256>
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a0:	d102      	bne.n	80069a8 <HAL_SPI_Transmit+0x25c>
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d114      	bne.n	80069d2 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f000 fc75 	bl	8007298 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2201      	movs	r2, #1
 80069ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e0b3      	b.n	8006b3a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80069d8:	b29b      	uxth	r3, r3
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d19b      	bne.n	8006916 <HAL_SPI_Transmit+0x1ca>
 80069de:	e086      	b.n	8006aee <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d154      	bne.n	8006a98 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	2b03      	cmp	r3, #3
 80069f8:	d918      	bls.n	8006a2c <HAL_SPI_Transmit+0x2e0>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069fe:	2b40      	cmp	r3, #64	; 0x40
 8006a00:	d914      	bls.n	8006a2c <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	6812      	ldr	r2, [r2, #0]
 8006a0c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a12:	1d1a      	adds	r2, r3, #4
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	3b04      	subs	r3, #4
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006a2a:	e059      	b.n	8006ae0 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d917      	bls.n	8006a68 <HAL_SPI_Transmit+0x31c>
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d013      	beq.n	8006a68 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a44:	881a      	ldrh	r2, [r3, #0]
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a4e:	1c9a      	adds	r2, r3, #2
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	3b02      	subs	r3, #2
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006a66:	e03b      	b.n	8006ae0 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	3320      	adds	r3, #32
 8006a72:	7812      	ldrb	r2, [r2, #0]
 8006a74:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a7a:	1c5a      	adds	r2, r3, #1
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006a92:	e025      	b.n	8006ae0 <HAL_SPI_Transmit+0x394>
 8006a94:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a98:	f7fb feb4 	bl	8002804 <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	683a      	ldr	r2, [r7, #0]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d803      	bhi.n	8006ab0 <HAL_SPI_Transmit+0x364>
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aae:	d102      	bne.n	8006ab6 <HAL_SPI_Transmit+0x36a>
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d114      	bne.n	8006ae0 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f000 fbee 	bl	8007298 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006aca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e02c      	b.n	8006b3a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f47f af79 	bne.w	80069e0 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	9300      	str	r3, [sp, #0]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	2200      	movs	r2, #0
 8006af6:	2108      	movs	r1, #8
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f000 fc6d 	bl	80073d8 <SPI_WaitOnFlagUntilTimeout>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d007      	beq.n	8006b14 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b0a:	f043 0220 	orr.w	r2, r3, #32
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 fbbf 	bl	8007298 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2201      	movs	r2, #1
 8006b26:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d001      	beq.n	8006b38 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e000      	b.n	8006b3a <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 8006b38:	7efb      	ldrb	r3, [r7, #27]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3720      	adds	r7, #32
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop

08006b44 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b088      	sub	sp, #32
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	603b      	str	r3, [r7, #0]
 8006b50:	4613      	mov	r3, r2
 8006b52:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b54:	2300      	movs	r3, #0
 8006b56:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	3330      	adds	r3, #48	; 0x30
 8006b5e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d101      	bne.n	8006b6e <HAL_SPI_Receive+0x2a>
 8006b6a:	2302      	movs	r3, #2
 8006b6c:	e173      	b.n	8006e56 <HAL_SPI_Receive+0x312>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b76:	f7fb fe45 	bl	8002804 <HAL_GetTick>
 8006b7a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d007      	beq.n	8006b98 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 8006b88:	2302      	movs	r3, #2
 8006b8a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006b94:	7ffb      	ldrb	r3, [r7, #31]
 8006b96:	e15e      	b.n	8006e56 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d002      	beq.n	8006ba4 <HAL_SPI_Receive+0x60>
 8006b9e:	88fb      	ldrh	r3, [r7, #6]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d107      	bne.n	8006bb4 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006bb0:	7ffb      	ldrb	r3, [r7, #31]
 8006bb2:	e150      	b.n	8006e56 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2204      	movs	r2, #4
 8006bb8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	68ba      	ldr	r2, [r7, #8]
 8006bc8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	88fa      	ldrh	r2, [r7, #6]
 8006bce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	88fa      	ldrh	r2, [r7, #6]
 8006bd6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006c04:	d108      	bne.n	8006c18 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c14:	601a      	str	r2, [r3, #0]
 8006c16:	e009      	b.n	8006c2c <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006c2a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	685a      	ldr	r2, [r3, #4]
 8006c32:	4b8b      	ldr	r3, [pc, #556]	; (8006e60 <HAL_SPI_Receive+0x31c>)
 8006c34:	4013      	ands	r3, r2
 8006c36:	88f9      	ldrh	r1, [r7, #6]
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	6812      	ldr	r2, [r2, #0]
 8006c3c:	430b      	orrs	r3, r1
 8006c3e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f042 0201 	orr.w	r2, r2, #1
 8006c4e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c58:	d107      	bne.n	8006c6a <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c68:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	2b0f      	cmp	r3, #15
 8006c70:	d948      	bls.n	8006d04 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006c72:	e040      	b.n	8006cf6 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	695a      	ldr	r2, [r3, #20]
 8006c7a:	f248 0308 	movw	r3, #32776	; 0x8008
 8006c7e:	4013      	ands	r3, r2
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d014      	beq.n	8006cae <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c8c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006c8e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c94:	1d1a      	adds	r2, r3, #4
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	b29a      	uxth	r2, r3
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006cac:	e023      	b.n	8006cf6 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cae:	f7fb fda9 	bl	8002804 <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	683a      	ldr	r2, [r7, #0]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d803      	bhi.n	8006cc6 <HAL_SPI_Receive+0x182>
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc4:	d102      	bne.n	8006ccc <HAL_SPI_Receive+0x188>
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d114      	bne.n	8006cf6 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f000 fae3 	bl	8007298 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ce0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2201      	movs	r2, #1
 8006cee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e0af      	b.n	8006e56 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1b8      	bne.n	8006c74 <HAL_SPI_Receive+0x130>
 8006d02:	e095      	b.n	8006e30 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	2b07      	cmp	r3, #7
 8006d0a:	f240 808b 	bls.w	8006e24 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006d0e:	e03f      	b.n	8006d90 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d114      	bne.n	8006d48 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d22:	69ba      	ldr	r2, [r7, #24]
 8006d24:	8812      	ldrh	r2, [r2, #0]
 8006d26:	b292      	uxth	r2, r2
 8006d28:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d2e:	1c9a      	adds	r2, r3, #2
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	3b01      	subs	r3, #1
 8006d3e:	b29a      	uxth	r2, r3
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006d46:	e023      	b.n	8006d90 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d48:	f7fb fd5c 	bl	8002804 <HAL_GetTick>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	683a      	ldr	r2, [r7, #0]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d803      	bhi.n	8006d60 <HAL_SPI_Receive+0x21c>
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d5e:	d102      	bne.n	8006d66 <HAL_SPI_Receive+0x222>
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d114      	bne.n	8006d90 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	f000 fa96 	bl	8007298 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e062      	b.n	8006e56 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1b9      	bne.n	8006d10 <HAL_SPI_Receive+0x1cc>
 8006d9c:	e048      	b.n	8006e30 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	695b      	ldr	r3, [r3, #20]
 8006da4:	f003 0301 	and.w	r3, r3, #1
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d117      	bne.n	8006ddc <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006db8:	7812      	ldrb	r2, [r2, #0]
 8006dba:	b2d2      	uxtb	r2, r2
 8006dbc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dc2:	1c5a      	adds	r2, r3, #1
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006dda:	e023      	b.n	8006e24 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ddc:	f7fb fd12 	bl	8002804 <HAL_GetTick>
 8006de0:	4602      	mov	r2, r0
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d803      	bhi.n	8006df4 <HAL_SPI_Receive+0x2b0>
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df2:	d102      	bne.n	8006dfa <HAL_SPI_Receive+0x2b6>
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d114      	bne.n	8006e24 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f000 fa4c 	bl	8007298 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006e20:	2303      	movs	r3, #3
 8006e22:	e018      	b.n	8006e56 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1b6      	bne.n	8006d9e <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f000 fa31 	bl	8007298 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d001      	beq.n	8006e54 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e000      	b.n	8006e56 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 8006e54:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3720      	adds	r7, #32
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	ffff0000 	.word	0xffff0000

08006e64 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b08a      	sub	sp, #40	; 0x28
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	695b      	ldr	r3, [r3, #20]
 8006e7a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8006e7c:	6a3a      	ldr	r2, [r7, #32]
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	4013      	ands	r3, r2
 8006e82:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006e96:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	3330      	adds	r3, #48	; 0x30
 8006e9e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d010      	beq.n	8006ecc <HAL_SPI_IRQHandler+0x68>
 8006eaa:	6a3b      	ldr	r3, [r7, #32]
 8006eac:	f003 0308 	and.w	r3, r3, #8
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00b      	beq.n	8006ecc <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	699a      	ldr	r2, [r3, #24]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ec2:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 f9c3 	bl	8007250 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8006eca:	e192      	b.n	80071f2 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d113      	bne.n	8006efe <HAL_SPI_IRQHandler+0x9a>
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	f003 0320 	and.w	r3, r3, #32
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d10e      	bne.n	8006efe <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d009      	beq.n	8006efe <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	4798      	blx	r3
    hspi->RxISR(hspi);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	4798      	blx	r3
    handled = 1UL;
 8006efa:	2301      	movs	r3, #1
 8006efc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d10f      	bne.n	8006f28 <HAL_SPI_IRQHandler+0xc4>
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	f003 0301 	and.w	r3, r3, #1
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00a      	beq.n	8006f28 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d105      	bne.n	8006f28 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	4798      	blx	r3
    handled = 1UL;
 8006f24:	2301      	movs	r3, #1
 8006f26:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	f003 0320 	and.w	r3, r3, #32
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d10f      	bne.n	8006f52 <HAL_SPI_IRQHandler+0xee>
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	f003 0302 	and.w	r3, r3, #2
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d00a      	beq.n	8006f52 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d105      	bne.n	8006f52 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	4798      	blx	r3
    handled = 1UL;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8006f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f040 8147 	bne.w	80071e8 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	f003 0308 	and.w	r3, r3, #8
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f000 808b 	beq.w	800707c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	699a      	ldr	r2, [r3, #24]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f042 0208 	orr.w	r2, r2, #8
 8006f74:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	699a      	ldr	r2, [r3, #24]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f042 0210 	orr.w	r2, r2, #16
 8006f84:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	699a      	ldr	r2, [r3, #24]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f94:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	691a      	ldr	r2, [r3, #16]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f022 0208 	bic.w	r2, r2, #8
 8006fa4:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d13d      	bne.n	8007030 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8006fb4:	e036      	b.n	8007024 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	2b0f      	cmp	r3, #15
 8006fbc:	d90b      	bls.n	8006fd6 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fc6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006fc8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fce:	1d1a      	adds	r2, r3, #4
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	665a      	str	r2, [r3, #100]	; 0x64
 8006fd4:	e01d      	b.n	8007012 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	2b07      	cmp	r3, #7
 8006fdc:	d90b      	bls.n	8006ff6 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	8812      	ldrh	r2, [r2, #0]
 8006fe6:	b292      	uxth	r2, r2
 8006fe8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fee:	1c9a      	adds	r2, r3, #2
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	665a      	str	r2, [r3, #100]	; 0x64
 8006ff4:	e00d      	b.n	8007012 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007002:	7812      	ldrb	r2, [r2, #0]
 8007004:	b2d2      	uxtb	r2, r2
 8007006:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800700c:	1c5a      	adds	r2, r3, #1
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007018:	b29b      	uxth	r3, r3
 800701a:	3b01      	subs	r3, #1
 800701c:	b29a      	uxth	r2, r3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800702a:	b29b      	uxth	r3, r3
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1c2      	bne.n	8006fb6 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 f931 	bl	8007298 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2201      	movs	r2, #1
 800703a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007044:	2b00      	cmp	r3, #0
 8007046:	d003      	beq.n	8007050 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 f8f7 	bl	800723c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800704e:	e0d0      	b.n	80071f2 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007050:	7cfb      	ldrb	r3, [r7, #19]
 8007052:	2b05      	cmp	r3, #5
 8007054:	d103      	bne.n	800705e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 f8e6 	bl	8007228 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800705c:	e0c6      	b.n	80071ec <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800705e:	7cfb      	ldrb	r3, [r7, #19]
 8007060:	2b04      	cmp	r3, #4
 8007062:	d103      	bne.n	800706c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 f8d5 	bl	8007214 <HAL_SPI_RxCpltCallback>
    return;
 800706a:	e0bf      	b.n	80071ec <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800706c:	7cfb      	ldrb	r3, [r7, #19]
 800706e:	2b03      	cmp	r3, #3
 8007070:	f040 80bc 	bne.w	80071ec <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 f8c3 	bl	8007200 <HAL_SPI_TxCpltCallback>
    return;
 800707a:	e0b7      	b.n	80071ec <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8007082:	2b00      	cmp	r3, #0
 8007084:	f000 80b5 	beq.w	80071f2 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00f      	beq.n	80070b2 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007098:	f043 0204 	orr.w	r2, r3, #4
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	699a      	ldr	r2, [r3, #24]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070b0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00f      	beq.n	80070dc <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070c2:	f043 0201 	orr.w	r2, r3, #1
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	699a      	ldr	r2, [r3, #24]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070da:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00f      	beq.n	8007106 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070ec:	f043 0208 	orr.w	r2, r3, #8
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	699a      	ldr	r2, [r3, #24]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007104:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	f003 0320 	and.w	r3, r3, #32
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00f      	beq.n	8007130 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007116:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	699a      	ldr	r2, [r3, #24]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f042 0220 	orr.w	r2, r2, #32
 800712e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007136:	2b00      	cmp	r3, #0
 8007138:	d05a      	beq.n	80071f0 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f022 0201 	bic.w	r2, r2, #1
 8007148:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	6919      	ldr	r1, [r3, #16]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	4b28      	ldr	r3, [pc, #160]	; (80071f8 <HAL_SPI_IRQHandler+0x394>)
 8007156:	400b      	ands	r3, r1
 8007158:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007160:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007164:	d138      	bne.n	80071d8 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	689a      	ldr	r2, [r3, #8]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007174:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800717a:	2b00      	cmp	r3, #0
 800717c:	d013      	beq.n	80071a6 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007182:	4a1e      	ldr	r2, [pc, #120]	; (80071fc <HAL_SPI_IRQHandler+0x398>)
 8007184:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800718a:	4618      	mov	r0, r3
 800718c:	f7fb ff98 	bl	80030c0 <HAL_DMA_Abort_IT>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d007      	beq.n	80071a6 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800719c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d020      	beq.n	80071f0 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071b2:	4a12      	ldr	r2, [pc, #72]	; (80071fc <HAL_SPI_IRQHandler+0x398>)
 80071b4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7fb ff80 	bl	80030c0 <HAL_DMA_Abort_IT>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d014      	beq.n	80071f0 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80071d6:	e00b      	b.n	80071f0 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 f82b 	bl	800723c <HAL_SPI_ErrorCallback>
    return;
 80071e6:	e003      	b.n	80071f0 <HAL_SPI_IRQHandler+0x38c>
    return;
 80071e8:	bf00      	nop
 80071ea:	e002      	b.n	80071f2 <HAL_SPI_IRQHandler+0x38e>
    return;
 80071ec:	bf00      	nop
 80071ee:	e000      	b.n	80071f2 <HAL_SPI_IRQHandler+0x38e>
    return;
 80071f0:	bf00      	nop
  }
}
 80071f2:	3728      	adds	r7, #40	; 0x28
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	fffffc94 	.word	0xfffffc94
 80071fc:	08007265 	.word	0x08007265

08007200 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007208:	bf00      	nop
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800721c:	bf00      	nop
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007244:	bf00      	nop
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8007258:	bf00      	nop
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007270:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2200      	movs	r2, #0
 800727e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2201      	movs	r2, #1
 8007286:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f7ff ffd6 	bl	800723c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007290:	bf00      	nop
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	695b      	ldr	r3, [r3, #20]
 80072a6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	699a      	ldr	r2, [r3, #24]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f042 0208 	orr.w	r2, r2, #8
 80072b6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	699a      	ldr	r2, [r3, #24]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f042 0210 	orr.w	r2, r2, #16
 80072c6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f022 0201 	bic.w	r2, r2, #1
 80072d6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	6919      	ldr	r1, [r3, #16]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	4b3c      	ldr	r3, [pc, #240]	; (80073d4 <SPI_CloseTransfer+0x13c>)
 80072e4:	400b      	ands	r3, r1
 80072e6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	689a      	ldr	r2, [r3, #8]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80072f6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	2b04      	cmp	r3, #4
 8007302:	d014      	beq.n	800732e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f003 0320 	and.w	r3, r3, #32
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00f      	beq.n	800732e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007314:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	699a      	ldr	r2, [r3, #24]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f042 0220 	orr.w	r2, r2, #32
 800732c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007334:	b2db      	uxtb	r3, r3
 8007336:	2b03      	cmp	r3, #3
 8007338:	d014      	beq.n	8007364 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007340:	2b00      	cmp	r3, #0
 8007342:	d00f      	beq.n	8007364 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800734a:	f043 0204 	orr.w	r2, r3, #4
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	699a      	ldr	r2, [r3, #24]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007362:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00f      	beq.n	800738e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007374:	f043 0201 	orr.w	r2, r3, #1
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	699a      	ldr	r2, [r3, #24]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800738c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007394:	2b00      	cmp	r3, #0
 8007396:	d00f      	beq.n	80073b8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800739e:	f043 0208 	orr.w	r2, r3, #8
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	699a      	ldr	r2, [r3, #24]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073b6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80073c8:	bf00      	nop
 80073ca:	3714      	adds	r7, #20
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr
 80073d4:	fffffc90 	.word	0xfffffc90

080073d8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	603b      	str	r3, [r7, #0]
 80073e4:	4613      	mov	r3, r2
 80073e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80073e8:	e010      	b.n	800740c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073ea:	f7fb fa0b 	bl	8002804 <HAL_GetTick>
 80073ee:	4602      	mov	r2, r0
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	683a      	ldr	r2, [r7, #0]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d803      	bhi.n	8007402 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007400:	d102      	bne.n	8007408 <SPI_WaitOnFlagUntilTimeout+0x30>
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d101      	bne.n	800740c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007408:	2303      	movs	r3, #3
 800740a:	e00f      	b.n	800742c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	695a      	ldr	r2, [r3, #20]
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	4013      	ands	r3, r2
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	429a      	cmp	r2, r3
 800741a:	bf0c      	ite	eq
 800741c:	2301      	moveq	r3, #1
 800741e:	2300      	movne	r3, #0
 8007420:	b2db      	uxtb	r3, r3
 8007422:	461a      	mov	r2, r3
 8007424:	79fb      	ldrb	r3, [r7, #7]
 8007426:	429a      	cmp	r2, r3
 8007428:	d0df      	beq.n	80073ea <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800742a:	2300      	movs	r3, #0
}
 800742c:	4618      	mov	r0, r3
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007440:	095b      	lsrs	r3, r3, #5
 8007442:	3301      	adds	r3, #1
 8007444:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	3301      	adds	r3, #1
 800744c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	3307      	adds	r3, #7
 8007452:	08db      	lsrs	r3, r3, #3
 8007454:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	fb02 f303 	mul.w	r3, r2, r3
}
 800745e:	4618      	mov	r0, r3
 8007460:	3714      	adds	r7, #20
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr

0800746a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b082      	sub	sp, #8
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d101      	bne.n	800747c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	e042      	b.n	8007502 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007482:	2b00      	cmp	r3, #0
 8007484:	d106      	bne.n	8007494 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7fb f86c 	bl	800256c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2224      	movs	r2, #36	; 0x24
 8007498:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f022 0201 	bic.w	r2, r2, #1
 80074aa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 fce1 	bl	8007e74 <UART_SetConfig>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d101      	bne.n	80074bc <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	e022      	b.n	8007502 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d002      	beq.n	80074ca <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f001 fb41 	bl	8008b4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	685a      	ldr	r2, [r3, #4]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	689a      	ldr	r2, [r3, #8]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074e8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f042 0201 	orr.w	r2, r2, #1
 80074f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f001 fbc8 	bl	8008c90 <UART_CheckIdleState>
 8007500:	4603      	mov	r3, r0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3708      	adds	r7, #8
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b08a      	sub	sp, #40	; 0x28
 800750e:	af02      	add	r7, sp, #8
 8007510:	60f8      	str	r0, [r7, #12]
 8007512:	60b9      	str	r1, [r7, #8]
 8007514:	603b      	str	r3, [r7, #0]
 8007516:	4613      	mov	r3, r2
 8007518:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007520:	2b20      	cmp	r3, #32
 8007522:	d17b      	bne.n	800761c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d002      	beq.n	8007530 <HAL_UART_Transmit+0x26>
 800752a:	88fb      	ldrh	r3, [r7, #6]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d101      	bne.n	8007534 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	e074      	b.n	800761e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2221      	movs	r2, #33	; 0x21
 8007540:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007544:	f7fb f95e 	bl	8002804 <HAL_GetTick>
 8007548:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	88fa      	ldrh	r2, [r7, #6]
 800754e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	88fa      	ldrh	r2, [r7, #6]
 8007556:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007562:	d108      	bne.n	8007576 <HAL_UART_Transmit+0x6c>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d104      	bne.n	8007576 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800756c:	2300      	movs	r3, #0
 800756e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	61bb      	str	r3, [r7, #24]
 8007574:	e003      	b.n	800757e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800757a:	2300      	movs	r3, #0
 800757c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800757e:	e030      	b.n	80075e2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	2200      	movs	r2, #0
 8007588:	2180      	movs	r1, #128	; 0x80
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	f001 fc2a 	bl	8008de4 <UART_WaitOnFlagUntilTimeout>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d005      	beq.n	80075a2 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2220      	movs	r2, #32
 800759a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800759e:	2303      	movs	r3, #3
 80075a0:	e03d      	b.n	800761e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10b      	bne.n	80075c0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	881b      	ldrh	r3, [r3, #0]
 80075ac:	461a      	mov	r2, r3
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	3302      	adds	r3, #2
 80075bc:	61bb      	str	r3, [r7, #24]
 80075be:	e007      	b.n	80075d0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	781a      	ldrb	r2, [r3, #0]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	3301      	adds	r3, #1
 80075ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	3b01      	subs	r3, #1
 80075da:	b29a      	uxth	r2, r3
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1c8      	bne.n	8007580 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	9300      	str	r3, [sp, #0]
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	2200      	movs	r2, #0
 80075f6:	2140      	movs	r1, #64	; 0x40
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f001 fbf3 	bl	8008de4 <UART_WaitOnFlagUntilTimeout>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d005      	beq.n	8007610 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2220      	movs	r2, #32
 8007608:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800760c:	2303      	movs	r3, #3
 800760e:	e006      	b.n	800761e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2220      	movs	r2, #32
 8007614:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007618:	2300      	movs	r3, #0
 800761a:	e000      	b.n	800761e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800761c:	2302      	movs	r3, #2
  }
}
 800761e:	4618      	mov	r0, r3
 8007620:	3720      	adds	r7, #32
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
	...

08007628 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b08a      	sub	sp, #40	; 0x28
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	4613      	mov	r3, r2
 8007634:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800763c:	2b20      	cmp	r3, #32
 800763e:	d137      	bne.n	80076b0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d002      	beq.n	800764c <HAL_UART_Receive_IT+0x24>
 8007646:	88fb      	ldrh	r3, [r7, #6]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d101      	bne.n	8007650 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e030      	b.n	80076b2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2200      	movs	r2, #0
 8007654:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a18      	ldr	r2, [pc, #96]	; (80076bc <HAL_UART_Receive_IT+0x94>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d01f      	beq.n	80076a0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d018      	beq.n	80076a0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	e853 3f00 	ldrex	r3, [r3]
 800767a:	613b      	str	r3, [r7, #16]
   return(result);
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007682:	627b      	str	r3, [r7, #36]	; 0x24
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	461a      	mov	r2, r3
 800768a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768c:	623b      	str	r3, [r7, #32]
 800768e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007690:	69f9      	ldr	r1, [r7, #28]
 8007692:	6a3a      	ldr	r2, [r7, #32]
 8007694:	e841 2300 	strex	r3, r2, [r1]
 8007698:	61bb      	str	r3, [r7, #24]
   return(result);
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1e6      	bne.n	800766e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80076a0:	88fb      	ldrh	r3, [r7, #6]
 80076a2:	461a      	mov	r2, r3
 80076a4:	68b9      	ldr	r1, [r7, #8]
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f001 fc04 	bl	8008eb4 <UART_Start_Receive_IT>
 80076ac:	4603      	mov	r3, r0
 80076ae:	e000      	b.n	80076b2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80076b0:	2302      	movs	r3, #2
  }
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3728      	adds	r7, #40	; 0x28
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	58000c00 	.word	0x58000c00

080076c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b0ba      	sub	sp, #232	; 0xe8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	69db      	ldr	r3, [r3, #28]
 80076ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80076e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80076ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80076ee:	4013      	ands	r3, r2
 80076f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80076f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d11b      	bne.n	8007734 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80076fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007700:	f003 0320 	and.w	r3, r3, #32
 8007704:	2b00      	cmp	r3, #0
 8007706:	d015      	beq.n	8007734 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800770c:	f003 0320 	and.w	r3, r3, #32
 8007710:	2b00      	cmp	r3, #0
 8007712:	d105      	bne.n	8007720 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d009      	beq.n	8007734 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007724:	2b00      	cmp	r3, #0
 8007726:	f000 8377 	beq.w	8007e18 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	4798      	blx	r3
      }
      return;
 8007732:	e371      	b.n	8007e18 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007734:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007738:	2b00      	cmp	r3, #0
 800773a:	f000 8123 	beq.w	8007984 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800773e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007742:	4b8d      	ldr	r3, [pc, #564]	; (8007978 <HAL_UART_IRQHandler+0x2b8>)
 8007744:	4013      	ands	r3, r2
 8007746:	2b00      	cmp	r3, #0
 8007748:	d106      	bne.n	8007758 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800774a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800774e:	4b8b      	ldr	r3, [pc, #556]	; (800797c <HAL_UART_IRQHandler+0x2bc>)
 8007750:	4013      	ands	r3, r2
 8007752:	2b00      	cmp	r3, #0
 8007754:	f000 8116 	beq.w	8007984 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800775c:	f003 0301 	and.w	r3, r3, #1
 8007760:	2b00      	cmp	r3, #0
 8007762:	d011      	beq.n	8007788 <HAL_UART_IRQHandler+0xc8>
 8007764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00b      	beq.n	8007788 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2201      	movs	r2, #1
 8007776:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800777e:	f043 0201 	orr.w	r2, r3, #1
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800778c:	f003 0302 	and.w	r3, r3, #2
 8007790:	2b00      	cmp	r3, #0
 8007792:	d011      	beq.n	80077b8 <HAL_UART_IRQHandler+0xf8>
 8007794:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007798:	f003 0301 	and.w	r3, r3, #1
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00b      	beq.n	80077b8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2202      	movs	r2, #2
 80077a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ae:	f043 0204 	orr.w	r2, r3, #4
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077bc:	f003 0304 	and.w	r3, r3, #4
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d011      	beq.n	80077e8 <HAL_UART_IRQHandler+0x128>
 80077c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077c8:	f003 0301 	and.w	r3, r3, #1
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00b      	beq.n	80077e8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2204      	movs	r2, #4
 80077d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077de:	f043 0202 	orr.w	r2, r3, #2
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80077e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077ec:	f003 0308 	and.w	r3, r3, #8
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d017      	beq.n	8007824 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80077f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077f8:	f003 0320 	and.w	r3, r3, #32
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d105      	bne.n	800780c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007800:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007804:	4b5c      	ldr	r3, [pc, #368]	; (8007978 <HAL_UART_IRQHandler+0x2b8>)
 8007806:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00b      	beq.n	8007824 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2208      	movs	r2, #8
 8007812:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800781a:	f043 0208 	orr.w	r2, r3, #8
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007828:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800782c:	2b00      	cmp	r3, #0
 800782e:	d012      	beq.n	8007856 <HAL_UART_IRQHandler+0x196>
 8007830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007834:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007838:	2b00      	cmp	r3, #0
 800783a:	d00c      	beq.n	8007856 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007844:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800784c:	f043 0220 	orr.w	r2, r3, #32
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800785c:	2b00      	cmp	r3, #0
 800785e:	f000 82dd 	beq.w	8007e1c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007866:	f003 0320 	and.w	r3, r3, #32
 800786a:	2b00      	cmp	r3, #0
 800786c:	d013      	beq.n	8007896 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800786e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007872:	f003 0320 	and.w	r3, r3, #32
 8007876:	2b00      	cmp	r3, #0
 8007878:	d105      	bne.n	8007886 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800787a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800787e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007882:	2b00      	cmp	r3, #0
 8007884:	d007      	beq.n	8007896 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800788a:	2b00      	cmp	r3, #0
 800788c:	d003      	beq.n	8007896 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800789c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078aa:	2b40      	cmp	r3, #64	; 0x40
 80078ac:	d005      	beq.n	80078ba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80078ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80078b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d054      	beq.n	8007964 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f001 fc1c 	bl	80090f8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ca:	2b40      	cmp	r3, #64	; 0x40
 80078cc:	d146      	bne.n	800795c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	3308      	adds	r3, #8
 80078d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078dc:	e853 3f00 	ldrex	r3, [r3]
 80078e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80078e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	3308      	adds	r3, #8
 80078f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80078fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80078fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007902:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007906:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800790a:	e841 2300 	strex	r3, r2, [r1]
 800790e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007912:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d1d9      	bne.n	80078ce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007920:	2b00      	cmp	r3, #0
 8007922:	d017      	beq.n	8007954 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800792a:	4a15      	ldr	r2, [pc, #84]	; (8007980 <HAL_UART_IRQHandler+0x2c0>)
 800792c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007934:	4618      	mov	r0, r3
 8007936:	f7fb fbc3 	bl	80030c0 <HAL_DMA_Abort_IT>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d019      	beq.n	8007974 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800794e:	4610      	mov	r0, r2
 8007950:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007952:	e00f      	b.n	8007974 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 fa77 	bl	8007e48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800795a:	e00b      	b.n	8007974 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 fa73 	bl	8007e48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007962:	e007      	b.n	8007974 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 fa6f 	bl	8007e48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007972:	e253      	b.n	8007e1c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007974:	bf00      	nop
    return;
 8007976:	e251      	b.n	8007e1c <HAL_UART_IRQHandler+0x75c>
 8007978:	10000001 	.word	0x10000001
 800797c:	04000120 	.word	0x04000120
 8007980:	080091c5 	.word	0x080091c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007988:	2b01      	cmp	r3, #1
 800798a:	f040 81e7 	bne.w	8007d5c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800798e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007992:	f003 0310 	and.w	r3, r3, #16
 8007996:	2b00      	cmp	r3, #0
 8007998:	f000 81e0 	beq.w	8007d5c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800799c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079a0:	f003 0310 	and.w	r3, r3, #16
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f000 81d9 	beq.w	8007d5c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2210      	movs	r2, #16
 80079b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079bc:	2b40      	cmp	r3, #64	; 0x40
 80079be:	f040 8151 	bne.w	8007c64 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a96      	ldr	r2, [pc, #600]	; (8007c24 <HAL_UART_IRQHandler+0x564>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d068      	beq.n	8007aa2 <HAL_UART_IRQHandler+0x3e2>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a93      	ldr	r2, [pc, #588]	; (8007c28 <HAL_UART_IRQHandler+0x568>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d061      	beq.n	8007aa2 <HAL_UART_IRQHandler+0x3e2>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a91      	ldr	r2, [pc, #580]	; (8007c2c <HAL_UART_IRQHandler+0x56c>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d05a      	beq.n	8007aa2 <HAL_UART_IRQHandler+0x3e2>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a8e      	ldr	r2, [pc, #568]	; (8007c30 <HAL_UART_IRQHandler+0x570>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d053      	beq.n	8007aa2 <HAL_UART_IRQHandler+0x3e2>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a8c      	ldr	r2, [pc, #560]	; (8007c34 <HAL_UART_IRQHandler+0x574>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d04c      	beq.n	8007aa2 <HAL_UART_IRQHandler+0x3e2>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a89      	ldr	r2, [pc, #548]	; (8007c38 <HAL_UART_IRQHandler+0x578>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d045      	beq.n	8007aa2 <HAL_UART_IRQHandler+0x3e2>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a87      	ldr	r2, [pc, #540]	; (8007c3c <HAL_UART_IRQHandler+0x57c>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d03e      	beq.n	8007aa2 <HAL_UART_IRQHandler+0x3e2>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a84      	ldr	r2, [pc, #528]	; (8007c40 <HAL_UART_IRQHandler+0x580>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d037      	beq.n	8007aa2 <HAL_UART_IRQHandler+0x3e2>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a82      	ldr	r2, [pc, #520]	; (8007c44 <HAL_UART_IRQHandler+0x584>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d030      	beq.n	8007aa2 <HAL_UART_IRQHandler+0x3e2>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a7f      	ldr	r2, [pc, #508]	; (8007c48 <HAL_UART_IRQHandler+0x588>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d029      	beq.n	8007aa2 <HAL_UART_IRQHandler+0x3e2>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a7d      	ldr	r2, [pc, #500]	; (8007c4c <HAL_UART_IRQHandler+0x58c>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d022      	beq.n	8007aa2 <HAL_UART_IRQHandler+0x3e2>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a7a      	ldr	r2, [pc, #488]	; (8007c50 <HAL_UART_IRQHandler+0x590>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d01b      	beq.n	8007aa2 <HAL_UART_IRQHandler+0x3e2>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a78      	ldr	r2, [pc, #480]	; (8007c54 <HAL_UART_IRQHandler+0x594>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d014      	beq.n	8007aa2 <HAL_UART_IRQHandler+0x3e2>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a75      	ldr	r2, [pc, #468]	; (8007c58 <HAL_UART_IRQHandler+0x598>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d00d      	beq.n	8007aa2 <HAL_UART_IRQHandler+0x3e2>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a73      	ldr	r2, [pc, #460]	; (8007c5c <HAL_UART_IRQHandler+0x59c>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d006      	beq.n	8007aa2 <HAL_UART_IRQHandler+0x3e2>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a70      	ldr	r2, [pc, #448]	; (8007c60 <HAL_UART_IRQHandler+0x5a0>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d106      	bne.n	8007ab0 <HAL_UART_IRQHandler+0x3f0>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	e005      	b.n	8007abc <HAL_UART_IRQHandler+0x3fc>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007ac0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f000 81ab 	beq.w	8007e20 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007ad0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	f080 81a3 	bcs.w	8007e20 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ae0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007aea:	69db      	ldr	r3, [r3, #28]
 8007aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007af0:	f000 8087 	beq.w	8007c02 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b00:	e853 3f00 	ldrex	r3, [r3]
 8007b04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007b08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	461a      	mov	r2, r3
 8007b1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007b22:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b26:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007b2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007b2e:	e841 2300 	strex	r3, r2, [r1]
 8007b32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007b36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1da      	bne.n	8007af4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	3308      	adds	r3, #8
 8007b44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b48:	e853 3f00 	ldrex	r3, [r3]
 8007b4c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007b4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b50:	f023 0301 	bic.w	r3, r3, #1
 8007b54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	3308      	adds	r3, #8
 8007b5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007b62:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007b66:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b68:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007b6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007b6e:	e841 2300 	strex	r3, r2, [r1]
 8007b72:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007b74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1e1      	bne.n	8007b3e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	3308      	adds	r3, #8
 8007b80:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b84:	e853 3f00 	ldrex	r3, [r3]
 8007b88:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	3308      	adds	r3, #8
 8007b9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007b9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007ba0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007ba4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007ba6:	e841 2300 	strex	r3, r2, [r1]
 8007baa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007bac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1e3      	bne.n	8007b7a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2220      	movs	r2, #32
 8007bb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bc8:	e853 3f00 	ldrex	r3, [r3]
 8007bcc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007bce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bd0:	f023 0310 	bic.w	r3, r3, #16
 8007bd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	461a      	mov	r2, r3
 8007bde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007be2:	65bb      	str	r3, [r7, #88]	; 0x58
 8007be4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007be8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007bea:	e841 2300 	strex	r3, r2, [r1]
 8007bee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007bf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1e4      	bne.n	8007bc0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f7fa ff41 	bl	8002a84 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2202      	movs	r2, #2
 8007c06:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	1ad3      	subs	r3, r2, r3
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 f91d 	bl	8007e5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c22:	e0fd      	b.n	8007e20 <HAL_UART_IRQHandler+0x760>
 8007c24:	40020010 	.word	0x40020010
 8007c28:	40020028 	.word	0x40020028
 8007c2c:	40020040 	.word	0x40020040
 8007c30:	40020058 	.word	0x40020058
 8007c34:	40020070 	.word	0x40020070
 8007c38:	40020088 	.word	0x40020088
 8007c3c:	400200a0 	.word	0x400200a0
 8007c40:	400200b8 	.word	0x400200b8
 8007c44:	40020410 	.word	0x40020410
 8007c48:	40020428 	.word	0x40020428
 8007c4c:	40020440 	.word	0x40020440
 8007c50:	40020458 	.word	0x40020458
 8007c54:	40020470 	.word	0x40020470
 8007c58:	40020488 	.word	0x40020488
 8007c5c:	400204a0 	.word	0x400204a0
 8007c60:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f000 80cf 	beq.w	8007e24 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8007c86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f000 80ca 	beq.w	8007e24 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c98:	e853 3f00 	ldrex	r3, [r3]
 8007c9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ca0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ca4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	461a      	mov	r2, r3
 8007cae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007cb2:	647b      	str	r3, [r7, #68]	; 0x44
 8007cb4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007cb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007cba:	e841 2300 	strex	r3, r2, [r1]
 8007cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d1e4      	bne.n	8007c90 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	3308      	adds	r3, #8
 8007ccc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd0:	e853 3f00 	ldrex	r3, [r3]
 8007cd4:	623b      	str	r3, [r7, #32]
   return(result);
 8007cd6:	6a3a      	ldr	r2, [r7, #32]
 8007cd8:	4b55      	ldr	r3, [pc, #340]	; (8007e30 <HAL_UART_IRQHandler+0x770>)
 8007cda:	4013      	ands	r3, r2
 8007cdc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	3308      	adds	r3, #8
 8007ce6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007cea:	633a      	str	r2, [r7, #48]	; 0x30
 8007cec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cf2:	e841 2300 	strex	r3, r2, [r1]
 8007cf6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1e3      	bne.n	8007cc6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2220      	movs	r2, #32
 8007d02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	e853 3f00 	ldrex	r3, [r3]
 8007d1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f023 0310 	bic.w	r3, r3, #16
 8007d26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	461a      	mov	r2, r3
 8007d30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007d34:	61fb      	str	r3, [r7, #28]
 8007d36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d38:	69b9      	ldr	r1, [r7, #24]
 8007d3a:	69fa      	ldr	r2, [r7, #28]
 8007d3c:	e841 2300 	strex	r3, r2, [r1]
 8007d40:	617b      	str	r3, [r7, #20]
   return(result);
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d1e4      	bne.n	8007d12 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2202      	movs	r2, #2
 8007d4c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d52:	4619      	mov	r1, r3
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 f881 	bl	8007e5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d5a:	e063      	b.n	8007e24 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00e      	beq.n	8007d86 <HAL_UART_IRQHandler+0x6c6>
 8007d68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d008      	beq.n	8007d86 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007d7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f001 ff7e 	bl	8009c80 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d84:	e051      	b.n	8007e2a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d014      	beq.n	8007dbc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007d92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d105      	bne.n	8007daa <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007d9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007da2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d008      	beq.n	8007dbc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d03a      	beq.n	8007e28 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	4798      	blx	r3
    }
    return;
 8007dba:	e035      	b.n	8007e28 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d009      	beq.n	8007ddc <HAL_UART_IRQHandler+0x71c>
 8007dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d003      	beq.n	8007ddc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f001 fa0b 	bl	80091f0 <UART_EndTransmit_IT>
    return;
 8007dda:	e026      	b.n	8007e2a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007de0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d009      	beq.n	8007dfc <HAL_UART_IRQHandler+0x73c>
 8007de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d003      	beq.n	8007dfc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f001 ff57 	bl	8009ca8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007dfa:	e016      	b.n	8007e2a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d010      	beq.n	8007e2a <HAL_UART_IRQHandler+0x76a>
 8007e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	da0c      	bge.n	8007e2a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f001 ff3f 	bl	8009c94 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e16:	e008      	b.n	8007e2a <HAL_UART_IRQHandler+0x76a>
      return;
 8007e18:	bf00      	nop
 8007e1a:	e006      	b.n	8007e2a <HAL_UART_IRQHandler+0x76a>
    return;
 8007e1c:	bf00      	nop
 8007e1e:	e004      	b.n	8007e2a <HAL_UART_IRQHandler+0x76a>
      return;
 8007e20:	bf00      	nop
 8007e22:	e002      	b.n	8007e2a <HAL_UART_IRQHandler+0x76a>
      return;
 8007e24:	bf00      	nop
 8007e26:	e000      	b.n	8007e2a <HAL_UART_IRQHandler+0x76a>
    return;
 8007e28:	bf00      	nop
  }
}
 8007e2a:	37e8      	adds	r7, #232	; 0xe8
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	effffffe 	.word	0xeffffffe

08007e34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007e3c:	bf00      	nop
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007e50:	bf00      	nop
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	460b      	mov	r3, r1
 8007e66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e68:	bf00      	nop
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e78:	b092      	sub	sp, #72	; 0x48
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	689a      	ldr	r2, [r3, #8]
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	691b      	ldr	r3, [r3, #16]
 8007e8c:	431a      	orrs	r2, r3
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	695b      	ldr	r3, [r3, #20]
 8007e92:	431a      	orrs	r2, r3
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	69db      	ldr	r3, [r3, #28]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	4bbe      	ldr	r3, [pc, #760]	; (800819c <UART_SetConfig+0x328>)
 8007ea4:	4013      	ands	r3, r2
 8007ea6:	697a      	ldr	r2, [r7, #20]
 8007ea8:	6812      	ldr	r2, [r2, #0]
 8007eaa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007eac:	430b      	orrs	r3, r1
 8007eae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	68da      	ldr	r2, [r3, #12]
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	430a      	orrs	r2, r1
 8007ec4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	699b      	ldr	r3, [r3, #24]
 8007eca:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4ab3      	ldr	r2, [pc, #716]	; (80081a0 <UART_SetConfig+0x32c>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d004      	beq.n	8007ee0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
 8007eda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007edc:	4313      	orrs	r3, r2
 8007ede:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	689a      	ldr	r2, [r3, #8]
 8007ee6:	4baf      	ldr	r3, [pc, #700]	; (80081a4 <UART_SetConfig+0x330>)
 8007ee8:	4013      	ands	r3, r2
 8007eea:	697a      	ldr	r2, [r7, #20]
 8007eec:	6812      	ldr	r2, [r2, #0]
 8007eee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ef0:	430b      	orrs	r3, r1
 8007ef2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efa:	f023 010f 	bic.w	r1, r3, #15
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	430a      	orrs	r2, r1
 8007f08:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4aa6      	ldr	r2, [pc, #664]	; (80081a8 <UART_SetConfig+0x334>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d177      	bne.n	8008004 <UART_SetConfig+0x190>
 8007f14:	4ba5      	ldr	r3, [pc, #660]	; (80081ac <UART_SetConfig+0x338>)
 8007f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f1c:	2b28      	cmp	r3, #40	; 0x28
 8007f1e:	d86d      	bhi.n	8007ffc <UART_SetConfig+0x188>
 8007f20:	a201      	add	r2, pc, #4	; (adr r2, 8007f28 <UART_SetConfig+0xb4>)
 8007f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f26:	bf00      	nop
 8007f28:	08007fcd 	.word	0x08007fcd
 8007f2c:	08007ffd 	.word	0x08007ffd
 8007f30:	08007ffd 	.word	0x08007ffd
 8007f34:	08007ffd 	.word	0x08007ffd
 8007f38:	08007ffd 	.word	0x08007ffd
 8007f3c:	08007ffd 	.word	0x08007ffd
 8007f40:	08007ffd 	.word	0x08007ffd
 8007f44:	08007ffd 	.word	0x08007ffd
 8007f48:	08007fd5 	.word	0x08007fd5
 8007f4c:	08007ffd 	.word	0x08007ffd
 8007f50:	08007ffd 	.word	0x08007ffd
 8007f54:	08007ffd 	.word	0x08007ffd
 8007f58:	08007ffd 	.word	0x08007ffd
 8007f5c:	08007ffd 	.word	0x08007ffd
 8007f60:	08007ffd 	.word	0x08007ffd
 8007f64:	08007ffd 	.word	0x08007ffd
 8007f68:	08007fdd 	.word	0x08007fdd
 8007f6c:	08007ffd 	.word	0x08007ffd
 8007f70:	08007ffd 	.word	0x08007ffd
 8007f74:	08007ffd 	.word	0x08007ffd
 8007f78:	08007ffd 	.word	0x08007ffd
 8007f7c:	08007ffd 	.word	0x08007ffd
 8007f80:	08007ffd 	.word	0x08007ffd
 8007f84:	08007ffd 	.word	0x08007ffd
 8007f88:	08007fe5 	.word	0x08007fe5
 8007f8c:	08007ffd 	.word	0x08007ffd
 8007f90:	08007ffd 	.word	0x08007ffd
 8007f94:	08007ffd 	.word	0x08007ffd
 8007f98:	08007ffd 	.word	0x08007ffd
 8007f9c:	08007ffd 	.word	0x08007ffd
 8007fa0:	08007ffd 	.word	0x08007ffd
 8007fa4:	08007ffd 	.word	0x08007ffd
 8007fa8:	08007fed 	.word	0x08007fed
 8007fac:	08007ffd 	.word	0x08007ffd
 8007fb0:	08007ffd 	.word	0x08007ffd
 8007fb4:	08007ffd 	.word	0x08007ffd
 8007fb8:	08007ffd 	.word	0x08007ffd
 8007fbc:	08007ffd 	.word	0x08007ffd
 8007fc0:	08007ffd 	.word	0x08007ffd
 8007fc4:	08007ffd 	.word	0x08007ffd
 8007fc8:	08007ff5 	.word	0x08007ff5
 8007fcc:	2301      	movs	r3, #1
 8007fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fd2:	e326      	b.n	8008622 <UART_SetConfig+0x7ae>
 8007fd4:	2304      	movs	r3, #4
 8007fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fda:	e322      	b.n	8008622 <UART_SetConfig+0x7ae>
 8007fdc:	2308      	movs	r3, #8
 8007fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fe2:	e31e      	b.n	8008622 <UART_SetConfig+0x7ae>
 8007fe4:	2310      	movs	r3, #16
 8007fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fea:	e31a      	b.n	8008622 <UART_SetConfig+0x7ae>
 8007fec:	2320      	movs	r3, #32
 8007fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ff2:	e316      	b.n	8008622 <UART_SetConfig+0x7ae>
 8007ff4:	2340      	movs	r3, #64	; 0x40
 8007ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ffa:	e312      	b.n	8008622 <UART_SetConfig+0x7ae>
 8007ffc:	2380      	movs	r3, #128	; 0x80
 8007ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008002:	e30e      	b.n	8008622 <UART_SetConfig+0x7ae>
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a69      	ldr	r2, [pc, #420]	; (80081b0 <UART_SetConfig+0x33c>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d130      	bne.n	8008070 <UART_SetConfig+0x1fc>
 800800e:	4b67      	ldr	r3, [pc, #412]	; (80081ac <UART_SetConfig+0x338>)
 8008010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008012:	f003 0307 	and.w	r3, r3, #7
 8008016:	2b05      	cmp	r3, #5
 8008018:	d826      	bhi.n	8008068 <UART_SetConfig+0x1f4>
 800801a:	a201      	add	r2, pc, #4	; (adr r2, 8008020 <UART_SetConfig+0x1ac>)
 800801c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008020:	08008039 	.word	0x08008039
 8008024:	08008041 	.word	0x08008041
 8008028:	08008049 	.word	0x08008049
 800802c:	08008051 	.word	0x08008051
 8008030:	08008059 	.word	0x08008059
 8008034:	08008061 	.word	0x08008061
 8008038:	2300      	movs	r3, #0
 800803a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800803e:	e2f0      	b.n	8008622 <UART_SetConfig+0x7ae>
 8008040:	2304      	movs	r3, #4
 8008042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008046:	e2ec      	b.n	8008622 <UART_SetConfig+0x7ae>
 8008048:	2308      	movs	r3, #8
 800804a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800804e:	e2e8      	b.n	8008622 <UART_SetConfig+0x7ae>
 8008050:	2310      	movs	r3, #16
 8008052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008056:	e2e4      	b.n	8008622 <UART_SetConfig+0x7ae>
 8008058:	2320      	movs	r3, #32
 800805a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800805e:	e2e0      	b.n	8008622 <UART_SetConfig+0x7ae>
 8008060:	2340      	movs	r3, #64	; 0x40
 8008062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008066:	e2dc      	b.n	8008622 <UART_SetConfig+0x7ae>
 8008068:	2380      	movs	r3, #128	; 0x80
 800806a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800806e:	e2d8      	b.n	8008622 <UART_SetConfig+0x7ae>
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a4f      	ldr	r2, [pc, #316]	; (80081b4 <UART_SetConfig+0x340>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d130      	bne.n	80080dc <UART_SetConfig+0x268>
 800807a:	4b4c      	ldr	r3, [pc, #304]	; (80081ac <UART_SetConfig+0x338>)
 800807c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800807e:	f003 0307 	and.w	r3, r3, #7
 8008082:	2b05      	cmp	r3, #5
 8008084:	d826      	bhi.n	80080d4 <UART_SetConfig+0x260>
 8008086:	a201      	add	r2, pc, #4	; (adr r2, 800808c <UART_SetConfig+0x218>)
 8008088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800808c:	080080a5 	.word	0x080080a5
 8008090:	080080ad 	.word	0x080080ad
 8008094:	080080b5 	.word	0x080080b5
 8008098:	080080bd 	.word	0x080080bd
 800809c:	080080c5 	.word	0x080080c5
 80080a0:	080080cd 	.word	0x080080cd
 80080a4:	2300      	movs	r3, #0
 80080a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080aa:	e2ba      	b.n	8008622 <UART_SetConfig+0x7ae>
 80080ac:	2304      	movs	r3, #4
 80080ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080b2:	e2b6      	b.n	8008622 <UART_SetConfig+0x7ae>
 80080b4:	2308      	movs	r3, #8
 80080b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ba:	e2b2      	b.n	8008622 <UART_SetConfig+0x7ae>
 80080bc:	2310      	movs	r3, #16
 80080be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080c2:	e2ae      	b.n	8008622 <UART_SetConfig+0x7ae>
 80080c4:	2320      	movs	r3, #32
 80080c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ca:	e2aa      	b.n	8008622 <UART_SetConfig+0x7ae>
 80080cc:	2340      	movs	r3, #64	; 0x40
 80080ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080d2:	e2a6      	b.n	8008622 <UART_SetConfig+0x7ae>
 80080d4:	2380      	movs	r3, #128	; 0x80
 80080d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080da:	e2a2      	b.n	8008622 <UART_SetConfig+0x7ae>
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a35      	ldr	r2, [pc, #212]	; (80081b8 <UART_SetConfig+0x344>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d130      	bne.n	8008148 <UART_SetConfig+0x2d4>
 80080e6:	4b31      	ldr	r3, [pc, #196]	; (80081ac <UART_SetConfig+0x338>)
 80080e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ea:	f003 0307 	and.w	r3, r3, #7
 80080ee:	2b05      	cmp	r3, #5
 80080f0:	d826      	bhi.n	8008140 <UART_SetConfig+0x2cc>
 80080f2:	a201      	add	r2, pc, #4	; (adr r2, 80080f8 <UART_SetConfig+0x284>)
 80080f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f8:	08008111 	.word	0x08008111
 80080fc:	08008119 	.word	0x08008119
 8008100:	08008121 	.word	0x08008121
 8008104:	08008129 	.word	0x08008129
 8008108:	08008131 	.word	0x08008131
 800810c:	08008139 	.word	0x08008139
 8008110:	2300      	movs	r3, #0
 8008112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008116:	e284      	b.n	8008622 <UART_SetConfig+0x7ae>
 8008118:	2304      	movs	r3, #4
 800811a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800811e:	e280      	b.n	8008622 <UART_SetConfig+0x7ae>
 8008120:	2308      	movs	r3, #8
 8008122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008126:	e27c      	b.n	8008622 <UART_SetConfig+0x7ae>
 8008128:	2310      	movs	r3, #16
 800812a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800812e:	e278      	b.n	8008622 <UART_SetConfig+0x7ae>
 8008130:	2320      	movs	r3, #32
 8008132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008136:	e274      	b.n	8008622 <UART_SetConfig+0x7ae>
 8008138:	2340      	movs	r3, #64	; 0x40
 800813a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800813e:	e270      	b.n	8008622 <UART_SetConfig+0x7ae>
 8008140:	2380      	movs	r3, #128	; 0x80
 8008142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008146:	e26c      	b.n	8008622 <UART_SetConfig+0x7ae>
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a1b      	ldr	r2, [pc, #108]	; (80081bc <UART_SetConfig+0x348>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d142      	bne.n	80081d8 <UART_SetConfig+0x364>
 8008152:	4b16      	ldr	r3, [pc, #88]	; (80081ac <UART_SetConfig+0x338>)
 8008154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008156:	f003 0307 	and.w	r3, r3, #7
 800815a:	2b05      	cmp	r3, #5
 800815c:	d838      	bhi.n	80081d0 <UART_SetConfig+0x35c>
 800815e:	a201      	add	r2, pc, #4	; (adr r2, 8008164 <UART_SetConfig+0x2f0>)
 8008160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008164:	0800817d 	.word	0x0800817d
 8008168:	08008185 	.word	0x08008185
 800816c:	0800818d 	.word	0x0800818d
 8008170:	08008195 	.word	0x08008195
 8008174:	080081c1 	.word	0x080081c1
 8008178:	080081c9 	.word	0x080081c9
 800817c:	2300      	movs	r3, #0
 800817e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008182:	e24e      	b.n	8008622 <UART_SetConfig+0x7ae>
 8008184:	2304      	movs	r3, #4
 8008186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800818a:	e24a      	b.n	8008622 <UART_SetConfig+0x7ae>
 800818c:	2308      	movs	r3, #8
 800818e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008192:	e246      	b.n	8008622 <UART_SetConfig+0x7ae>
 8008194:	2310      	movs	r3, #16
 8008196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800819a:	e242      	b.n	8008622 <UART_SetConfig+0x7ae>
 800819c:	cfff69f3 	.word	0xcfff69f3
 80081a0:	58000c00 	.word	0x58000c00
 80081a4:	11fff4ff 	.word	0x11fff4ff
 80081a8:	40011000 	.word	0x40011000
 80081ac:	58024400 	.word	0x58024400
 80081b0:	40004400 	.word	0x40004400
 80081b4:	40004800 	.word	0x40004800
 80081b8:	40004c00 	.word	0x40004c00
 80081bc:	40005000 	.word	0x40005000
 80081c0:	2320      	movs	r3, #32
 80081c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081c6:	e22c      	b.n	8008622 <UART_SetConfig+0x7ae>
 80081c8:	2340      	movs	r3, #64	; 0x40
 80081ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081ce:	e228      	b.n	8008622 <UART_SetConfig+0x7ae>
 80081d0:	2380      	movs	r3, #128	; 0x80
 80081d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081d6:	e224      	b.n	8008622 <UART_SetConfig+0x7ae>
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4ab1      	ldr	r2, [pc, #708]	; (80084a4 <UART_SetConfig+0x630>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d176      	bne.n	80082d0 <UART_SetConfig+0x45c>
 80081e2:	4bb1      	ldr	r3, [pc, #708]	; (80084a8 <UART_SetConfig+0x634>)
 80081e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081ea:	2b28      	cmp	r3, #40	; 0x28
 80081ec:	d86c      	bhi.n	80082c8 <UART_SetConfig+0x454>
 80081ee:	a201      	add	r2, pc, #4	; (adr r2, 80081f4 <UART_SetConfig+0x380>)
 80081f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f4:	08008299 	.word	0x08008299
 80081f8:	080082c9 	.word	0x080082c9
 80081fc:	080082c9 	.word	0x080082c9
 8008200:	080082c9 	.word	0x080082c9
 8008204:	080082c9 	.word	0x080082c9
 8008208:	080082c9 	.word	0x080082c9
 800820c:	080082c9 	.word	0x080082c9
 8008210:	080082c9 	.word	0x080082c9
 8008214:	080082a1 	.word	0x080082a1
 8008218:	080082c9 	.word	0x080082c9
 800821c:	080082c9 	.word	0x080082c9
 8008220:	080082c9 	.word	0x080082c9
 8008224:	080082c9 	.word	0x080082c9
 8008228:	080082c9 	.word	0x080082c9
 800822c:	080082c9 	.word	0x080082c9
 8008230:	080082c9 	.word	0x080082c9
 8008234:	080082a9 	.word	0x080082a9
 8008238:	080082c9 	.word	0x080082c9
 800823c:	080082c9 	.word	0x080082c9
 8008240:	080082c9 	.word	0x080082c9
 8008244:	080082c9 	.word	0x080082c9
 8008248:	080082c9 	.word	0x080082c9
 800824c:	080082c9 	.word	0x080082c9
 8008250:	080082c9 	.word	0x080082c9
 8008254:	080082b1 	.word	0x080082b1
 8008258:	080082c9 	.word	0x080082c9
 800825c:	080082c9 	.word	0x080082c9
 8008260:	080082c9 	.word	0x080082c9
 8008264:	080082c9 	.word	0x080082c9
 8008268:	080082c9 	.word	0x080082c9
 800826c:	080082c9 	.word	0x080082c9
 8008270:	080082c9 	.word	0x080082c9
 8008274:	080082b9 	.word	0x080082b9
 8008278:	080082c9 	.word	0x080082c9
 800827c:	080082c9 	.word	0x080082c9
 8008280:	080082c9 	.word	0x080082c9
 8008284:	080082c9 	.word	0x080082c9
 8008288:	080082c9 	.word	0x080082c9
 800828c:	080082c9 	.word	0x080082c9
 8008290:	080082c9 	.word	0x080082c9
 8008294:	080082c1 	.word	0x080082c1
 8008298:	2301      	movs	r3, #1
 800829a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800829e:	e1c0      	b.n	8008622 <UART_SetConfig+0x7ae>
 80082a0:	2304      	movs	r3, #4
 80082a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082a6:	e1bc      	b.n	8008622 <UART_SetConfig+0x7ae>
 80082a8:	2308      	movs	r3, #8
 80082aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ae:	e1b8      	b.n	8008622 <UART_SetConfig+0x7ae>
 80082b0:	2310      	movs	r3, #16
 80082b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082b6:	e1b4      	b.n	8008622 <UART_SetConfig+0x7ae>
 80082b8:	2320      	movs	r3, #32
 80082ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082be:	e1b0      	b.n	8008622 <UART_SetConfig+0x7ae>
 80082c0:	2340      	movs	r3, #64	; 0x40
 80082c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082c6:	e1ac      	b.n	8008622 <UART_SetConfig+0x7ae>
 80082c8:	2380      	movs	r3, #128	; 0x80
 80082ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ce:	e1a8      	b.n	8008622 <UART_SetConfig+0x7ae>
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a75      	ldr	r2, [pc, #468]	; (80084ac <UART_SetConfig+0x638>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d130      	bne.n	800833c <UART_SetConfig+0x4c8>
 80082da:	4b73      	ldr	r3, [pc, #460]	; (80084a8 <UART_SetConfig+0x634>)
 80082dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082de:	f003 0307 	and.w	r3, r3, #7
 80082e2:	2b05      	cmp	r3, #5
 80082e4:	d826      	bhi.n	8008334 <UART_SetConfig+0x4c0>
 80082e6:	a201      	add	r2, pc, #4	; (adr r2, 80082ec <UART_SetConfig+0x478>)
 80082e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ec:	08008305 	.word	0x08008305
 80082f0:	0800830d 	.word	0x0800830d
 80082f4:	08008315 	.word	0x08008315
 80082f8:	0800831d 	.word	0x0800831d
 80082fc:	08008325 	.word	0x08008325
 8008300:	0800832d 	.word	0x0800832d
 8008304:	2300      	movs	r3, #0
 8008306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800830a:	e18a      	b.n	8008622 <UART_SetConfig+0x7ae>
 800830c:	2304      	movs	r3, #4
 800830e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008312:	e186      	b.n	8008622 <UART_SetConfig+0x7ae>
 8008314:	2308      	movs	r3, #8
 8008316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800831a:	e182      	b.n	8008622 <UART_SetConfig+0x7ae>
 800831c:	2310      	movs	r3, #16
 800831e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008322:	e17e      	b.n	8008622 <UART_SetConfig+0x7ae>
 8008324:	2320      	movs	r3, #32
 8008326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800832a:	e17a      	b.n	8008622 <UART_SetConfig+0x7ae>
 800832c:	2340      	movs	r3, #64	; 0x40
 800832e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008332:	e176      	b.n	8008622 <UART_SetConfig+0x7ae>
 8008334:	2380      	movs	r3, #128	; 0x80
 8008336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800833a:	e172      	b.n	8008622 <UART_SetConfig+0x7ae>
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a5b      	ldr	r2, [pc, #364]	; (80084b0 <UART_SetConfig+0x63c>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d130      	bne.n	80083a8 <UART_SetConfig+0x534>
 8008346:	4b58      	ldr	r3, [pc, #352]	; (80084a8 <UART_SetConfig+0x634>)
 8008348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800834a:	f003 0307 	and.w	r3, r3, #7
 800834e:	2b05      	cmp	r3, #5
 8008350:	d826      	bhi.n	80083a0 <UART_SetConfig+0x52c>
 8008352:	a201      	add	r2, pc, #4	; (adr r2, 8008358 <UART_SetConfig+0x4e4>)
 8008354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008358:	08008371 	.word	0x08008371
 800835c:	08008379 	.word	0x08008379
 8008360:	08008381 	.word	0x08008381
 8008364:	08008389 	.word	0x08008389
 8008368:	08008391 	.word	0x08008391
 800836c:	08008399 	.word	0x08008399
 8008370:	2300      	movs	r3, #0
 8008372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008376:	e154      	b.n	8008622 <UART_SetConfig+0x7ae>
 8008378:	2304      	movs	r3, #4
 800837a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800837e:	e150      	b.n	8008622 <UART_SetConfig+0x7ae>
 8008380:	2308      	movs	r3, #8
 8008382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008386:	e14c      	b.n	8008622 <UART_SetConfig+0x7ae>
 8008388:	2310      	movs	r3, #16
 800838a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800838e:	e148      	b.n	8008622 <UART_SetConfig+0x7ae>
 8008390:	2320      	movs	r3, #32
 8008392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008396:	e144      	b.n	8008622 <UART_SetConfig+0x7ae>
 8008398:	2340      	movs	r3, #64	; 0x40
 800839a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800839e:	e140      	b.n	8008622 <UART_SetConfig+0x7ae>
 80083a0:	2380      	movs	r3, #128	; 0x80
 80083a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083a6:	e13c      	b.n	8008622 <UART_SetConfig+0x7ae>
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a41      	ldr	r2, [pc, #260]	; (80084b4 <UART_SetConfig+0x640>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	f040 8082 	bne.w	80084b8 <UART_SetConfig+0x644>
 80083b4:	4b3c      	ldr	r3, [pc, #240]	; (80084a8 <UART_SetConfig+0x634>)
 80083b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80083bc:	2b28      	cmp	r3, #40	; 0x28
 80083be:	d86d      	bhi.n	800849c <UART_SetConfig+0x628>
 80083c0:	a201      	add	r2, pc, #4	; (adr r2, 80083c8 <UART_SetConfig+0x554>)
 80083c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c6:	bf00      	nop
 80083c8:	0800846d 	.word	0x0800846d
 80083cc:	0800849d 	.word	0x0800849d
 80083d0:	0800849d 	.word	0x0800849d
 80083d4:	0800849d 	.word	0x0800849d
 80083d8:	0800849d 	.word	0x0800849d
 80083dc:	0800849d 	.word	0x0800849d
 80083e0:	0800849d 	.word	0x0800849d
 80083e4:	0800849d 	.word	0x0800849d
 80083e8:	08008475 	.word	0x08008475
 80083ec:	0800849d 	.word	0x0800849d
 80083f0:	0800849d 	.word	0x0800849d
 80083f4:	0800849d 	.word	0x0800849d
 80083f8:	0800849d 	.word	0x0800849d
 80083fc:	0800849d 	.word	0x0800849d
 8008400:	0800849d 	.word	0x0800849d
 8008404:	0800849d 	.word	0x0800849d
 8008408:	0800847d 	.word	0x0800847d
 800840c:	0800849d 	.word	0x0800849d
 8008410:	0800849d 	.word	0x0800849d
 8008414:	0800849d 	.word	0x0800849d
 8008418:	0800849d 	.word	0x0800849d
 800841c:	0800849d 	.word	0x0800849d
 8008420:	0800849d 	.word	0x0800849d
 8008424:	0800849d 	.word	0x0800849d
 8008428:	08008485 	.word	0x08008485
 800842c:	0800849d 	.word	0x0800849d
 8008430:	0800849d 	.word	0x0800849d
 8008434:	0800849d 	.word	0x0800849d
 8008438:	0800849d 	.word	0x0800849d
 800843c:	0800849d 	.word	0x0800849d
 8008440:	0800849d 	.word	0x0800849d
 8008444:	0800849d 	.word	0x0800849d
 8008448:	0800848d 	.word	0x0800848d
 800844c:	0800849d 	.word	0x0800849d
 8008450:	0800849d 	.word	0x0800849d
 8008454:	0800849d 	.word	0x0800849d
 8008458:	0800849d 	.word	0x0800849d
 800845c:	0800849d 	.word	0x0800849d
 8008460:	0800849d 	.word	0x0800849d
 8008464:	0800849d 	.word	0x0800849d
 8008468:	08008495 	.word	0x08008495
 800846c:	2301      	movs	r3, #1
 800846e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008472:	e0d6      	b.n	8008622 <UART_SetConfig+0x7ae>
 8008474:	2304      	movs	r3, #4
 8008476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800847a:	e0d2      	b.n	8008622 <UART_SetConfig+0x7ae>
 800847c:	2308      	movs	r3, #8
 800847e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008482:	e0ce      	b.n	8008622 <UART_SetConfig+0x7ae>
 8008484:	2310      	movs	r3, #16
 8008486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800848a:	e0ca      	b.n	8008622 <UART_SetConfig+0x7ae>
 800848c:	2320      	movs	r3, #32
 800848e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008492:	e0c6      	b.n	8008622 <UART_SetConfig+0x7ae>
 8008494:	2340      	movs	r3, #64	; 0x40
 8008496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800849a:	e0c2      	b.n	8008622 <UART_SetConfig+0x7ae>
 800849c:	2380      	movs	r3, #128	; 0x80
 800849e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084a2:	e0be      	b.n	8008622 <UART_SetConfig+0x7ae>
 80084a4:	40011400 	.word	0x40011400
 80084a8:	58024400 	.word	0x58024400
 80084ac:	40007800 	.word	0x40007800
 80084b0:	40007c00 	.word	0x40007c00
 80084b4:	40011800 	.word	0x40011800
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4aad      	ldr	r2, [pc, #692]	; (8008774 <UART_SetConfig+0x900>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d176      	bne.n	80085b0 <UART_SetConfig+0x73c>
 80084c2:	4bad      	ldr	r3, [pc, #692]	; (8008778 <UART_SetConfig+0x904>)
 80084c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084ca:	2b28      	cmp	r3, #40	; 0x28
 80084cc:	d86c      	bhi.n	80085a8 <UART_SetConfig+0x734>
 80084ce:	a201      	add	r2, pc, #4	; (adr r2, 80084d4 <UART_SetConfig+0x660>)
 80084d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d4:	08008579 	.word	0x08008579
 80084d8:	080085a9 	.word	0x080085a9
 80084dc:	080085a9 	.word	0x080085a9
 80084e0:	080085a9 	.word	0x080085a9
 80084e4:	080085a9 	.word	0x080085a9
 80084e8:	080085a9 	.word	0x080085a9
 80084ec:	080085a9 	.word	0x080085a9
 80084f0:	080085a9 	.word	0x080085a9
 80084f4:	08008581 	.word	0x08008581
 80084f8:	080085a9 	.word	0x080085a9
 80084fc:	080085a9 	.word	0x080085a9
 8008500:	080085a9 	.word	0x080085a9
 8008504:	080085a9 	.word	0x080085a9
 8008508:	080085a9 	.word	0x080085a9
 800850c:	080085a9 	.word	0x080085a9
 8008510:	080085a9 	.word	0x080085a9
 8008514:	08008589 	.word	0x08008589
 8008518:	080085a9 	.word	0x080085a9
 800851c:	080085a9 	.word	0x080085a9
 8008520:	080085a9 	.word	0x080085a9
 8008524:	080085a9 	.word	0x080085a9
 8008528:	080085a9 	.word	0x080085a9
 800852c:	080085a9 	.word	0x080085a9
 8008530:	080085a9 	.word	0x080085a9
 8008534:	08008591 	.word	0x08008591
 8008538:	080085a9 	.word	0x080085a9
 800853c:	080085a9 	.word	0x080085a9
 8008540:	080085a9 	.word	0x080085a9
 8008544:	080085a9 	.word	0x080085a9
 8008548:	080085a9 	.word	0x080085a9
 800854c:	080085a9 	.word	0x080085a9
 8008550:	080085a9 	.word	0x080085a9
 8008554:	08008599 	.word	0x08008599
 8008558:	080085a9 	.word	0x080085a9
 800855c:	080085a9 	.word	0x080085a9
 8008560:	080085a9 	.word	0x080085a9
 8008564:	080085a9 	.word	0x080085a9
 8008568:	080085a9 	.word	0x080085a9
 800856c:	080085a9 	.word	0x080085a9
 8008570:	080085a9 	.word	0x080085a9
 8008574:	080085a1 	.word	0x080085a1
 8008578:	2301      	movs	r3, #1
 800857a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800857e:	e050      	b.n	8008622 <UART_SetConfig+0x7ae>
 8008580:	2304      	movs	r3, #4
 8008582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008586:	e04c      	b.n	8008622 <UART_SetConfig+0x7ae>
 8008588:	2308      	movs	r3, #8
 800858a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800858e:	e048      	b.n	8008622 <UART_SetConfig+0x7ae>
 8008590:	2310      	movs	r3, #16
 8008592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008596:	e044      	b.n	8008622 <UART_SetConfig+0x7ae>
 8008598:	2320      	movs	r3, #32
 800859a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800859e:	e040      	b.n	8008622 <UART_SetConfig+0x7ae>
 80085a0:	2340      	movs	r3, #64	; 0x40
 80085a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085a6:	e03c      	b.n	8008622 <UART_SetConfig+0x7ae>
 80085a8:	2380      	movs	r3, #128	; 0x80
 80085aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ae:	e038      	b.n	8008622 <UART_SetConfig+0x7ae>
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a71      	ldr	r2, [pc, #452]	; (800877c <UART_SetConfig+0x908>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d130      	bne.n	800861c <UART_SetConfig+0x7a8>
 80085ba:	4b6f      	ldr	r3, [pc, #444]	; (8008778 <UART_SetConfig+0x904>)
 80085bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085be:	f003 0307 	and.w	r3, r3, #7
 80085c2:	2b05      	cmp	r3, #5
 80085c4:	d826      	bhi.n	8008614 <UART_SetConfig+0x7a0>
 80085c6:	a201      	add	r2, pc, #4	; (adr r2, 80085cc <UART_SetConfig+0x758>)
 80085c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085cc:	080085e5 	.word	0x080085e5
 80085d0:	080085ed 	.word	0x080085ed
 80085d4:	080085f5 	.word	0x080085f5
 80085d8:	080085fd 	.word	0x080085fd
 80085dc:	08008605 	.word	0x08008605
 80085e0:	0800860d 	.word	0x0800860d
 80085e4:	2302      	movs	r3, #2
 80085e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ea:	e01a      	b.n	8008622 <UART_SetConfig+0x7ae>
 80085ec:	2304      	movs	r3, #4
 80085ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085f2:	e016      	b.n	8008622 <UART_SetConfig+0x7ae>
 80085f4:	2308      	movs	r3, #8
 80085f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085fa:	e012      	b.n	8008622 <UART_SetConfig+0x7ae>
 80085fc:	2310      	movs	r3, #16
 80085fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008602:	e00e      	b.n	8008622 <UART_SetConfig+0x7ae>
 8008604:	2320      	movs	r3, #32
 8008606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800860a:	e00a      	b.n	8008622 <UART_SetConfig+0x7ae>
 800860c:	2340      	movs	r3, #64	; 0x40
 800860e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008612:	e006      	b.n	8008622 <UART_SetConfig+0x7ae>
 8008614:	2380      	movs	r3, #128	; 0x80
 8008616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800861a:	e002      	b.n	8008622 <UART_SetConfig+0x7ae>
 800861c:	2380      	movs	r3, #128	; 0x80
 800861e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a55      	ldr	r2, [pc, #340]	; (800877c <UART_SetConfig+0x908>)
 8008628:	4293      	cmp	r3, r2
 800862a:	f040 80f8 	bne.w	800881e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800862e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008632:	2b20      	cmp	r3, #32
 8008634:	dc46      	bgt.n	80086c4 <UART_SetConfig+0x850>
 8008636:	2b02      	cmp	r3, #2
 8008638:	db75      	blt.n	8008726 <UART_SetConfig+0x8b2>
 800863a:	3b02      	subs	r3, #2
 800863c:	2b1e      	cmp	r3, #30
 800863e:	d872      	bhi.n	8008726 <UART_SetConfig+0x8b2>
 8008640:	a201      	add	r2, pc, #4	; (adr r2, 8008648 <UART_SetConfig+0x7d4>)
 8008642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008646:	bf00      	nop
 8008648:	080086cb 	.word	0x080086cb
 800864c:	08008727 	.word	0x08008727
 8008650:	080086d3 	.word	0x080086d3
 8008654:	08008727 	.word	0x08008727
 8008658:	08008727 	.word	0x08008727
 800865c:	08008727 	.word	0x08008727
 8008660:	080086e3 	.word	0x080086e3
 8008664:	08008727 	.word	0x08008727
 8008668:	08008727 	.word	0x08008727
 800866c:	08008727 	.word	0x08008727
 8008670:	08008727 	.word	0x08008727
 8008674:	08008727 	.word	0x08008727
 8008678:	08008727 	.word	0x08008727
 800867c:	08008727 	.word	0x08008727
 8008680:	080086f3 	.word	0x080086f3
 8008684:	08008727 	.word	0x08008727
 8008688:	08008727 	.word	0x08008727
 800868c:	08008727 	.word	0x08008727
 8008690:	08008727 	.word	0x08008727
 8008694:	08008727 	.word	0x08008727
 8008698:	08008727 	.word	0x08008727
 800869c:	08008727 	.word	0x08008727
 80086a0:	08008727 	.word	0x08008727
 80086a4:	08008727 	.word	0x08008727
 80086a8:	08008727 	.word	0x08008727
 80086ac:	08008727 	.word	0x08008727
 80086b0:	08008727 	.word	0x08008727
 80086b4:	08008727 	.word	0x08008727
 80086b8:	08008727 	.word	0x08008727
 80086bc:	08008727 	.word	0x08008727
 80086c0:	08008719 	.word	0x08008719
 80086c4:	2b40      	cmp	r3, #64	; 0x40
 80086c6:	d02a      	beq.n	800871e <UART_SetConfig+0x8aa>
 80086c8:	e02d      	b.n	8008726 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80086ca:	f7fd faf9 	bl	8005cc0 <HAL_RCCEx_GetD3PCLK1Freq>
 80086ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80086d0:	e02f      	b.n	8008732 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7fd fb08 	bl	8005cec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80086dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086e0:	e027      	b.n	8008732 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086e2:	f107 0318 	add.w	r3, r7, #24
 80086e6:	4618      	mov	r0, r3
 80086e8:	f7fd fc54 	bl	8005f94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086f0:	e01f      	b.n	8008732 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086f2:	4b21      	ldr	r3, [pc, #132]	; (8008778 <UART_SetConfig+0x904>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f003 0320 	and.w	r3, r3, #32
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d009      	beq.n	8008712 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80086fe:	4b1e      	ldr	r3, [pc, #120]	; (8008778 <UART_SetConfig+0x904>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	08db      	lsrs	r3, r3, #3
 8008704:	f003 0303 	and.w	r3, r3, #3
 8008708:	4a1d      	ldr	r2, [pc, #116]	; (8008780 <UART_SetConfig+0x90c>)
 800870a:	fa22 f303 	lsr.w	r3, r2, r3
 800870e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008710:	e00f      	b.n	8008732 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008712:	4b1b      	ldr	r3, [pc, #108]	; (8008780 <UART_SetConfig+0x90c>)
 8008714:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008716:	e00c      	b.n	8008732 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008718:	4b1a      	ldr	r3, [pc, #104]	; (8008784 <UART_SetConfig+0x910>)
 800871a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800871c:	e009      	b.n	8008732 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800871e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008722:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008724:	e005      	b.n	8008732 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008726:	2300      	movs	r3, #0
 8008728:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008730:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008734:	2b00      	cmp	r3, #0
 8008736:	f000 81ee 	beq.w	8008b16 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873e:	4a12      	ldr	r2, [pc, #72]	; (8008788 <UART_SetConfig+0x914>)
 8008740:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008744:	461a      	mov	r2, r3
 8008746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008748:	fbb3 f3f2 	udiv	r3, r3, r2
 800874c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	685a      	ldr	r2, [r3, #4]
 8008752:	4613      	mov	r3, r2
 8008754:	005b      	lsls	r3, r3, #1
 8008756:	4413      	add	r3, r2
 8008758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800875a:	429a      	cmp	r2, r3
 800875c:	d305      	bcc.n	800876a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008766:	429a      	cmp	r2, r3
 8008768:	d910      	bls.n	800878c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008770:	e1d1      	b.n	8008b16 <UART_SetConfig+0xca2>
 8008772:	bf00      	nop
 8008774:	40011c00 	.word	0x40011c00
 8008778:	58024400 	.word	0x58024400
 800877c:	58000c00 	.word	0x58000c00
 8008780:	03d09000 	.word	0x03d09000
 8008784:	003d0900 	.word	0x003d0900
 8008788:	0800ae38 	.word	0x0800ae38
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800878c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800878e:	2200      	movs	r2, #0
 8008790:	60bb      	str	r3, [r7, #8]
 8008792:	60fa      	str	r2, [r7, #12]
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008798:	4ac0      	ldr	r2, [pc, #768]	; (8008a9c <UART_SetConfig+0xc28>)
 800879a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800879e:	b29b      	uxth	r3, r3
 80087a0:	2200      	movs	r2, #0
 80087a2:	603b      	str	r3, [r7, #0]
 80087a4:	607a      	str	r2, [r7, #4]
 80087a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80087ae:	f7f7 fdf7 	bl	80003a0 <__aeabi_uldivmod>
 80087b2:	4602      	mov	r2, r0
 80087b4:	460b      	mov	r3, r1
 80087b6:	4610      	mov	r0, r2
 80087b8:	4619      	mov	r1, r3
 80087ba:	f04f 0200 	mov.w	r2, #0
 80087be:	f04f 0300 	mov.w	r3, #0
 80087c2:	020b      	lsls	r3, r1, #8
 80087c4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80087c8:	0202      	lsls	r2, r0, #8
 80087ca:	6979      	ldr	r1, [r7, #20]
 80087cc:	6849      	ldr	r1, [r1, #4]
 80087ce:	0849      	lsrs	r1, r1, #1
 80087d0:	2000      	movs	r0, #0
 80087d2:	460c      	mov	r4, r1
 80087d4:	4605      	mov	r5, r0
 80087d6:	eb12 0804 	adds.w	r8, r2, r4
 80087da:	eb43 0905 	adc.w	r9, r3, r5
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	469a      	mov	sl, r3
 80087e6:	4693      	mov	fp, r2
 80087e8:	4652      	mov	r2, sl
 80087ea:	465b      	mov	r3, fp
 80087ec:	4640      	mov	r0, r8
 80087ee:	4649      	mov	r1, r9
 80087f0:	f7f7 fdd6 	bl	80003a0 <__aeabi_uldivmod>
 80087f4:	4602      	mov	r2, r0
 80087f6:	460b      	mov	r3, r1
 80087f8:	4613      	mov	r3, r2
 80087fa:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80087fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008802:	d308      	bcc.n	8008816 <UART_SetConfig+0x9a2>
 8008804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008806:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800880a:	d204      	bcs.n	8008816 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008812:	60da      	str	r2, [r3, #12]
 8008814:	e17f      	b.n	8008b16 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800881c:	e17b      	b.n	8008b16 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	69db      	ldr	r3, [r3, #28]
 8008822:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008826:	f040 80bd 	bne.w	80089a4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800882a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800882e:	2b20      	cmp	r3, #32
 8008830:	dc48      	bgt.n	80088c4 <UART_SetConfig+0xa50>
 8008832:	2b00      	cmp	r3, #0
 8008834:	db7b      	blt.n	800892e <UART_SetConfig+0xaba>
 8008836:	2b20      	cmp	r3, #32
 8008838:	d879      	bhi.n	800892e <UART_SetConfig+0xaba>
 800883a:	a201      	add	r2, pc, #4	; (adr r2, 8008840 <UART_SetConfig+0x9cc>)
 800883c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008840:	080088cb 	.word	0x080088cb
 8008844:	080088d3 	.word	0x080088d3
 8008848:	0800892f 	.word	0x0800892f
 800884c:	0800892f 	.word	0x0800892f
 8008850:	080088db 	.word	0x080088db
 8008854:	0800892f 	.word	0x0800892f
 8008858:	0800892f 	.word	0x0800892f
 800885c:	0800892f 	.word	0x0800892f
 8008860:	080088eb 	.word	0x080088eb
 8008864:	0800892f 	.word	0x0800892f
 8008868:	0800892f 	.word	0x0800892f
 800886c:	0800892f 	.word	0x0800892f
 8008870:	0800892f 	.word	0x0800892f
 8008874:	0800892f 	.word	0x0800892f
 8008878:	0800892f 	.word	0x0800892f
 800887c:	0800892f 	.word	0x0800892f
 8008880:	080088fb 	.word	0x080088fb
 8008884:	0800892f 	.word	0x0800892f
 8008888:	0800892f 	.word	0x0800892f
 800888c:	0800892f 	.word	0x0800892f
 8008890:	0800892f 	.word	0x0800892f
 8008894:	0800892f 	.word	0x0800892f
 8008898:	0800892f 	.word	0x0800892f
 800889c:	0800892f 	.word	0x0800892f
 80088a0:	0800892f 	.word	0x0800892f
 80088a4:	0800892f 	.word	0x0800892f
 80088a8:	0800892f 	.word	0x0800892f
 80088ac:	0800892f 	.word	0x0800892f
 80088b0:	0800892f 	.word	0x0800892f
 80088b4:	0800892f 	.word	0x0800892f
 80088b8:	0800892f 	.word	0x0800892f
 80088bc:	0800892f 	.word	0x0800892f
 80088c0:	08008921 	.word	0x08008921
 80088c4:	2b40      	cmp	r3, #64	; 0x40
 80088c6:	d02e      	beq.n	8008926 <UART_SetConfig+0xab2>
 80088c8:	e031      	b.n	800892e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088ca:	f7fc f80f 	bl	80048ec <HAL_RCC_GetPCLK1Freq>
 80088ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80088d0:	e033      	b.n	800893a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088d2:	f7fc f821 	bl	8004918 <HAL_RCC_GetPCLK2Freq>
 80088d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80088d8:	e02f      	b.n	800893a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088de:	4618      	mov	r0, r3
 80088e0:	f7fd fa04 	bl	8005cec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80088e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088e8:	e027      	b.n	800893a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088ea:	f107 0318 	add.w	r3, r7, #24
 80088ee:	4618      	mov	r0, r3
 80088f0:	f7fd fb50 	bl	8005f94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088f8:	e01f      	b.n	800893a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088fa:	4b69      	ldr	r3, [pc, #420]	; (8008aa0 <UART_SetConfig+0xc2c>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f003 0320 	and.w	r3, r3, #32
 8008902:	2b00      	cmp	r3, #0
 8008904:	d009      	beq.n	800891a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008906:	4b66      	ldr	r3, [pc, #408]	; (8008aa0 <UART_SetConfig+0xc2c>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	08db      	lsrs	r3, r3, #3
 800890c:	f003 0303 	and.w	r3, r3, #3
 8008910:	4a64      	ldr	r2, [pc, #400]	; (8008aa4 <UART_SetConfig+0xc30>)
 8008912:	fa22 f303 	lsr.w	r3, r2, r3
 8008916:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008918:	e00f      	b.n	800893a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800891a:	4b62      	ldr	r3, [pc, #392]	; (8008aa4 <UART_SetConfig+0xc30>)
 800891c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800891e:	e00c      	b.n	800893a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008920:	4b61      	ldr	r3, [pc, #388]	; (8008aa8 <UART_SetConfig+0xc34>)
 8008922:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008924:	e009      	b.n	800893a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800892a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800892c:	e005      	b.n	800893a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800892e:	2300      	movs	r3, #0
 8008930:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008938:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800893a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800893c:	2b00      	cmp	r3, #0
 800893e:	f000 80ea 	beq.w	8008b16 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008946:	4a55      	ldr	r2, [pc, #340]	; (8008a9c <UART_SetConfig+0xc28>)
 8008948:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800894c:	461a      	mov	r2, r3
 800894e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008950:	fbb3 f3f2 	udiv	r3, r3, r2
 8008954:	005a      	lsls	r2, r3, #1
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	085b      	lsrs	r3, r3, #1
 800895c:	441a      	add	r2, r3
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	fbb2 f3f3 	udiv	r3, r2, r3
 8008966:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800896a:	2b0f      	cmp	r3, #15
 800896c:	d916      	bls.n	800899c <UART_SetConfig+0xb28>
 800896e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008974:	d212      	bcs.n	800899c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008978:	b29b      	uxth	r3, r3
 800897a:	f023 030f 	bic.w	r3, r3, #15
 800897e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008982:	085b      	lsrs	r3, r3, #1
 8008984:	b29b      	uxth	r3, r3
 8008986:	f003 0307 	and.w	r3, r3, #7
 800898a:	b29a      	uxth	r2, r3
 800898c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800898e:	4313      	orrs	r3, r2
 8008990:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008998:	60da      	str	r2, [r3, #12]
 800899a:	e0bc      	b.n	8008b16 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80089a2:	e0b8      	b.n	8008b16 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80089a4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80089a8:	2b20      	cmp	r3, #32
 80089aa:	dc4b      	bgt.n	8008a44 <UART_SetConfig+0xbd0>
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	f2c0 8087 	blt.w	8008ac0 <UART_SetConfig+0xc4c>
 80089b2:	2b20      	cmp	r3, #32
 80089b4:	f200 8084 	bhi.w	8008ac0 <UART_SetConfig+0xc4c>
 80089b8:	a201      	add	r2, pc, #4	; (adr r2, 80089c0 <UART_SetConfig+0xb4c>)
 80089ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089be:	bf00      	nop
 80089c0:	08008a4b 	.word	0x08008a4b
 80089c4:	08008a53 	.word	0x08008a53
 80089c8:	08008ac1 	.word	0x08008ac1
 80089cc:	08008ac1 	.word	0x08008ac1
 80089d0:	08008a5b 	.word	0x08008a5b
 80089d4:	08008ac1 	.word	0x08008ac1
 80089d8:	08008ac1 	.word	0x08008ac1
 80089dc:	08008ac1 	.word	0x08008ac1
 80089e0:	08008a6b 	.word	0x08008a6b
 80089e4:	08008ac1 	.word	0x08008ac1
 80089e8:	08008ac1 	.word	0x08008ac1
 80089ec:	08008ac1 	.word	0x08008ac1
 80089f0:	08008ac1 	.word	0x08008ac1
 80089f4:	08008ac1 	.word	0x08008ac1
 80089f8:	08008ac1 	.word	0x08008ac1
 80089fc:	08008ac1 	.word	0x08008ac1
 8008a00:	08008a7b 	.word	0x08008a7b
 8008a04:	08008ac1 	.word	0x08008ac1
 8008a08:	08008ac1 	.word	0x08008ac1
 8008a0c:	08008ac1 	.word	0x08008ac1
 8008a10:	08008ac1 	.word	0x08008ac1
 8008a14:	08008ac1 	.word	0x08008ac1
 8008a18:	08008ac1 	.word	0x08008ac1
 8008a1c:	08008ac1 	.word	0x08008ac1
 8008a20:	08008ac1 	.word	0x08008ac1
 8008a24:	08008ac1 	.word	0x08008ac1
 8008a28:	08008ac1 	.word	0x08008ac1
 8008a2c:	08008ac1 	.word	0x08008ac1
 8008a30:	08008ac1 	.word	0x08008ac1
 8008a34:	08008ac1 	.word	0x08008ac1
 8008a38:	08008ac1 	.word	0x08008ac1
 8008a3c:	08008ac1 	.word	0x08008ac1
 8008a40:	08008ab3 	.word	0x08008ab3
 8008a44:	2b40      	cmp	r3, #64	; 0x40
 8008a46:	d037      	beq.n	8008ab8 <UART_SetConfig+0xc44>
 8008a48:	e03a      	b.n	8008ac0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a4a:	f7fb ff4f 	bl	80048ec <HAL_RCC_GetPCLK1Freq>
 8008a4e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008a50:	e03c      	b.n	8008acc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a52:	f7fb ff61 	bl	8004918 <HAL_RCC_GetPCLK2Freq>
 8008a56:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008a58:	e038      	b.n	8008acc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7fd f944 	bl	8005cec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a68:	e030      	b.n	8008acc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a6a:	f107 0318 	add.w	r3, r7, #24
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fd fa90 	bl	8005f94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a78:	e028      	b.n	8008acc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a7a:	4b09      	ldr	r3, [pc, #36]	; (8008aa0 <UART_SetConfig+0xc2c>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f003 0320 	and.w	r3, r3, #32
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d012      	beq.n	8008aac <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008a86:	4b06      	ldr	r3, [pc, #24]	; (8008aa0 <UART_SetConfig+0xc2c>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	08db      	lsrs	r3, r3, #3
 8008a8c:	f003 0303 	and.w	r3, r3, #3
 8008a90:	4a04      	ldr	r2, [pc, #16]	; (8008aa4 <UART_SetConfig+0xc30>)
 8008a92:	fa22 f303 	lsr.w	r3, r2, r3
 8008a96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008a98:	e018      	b.n	8008acc <UART_SetConfig+0xc58>
 8008a9a:	bf00      	nop
 8008a9c:	0800ae38 	.word	0x0800ae38
 8008aa0:	58024400 	.word	0x58024400
 8008aa4:	03d09000 	.word	0x03d09000
 8008aa8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008aac:	4b24      	ldr	r3, [pc, #144]	; (8008b40 <UART_SetConfig+0xccc>)
 8008aae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ab0:	e00c      	b.n	8008acc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008ab2:	4b24      	ldr	r3, [pc, #144]	; (8008b44 <UART_SetConfig+0xcd0>)
 8008ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ab6:	e009      	b.n	8008acc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ab8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008abc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008abe:	e005      	b.n	8008acc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008aca:	bf00      	nop
    }

    if (pclk != 0U)
 8008acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d021      	beq.n	8008b16 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad6:	4a1c      	ldr	r2, [pc, #112]	; (8008b48 <UART_SetConfig+0xcd4>)
 8008ad8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008adc:	461a      	mov	r2, r3
 8008ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ae0:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	085b      	lsrs	r3, r3, #1
 8008aea:	441a      	add	r2, r3
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008af4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af8:	2b0f      	cmp	r3, #15
 8008afa:	d909      	bls.n	8008b10 <UART_SetConfig+0xc9c>
 8008afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b02:	d205      	bcs.n	8008b10 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b06:	b29a      	uxth	r2, r3
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	60da      	str	r2, [r3, #12]
 8008b0e:	e002      	b.n	8008b16 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008b10:	2301      	movs	r3, #1
 8008b12:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	2201      	movs	r2, #1
 8008b1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	2201      	movs	r2, #1
 8008b22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008b32:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3748      	adds	r7, #72	; 0x48
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b40:	03d09000 	.word	0x03d09000
 8008b44:	003d0900 	.word	0x003d0900
 8008b48:	0800ae38 	.word	0x0800ae38

08008b4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b58:	f003 0301 	and.w	r3, r3, #1
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d00a      	beq.n	8008b76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	430a      	orrs	r2, r1
 8008b74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b7a:	f003 0302 	and.w	r3, r3, #2
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d00a      	beq.n	8008b98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	430a      	orrs	r2, r1
 8008b96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b9c:	f003 0304 	and.w	r3, r3, #4
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d00a      	beq.n	8008bba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	430a      	orrs	r2, r1
 8008bb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bbe:	f003 0308 	and.w	r3, r3, #8
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d00a      	beq.n	8008bdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	430a      	orrs	r2, r1
 8008bda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008be0:	f003 0310 	and.w	r3, r3, #16
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00a      	beq.n	8008bfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	430a      	orrs	r2, r1
 8008bfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c02:	f003 0320 	and.w	r3, r3, #32
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d00a      	beq.n	8008c20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	430a      	orrs	r2, r1
 8008c1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d01a      	beq.n	8008c62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	430a      	orrs	r2, r1
 8008c40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c4a:	d10a      	bne.n	8008c62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	430a      	orrs	r2, r1
 8008c60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00a      	beq.n	8008c84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	430a      	orrs	r2, r1
 8008c82:	605a      	str	r2, [r3, #4]
  }
}
 8008c84:	bf00      	nop
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b098      	sub	sp, #96	; 0x60
 8008c94:	af02      	add	r7, sp, #8
 8008c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ca0:	f7f9 fdb0 	bl	8002804 <HAL_GetTick>
 8008ca4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f003 0308 	and.w	r3, r3, #8
 8008cb0:	2b08      	cmp	r3, #8
 8008cb2:	d12f      	bne.n	8008d14 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008cb8:	9300      	str	r3, [sp, #0]
 8008cba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 f88e 	bl	8008de4 <UART_WaitOnFlagUntilTimeout>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d022      	beq.n	8008d14 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd6:	e853 3f00 	ldrex	r3, [r3]
 8008cda:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ce2:	653b      	str	r3, [r7, #80]	; 0x50
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	461a      	mov	r2, r3
 8008cea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cec:	647b      	str	r3, [r7, #68]	; 0x44
 8008cee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008cf2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008cf4:	e841 2300 	strex	r3, r2, [r1]
 8008cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d1e6      	bne.n	8008cce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2220      	movs	r2, #32
 8008d04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d10:	2303      	movs	r3, #3
 8008d12:	e063      	b.n	8008ddc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f003 0304 	and.w	r3, r3, #4
 8008d1e:	2b04      	cmp	r3, #4
 8008d20:	d149      	bne.n	8008db6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d22:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d26:	9300      	str	r3, [sp, #0]
 8008d28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 f857 	bl	8008de4 <UART_WaitOnFlagUntilTimeout>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d03c      	beq.n	8008db6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d44:	e853 3f00 	ldrex	r3, [r3]
 8008d48:	623b      	str	r3, [r7, #32]
   return(result);
 8008d4a:	6a3b      	ldr	r3, [r7, #32]
 8008d4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	461a      	mov	r2, r3
 8008d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d5a:	633b      	str	r3, [r7, #48]	; 0x30
 8008d5c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d62:	e841 2300 	strex	r3, r2, [r1]
 8008d66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d1e6      	bne.n	8008d3c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	3308      	adds	r3, #8
 8008d74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	e853 3f00 	ldrex	r3, [r3]
 8008d7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f023 0301 	bic.w	r3, r3, #1
 8008d84:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	3308      	adds	r3, #8
 8008d8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d8e:	61fa      	str	r2, [r7, #28]
 8008d90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d92:	69b9      	ldr	r1, [r7, #24]
 8008d94:	69fa      	ldr	r2, [r7, #28]
 8008d96:	e841 2300 	strex	r3, r2, [r1]
 8008d9a:	617b      	str	r3, [r7, #20]
   return(result);
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d1e5      	bne.n	8008d6e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2220      	movs	r2, #32
 8008da6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008db2:	2303      	movs	r3, #3
 8008db4:	e012      	b.n	8008ddc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2220      	movs	r2, #32
 8008dba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2220      	movs	r2, #32
 8008dc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008dda:	2300      	movs	r3, #0
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3758      	adds	r7, #88	; 0x58
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	603b      	str	r3, [r7, #0]
 8008df0:	4613      	mov	r3, r2
 8008df2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008df4:	e049      	b.n	8008e8a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008df6:	69bb      	ldr	r3, [r7, #24]
 8008df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dfc:	d045      	beq.n	8008e8a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dfe:	f7f9 fd01 	bl	8002804 <HAL_GetTick>
 8008e02:	4602      	mov	r2, r0
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	1ad3      	subs	r3, r2, r3
 8008e08:	69ba      	ldr	r2, [r7, #24]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d302      	bcc.n	8008e14 <UART_WaitOnFlagUntilTimeout+0x30>
 8008e0e:	69bb      	ldr	r3, [r7, #24]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d101      	bne.n	8008e18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008e14:	2303      	movs	r3, #3
 8008e16:	e048      	b.n	8008eaa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f003 0304 	and.w	r3, r3, #4
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d031      	beq.n	8008e8a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	69db      	ldr	r3, [r3, #28]
 8008e2c:	f003 0308 	and.w	r3, r3, #8
 8008e30:	2b08      	cmp	r3, #8
 8008e32:	d110      	bne.n	8008e56 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	2208      	movs	r2, #8
 8008e3a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008e3c:	68f8      	ldr	r0, [r7, #12]
 8008e3e:	f000 f95b 	bl	80090f8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2208      	movs	r2, #8
 8008e46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8008e52:	2301      	movs	r3, #1
 8008e54:	e029      	b.n	8008eaa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	69db      	ldr	r3, [r3, #28]
 8008e5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e64:	d111      	bne.n	8008e8a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e70:	68f8      	ldr	r0, [r7, #12]
 8008e72:	f000 f941 	bl	80090f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2220      	movs	r2, #32
 8008e7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2200      	movs	r2, #0
 8008e82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008e86:	2303      	movs	r3, #3
 8008e88:	e00f      	b.n	8008eaa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	69da      	ldr	r2, [r3, #28]
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	4013      	ands	r3, r2
 8008e94:	68ba      	ldr	r2, [r7, #8]
 8008e96:	429a      	cmp	r2, r3
 8008e98:	bf0c      	ite	eq
 8008e9a:	2301      	moveq	r3, #1
 8008e9c:	2300      	movne	r3, #0
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	79fb      	ldrb	r3, [r7, #7]
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d0a6      	beq.n	8008df6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3710      	adds	r7, #16
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
	...

08008eb4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b0a3      	sub	sp, #140	; 0x8c
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	60f8      	str	r0, [r7, #12]
 8008ebc:	60b9      	str	r1, [r7, #8]
 8008ebe:	4613      	mov	r3, r2
 8008ec0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	68ba      	ldr	r2, [r7, #8]
 8008ec6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	88fa      	ldrh	r2, [r7, #6]
 8008ecc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	88fa      	ldrh	r2, [r7, #6]
 8008ed4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2200      	movs	r2, #0
 8008edc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ee6:	d10e      	bne.n	8008f06 <UART_Start_Receive_IT+0x52>
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	691b      	ldr	r3, [r3, #16]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d105      	bne.n	8008efc <UART_Start_Receive_IT+0x48>
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008ef6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008efa:	e02d      	b.n	8008f58 <UART_Start_Receive_IT+0xa4>
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	22ff      	movs	r2, #255	; 0xff
 8008f00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f04:	e028      	b.n	8008f58 <UART_Start_Receive_IT+0xa4>
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d10d      	bne.n	8008f2a <UART_Start_Receive_IT+0x76>
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	691b      	ldr	r3, [r3, #16]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d104      	bne.n	8008f20 <UART_Start_Receive_IT+0x6c>
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	22ff      	movs	r2, #255	; 0xff
 8008f1a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f1e:	e01b      	b.n	8008f58 <UART_Start_Receive_IT+0xa4>
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	227f      	movs	r2, #127	; 0x7f
 8008f24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f28:	e016      	b.n	8008f58 <UART_Start_Receive_IT+0xa4>
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f32:	d10d      	bne.n	8008f50 <UART_Start_Receive_IT+0x9c>
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	691b      	ldr	r3, [r3, #16]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d104      	bne.n	8008f46 <UART_Start_Receive_IT+0x92>
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	227f      	movs	r2, #127	; 0x7f
 8008f40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f44:	e008      	b.n	8008f58 <UART_Start_Receive_IT+0xa4>
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	223f      	movs	r2, #63	; 0x3f
 8008f4a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f4e:	e003      	b.n	8008f58 <UART_Start_Receive_IT+0xa4>
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2222      	movs	r2, #34	; 0x22
 8008f64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	3308      	adds	r3, #8
 8008f6e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f72:	e853 3f00 	ldrex	r3, [r3]
 8008f76:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008f78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f7a:	f043 0301 	orr.w	r3, r3, #1
 8008f7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	3308      	adds	r3, #8
 8008f88:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008f8c:	673a      	str	r2, [r7, #112]	; 0x70
 8008f8e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f90:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008f92:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008f94:	e841 2300 	strex	r3, r2, [r1]
 8008f98:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008f9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d1e3      	bne.n	8008f68 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fa8:	d14f      	bne.n	800904a <UART_Start_Receive_IT+0x196>
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008fb0:	88fa      	ldrh	r2, [r7, #6]
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d349      	bcc.n	800904a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fbe:	d107      	bne.n	8008fd0 <UART_Start_Receive_IT+0x11c>
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	691b      	ldr	r3, [r3, #16]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d103      	bne.n	8008fd0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	4a47      	ldr	r2, [pc, #284]	; (80090e8 <UART_Start_Receive_IT+0x234>)
 8008fcc:	675a      	str	r2, [r3, #116]	; 0x74
 8008fce:	e002      	b.n	8008fd6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	4a46      	ldr	r2, [pc, #280]	; (80090ec <UART_Start_Receive_IT+0x238>)
 8008fd4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	691b      	ldr	r3, [r3, #16]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d01a      	beq.n	8009014 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fe6:	e853 3f00 	ldrex	r3, [r3]
 8008fea:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ff2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009000:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009002:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009004:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009006:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009008:	e841 2300 	strex	r3, r2, [r1]
 800900c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800900e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009010:	2b00      	cmp	r3, #0
 8009012:	d1e4      	bne.n	8008fde <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	3308      	adds	r3, #8
 800901a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800901e:	e853 3f00 	ldrex	r3, [r3]
 8009022:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800902a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	3308      	adds	r3, #8
 8009032:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009034:	64ba      	str	r2, [r7, #72]	; 0x48
 8009036:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009038:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800903a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800903c:	e841 2300 	strex	r3, r2, [r1]
 8009040:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009044:	2b00      	cmp	r3, #0
 8009046:	d1e5      	bne.n	8009014 <UART_Start_Receive_IT+0x160>
 8009048:	e046      	b.n	80090d8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009052:	d107      	bne.n	8009064 <UART_Start_Receive_IT+0x1b0>
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	691b      	ldr	r3, [r3, #16]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d103      	bne.n	8009064 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	4a24      	ldr	r2, [pc, #144]	; (80090f0 <UART_Start_Receive_IT+0x23c>)
 8009060:	675a      	str	r2, [r3, #116]	; 0x74
 8009062:	e002      	b.n	800906a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	4a23      	ldr	r2, [pc, #140]	; (80090f4 <UART_Start_Receive_IT+0x240>)
 8009068:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	691b      	ldr	r3, [r3, #16]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d019      	beq.n	80090a6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907a:	e853 3f00 	ldrex	r3, [r3]
 800907e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009082:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009086:	677b      	str	r3, [r7, #116]	; 0x74
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	461a      	mov	r2, r3
 800908e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009090:	637b      	str	r3, [r7, #52]	; 0x34
 8009092:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009094:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009096:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009098:	e841 2300 	strex	r3, r2, [r1]
 800909c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800909e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d1e6      	bne.n	8009072 <UART_Start_Receive_IT+0x1be>
 80090a4:	e018      	b.n	80090d8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	e853 3f00 	ldrex	r3, [r3]
 80090b2:	613b      	str	r3, [r7, #16]
   return(result);
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	f043 0320 	orr.w	r3, r3, #32
 80090ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	461a      	mov	r2, r3
 80090c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090c4:	623b      	str	r3, [r7, #32]
 80090c6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c8:	69f9      	ldr	r1, [r7, #28]
 80090ca:	6a3a      	ldr	r2, [r7, #32]
 80090cc:	e841 2300 	strex	r3, r2, [r1]
 80090d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80090d2:	69bb      	ldr	r3, [r7, #24]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d1e6      	bne.n	80090a6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	378c      	adds	r7, #140	; 0x8c
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr
 80090e6:	bf00      	nop
 80090e8:	08009919 	.word	0x08009919
 80090ec:	080095b9 	.word	0x080095b9
 80090f0:	08009401 	.word	0x08009401
 80090f4:	08009249 	.word	0x08009249

080090f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b095      	sub	sp, #84	; 0x54
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009108:	e853 3f00 	ldrex	r3, [r3]
 800910c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800910e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009110:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009114:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	461a      	mov	r2, r3
 800911c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800911e:	643b      	str	r3, [r7, #64]	; 0x40
 8009120:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009122:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009124:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009126:	e841 2300 	strex	r3, r2, [r1]
 800912a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800912c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800912e:	2b00      	cmp	r3, #0
 8009130:	d1e6      	bne.n	8009100 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	3308      	adds	r3, #8
 8009138:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800913a:	6a3b      	ldr	r3, [r7, #32]
 800913c:	e853 3f00 	ldrex	r3, [r3]
 8009140:	61fb      	str	r3, [r7, #28]
   return(result);
 8009142:	69fa      	ldr	r2, [r7, #28]
 8009144:	4b1e      	ldr	r3, [pc, #120]	; (80091c0 <UART_EndRxTransfer+0xc8>)
 8009146:	4013      	ands	r3, r2
 8009148:	64bb      	str	r3, [r7, #72]	; 0x48
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	3308      	adds	r3, #8
 8009150:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009152:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009154:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009156:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009158:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800915a:	e841 2300 	strex	r3, r2, [r1]
 800915e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009162:	2b00      	cmp	r3, #0
 8009164:	d1e5      	bne.n	8009132 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800916a:	2b01      	cmp	r3, #1
 800916c:	d118      	bne.n	80091a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	e853 3f00 	ldrex	r3, [r3]
 800917a:	60bb      	str	r3, [r7, #8]
   return(result);
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	f023 0310 	bic.w	r3, r3, #16
 8009182:	647b      	str	r3, [r7, #68]	; 0x44
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	461a      	mov	r2, r3
 800918a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800918c:	61bb      	str	r3, [r7, #24]
 800918e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009190:	6979      	ldr	r1, [r7, #20]
 8009192:	69ba      	ldr	r2, [r7, #24]
 8009194:	e841 2300 	strex	r3, r2, [r1]
 8009198:	613b      	str	r3, [r7, #16]
   return(result);
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d1e6      	bne.n	800916e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2220      	movs	r2, #32
 80091a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2200      	movs	r2, #0
 80091ac:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2200      	movs	r2, #0
 80091b2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80091b4:	bf00      	nop
 80091b6:	3754      	adds	r7, #84	; 0x54
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr
 80091c0:	effffffe 	.word	0xeffffffe

080091c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2200      	movs	r2, #0
 80091d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2200      	movs	r2, #0
 80091de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80091e2:	68f8      	ldr	r0, [r7, #12]
 80091e4:	f7fe fe30 	bl	8007e48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091e8:	bf00      	nop
 80091ea:	3710      	adds	r7, #16
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b088      	sub	sp, #32
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	e853 3f00 	ldrex	r3, [r3]
 8009204:	60bb      	str	r3, [r7, #8]
   return(result);
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800920c:	61fb      	str	r3, [r7, #28]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	461a      	mov	r2, r3
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	61bb      	str	r3, [r7, #24]
 8009218:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921a:	6979      	ldr	r1, [r7, #20]
 800921c:	69ba      	ldr	r2, [r7, #24]
 800921e:	e841 2300 	strex	r3, r2, [r1]
 8009222:	613b      	str	r3, [r7, #16]
   return(result);
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d1e6      	bne.n	80091f8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2220      	movs	r2, #32
 800922e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f7fe fdfb 	bl	8007e34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800923e:	bf00      	nop
 8009240:	3720      	adds	r7, #32
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
	...

08009248 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b09c      	sub	sp, #112	; 0x70
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009256:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009260:	2b22      	cmp	r3, #34	; 0x22
 8009262:	f040 80be 	bne.w	80093e2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800926c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009270:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009274:	b2d9      	uxtb	r1, r3
 8009276:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800927a:	b2da      	uxtb	r2, r3
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009280:	400a      	ands	r2, r1
 8009282:	b2d2      	uxtb	r2, r2
 8009284:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800928a:	1c5a      	adds	r2, r3, #1
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009296:	b29b      	uxth	r3, r3
 8009298:	3b01      	subs	r3, #1
 800929a:	b29a      	uxth	r2, r3
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	f040 80a1 	bne.w	80093f2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092b8:	e853 3f00 	ldrex	r3, [r3]
 80092bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80092be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	461a      	mov	r2, r3
 80092cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80092ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80092d0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80092d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80092d6:	e841 2300 	strex	r3, r2, [r1]
 80092da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80092dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d1e6      	bne.n	80092b0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	3308      	adds	r3, #8
 80092e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ec:	e853 3f00 	ldrex	r3, [r3]
 80092f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80092f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092f4:	f023 0301 	bic.w	r3, r3, #1
 80092f8:	667b      	str	r3, [r7, #100]	; 0x64
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	3308      	adds	r3, #8
 8009300:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009302:	647a      	str	r2, [r7, #68]	; 0x44
 8009304:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009306:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009308:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800930a:	e841 2300 	strex	r3, r2, [r1]
 800930e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009312:	2b00      	cmp	r3, #0
 8009314:	d1e5      	bne.n	80092e2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2220      	movs	r2, #32
 800931a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2200      	movs	r2, #0
 8009322:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2200      	movs	r2, #0
 8009328:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a33      	ldr	r2, [pc, #204]	; (80093fc <UART_RxISR_8BIT+0x1b4>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d01f      	beq.n	8009374 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800933e:	2b00      	cmp	r3, #0
 8009340:	d018      	beq.n	8009374 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934a:	e853 3f00 	ldrex	r3, [r3]
 800934e:	623b      	str	r3, [r7, #32]
   return(result);
 8009350:	6a3b      	ldr	r3, [r7, #32]
 8009352:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009356:	663b      	str	r3, [r7, #96]	; 0x60
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	461a      	mov	r2, r3
 800935e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009360:	633b      	str	r3, [r7, #48]	; 0x30
 8009362:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009364:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009368:	e841 2300 	strex	r3, r2, [r1]
 800936c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800936e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009370:	2b00      	cmp	r3, #0
 8009372:	d1e6      	bne.n	8009342 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009378:	2b01      	cmp	r3, #1
 800937a:	d12e      	bne.n	80093da <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	e853 3f00 	ldrex	r3, [r3]
 800938e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f023 0310 	bic.w	r3, r3, #16
 8009396:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	461a      	mov	r2, r3
 800939e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093a0:	61fb      	str	r3, [r7, #28]
 80093a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a4:	69b9      	ldr	r1, [r7, #24]
 80093a6:	69fa      	ldr	r2, [r7, #28]
 80093a8:	e841 2300 	strex	r3, r2, [r1]
 80093ac:	617b      	str	r3, [r7, #20]
   return(result);
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d1e6      	bne.n	8009382 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	69db      	ldr	r3, [r3, #28]
 80093ba:	f003 0310 	and.w	r3, r3, #16
 80093be:	2b10      	cmp	r3, #16
 80093c0:	d103      	bne.n	80093ca <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2210      	movs	r2, #16
 80093c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80093d0:	4619      	mov	r1, r3
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f7fe fd42 	bl	8007e5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80093d8:	e00b      	b.n	80093f2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f7f9 f938 	bl	8002650 <HAL_UART_RxCpltCallback>
}
 80093e0:	e007      	b.n	80093f2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	699a      	ldr	r2, [r3, #24]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f042 0208 	orr.w	r2, r2, #8
 80093f0:	619a      	str	r2, [r3, #24]
}
 80093f2:	bf00      	nop
 80093f4:	3770      	adds	r7, #112	; 0x70
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	58000c00 	.word	0x58000c00

08009400 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b09c      	sub	sp, #112	; 0x70
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800940e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009418:	2b22      	cmp	r3, #34	; 0x22
 800941a:	f040 80be 	bne.w	800959a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009424:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800942c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800942e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8009432:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009436:	4013      	ands	r3, r2
 8009438:	b29a      	uxth	r2, r3
 800943a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800943c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009442:	1c9a      	adds	r2, r3, #2
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800944e:	b29b      	uxth	r3, r3
 8009450:	3b01      	subs	r3, #1
 8009452:	b29a      	uxth	r2, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009460:	b29b      	uxth	r3, r3
 8009462:	2b00      	cmp	r3, #0
 8009464:	f040 80a1 	bne.w	80095aa <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800946e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009470:	e853 3f00 	ldrex	r3, [r3]
 8009474:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009478:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800947c:	667b      	str	r3, [r7, #100]	; 0x64
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	461a      	mov	r2, r3
 8009484:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009486:	657b      	str	r3, [r7, #84]	; 0x54
 8009488:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800948a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800948c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800948e:	e841 2300 	strex	r3, r2, [r1]
 8009492:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009496:	2b00      	cmp	r3, #0
 8009498:	d1e6      	bne.n	8009468 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	3308      	adds	r3, #8
 80094a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094a4:	e853 3f00 	ldrex	r3, [r3]
 80094a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80094aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ac:	f023 0301 	bic.w	r3, r3, #1
 80094b0:	663b      	str	r3, [r7, #96]	; 0x60
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	3308      	adds	r3, #8
 80094b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80094ba:	643a      	str	r2, [r7, #64]	; 0x40
 80094bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80094c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80094c2:	e841 2300 	strex	r3, r2, [r1]
 80094c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80094c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d1e5      	bne.n	800949a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2220      	movs	r2, #32
 80094d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a33      	ldr	r2, [pc, #204]	; (80095b4 <UART_RxISR_16BIT+0x1b4>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d01f      	beq.n	800952c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d018      	beq.n	800952c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009500:	6a3b      	ldr	r3, [r7, #32]
 8009502:	e853 3f00 	ldrex	r3, [r3]
 8009506:	61fb      	str	r3, [r7, #28]
   return(result);
 8009508:	69fb      	ldr	r3, [r7, #28]
 800950a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800950e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	461a      	mov	r2, r3
 8009516:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009518:	62fb      	str	r3, [r7, #44]	; 0x2c
 800951a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800951c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800951e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009520:	e841 2300 	strex	r3, r2, [r1]
 8009524:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009528:	2b00      	cmp	r3, #0
 800952a:	d1e6      	bne.n	80094fa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009530:	2b01      	cmp	r3, #1
 8009532:	d12e      	bne.n	8009592 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2200      	movs	r2, #0
 8009538:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	e853 3f00 	ldrex	r3, [r3]
 8009546:	60bb      	str	r3, [r7, #8]
   return(result);
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	f023 0310 	bic.w	r3, r3, #16
 800954e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	461a      	mov	r2, r3
 8009556:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009558:	61bb      	str	r3, [r7, #24]
 800955a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955c:	6979      	ldr	r1, [r7, #20]
 800955e:	69ba      	ldr	r2, [r7, #24]
 8009560:	e841 2300 	strex	r3, r2, [r1]
 8009564:	613b      	str	r3, [r7, #16]
   return(result);
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d1e6      	bne.n	800953a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	69db      	ldr	r3, [r3, #28]
 8009572:	f003 0310 	and.w	r3, r3, #16
 8009576:	2b10      	cmp	r3, #16
 8009578:	d103      	bne.n	8009582 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2210      	movs	r2, #16
 8009580:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009588:	4619      	mov	r1, r3
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f7fe fc66 	bl	8007e5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009590:	e00b      	b.n	80095aa <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f7f9 f85c 	bl	8002650 <HAL_UART_RxCpltCallback>
}
 8009598:	e007      	b.n	80095aa <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	699a      	ldr	r2, [r3, #24]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f042 0208 	orr.w	r2, r2, #8
 80095a8:	619a      	str	r2, [r3, #24]
}
 80095aa:	bf00      	nop
 80095ac:	3770      	adds	r7, #112	; 0x70
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}
 80095b2:	bf00      	nop
 80095b4:	58000c00 	.word	0x58000c00

080095b8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b0ac      	sub	sp, #176	; 0xb0
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80095c6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	69db      	ldr	r3, [r3, #28]
 80095d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095ee:	2b22      	cmp	r3, #34	; 0x22
 80095f0:	f040 8180 	bne.w	80098f4 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80095fa:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80095fe:	e123      	b.n	8009848 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009606:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800960a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800960e:	b2d9      	uxtb	r1, r3
 8009610:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009614:	b2da      	uxtb	r2, r3
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800961a:	400a      	ands	r2, r1
 800961c:	b2d2      	uxtb	r2, r2
 800961e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009624:	1c5a      	adds	r2, r3, #1
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009630:	b29b      	uxth	r3, r3
 8009632:	3b01      	subs	r3, #1
 8009634:	b29a      	uxth	r2, r3
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	69db      	ldr	r3, [r3, #28]
 8009642:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009646:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800964a:	f003 0307 	and.w	r3, r3, #7
 800964e:	2b00      	cmp	r3, #0
 8009650:	d053      	beq.n	80096fa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009652:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009656:	f003 0301 	and.w	r3, r3, #1
 800965a:	2b00      	cmp	r3, #0
 800965c:	d011      	beq.n	8009682 <UART_RxISR_8BIT_FIFOEN+0xca>
 800965e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009666:	2b00      	cmp	r3, #0
 8009668:	d00b      	beq.n	8009682 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	2201      	movs	r2, #1
 8009670:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009678:	f043 0201 	orr.w	r2, r3, #1
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009682:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009686:	f003 0302 	and.w	r3, r3, #2
 800968a:	2b00      	cmp	r3, #0
 800968c:	d011      	beq.n	80096b2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800968e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009692:	f003 0301 	and.w	r3, r3, #1
 8009696:	2b00      	cmp	r3, #0
 8009698:	d00b      	beq.n	80096b2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	2202      	movs	r2, #2
 80096a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096a8:	f043 0204 	orr.w	r2, r3, #4
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80096b6:	f003 0304 	and.w	r3, r3, #4
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d011      	beq.n	80096e2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80096be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80096c2:	f003 0301 	and.w	r3, r3, #1
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d00b      	beq.n	80096e2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	2204      	movs	r2, #4
 80096d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096d8:	f043 0202 	orr.w	r2, r3, #2
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d006      	beq.n	80096fa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f7fe fbab 	bl	8007e48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009700:	b29b      	uxth	r3, r3
 8009702:	2b00      	cmp	r3, #0
 8009704:	f040 80a0 	bne.w	8009848 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800970e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009710:	e853 3f00 	ldrex	r3, [r3]
 8009714:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8009716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800971c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	461a      	mov	r2, r3
 8009726:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800972a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800972c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800972e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009730:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009732:	e841 2300 	strex	r3, r2, [r1]
 8009736:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8009738:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800973a:	2b00      	cmp	r3, #0
 800973c:	d1e4      	bne.n	8009708 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	3308      	adds	r3, #8
 8009744:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009746:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009748:	e853 3f00 	ldrex	r3, [r3]
 800974c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800974e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009750:	4b6e      	ldr	r3, [pc, #440]	; (800990c <UART_RxISR_8BIT_FIFOEN+0x354>)
 8009752:	4013      	ands	r3, r2
 8009754:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	3308      	adds	r3, #8
 800975e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009762:	66ba      	str	r2, [r7, #104]	; 0x68
 8009764:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009766:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009768:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800976a:	e841 2300 	strex	r3, r2, [r1]
 800976e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009770:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009772:	2b00      	cmp	r3, #0
 8009774:	d1e3      	bne.n	800973e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2220      	movs	r2, #32
 800977a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2200      	movs	r2, #0
 8009782:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a60      	ldr	r2, [pc, #384]	; (8009910 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d021      	beq.n	80097d8 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d01a      	beq.n	80097d8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097aa:	e853 3f00 	ldrex	r3, [r3]
 80097ae:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80097b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80097b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	461a      	mov	r2, r3
 80097c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80097c4:	657b      	str	r3, [r7, #84]	; 0x54
 80097c6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80097ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80097cc:	e841 2300 	strex	r3, r2, [r1]
 80097d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80097d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d1e4      	bne.n	80097a2 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d130      	bne.n	8009842 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097ee:	e853 3f00 	ldrex	r3, [r3]
 80097f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80097f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f6:	f023 0310 	bic.w	r3, r3, #16
 80097fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	461a      	mov	r2, r3
 8009804:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009808:	643b      	str	r3, [r7, #64]	; 0x40
 800980a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800980c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800980e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009810:	e841 2300 	strex	r3, r2, [r1]
 8009814:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009818:	2b00      	cmp	r3, #0
 800981a:	d1e4      	bne.n	80097e6 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	69db      	ldr	r3, [r3, #28]
 8009822:	f003 0310 	and.w	r3, r3, #16
 8009826:	2b10      	cmp	r3, #16
 8009828:	d103      	bne.n	8009832 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	2210      	movs	r2, #16
 8009830:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009838:	4619      	mov	r1, r3
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f7fe fb0e 	bl	8007e5c <HAL_UARTEx_RxEventCallback>
 8009840:	e002      	b.n	8009848 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f7f8 ff04 	bl	8002650 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009848:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800984c:	2b00      	cmp	r3, #0
 800984e:	d006      	beq.n	800985e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8009850:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009854:	f003 0320 	and.w	r3, r3, #32
 8009858:	2b00      	cmp	r3, #0
 800985a:	f47f aed1 	bne.w	8009600 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009864:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009868:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800986c:	2b00      	cmp	r3, #0
 800986e:	d049      	beq.n	8009904 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009876:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800987a:	429a      	cmp	r2, r3
 800987c:	d242      	bcs.n	8009904 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	3308      	adds	r3, #8
 8009884:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009886:	6a3b      	ldr	r3, [r7, #32]
 8009888:	e853 3f00 	ldrex	r3, [r3]
 800988c:	61fb      	str	r3, [r7, #28]
   return(result);
 800988e:	69fb      	ldr	r3, [r7, #28]
 8009890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009894:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	3308      	adds	r3, #8
 800989e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80098a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80098a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80098a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098aa:	e841 2300 	strex	r3, r2, [r1]
 80098ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80098b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d1e3      	bne.n	800987e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	4a16      	ldr	r2, [pc, #88]	; (8009914 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80098ba:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	e853 3f00 	ldrex	r3, [r3]
 80098c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	f043 0320 	orr.w	r3, r3, #32
 80098d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	461a      	mov	r2, r3
 80098da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80098de:	61bb      	str	r3, [r7, #24]
 80098e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e2:	6979      	ldr	r1, [r7, #20]
 80098e4:	69ba      	ldr	r2, [r7, #24]
 80098e6:	e841 2300 	strex	r3, r2, [r1]
 80098ea:	613b      	str	r3, [r7, #16]
   return(result);
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d1e4      	bne.n	80098bc <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80098f2:	e007      	b.n	8009904 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	699a      	ldr	r2, [r3, #24]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f042 0208 	orr.w	r2, r2, #8
 8009902:	619a      	str	r2, [r3, #24]
}
 8009904:	bf00      	nop
 8009906:	37b0      	adds	r7, #176	; 0xb0
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}
 800990c:	effffffe 	.word	0xeffffffe
 8009910:	58000c00 	.word	0x58000c00
 8009914:	08009249 	.word	0x08009249

08009918 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b0ae      	sub	sp, #184	; 0xb8
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009926:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	69db      	ldr	r3, [r3, #28]
 8009930:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	689b      	ldr	r3, [r3, #8]
 8009944:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800994e:	2b22      	cmp	r3, #34	; 0x22
 8009950:	f040 8184 	bne.w	8009c5c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800995a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800995e:	e127      	b.n	8009bb0 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009966:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800996e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009972:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8009976:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800997a:	4013      	ands	r3, r2
 800997c:	b29a      	uxth	r2, r3
 800997e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009982:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009988:	1c9a      	adds	r2, r3, #2
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009994:	b29b      	uxth	r3, r3
 8009996:	3b01      	subs	r3, #1
 8009998:	b29a      	uxth	r2, r3
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	69db      	ldr	r3, [r3, #28]
 80099a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80099aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80099ae:	f003 0307 	and.w	r3, r3, #7
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d053      	beq.n	8009a5e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80099b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80099ba:	f003 0301 	and.w	r3, r3, #1
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d011      	beq.n	80099e6 <UART_RxISR_16BIT_FIFOEN+0xce>
 80099c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80099c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d00b      	beq.n	80099e6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	2201      	movs	r2, #1
 80099d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099dc:	f043 0201 	orr.w	r2, r3, #1
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80099ea:	f003 0302 	and.w	r3, r3, #2
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d011      	beq.n	8009a16 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80099f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80099f6:	f003 0301 	and.w	r3, r3, #1
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d00b      	beq.n	8009a16 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	2202      	movs	r2, #2
 8009a04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a0c:	f043 0204 	orr.w	r2, r3, #4
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009a1a:	f003 0304 	and.w	r3, r3, #4
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d011      	beq.n	8009a46 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009a22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009a26:	f003 0301 	and.w	r3, r3, #1
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d00b      	beq.n	8009a46 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	2204      	movs	r2, #4
 8009a34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a3c:	f043 0202 	orr.w	r2, r3, #2
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d006      	beq.n	8009a5e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f7fe f9f9 	bl	8007e48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	f040 80a2 	bne.w	8009bb0 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a74:	e853 3f00 	ldrex	r3, [r3]
 8009a78:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009a7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	461a      	mov	r2, r3
 8009a8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009a92:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a94:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009a96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009a9a:	e841 2300 	strex	r3, r2, [r1]
 8009a9e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009aa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d1e2      	bne.n	8009a6c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	3308      	adds	r3, #8
 8009aac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ab0:	e853 3f00 	ldrex	r3, [r3]
 8009ab4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009ab6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009ab8:	4b6e      	ldr	r3, [pc, #440]	; (8009c74 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8009aba:	4013      	ands	r3, r2
 8009abc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	3308      	adds	r3, #8
 8009ac6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009aca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009acc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ace:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009ad0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009ad2:	e841 2300 	strex	r3, r2, [r1]
 8009ad6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009ad8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d1e3      	bne.n	8009aa6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2220      	movs	r2, #32
 8009ae2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a60      	ldr	r2, [pc, #384]	; (8009c78 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d021      	beq.n	8009b40 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d01a      	beq.n	8009b40 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b12:	e853 3f00 	ldrex	r3, [r3]
 8009b16:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009b18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009b1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	461a      	mov	r2, r3
 8009b28:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009b2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8009b2e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009b32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b34:	e841 2300 	strex	r3, r2, [r1]
 8009b38:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009b3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d1e4      	bne.n	8009b0a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d130      	bne.n	8009baa <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b56:	e853 3f00 	ldrex	r3, [r3]
 8009b5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b5e:	f023 0310 	bic.w	r3, r3, #16
 8009b62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b70:	647b      	str	r3, [r7, #68]	; 0x44
 8009b72:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b74:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b78:	e841 2300 	strex	r3, r2, [r1]
 8009b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d1e4      	bne.n	8009b4e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	69db      	ldr	r3, [r3, #28]
 8009b8a:	f003 0310 	and.w	r3, r3, #16
 8009b8e:	2b10      	cmp	r3, #16
 8009b90:	d103      	bne.n	8009b9a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	2210      	movs	r2, #16
 8009b98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f7fe f95a 	bl	8007e5c <HAL_UARTEx_RxEventCallback>
 8009ba8:	e002      	b.n	8009bb0 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f7f8 fd50 	bl	8002650 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009bb0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d006      	beq.n	8009bc6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8009bb8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009bbc:	f003 0320 	and.w	r3, r3, #32
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f47f aecd 	bne.w	8009960 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009bcc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009bd0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d049      	beq.n	8009c6c <UART_RxISR_16BIT_FIFOEN+0x354>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009bde:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d242      	bcs.n	8009c6c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	3308      	adds	r3, #8
 8009bec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf0:	e853 3f00 	ldrex	r3, [r3]
 8009bf4:	623b      	str	r3, [r7, #32]
   return(result);
 8009bf6:	6a3b      	ldr	r3, [r7, #32]
 8009bf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009bfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	3308      	adds	r3, #8
 8009c06:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009c0a:	633a      	str	r2, [r7, #48]	; 0x30
 8009c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c12:	e841 2300 	strex	r3, r2, [r1]
 8009c16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d1e3      	bne.n	8009be6 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	4a16      	ldr	r2, [pc, #88]	; (8009c7c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009c22:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	e853 3f00 	ldrex	r3, [r3]
 8009c30:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	f043 0320 	orr.w	r3, r3, #32
 8009c38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	461a      	mov	r2, r3
 8009c42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009c46:	61fb      	str	r3, [r7, #28]
 8009c48:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c4a:	69b9      	ldr	r1, [r7, #24]
 8009c4c:	69fa      	ldr	r2, [r7, #28]
 8009c4e:	e841 2300 	strex	r3, r2, [r1]
 8009c52:	617b      	str	r3, [r7, #20]
   return(result);
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d1e4      	bne.n	8009c24 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009c5a:	e007      	b.n	8009c6c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	699a      	ldr	r2, [r3, #24]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f042 0208 	orr.w	r2, r2, #8
 8009c6a:	619a      	str	r2, [r3, #24]
}
 8009c6c:	bf00      	nop
 8009c6e:	37b8      	adds	r7, #184	; 0xb8
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}
 8009c74:	effffffe 	.word	0xeffffffe
 8009c78:	58000c00 	.word	0x58000c00
 8009c7c:	08009401 	.word	0x08009401

08009c80 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b083      	sub	sp, #12
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009c88:	bf00      	nop
 8009c8a:	370c      	adds	r7, #12
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr

08009c94 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b083      	sub	sp, #12
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009c9c:	bf00      	nop
 8009c9e:	370c      	adds	r7, #12
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr

08009ca8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b083      	sub	sp, #12
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009cb0:	bf00      	nop
 8009cb2:	370c      	adds	r7, #12
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr

08009cbc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b085      	sub	sp, #20
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d101      	bne.n	8009cd2 <HAL_UARTEx_DisableFifoMode+0x16>
 8009cce:	2302      	movs	r3, #2
 8009cd0:	e027      	b.n	8009d22 <HAL_UARTEx_DisableFifoMode+0x66>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2224      	movs	r2, #36	; 0x24
 8009cde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f022 0201 	bic.w	r2, r2, #1
 8009cf8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009d00:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	68fa      	ldr	r2, [r7, #12]
 8009d0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2220      	movs	r2, #32
 8009d14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009d20:	2300      	movs	r3, #0
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3714      	adds	r7, #20
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr

08009d2e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b084      	sub	sp, #16
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
 8009d36:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	d101      	bne.n	8009d46 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009d42:	2302      	movs	r3, #2
 8009d44:	e02d      	b.n	8009da2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2201      	movs	r2, #1
 8009d4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2224      	movs	r2, #36	; 0x24
 8009d52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f022 0201 	bic.w	r2, r2, #1
 8009d6c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	689b      	ldr	r3, [r3, #8]
 8009d74:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	683a      	ldr	r2, [r7, #0]
 8009d7e:	430a      	orrs	r2, r1
 8009d80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 f850 	bl	8009e28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	68fa      	ldr	r2, [r7, #12]
 8009d8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2220      	movs	r2, #32
 8009d94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009da0:	2300      	movs	r3, #0
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3710      	adds	r7, #16
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}

08009daa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009daa:	b580      	push	{r7, lr}
 8009dac:	b084      	sub	sp, #16
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]
 8009db2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d101      	bne.n	8009dc2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009dbe:	2302      	movs	r3, #2
 8009dc0:	e02d      	b.n	8009e1e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2224      	movs	r2, #36	; 0x24
 8009dce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	681a      	ldr	r2, [r3, #0]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f022 0201 	bic.w	r2, r2, #1
 8009de8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	689b      	ldr	r3, [r3, #8]
 8009df0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	683a      	ldr	r2, [r7, #0]
 8009dfa:	430a      	orrs	r2, r1
 8009dfc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f000 f812 	bl	8009e28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	68fa      	ldr	r2, [r7, #12]
 8009e0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2220      	movs	r2, #32
 8009e10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009e1c:	2300      	movs	r3, #0
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3710      	adds	r7, #16
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
	...

08009e28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b085      	sub	sp, #20
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d108      	bne.n	8009e4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2201      	movs	r2, #1
 8009e44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009e48:	e031      	b.n	8009eae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009e4a:	2310      	movs	r3, #16
 8009e4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009e4e:	2310      	movs	r3, #16
 8009e50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	0e5b      	lsrs	r3, r3, #25
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	f003 0307 	and.w	r3, r3, #7
 8009e60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	0f5b      	lsrs	r3, r3, #29
 8009e6a:	b2db      	uxtb	r3, r3
 8009e6c:	f003 0307 	and.w	r3, r3, #7
 8009e70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e72:	7bbb      	ldrb	r3, [r7, #14]
 8009e74:	7b3a      	ldrb	r2, [r7, #12]
 8009e76:	4911      	ldr	r1, [pc, #68]	; (8009ebc <UARTEx_SetNbDataToProcess+0x94>)
 8009e78:	5c8a      	ldrb	r2, [r1, r2]
 8009e7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009e7e:	7b3a      	ldrb	r2, [r7, #12]
 8009e80:	490f      	ldr	r1, [pc, #60]	; (8009ec0 <UARTEx_SetNbDataToProcess+0x98>)
 8009e82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e84:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e88:	b29a      	uxth	r2, r3
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e90:	7bfb      	ldrb	r3, [r7, #15]
 8009e92:	7b7a      	ldrb	r2, [r7, #13]
 8009e94:	4909      	ldr	r1, [pc, #36]	; (8009ebc <UARTEx_SetNbDataToProcess+0x94>)
 8009e96:	5c8a      	ldrb	r2, [r1, r2]
 8009e98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009e9c:	7b7a      	ldrb	r2, [r7, #13]
 8009e9e:	4908      	ldr	r1, [pc, #32]	; (8009ec0 <UARTEx_SetNbDataToProcess+0x98>)
 8009ea0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ea2:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ea6:	b29a      	uxth	r2, r3
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009eae:	bf00      	nop
 8009eb0:	3714      	adds	r7, #20
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
 8009eba:	bf00      	nop
 8009ebc:	0800ae50 	.word	0x0800ae50
 8009ec0:	0800ae58 	.word	0x0800ae58

08009ec4 <__errno>:
 8009ec4:	4b01      	ldr	r3, [pc, #4]	; (8009ecc <__errno+0x8>)
 8009ec6:	6818      	ldr	r0, [r3, #0]
 8009ec8:	4770      	bx	lr
 8009eca:	bf00      	nop
 8009ecc:	24000068 	.word	0x24000068

08009ed0 <__libc_init_array>:
 8009ed0:	b570      	push	{r4, r5, r6, lr}
 8009ed2:	4d0d      	ldr	r5, [pc, #52]	; (8009f08 <__libc_init_array+0x38>)
 8009ed4:	4c0d      	ldr	r4, [pc, #52]	; (8009f0c <__libc_init_array+0x3c>)
 8009ed6:	1b64      	subs	r4, r4, r5
 8009ed8:	10a4      	asrs	r4, r4, #2
 8009eda:	2600      	movs	r6, #0
 8009edc:	42a6      	cmp	r6, r4
 8009ede:	d109      	bne.n	8009ef4 <__libc_init_array+0x24>
 8009ee0:	4d0b      	ldr	r5, [pc, #44]	; (8009f10 <__libc_init_array+0x40>)
 8009ee2:	4c0c      	ldr	r4, [pc, #48]	; (8009f14 <__libc_init_array+0x44>)
 8009ee4:	f000 fc8e 	bl	800a804 <_init>
 8009ee8:	1b64      	subs	r4, r4, r5
 8009eea:	10a4      	asrs	r4, r4, #2
 8009eec:	2600      	movs	r6, #0
 8009eee:	42a6      	cmp	r6, r4
 8009ef0:	d105      	bne.n	8009efe <__libc_init_array+0x2e>
 8009ef2:	bd70      	pop	{r4, r5, r6, pc}
 8009ef4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ef8:	4798      	blx	r3
 8009efa:	3601      	adds	r6, #1
 8009efc:	e7ee      	b.n	8009edc <__libc_init_array+0xc>
 8009efe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f02:	4798      	blx	r3
 8009f04:	3601      	adds	r6, #1
 8009f06:	e7f2      	b.n	8009eee <__libc_init_array+0x1e>
 8009f08:	0800ae9c 	.word	0x0800ae9c
 8009f0c:	0800ae9c 	.word	0x0800ae9c
 8009f10:	0800ae9c 	.word	0x0800ae9c
 8009f14:	0800aea0 	.word	0x0800aea0

08009f18 <memcpy>:
 8009f18:	440a      	add	r2, r1
 8009f1a:	4291      	cmp	r1, r2
 8009f1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f20:	d100      	bne.n	8009f24 <memcpy+0xc>
 8009f22:	4770      	bx	lr
 8009f24:	b510      	push	{r4, lr}
 8009f26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f2e:	4291      	cmp	r1, r2
 8009f30:	d1f9      	bne.n	8009f26 <memcpy+0xe>
 8009f32:	bd10      	pop	{r4, pc}

08009f34 <memset>:
 8009f34:	4402      	add	r2, r0
 8009f36:	4603      	mov	r3, r0
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d100      	bne.n	8009f3e <memset+0xa>
 8009f3c:	4770      	bx	lr
 8009f3e:	f803 1b01 	strb.w	r1, [r3], #1
 8009f42:	e7f9      	b.n	8009f38 <memset+0x4>

08009f44 <siprintf>:
 8009f44:	b40e      	push	{r1, r2, r3}
 8009f46:	b500      	push	{lr}
 8009f48:	b09c      	sub	sp, #112	; 0x70
 8009f4a:	ab1d      	add	r3, sp, #116	; 0x74
 8009f4c:	9002      	str	r0, [sp, #8]
 8009f4e:	9006      	str	r0, [sp, #24]
 8009f50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f54:	4809      	ldr	r0, [pc, #36]	; (8009f7c <siprintf+0x38>)
 8009f56:	9107      	str	r1, [sp, #28]
 8009f58:	9104      	str	r1, [sp, #16]
 8009f5a:	4909      	ldr	r1, [pc, #36]	; (8009f80 <siprintf+0x3c>)
 8009f5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f60:	9105      	str	r1, [sp, #20]
 8009f62:	6800      	ldr	r0, [r0, #0]
 8009f64:	9301      	str	r3, [sp, #4]
 8009f66:	a902      	add	r1, sp, #8
 8009f68:	f000 f868 	bl	800a03c <_svfiprintf_r>
 8009f6c:	9b02      	ldr	r3, [sp, #8]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	701a      	strb	r2, [r3, #0]
 8009f72:	b01c      	add	sp, #112	; 0x70
 8009f74:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f78:	b003      	add	sp, #12
 8009f7a:	4770      	bx	lr
 8009f7c:	24000068 	.word	0x24000068
 8009f80:	ffff0208 	.word	0xffff0208

08009f84 <__ssputs_r>:
 8009f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f88:	688e      	ldr	r6, [r1, #8]
 8009f8a:	429e      	cmp	r6, r3
 8009f8c:	4682      	mov	sl, r0
 8009f8e:	460c      	mov	r4, r1
 8009f90:	4690      	mov	r8, r2
 8009f92:	461f      	mov	r7, r3
 8009f94:	d838      	bhi.n	800a008 <__ssputs_r+0x84>
 8009f96:	898a      	ldrh	r2, [r1, #12]
 8009f98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f9c:	d032      	beq.n	800a004 <__ssputs_r+0x80>
 8009f9e:	6825      	ldr	r5, [r4, #0]
 8009fa0:	6909      	ldr	r1, [r1, #16]
 8009fa2:	eba5 0901 	sub.w	r9, r5, r1
 8009fa6:	6965      	ldr	r5, [r4, #20]
 8009fa8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009fac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009fb0:	3301      	adds	r3, #1
 8009fb2:	444b      	add	r3, r9
 8009fb4:	106d      	asrs	r5, r5, #1
 8009fb6:	429d      	cmp	r5, r3
 8009fb8:	bf38      	it	cc
 8009fba:	461d      	movcc	r5, r3
 8009fbc:	0553      	lsls	r3, r2, #21
 8009fbe:	d531      	bpl.n	800a024 <__ssputs_r+0xa0>
 8009fc0:	4629      	mov	r1, r5
 8009fc2:	f000 fb55 	bl	800a670 <_malloc_r>
 8009fc6:	4606      	mov	r6, r0
 8009fc8:	b950      	cbnz	r0, 8009fe0 <__ssputs_r+0x5c>
 8009fca:	230c      	movs	r3, #12
 8009fcc:	f8ca 3000 	str.w	r3, [sl]
 8009fd0:	89a3      	ldrh	r3, [r4, #12]
 8009fd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fd6:	81a3      	strh	r3, [r4, #12]
 8009fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8009fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fe0:	6921      	ldr	r1, [r4, #16]
 8009fe2:	464a      	mov	r2, r9
 8009fe4:	f7ff ff98 	bl	8009f18 <memcpy>
 8009fe8:	89a3      	ldrh	r3, [r4, #12]
 8009fea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ff2:	81a3      	strh	r3, [r4, #12]
 8009ff4:	6126      	str	r6, [r4, #16]
 8009ff6:	6165      	str	r5, [r4, #20]
 8009ff8:	444e      	add	r6, r9
 8009ffa:	eba5 0509 	sub.w	r5, r5, r9
 8009ffe:	6026      	str	r6, [r4, #0]
 800a000:	60a5      	str	r5, [r4, #8]
 800a002:	463e      	mov	r6, r7
 800a004:	42be      	cmp	r6, r7
 800a006:	d900      	bls.n	800a00a <__ssputs_r+0x86>
 800a008:	463e      	mov	r6, r7
 800a00a:	6820      	ldr	r0, [r4, #0]
 800a00c:	4632      	mov	r2, r6
 800a00e:	4641      	mov	r1, r8
 800a010:	f000 faa8 	bl	800a564 <memmove>
 800a014:	68a3      	ldr	r3, [r4, #8]
 800a016:	1b9b      	subs	r3, r3, r6
 800a018:	60a3      	str	r3, [r4, #8]
 800a01a:	6823      	ldr	r3, [r4, #0]
 800a01c:	4433      	add	r3, r6
 800a01e:	6023      	str	r3, [r4, #0]
 800a020:	2000      	movs	r0, #0
 800a022:	e7db      	b.n	8009fdc <__ssputs_r+0x58>
 800a024:	462a      	mov	r2, r5
 800a026:	f000 fb97 	bl	800a758 <_realloc_r>
 800a02a:	4606      	mov	r6, r0
 800a02c:	2800      	cmp	r0, #0
 800a02e:	d1e1      	bne.n	8009ff4 <__ssputs_r+0x70>
 800a030:	6921      	ldr	r1, [r4, #16]
 800a032:	4650      	mov	r0, sl
 800a034:	f000 fab0 	bl	800a598 <_free_r>
 800a038:	e7c7      	b.n	8009fca <__ssputs_r+0x46>
	...

0800a03c <_svfiprintf_r>:
 800a03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a040:	4698      	mov	r8, r3
 800a042:	898b      	ldrh	r3, [r1, #12]
 800a044:	061b      	lsls	r3, r3, #24
 800a046:	b09d      	sub	sp, #116	; 0x74
 800a048:	4607      	mov	r7, r0
 800a04a:	460d      	mov	r5, r1
 800a04c:	4614      	mov	r4, r2
 800a04e:	d50e      	bpl.n	800a06e <_svfiprintf_r+0x32>
 800a050:	690b      	ldr	r3, [r1, #16]
 800a052:	b963      	cbnz	r3, 800a06e <_svfiprintf_r+0x32>
 800a054:	2140      	movs	r1, #64	; 0x40
 800a056:	f000 fb0b 	bl	800a670 <_malloc_r>
 800a05a:	6028      	str	r0, [r5, #0]
 800a05c:	6128      	str	r0, [r5, #16]
 800a05e:	b920      	cbnz	r0, 800a06a <_svfiprintf_r+0x2e>
 800a060:	230c      	movs	r3, #12
 800a062:	603b      	str	r3, [r7, #0]
 800a064:	f04f 30ff 	mov.w	r0, #4294967295
 800a068:	e0d1      	b.n	800a20e <_svfiprintf_r+0x1d2>
 800a06a:	2340      	movs	r3, #64	; 0x40
 800a06c:	616b      	str	r3, [r5, #20]
 800a06e:	2300      	movs	r3, #0
 800a070:	9309      	str	r3, [sp, #36]	; 0x24
 800a072:	2320      	movs	r3, #32
 800a074:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a078:	f8cd 800c 	str.w	r8, [sp, #12]
 800a07c:	2330      	movs	r3, #48	; 0x30
 800a07e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a228 <_svfiprintf_r+0x1ec>
 800a082:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a086:	f04f 0901 	mov.w	r9, #1
 800a08a:	4623      	mov	r3, r4
 800a08c:	469a      	mov	sl, r3
 800a08e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a092:	b10a      	cbz	r2, 800a098 <_svfiprintf_r+0x5c>
 800a094:	2a25      	cmp	r2, #37	; 0x25
 800a096:	d1f9      	bne.n	800a08c <_svfiprintf_r+0x50>
 800a098:	ebba 0b04 	subs.w	fp, sl, r4
 800a09c:	d00b      	beq.n	800a0b6 <_svfiprintf_r+0x7a>
 800a09e:	465b      	mov	r3, fp
 800a0a0:	4622      	mov	r2, r4
 800a0a2:	4629      	mov	r1, r5
 800a0a4:	4638      	mov	r0, r7
 800a0a6:	f7ff ff6d 	bl	8009f84 <__ssputs_r>
 800a0aa:	3001      	adds	r0, #1
 800a0ac:	f000 80aa 	beq.w	800a204 <_svfiprintf_r+0x1c8>
 800a0b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0b2:	445a      	add	r2, fp
 800a0b4:	9209      	str	r2, [sp, #36]	; 0x24
 800a0b6:	f89a 3000 	ldrb.w	r3, [sl]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	f000 80a2 	beq.w	800a204 <_svfiprintf_r+0x1c8>
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	f04f 32ff 	mov.w	r2, #4294967295
 800a0c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0ca:	f10a 0a01 	add.w	sl, sl, #1
 800a0ce:	9304      	str	r3, [sp, #16]
 800a0d0:	9307      	str	r3, [sp, #28]
 800a0d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0d6:	931a      	str	r3, [sp, #104]	; 0x68
 800a0d8:	4654      	mov	r4, sl
 800a0da:	2205      	movs	r2, #5
 800a0dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0e0:	4851      	ldr	r0, [pc, #324]	; (800a228 <_svfiprintf_r+0x1ec>)
 800a0e2:	f7f6 f90d 	bl	8000300 <memchr>
 800a0e6:	9a04      	ldr	r2, [sp, #16]
 800a0e8:	b9d8      	cbnz	r0, 800a122 <_svfiprintf_r+0xe6>
 800a0ea:	06d0      	lsls	r0, r2, #27
 800a0ec:	bf44      	itt	mi
 800a0ee:	2320      	movmi	r3, #32
 800a0f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0f4:	0711      	lsls	r1, r2, #28
 800a0f6:	bf44      	itt	mi
 800a0f8:	232b      	movmi	r3, #43	; 0x2b
 800a0fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0fe:	f89a 3000 	ldrb.w	r3, [sl]
 800a102:	2b2a      	cmp	r3, #42	; 0x2a
 800a104:	d015      	beq.n	800a132 <_svfiprintf_r+0xf6>
 800a106:	9a07      	ldr	r2, [sp, #28]
 800a108:	4654      	mov	r4, sl
 800a10a:	2000      	movs	r0, #0
 800a10c:	f04f 0c0a 	mov.w	ip, #10
 800a110:	4621      	mov	r1, r4
 800a112:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a116:	3b30      	subs	r3, #48	; 0x30
 800a118:	2b09      	cmp	r3, #9
 800a11a:	d94e      	bls.n	800a1ba <_svfiprintf_r+0x17e>
 800a11c:	b1b0      	cbz	r0, 800a14c <_svfiprintf_r+0x110>
 800a11e:	9207      	str	r2, [sp, #28]
 800a120:	e014      	b.n	800a14c <_svfiprintf_r+0x110>
 800a122:	eba0 0308 	sub.w	r3, r0, r8
 800a126:	fa09 f303 	lsl.w	r3, r9, r3
 800a12a:	4313      	orrs	r3, r2
 800a12c:	9304      	str	r3, [sp, #16]
 800a12e:	46a2      	mov	sl, r4
 800a130:	e7d2      	b.n	800a0d8 <_svfiprintf_r+0x9c>
 800a132:	9b03      	ldr	r3, [sp, #12]
 800a134:	1d19      	adds	r1, r3, #4
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	9103      	str	r1, [sp, #12]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	bfbb      	ittet	lt
 800a13e:	425b      	neglt	r3, r3
 800a140:	f042 0202 	orrlt.w	r2, r2, #2
 800a144:	9307      	strge	r3, [sp, #28]
 800a146:	9307      	strlt	r3, [sp, #28]
 800a148:	bfb8      	it	lt
 800a14a:	9204      	strlt	r2, [sp, #16]
 800a14c:	7823      	ldrb	r3, [r4, #0]
 800a14e:	2b2e      	cmp	r3, #46	; 0x2e
 800a150:	d10c      	bne.n	800a16c <_svfiprintf_r+0x130>
 800a152:	7863      	ldrb	r3, [r4, #1]
 800a154:	2b2a      	cmp	r3, #42	; 0x2a
 800a156:	d135      	bne.n	800a1c4 <_svfiprintf_r+0x188>
 800a158:	9b03      	ldr	r3, [sp, #12]
 800a15a:	1d1a      	adds	r2, r3, #4
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	9203      	str	r2, [sp, #12]
 800a160:	2b00      	cmp	r3, #0
 800a162:	bfb8      	it	lt
 800a164:	f04f 33ff 	movlt.w	r3, #4294967295
 800a168:	3402      	adds	r4, #2
 800a16a:	9305      	str	r3, [sp, #20]
 800a16c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a238 <_svfiprintf_r+0x1fc>
 800a170:	7821      	ldrb	r1, [r4, #0]
 800a172:	2203      	movs	r2, #3
 800a174:	4650      	mov	r0, sl
 800a176:	f7f6 f8c3 	bl	8000300 <memchr>
 800a17a:	b140      	cbz	r0, 800a18e <_svfiprintf_r+0x152>
 800a17c:	2340      	movs	r3, #64	; 0x40
 800a17e:	eba0 000a 	sub.w	r0, r0, sl
 800a182:	fa03 f000 	lsl.w	r0, r3, r0
 800a186:	9b04      	ldr	r3, [sp, #16]
 800a188:	4303      	orrs	r3, r0
 800a18a:	3401      	adds	r4, #1
 800a18c:	9304      	str	r3, [sp, #16]
 800a18e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a192:	4826      	ldr	r0, [pc, #152]	; (800a22c <_svfiprintf_r+0x1f0>)
 800a194:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a198:	2206      	movs	r2, #6
 800a19a:	f7f6 f8b1 	bl	8000300 <memchr>
 800a19e:	2800      	cmp	r0, #0
 800a1a0:	d038      	beq.n	800a214 <_svfiprintf_r+0x1d8>
 800a1a2:	4b23      	ldr	r3, [pc, #140]	; (800a230 <_svfiprintf_r+0x1f4>)
 800a1a4:	bb1b      	cbnz	r3, 800a1ee <_svfiprintf_r+0x1b2>
 800a1a6:	9b03      	ldr	r3, [sp, #12]
 800a1a8:	3307      	adds	r3, #7
 800a1aa:	f023 0307 	bic.w	r3, r3, #7
 800a1ae:	3308      	adds	r3, #8
 800a1b0:	9303      	str	r3, [sp, #12]
 800a1b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1b4:	4433      	add	r3, r6
 800a1b6:	9309      	str	r3, [sp, #36]	; 0x24
 800a1b8:	e767      	b.n	800a08a <_svfiprintf_r+0x4e>
 800a1ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1be:	460c      	mov	r4, r1
 800a1c0:	2001      	movs	r0, #1
 800a1c2:	e7a5      	b.n	800a110 <_svfiprintf_r+0xd4>
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	3401      	adds	r4, #1
 800a1c8:	9305      	str	r3, [sp, #20]
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	f04f 0c0a 	mov.w	ip, #10
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1d6:	3a30      	subs	r2, #48	; 0x30
 800a1d8:	2a09      	cmp	r2, #9
 800a1da:	d903      	bls.n	800a1e4 <_svfiprintf_r+0x1a8>
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d0c5      	beq.n	800a16c <_svfiprintf_r+0x130>
 800a1e0:	9105      	str	r1, [sp, #20]
 800a1e2:	e7c3      	b.n	800a16c <_svfiprintf_r+0x130>
 800a1e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1e8:	4604      	mov	r4, r0
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	e7f0      	b.n	800a1d0 <_svfiprintf_r+0x194>
 800a1ee:	ab03      	add	r3, sp, #12
 800a1f0:	9300      	str	r3, [sp, #0]
 800a1f2:	462a      	mov	r2, r5
 800a1f4:	4b0f      	ldr	r3, [pc, #60]	; (800a234 <_svfiprintf_r+0x1f8>)
 800a1f6:	a904      	add	r1, sp, #16
 800a1f8:	4638      	mov	r0, r7
 800a1fa:	f3af 8000 	nop.w
 800a1fe:	1c42      	adds	r2, r0, #1
 800a200:	4606      	mov	r6, r0
 800a202:	d1d6      	bne.n	800a1b2 <_svfiprintf_r+0x176>
 800a204:	89ab      	ldrh	r3, [r5, #12]
 800a206:	065b      	lsls	r3, r3, #25
 800a208:	f53f af2c 	bmi.w	800a064 <_svfiprintf_r+0x28>
 800a20c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a20e:	b01d      	add	sp, #116	; 0x74
 800a210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a214:	ab03      	add	r3, sp, #12
 800a216:	9300      	str	r3, [sp, #0]
 800a218:	462a      	mov	r2, r5
 800a21a:	4b06      	ldr	r3, [pc, #24]	; (800a234 <_svfiprintf_r+0x1f8>)
 800a21c:	a904      	add	r1, sp, #16
 800a21e:	4638      	mov	r0, r7
 800a220:	f000 f87a 	bl	800a318 <_printf_i>
 800a224:	e7eb      	b.n	800a1fe <_svfiprintf_r+0x1c2>
 800a226:	bf00      	nop
 800a228:	0800ae60 	.word	0x0800ae60
 800a22c:	0800ae6a 	.word	0x0800ae6a
 800a230:	00000000 	.word	0x00000000
 800a234:	08009f85 	.word	0x08009f85
 800a238:	0800ae66 	.word	0x0800ae66

0800a23c <_printf_common>:
 800a23c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a240:	4616      	mov	r6, r2
 800a242:	4699      	mov	r9, r3
 800a244:	688a      	ldr	r2, [r1, #8]
 800a246:	690b      	ldr	r3, [r1, #16]
 800a248:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a24c:	4293      	cmp	r3, r2
 800a24e:	bfb8      	it	lt
 800a250:	4613      	movlt	r3, r2
 800a252:	6033      	str	r3, [r6, #0]
 800a254:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a258:	4607      	mov	r7, r0
 800a25a:	460c      	mov	r4, r1
 800a25c:	b10a      	cbz	r2, 800a262 <_printf_common+0x26>
 800a25e:	3301      	adds	r3, #1
 800a260:	6033      	str	r3, [r6, #0]
 800a262:	6823      	ldr	r3, [r4, #0]
 800a264:	0699      	lsls	r1, r3, #26
 800a266:	bf42      	ittt	mi
 800a268:	6833      	ldrmi	r3, [r6, #0]
 800a26a:	3302      	addmi	r3, #2
 800a26c:	6033      	strmi	r3, [r6, #0]
 800a26e:	6825      	ldr	r5, [r4, #0]
 800a270:	f015 0506 	ands.w	r5, r5, #6
 800a274:	d106      	bne.n	800a284 <_printf_common+0x48>
 800a276:	f104 0a19 	add.w	sl, r4, #25
 800a27a:	68e3      	ldr	r3, [r4, #12]
 800a27c:	6832      	ldr	r2, [r6, #0]
 800a27e:	1a9b      	subs	r3, r3, r2
 800a280:	42ab      	cmp	r3, r5
 800a282:	dc26      	bgt.n	800a2d2 <_printf_common+0x96>
 800a284:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a288:	1e13      	subs	r3, r2, #0
 800a28a:	6822      	ldr	r2, [r4, #0]
 800a28c:	bf18      	it	ne
 800a28e:	2301      	movne	r3, #1
 800a290:	0692      	lsls	r2, r2, #26
 800a292:	d42b      	bmi.n	800a2ec <_printf_common+0xb0>
 800a294:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a298:	4649      	mov	r1, r9
 800a29a:	4638      	mov	r0, r7
 800a29c:	47c0      	blx	r8
 800a29e:	3001      	adds	r0, #1
 800a2a0:	d01e      	beq.n	800a2e0 <_printf_common+0xa4>
 800a2a2:	6823      	ldr	r3, [r4, #0]
 800a2a4:	68e5      	ldr	r5, [r4, #12]
 800a2a6:	6832      	ldr	r2, [r6, #0]
 800a2a8:	f003 0306 	and.w	r3, r3, #6
 800a2ac:	2b04      	cmp	r3, #4
 800a2ae:	bf08      	it	eq
 800a2b0:	1aad      	subeq	r5, r5, r2
 800a2b2:	68a3      	ldr	r3, [r4, #8]
 800a2b4:	6922      	ldr	r2, [r4, #16]
 800a2b6:	bf0c      	ite	eq
 800a2b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2bc:	2500      	movne	r5, #0
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	bfc4      	itt	gt
 800a2c2:	1a9b      	subgt	r3, r3, r2
 800a2c4:	18ed      	addgt	r5, r5, r3
 800a2c6:	2600      	movs	r6, #0
 800a2c8:	341a      	adds	r4, #26
 800a2ca:	42b5      	cmp	r5, r6
 800a2cc:	d11a      	bne.n	800a304 <_printf_common+0xc8>
 800a2ce:	2000      	movs	r0, #0
 800a2d0:	e008      	b.n	800a2e4 <_printf_common+0xa8>
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	4652      	mov	r2, sl
 800a2d6:	4649      	mov	r1, r9
 800a2d8:	4638      	mov	r0, r7
 800a2da:	47c0      	blx	r8
 800a2dc:	3001      	adds	r0, #1
 800a2de:	d103      	bne.n	800a2e8 <_printf_common+0xac>
 800a2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2e8:	3501      	adds	r5, #1
 800a2ea:	e7c6      	b.n	800a27a <_printf_common+0x3e>
 800a2ec:	18e1      	adds	r1, r4, r3
 800a2ee:	1c5a      	adds	r2, r3, #1
 800a2f0:	2030      	movs	r0, #48	; 0x30
 800a2f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a2f6:	4422      	add	r2, r4
 800a2f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a2fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a300:	3302      	adds	r3, #2
 800a302:	e7c7      	b.n	800a294 <_printf_common+0x58>
 800a304:	2301      	movs	r3, #1
 800a306:	4622      	mov	r2, r4
 800a308:	4649      	mov	r1, r9
 800a30a:	4638      	mov	r0, r7
 800a30c:	47c0      	blx	r8
 800a30e:	3001      	adds	r0, #1
 800a310:	d0e6      	beq.n	800a2e0 <_printf_common+0xa4>
 800a312:	3601      	adds	r6, #1
 800a314:	e7d9      	b.n	800a2ca <_printf_common+0x8e>
	...

0800a318 <_printf_i>:
 800a318:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a31c:	7e0f      	ldrb	r7, [r1, #24]
 800a31e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a320:	2f78      	cmp	r7, #120	; 0x78
 800a322:	4691      	mov	r9, r2
 800a324:	4680      	mov	r8, r0
 800a326:	460c      	mov	r4, r1
 800a328:	469a      	mov	sl, r3
 800a32a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a32e:	d807      	bhi.n	800a340 <_printf_i+0x28>
 800a330:	2f62      	cmp	r7, #98	; 0x62
 800a332:	d80a      	bhi.n	800a34a <_printf_i+0x32>
 800a334:	2f00      	cmp	r7, #0
 800a336:	f000 80d8 	beq.w	800a4ea <_printf_i+0x1d2>
 800a33a:	2f58      	cmp	r7, #88	; 0x58
 800a33c:	f000 80a3 	beq.w	800a486 <_printf_i+0x16e>
 800a340:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a344:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a348:	e03a      	b.n	800a3c0 <_printf_i+0xa8>
 800a34a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a34e:	2b15      	cmp	r3, #21
 800a350:	d8f6      	bhi.n	800a340 <_printf_i+0x28>
 800a352:	a101      	add	r1, pc, #4	; (adr r1, 800a358 <_printf_i+0x40>)
 800a354:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a358:	0800a3b1 	.word	0x0800a3b1
 800a35c:	0800a3c5 	.word	0x0800a3c5
 800a360:	0800a341 	.word	0x0800a341
 800a364:	0800a341 	.word	0x0800a341
 800a368:	0800a341 	.word	0x0800a341
 800a36c:	0800a341 	.word	0x0800a341
 800a370:	0800a3c5 	.word	0x0800a3c5
 800a374:	0800a341 	.word	0x0800a341
 800a378:	0800a341 	.word	0x0800a341
 800a37c:	0800a341 	.word	0x0800a341
 800a380:	0800a341 	.word	0x0800a341
 800a384:	0800a4d1 	.word	0x0800a4d1
 800a388:	0800a3f5 	.word	0x0800a3f5
 800a38c:	0800a4b3 	.word	0x0800a4b3
 800a390:	0800a341 	.word	0x0800a341
 800a394:	0800a341 	.word	0x0800a341
 800a398:	0800a4f3 	.word	0x0800a4f3
 800a39c:	0800a341 	.word	0x0800a341
 800a3a0:	0800a3f5 	.word	0x0800a3f5
 800a3a4:	0800a341 	.word	0x0800a341
 800a3a8:	0800a341 	.word	0x0800a341
 800a3ac:	0800a4bb 	.word	0x0800a4bb
 800a3b0:	682b      	ldr	r3, [r5, #0]
 800a3b2:	1d1a      	adds	r2, r3, #4
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	602a      	str	r2, [r5, #0]
 800a3b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	e0a3      	b.n	800a50c <_printf_i+0x1f4>
 800a3c4:	6820      	ldr	r0, [r4, #0]
 800a3c6:	6829      	ldr	r1, [r5, #0]
 800a3c8:	0606      	lsls	r6, r0, #24
 800a3ca:	f101 0304 	add.w	r3, r1, #4
 800a3ce:	d50a      	bpl.n	800a3e6 <_printf_i+0xce>
 800a3d0:	680e      	ldr	r6, [r1, #0]
 800a3d2:	602b      	str	r3, [r5, #0]
 800a3d4:	2e00      	cmp	r6, #0
 800a3d6:	da03      	bge.n	800a3e0 <_printf_i+0xc8>
 800a3d8:	232d      	movs	r3, #45	; 0x2d
 800a3da:	4276      	negs	r6, r6
 800a3dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3e0:	485e      	ldr	r0, [pc, #376]	; (800a55c <_printf_i+0x244>)
 800a3e2:	230a      	movs	r3, #10
 800a3e4:	e019      	b.n	800a41a <_printf_i+0x102>
 800a3e6:	680e      	ldr	r6, [r1, #0]
 800a3e8:	602b      	str	r3, [r5, #0]
 800a3ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a3ee:	bf18      	it	ne
 800a3f0:	b236      	sxthne	r6, r6
 800a3f2:	e7ef      	b.n	800a3d4 <_printf_i+0xbc>
 800a3f4:	682b      	ldr	r3, [r5, #0]
 800a3f6:	6820      	ldr	r0, [r4, #0]
 800a3f8:	1d19      	adds	r1, r3, #4
 800a3fa:	6029      	str	r1, [r5, #0]
 800a3fc:	0601      	lsls	r1, r0, #24
 800a3fe:	d501      	bpl.n	800a404 <_printf_i+0xec>
 800a400:	681e      	ldr	r6, [r3, #0]
 800a402:	e002      	b.n	800a40a <_printf_i+0xf2>
 800a404:	0646      	lsls	r6, r0, #25
 800a406:	d5fb      	bpl.n	800a400 <_printf_i+0xe8>
 800a408:	881e      	ldrh	r6, [r3, #0]
 800a40a:	4854      	ldr	r0, [pc, #336]	; (800a55c <_printf_i+0x244>)
 800a40c:	2f6f      	cmp	r7, #111	; 0x6f
 800a40e:	bf0c      	ite	eq
 800a410:	2308      	moveq	r3, #8
 800a412:	230a      	movne	r3, #10
 800a414:	2100      	movs	r1, #0
 800a416:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a41a:	6865      	ldr	r5, [r4, #4]
 800a41c:	60a5      	str	r5, [r4, #8]
 800a41e:	2d00      	cmp	r5, #0
 800a420:	bfa2      	ittt	ge
 800a422:	6821      	ldrge	r1, [r4, #0]
 800a424:	f021 0104 	bicge.w	r1, r1, #4
 800a428:	6021      	strge	r1, [r4, #0]
 800a42a:	b90e      	cbnz	r6, 800a430 <_printf_i+0x118>
 800a42c:	2d00      	cmp	r5, #0
 800a42e:	d04d      	beq.n	800a4cc <_printf_i+0x1b4>
 800a430:	4615      	mov	r5, r2
 800a432:	fbb6 f1f3 	udiv	r1, r6, r3
 800a436:	fb03 6711 	mls	r7, r3, r1, r6
 800a43a:	5dc7      	ldrb	r7, [r0, r7]
 800a43c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a440:	4637      	mov	r7, r6
 800a442:	42bb      	cmp	r3, r7
 800a444:	460e      	mov	r6, r1
 800a446:	d9f4      	bls.n	800a432 <_printf_i+0x11a>
 800a448:	2b08      	cmp	r3, #8
 800a44a:	d10b      	bne.n	800a464 <_printf_i+0x14c>
 800a44c:	6823      	ldr	r3, [r4, #0]
 800a44e:	07de      	lsls	r6, r3, #31
 800a450:	d508      	bpl.n	800a464 <_printf_i+0x14c>
 800a452:	6923      	ldr	r3, [r4, #16]
 800a454:	6861      	ldr	r1, [r4, #4]
 800a456:	4299      	cmp	r1, r3
 800a458:	bfde      	ittt	le
 800a45a:	2330      	movle	r3, #48	; 0x30
 800a45c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a460:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a464:	1b52      	subs	r2, r2, r5
 800a466:	6122      	str	r2, [r4, #16]
 800a468:	f8cd a000 	str.w	sl, [sp]
 800a46c:	464b      	mov	r3, r9
 800a46e:	aa03      	add	r2, sp, #12
 800a470:	4621      	mov	r1, r4
 800a472:	4640      	mov	r0, r8
 800a474:	f7ff fee2 	bl	800a23c <_printf_common>
 800a478:	3001      	adds	r0, #1
 800a47a:	d14c      	bne.n	800a516 <_printf_i+0x1fe>
 800a47c:	f04f 30ff 	mov.w	r0, #4294967295
 800a480:	b004      	add	sp, #16
 800a482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a486:	4835      	ldr	r0, [pc, #212]	; (800a55c <_printf_i+0x244>)
 800a488:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a48c:	6829      	ldr	r1, [r5, #0]
 800a48e:	6823      	ldr	r3, [r4, #0]
 800a490:	f851 6b04 	ldr.w	r6, [r1], #4
 800a494:	6029      	str	r1, [r5, #0]
 800a496:	061d      	lsls	r5, r3, #24
 800a498:	d514      	bpl.n	800a4c4 <_printf_i+0x1ac>
 800a49a:	07df      	lsls	r7, r3, #31
 800a49c:	bf44      	itt	mi
 800a49e:	f043 0320 	orrmi.w	r3, r3, #32
 800a4a2:	6023      	strmi	r3, [r4, #0]
 800a4a4:	b91e      	cbnz	r6, 800a4ae <_printf_i+0x196>
 800a4a6:	6823      	ldr	r3, [r4, #0]
 800a4a8:	f023 0320 	bic.w	r3, r3, #32
 800a4ac:	6023      	str	r3, [r4, #0]
 800a4ae:	2310      	movs	r3, #16
 800a4b0:	e7b0      	b.n	800a414 <_printf_i+0xfc>
 800a4b2:	6823      	ldr	r3, [r4, #0]
 800a4b4:	f043 0320 	orr.w	r3, r3, #32
 800a4b8:	6023      	str	r3, [r4, #0]
 800a4ba:	2378      	movs	r3, #120	; 0x78
 800a4bc:	4828      	ldr	r0, [pc, #160]	; (800a560 <_printf_i+0x248>)
 800a4be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a4c2:	e7e3      	b.n	800a48c <_printf_i+0x174>
 800a4c4:	0659      	lsls	r1, r3, #25
 800a4c6:	bf48      	it	mi
 800a4c8:	b2b6      	uxthmi	r6, r6
 800a4ca:	e7e6      	b.n	800a49a <_printf_i+0x182>
 800a4cc:	4615      	mov	r5, r2
 800a4ce:	e7bb      	b.n	800a448 <_printf_i+0x130>
 800a4d0:	682b      	ldr	r3, [r5, #0]
 800a4d2:	6826      	ldr	r6, [r4, #0]
 800a4d4:	6961      	ldr	r1, [r4, #20]
 800a4d6:	1d18      	adds	r0, r3, #4
 800a4d8:	6028      	str	r0, [r5, #0]
 800a4da:	0635      	lsls	r5, r6, #24
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	d501      	bpl.n	800a4e4 <_printf_i+0x1cc>
 800a4e0:	6019      	str	r1, [r3, #0]
 800a4e2:	e002      	b.n	800a4ea <_printf_i+0x1d2>
 800a4e4:	0670      	lsls	r0, r6, #25
 800a4e6:	d5fb      	bpl.n	800a4e0 <_printf_i+0x1c8>
 800a4e8:	8019      	strh	r1, [r3, #0]
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	6123      	str	r3, [r4, #16]
 800a4ee:	4615      	mov	r5, r2
 800a4f0:	e7ba      	b.n	800a468 <_printf_i+0x150>
 800a4f2:	682b      	ldr	r3, [r5, #0]
 800a4f4:	1d1a      	adds	r2, r3, #4
 800a4f6:	602a      	str	r2, [r5, #0]
 800a4f8:	681d      	ldr	r5, [r3, #0]
 800a4fa:	6862      	ldr	r2, [r4, #4]
 800a4fc:	2100      	movs	r1, #0
 800a4fe:	4628      	mov	r0, r5
 800a500:	f7f5 fefe 	bl	8000300 <memchr>
 800a504:	b108      	cbz	r0, 800a50a <_printf_i+0x1f2>
 800a506:	1b40      	subs	r0, r0, r5
 800a508:	6060      	str	r0, [r4, #4]
 800a50a:	6863      	ldr	r3, [r4, #4]
 800a50c:	6123      	str	r3, [r4, #16]
 800a50e:	2300      	movs	r3, #0
 800a510:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a514:	e7a8      	b.n	800a468 <_printf_i+0x150>
 800a516:	6923      	ldr	r3, [r4, #16]
 800a518:	462a      	mov	r2, r5
 800a51a:	4649      	mov	r1, r9
 800a51c:	4640      	mov	r0, r8
 800a51e:	47d0      	blx	sl
 800a520:	3001      	adds	r0, #1
 800a522:	d0ab      	beq.n	800a47c <_printf_i+0x164>
 800a524:	6823      	ldr	r3, [r4, #0]
 800a526:	079b      	lsls	r3, r3, #30
 800a528:	d413      	bmi.n	800a552 <_printf_i+0x23a>
 800a52a:	68e0      	ldr	r0, [r4, #12]
 800a52c:	9b03      	ldr	r3, [sp, #12]
 800a52e:	4298      	cmp	r0, r3
 800a530:	bfb8      	it	lt
 800a532:	4618      	movlt	r0, r3
 800a534:	e7a4      	b.n	800a480 <_printf_i+0x168>
 800a536:	2301      	movs	r3, #1
 800a538:	4632      	mov	r2, r6
 800a53a:	4649      	mov	r1, r9
 800a53c:	4640      	mov	r0, r8
 800a53e:	47d0      	blx	sl
 800a540:	3001      	adds	r0, #1
 800a542:	d09b      	beq.n	800a47c <_printf_i+0x164>
 800a544:	3501      	adds	r5, #1
 800a546:	68e3      	ldr	r3, [r4, #12]
 800a548:	9903      	ldr	r1, [sp, #12]
 800a54a:	1a5b      	subs	r3, r3, r1
 800a54c:	42ab      	cmp	r3, r5
 800a54e:	dcf2      	bgt.n	800a536 <_printf_i+0x21e>
 800a550:	e7eb      	b.n	800a52a <_printf_i+0x212>
 800a552:	2500      	movs	r5, #0
 800a554:	f104 0619 	add.w	r6, r4, #25
 800a558:	e7f5      	b.n	800a546 <_printf_i+0x22e>
 800a55a:	bf00      	nop
 800a55c:	0800ae71 	.word	0x0800ae71
 800a560:	0800ae82 	.word	0x0800ae82

0800a564 <memmove>:
 800a564:	4288      	cmp	r0, r1
 800a566:	b510      	push	{r4, lr}
 800a568:	eb01 0402 	add.w	r4, r1, r2
 800a56c:	d902      	bls.n	800a574 <memmove+0x10>
 800a56e:	4284      	cmp	r4, r0
 800a570:	4623      	mov	r3, r4
 800a572:	d807      	bhi.n	800a584 <memmove+0x20>
 800a574:	1e43      	subs	r3, r0, #1
 800a576:	42a1      	cmp	r1, r4
 800a578:	d008      	beq.n	800a58c <memmove+0x28>
 800a57a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a57e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a582:	e7f8      	b.n	800a576 <memmove+0x12>
 800a584:	4402      	add	r2, r0
 800a586:	4601      	mov	r1, r0
 800a588:	428a      	cmp	r2, r1
 800a58a:	d100      	bne.n	800a58e <memmove+0x2a>
 800a58c:	bd10      	pop	{r4, pc}
 800a58e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a592:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a596:	e7f7      	b.n	800a588 <memmove+0x24>

0800a598 <_free_r>:
 800a598:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a59a:	2900      	cmp	r1, #0
 800a59c:	d044      	beq.n	800a628 <_free_r+0x90>
 800a59e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5a2:	9001      	str	r0, [sp, #4]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	f1a1 0404 	sub.w	r4, r1, #4
 800a5aa:	bfb8      	it	lt
 800a5ac:	18e4      	addlt	r4, r4, r3
 800a5ae:	f000 f913 	bl	800a7d8 <__malloc_lock>
 800a5b2:	4a1e      	ldr	r2, [pc, #120]	; (800a62c <_free_r+0x94>)
 800a5b4:	9801      	ldr	r0, [sp, #4]
 800a5b6:	6813      	ldr	r3, [r2, #0]
 800a5b8:	b933      	cbnz	r3, 800a5c8 <_free_r+0x30>
 800a5ba:	6063      	str	r3, [r4, #4]
 800a5bc:	6014      	str	r4, [r2, #0]
 800a5be:	b003      	add	sp, #12
 800a5c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a5c4:	f000 b90e 	b.w	800a7e4 <__malloc_unlock>
 800a5c8:	42a3      	cmp	r3, r4
 800a5ca:	d908      	bls.n	800a5de <_free_r+0x46>
 800a5cc:	6825      	ldr	r5, [r4, #0]
 800a5ce:	1961      	adds	r1, r4, r5
 800a5d0:	428b      	cmp	r3, r1
 800a5d2:	bf01      	itttt	eq
 800a5d4:	6819      	ldreq	r1, [r3, #0]
 800a5d6:	685b      	ldreq	r3, [r3, #4]
 800a5d8:	1949      	addeq	r1, r1, r5
 800a5da:	6021      	streq	r1, [r4, #0]
 800a5dc:	e7ed      	b.n	800a5ba <_free_r+0x22>
 800a5de:	461a      	mov	r2, r3
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	b10b      	cbz	r3, 800a5e8 <_free_r+0x50>
 800a5e4:	42a3      	cmp	r3, r4
 800a5e6:	d9fa      	bls.n	800a5de <_free_r+0x46>
 800a5e8:	6811      	ldr	r1, [r2, #0]
 800a5ea:	1855      	adds	r5, r2, r1
 800a5ec:	42a5      	cmp	r5, r4
 800a5ee:	d10b      	bne.n	800a608 <_free_r+0x70>
 800a5f0:	6824      	ldr	r4, [r4, #0]
 800a5f2:	4421      	add	r1, r4
 800a5f4:	1854      	adds	r4, r2, r1
 800a5f6:	42a3      	cmp	r3, r4
 800a5f8:	6011      	str	r1, [r2, #0]
 800a5fa:	d1e0      	bne.n	800a5be <_free_r+0x26>
 800a5fc:	681c      	ldr	r4, [r3, #0]
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	6053      	str	r3, [r2, #4]
 800a602:	4421      	add	r1, r4
 800a604:	6011      	str	r1, [r2, #0]
 800a606:	e7da      	b.n	800a5be <_free_r+0x26>
 800a608:	d902      	bls.n	800a610 <_free_r+0x78>
 800a60a:	230c      	movs	r3, #12
 800a60c:	6003      	str	r3, [r0, #0]
 800a60e:	e7d6      	b.n	800a5be <_free_r+0x26>
 800a610:	6825      	ldr	r5, [r4, #0]
 800a612:	1961      	adds	r1, r4, r5
 800a614:	428b      	cmp	r3, r1
 800a616:	bf04      	itt	eq
 800a618:	6819      	ldreq	r1, [r3, #0]
 800a61a:	685b      	ldreq	r3, [r3, #4]
 800a61c:	6063      	str	r3, [r4, #4]
 800a61e:	bf04      	itt	eq
 800a620:	1949      	addeq	r1, r1, r5
 800a622:	6021      	streq	r1, [r4, #0]
 800a624:	6054      	str	r4, [r2, #4]
 800a626:	e7ca      	b.n	800a5be <_free_r+0x26>
 800a628:	b003      	add	sp, #12
 800a62a:	bd30      	pop	{r4, r5, pc}
 800a62c:	240003dc 	.word	0x240003dc

0800a630 <sbrk_aligned>:
 800a630:	b570      	push	{r4, r5, r6, lr}
 800a632:	4e0e      	ldr	r6, [pc, #56]	; (800a66c <sbrk_aligned+0x3c>)
 800a634:	460c      	mov	r4, r1
 800a636:	6831      	ldr	r1, [r6, #0]
 800a638:	4605      	mov	r5, r0
 800a63a:	b911      	cbnz	r1, 800a642 <sbrk_aligned+0x12>
 800a63c:	f000 f8bc 	bl	800a7b8 <_sbrk_r>
 800a640:	6030      	str	r0, [r6, #0]
 800a642:	4621      	mov	r1, r4
 800a644:	4628      	mov	r0, r5
 800a646:	f000 f8b7 	bl	800a7b8 <_sbrk_r>
 800a64a:	1c43      	adds	r3, r0, #1
 800a64c:	d00a      	beq.n	800a664 <sbrk_aligned+0x34>
 800a64e:	1cc4      	adds	r4, r0, #3
 800a650:	f024 0403 	bic.w	r4, r4, #3
 800a654:	42a0      	cmp	r0, r4
 800a656:	d007      	beq.n	800a668 <sbrk_aligned+0x38>
 800a658:	1a21      	subs	r1, r4, r0
 800a65a:	4628      	mov	r0, r5
 800a65c:	f000 f8ac 	bl	800a7b8 <_sbrk_r>
 800a660:	3001      	adds	r0, #1
 800a662:	d101      	bne.n	800a668 <sbrk_aligned+0x38>
 800a664:	f04f 34ff 	mov.w	r4, #4294967295
 800a668:	4620      	mov	r0, r4
 800a66a:	bd70      	pop	{r4, r5, r6, pc}
 800a66c:	240003e0 	.word	0x240003e0

0800a670 <_malloc_r>:
 800a670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a674:	1ccd      	adds	r5, r1, #3
 800a676:	f025 0503 	bic.w	r5, r5, #3
 800a67a:	3508      	adds	r5, #8
 800a67c:	2d0c      	cmp	r5, #12
 800a67e:	bf38      	it	cc
 800a680:	250c      	movcc	r5, #12
 800a682:	2d00      	cmp	r5, #0
 800a684:	4607      	mov	r7, r0
 800a686:	db01      	blt.n	800a68c <_malloc_r+0x1c>
 800a688:	42a9      	cmp	r1, r5
 800a68a:	d905      	bls.n	800a698 <_malloc_r+0x28>
 800a68c:	230c      	movs	r3, #12
 800a68e:	603b      	str	r3, [r7, #0]
 800a690:	2600      	movs	r6, #0
 800a692:	4630      	mov	r0, r6
 800a694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a698:	4e2e      	ldr	r6, [pc, #184]	; (800a754 <_malloc_r+0xe4>)
 800a69a:	f000 f89d 	bl	800a7d8 <__malloc_lock>
 800a69e:	6833      	ldr	r3, [r6, #0]
 800a6a0:	461c      	mov	r4, r3
 800a6a2:	bb34      	cbnz	r4, 800a6f2 <_malloc_r+0x82>
 800a6a4:	4629      	mov	r1, r5
 800a6a6:	4638      	mov	r0, r7
 800a6a8:	f7ff ffc2 	bl	800a630 <sbrk_aligned>
 800a6ac:	1c43      	adds	r3, r0, #1
 800a6ae:	4604      	mov	r4, r0
 800a6b0:	d14d      	bne.n	800a74e <_malloc_r+0xde>
 800a6b2:	6834      	ldr	r4, [r6, #0]
 800a6b4:	4626      	mov	r6, r4
 800a6b6:	2e00      	cmp	r6, #0
 800a6b8:	d140      	bne.n	800a73c <_malloc_r+0xcc>
 800a6ba:	6823      	ldr	r3, [r4, #0]
 800a6bc:	4631      	mov	r1, r6
 800a6be:	4638      	mov	r0, r7
 800a6c0:	eb04 0803 	add.w	r8, r4, r3
 800a6c4:	f000 f878 	bl	800a7b8 <_sbrk_r>
 800a6c8:	4580      	cmp	r8, r0
 800a6ca:	d13a      	bne.n	800a742 <_malloc_r+0xd2>
 800a6cc:	6821      	ldr	r1, [r4, #0]
 800a6ce:	3503      	adds	r5, #3
 800a6d0:	1a6d      	subs	r5, r5, r1
 800a6d2:	f025 0503 	bic.w	r5, r5, #3
 800a6d6:	3508      	adds	r5, #8
 800a6d8:	2d0c      	cmp	r5, #12
 800a6da:	bf38      	it	cc
 800a6dc:	250c      	movcc	r5, #12
 800a6de:	4629      	mov	r1, r5
 800a6e0:	4638      	mov	r0, r7
 800a6e2:	f7ff ffa5 	bl	800a630 <sbrk_aligned>
 800a6e6:	3001      	adds	r0, #1
 800a6e8:	d02b      	beq.n	800a742 <_malloc_r+0xd2>
 800a6ea:	6823      	ldr	r3, [r4, #0]
 800a6ec:	442b      	add	r3, r5
 800a6ee:	6023      	str	r3, [r4, #0]
 800a6f0:	e00e      	b.n	800a710 <_malloc_r+0xa0>
 800a6f2:	6822      	ldr	r2, [r4, #0]
 800a6f4:	1b52      	subs	r2, r2, r5
 800a6f6:	d41e      	bmi.n	800a736 <_malloc_r+0xc6>
 800a6f8:	2a0b      	cmp	r2, #11
 800a6fa:	d916      	bls.n	800a72a <_malloc_r+0xba>
 800a6fc:	1961      	adds	r1, r4, r5
 800a6fe:	42a3      	cmp	r3, r4
 800a700:	6025      	str	r5, [r4, #0]
 800a702:	bf18      	it	ne
 800a704:	6059      	strne	r1, [r3, #4]
 800a706:	6863      	ldr	r3, [r4, #4]
 800a708:	bf08      	it	eq
 800a70a:	6031      	streq	r1, [r6, #0]
 800a70c:	5162      	str	r2, [r4, r5]
 800a70e:	604b      	str	r3, [r1, #4]
 800a710:	4638      	mov	r0, r7
 800a712:	f104 060b 	add.w	r6, r4, #11
 800a716:	f000 f865 	bl	800a7e4 <__malloc_unlock>
 800a71a:	f026 0607 	bic.w	r6, r6, #7
 800a71e:	1d23      	adds	r3, r4, #4
 800a720:	1af2      	subs	r2, r6, r3
 800a722:	d0b6      	beq.n	800a692 <_malloc_r+0x22>
 800a724:	1b9b      	subs	r3, r3, r6
 800a726:	50a3      	str	r3, [r4, r2]
 800a728:	e7b3      	b.n	800a692 <_malloc_r+0x22>
 800a72a:	6862      	ldr	r2, [r4, #4]
 800a72c:	42a3      	cmp	r3, r4
 800a72e:	bf0c      	ite	eq
 800a730:	6032      	streq	r2, [r6, #0]
 800a732:	605a      	strne	r2, [r3, #4]
 800a734:	e7ec      	b.n	800a710 <_malloc_r+0xa0>
 800a736:	4623      	mov	r3, r4
 800a738:	6864      	ldr	r4, [r4, #4]
 800a73a:	e7b2      	b.n	800a6a2 <_malloc_r+0x32>
 800a73c:	4634      	mov	r4, r6
 800a73e:	6876      	ldr	r6, [r6, #4]
 800a740:	e7b9      	b.n	800a6b6 <_malloc_r+0x46>
 800a742:	230c      	movs	r3, #12
 800a744:	603b      	str	r3, [r7, #0]
 800a746:	4638      	mov	r0, r7
 800a748:	f000 f84c 	bl	800a7e4 <__malloc_unlock>
 800a74c:	e7a1      	b.n	800a692 <_malloc_r+0x22>
 800a74e:	6025      	str	r5, [r4, #0]
 800a750:	e7de      	b.n	800a710 <_malloc_r+0xa0>
 800a752:	bf00      	nop
 800a754:	240003dc 	.word	0x240003dc

0800a758 <_realloc_r>:
 800a758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a75c:	4680      	mov	r8, r0
 800a75e:	4614      	mov	r4, r2
 800a760:	460e      	mov	r6, r1
 800a762:	b921      	cbnz	r1, 800a76e <_realloc_r+0x16>
 800a764:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a768:	4611      	mov	r1, r2
 800a76a:	f7ff bf81 	b.w	800a670 <_malloc_r>
 800a76e:	b92a      	cbnz	r2, 800a77c <_realloc_r+0x24>
 800a770:	f7ff ff12 	bl	800a598 <_free_r>
 800a774:	4625      	mov	r5, r4
 800a776:	4628      	mov	r0, r5
 800a778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a77c:	f000 f838 	bl	800a7f0 <_malloc_usable_size_r>
 800a780:	4284      	cmp	r4, r0
 800a782:	4607      	mov	r7, r0
 800a784:	d802      	bhi.n	800a78c <_realloc_r+0x34>
 800a786:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a78a:	d812      	bhi.n	800a7b2 <_realloc_r+0x5a>
 800a78c:	4621      	mov	r1, r4
 800a78e:	4640      	mov	r0, r8
 800a790:	f7ff ff6e 	bl	800a670 <_malloc_r>
 800a794:	4605      	mov	r5, r0
 800a796:	2800      	cmp	r0, #0
 800a798:	d0ed      	beq.n	800a776 <_realloc_r+0x1e>
 800a79a:	42bc      	cmp	r4, r7
 800a79c:	4622      	mov	r2, r4
 800a79e:	4631      	mov	r1, r6
 800a7a0:	bf28      	it	cs
 800a7a2:	463a      	movcs	r2, r7
 800a7a4:	f7ff fbb8 	bl	8009f18 <memcpy>
 800a7a8:	4631      	mov	r1, r6
 800a7aa:	4640      	mov	r0, r8
 800a7ac:	f7ff fef4 	bl	800a598 <_free_r>
 800a7b0:	e7e1      	b.n	800a776 <_realloc_r+0x1e>
 800a7b2:	4635      	mov	r5, r6
 800a7b4:	e7df      	b.n	800a776 <_realloc_r+0x1e>
	...

0800a7b8 <_sbrk_r>:
 800a7b8:	b538      	push	{r3, r4, r5, lr}
 800a7ba:	4d06      	ldr	r5, [pc, #24]	; (800a7d4 <_sbrk_r+0x1c>)
 800a7bc:	2300      	movs	r3, #0
 800a7be:	4604      	mov	r4, r0
 800a7c0:	4608      	mov	r0, r1
 800a7c2:	602b      	str	r3, [r5, #0]
 800a7c4:	f7f7 fdd0 	bl	8002368 <_sbrk>
 800a7c8:	1c43      	adds	r3, r0, #1
 800a7ca:	d102      	bne.n	800a7d2 <_sbrk_r+0x1a>
 800a7cc:	682b      	ldr	r3, [r5, #0]
 800a7ce:	b103      	cbz	r3, 800a7d2 <_sbrk_r+0x1a>
 800a7d0:	6023      	str	r3, [r4, #0]
 800a7d2:	bd38      	pop	{r3, r4, r5, pc}
 800a7d4:	240003e4 	.word	0x240003e4

0800a7d8 <__malloc_lock>:
 800a7d8:	4801      	ldr	r0, [pc, #4]	; (800a7e0 <__malloc_lock+0x8>)
 800a7da:	f000 b811 	b.w	800a800 <__retarget_lock_acquire_recursive>
 800a7de:	bf00      	nop
 800a7e0:	240003e8 	.word	0x240003e8

0800a7e4 <__malloc_unlock>:
 800a7e4:	4801      	ldr	r0, [pc, #4]	; (800a7ec <__malloc_unlock+0x8>)
 800a7e6:	f000 b80c 	b.w	800a802 <__retarget_lock_release_recursive>
 800a7ea:	bf00      	nop
 800a7ec:	240003e8 	.word	0x240003e8

0800a7f0 <_malloc_usable_size_r>:
 800a7f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7f4:	1f18      	subs	r0, r3, #4
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	bfbc      	itt	lt
 800a7fa:	580b      	ldrlt	r3, [r1, r0]
 800a7fc:	18c0      	addlt	r0, r0, r3
 800a7fe:	4770      	bx	lr

0800a800 <__retarget_lock_acquire_recursive>:
 800a800:	4770      	bx	lr

0800a802 <__retarget_lock_release_recursive>:
 800a802:	4770      	bx	lr

0800a804 <_init>:
 800a804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a806:	bf00      	nop
 800a808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a80a:	bc08      	pop	{r3}
 800a80c:	469e      	mov	lr, r3
 800a80e:	4770      	bx	lr

0800a810 <_fini>:
 800a810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a812:	bf00      	nop
 800a814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a816:	bc08      	pop	{r3}
 800a818:	469e      	mov	lr, r3
 800a81a:	4770      	bx	lr
