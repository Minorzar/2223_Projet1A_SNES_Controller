
NUCLEO-H7A3_NRF24_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000772c  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080079d8  080079d8  000179d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007a24  08007a24  00017a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007a2c  08007a2c  00017a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007a30  08007a30  00017a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  08007a34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000180  24000014  08007a48  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000194  08007a48  00020194  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013c7c  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002685  00000000  00000000  00033cbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000d00  00000000  00000000  00036348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000c08  00000000  00000000  00037048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000033ea  00000000  00000000  00037c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00014526  00000000  00000000  0003b03a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00136aa4  00000000  00000000  0004f560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00186004  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000034e8  00000000  00000000  00186054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000014 	.word	0x24000014
 80002c8:	00000000 	.word	0x00000000
 80002cc:	080079c0 	.word	0x080079c0

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000018 	.word	0x24000018
 80002e8:	080079c0 	.word	0x080079c0

080002ec <strlen>:
 80002ec:	4603      	mov	r3, r0
 80002ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f2:	2a00      	cmp	r2, #0
 80002f4:	d1fb      	bne.n	80002ee <strlen+0x2>
 80002f6:	1a18      	subs	r0, r3, r0
 80002f8:	3801      	subs	r0, #1
 80002fa:	4770      	bx	lr

080002fc <__aeabi_uldivmod>:
 80002fc:	b953      	cbnz	r3, 8000314 <__aeabi_uldivmod+0x18>
 80002fe:	b94a      	cbnz	r2, 8000314 <__aeabi_uldivmod+0x18>
 8000300:	2900      	cmp	r1, #0
 8000302:	bf08      	it	eq
 8000304:	2800      	cmpeq	r0, #0
 8000306:	bf1c      	itt	ne
 8000308:	f04f 31ff 	movne.w	r1, #4294967295
 800030c:	f04f 30ff 	movne.w	r0, #4294967295
 8000310:	f000 b974 	b.w	80005fc <__aeabi_idiv0>
 8000314:	f1ad 0c08 	sub.w	ip, sp, #8
 8000318:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031c:	f000 f806 	bl	800032c <__udivmoddi4>
 8000320:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000324:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000328:	b004      	add	sp, #16
 800032a:	4770      	bx	lr

0800032c <__udivmoddi4>:
 800032c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000330:	9d08      	ldr	r5, [sp, #32]
 8000332:	4604      	mov	r4, r0
 8000334:	468e      	mov	lr, r1
 8000336:	2b00      	cmp	r3, #0
 8000338:	d14d      	bne.n	80003d6 <__udivmoddi4+0xaa>
 800033a:	428a      	cmp	r2, r1
 800033c:	4694      	mov	ip, r2
 800033e:	d969      	bls.n	8000414 <__udivmoddi4+0xe8>
 8000340:	fab2 f282 	clz	r2, r2
 8000344:	b152      	cbz	r2, 800035c <__udivmoddi4+0x30>
 8000346:	fa01 f302 	lsl.w	r3, r1, r2
 800034a:	f1c2 0120 	rsb	r1, r2, #32
 800034e:	fa20 f101 	lsr.w	r1, r0, r1
 8000352:	fa0c fc02 	lsl.w	ip, ip, r2
 8000356:	ea41 0e03 	orr.w	lr, r1, r3
 800035a:	4094      	lsls	r4, r2
 800035c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000360:	0c21      	lsrs	r1, r4, #16
 8000362:	fbbe f6f8 	udiv	r6, lr, r8
 8000366:	fa1f f78c 	uxth.w	r7, ip
 800036a:	fb08 e316 	mls	r3, r8, r6, lr
 800036e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000372:	fb06 f107 	mul.w	r1, r6, r7
 8000376:	4299      	cmp	r1, r3
 8000378:	d90a      	bls.n	8000390 <__udivmoddi4+0x64>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000382:	f080 811f 	bcs.w	80005c4 <__udivmoddi4+0x298>
 8000386:	4299      	cmp	r1, r3
 8000388:	f240 811c 	bls.w	80005c4 <__udivmoddi4+0x298>
 800038c:	3e02      	subs	r6, #2
 800038e:	4463      	add	r3, ip
 8000390:	1a5b      	subs	r3, r3, r1
 8000392:	b2a4      	uxth	r4, r4
 8000394:	fbb3 f0f8 	udiv	r0, r3, r8
 8000398:	fb08 3310 	mls	r3, r8, r0, r3
 800039c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003a0:	fb00 f707 	mul.w	r7, r0, r7
 80003a4:	42a7      	cmp	r7, r4
 80003a6:	d90a      	bls.n	80003be <__udivmoddi4+0x92>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b0:	f080 810a 	bcs.w	80005c8 <__udivmoddi4+0x29c>
 80003b4:	42a7      	cmp	r7, r4
 80003b6:	f240 8107 	bls.w	80005c8 <__udivmoddi4+0x29c>
 80003ba:	4464      	add	r4, ip
 80003bc:	3802      	subs	r0, #2
 80003be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003c2:	1be4      	subs	r4, r4, r7
 80003c4:	2600      	movs	r6, #0
 80003c6:	b11d      	cbz	r5, 80003d0 <__udivmoddi4+0xa4>
 80003c8:	40d4      	lsrs	r4, r2
 80003ca:	2300      	movs	r3, #0
 80003cc:	e9c5 4300 	strd	r4, r3, [r5]
 80003d0:	4631      	mov	r1, r6
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0xc2>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80ef 	beq.w	80005be <__udivmoddi4+0x292>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x160>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0xd4>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80f9 	bhi.w	80005f2 <__udivmoddi4+0x2c6>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0303 	sbc.w	r3, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	469e      	mov	lr, r3
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0e0      	beq.n	80003d0 <__udivmoddi4+0xa4>
 800040e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000412:	e7dd      	b.n	80003d0 <__udivmoddi4+0xa4>
 8000414:	b902      	cbnz	r2, 8000418 <__udivmoddi4+0xec>
 8000416:	deff      	udf	#255	; 0xff
 8000418:	fab2 f282 	clz	r2, r2
 800041c:	2a00      	cmp	r2, #0
 800041e:	f040 8092 	bne.w	8000546 <__udivmoddi4+0x21a>
 8000422:	eba1 010c 	sub.w	r1, r1, ip
 8000426:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	2601      	movs	r6, #1
 8000430:	0c20      	lsrs	r0, r4, #16
 8000432:	fbb1 f3f7 	udiv	r3, r1, r7
 8000436:	fb07 1113 	mls	r1, r7, r3, r1
 800043a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800043e:	fb0e f003 	mul.w	r0, lr, r3
 8000442:	4288      	cmp	r0, r1
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x12c>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f103 38ff 	add.w	r8, r3, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x12a>
 8000450:	4288      	cmp	r0, r1
 8000452:	f200 80cb 	bhi.w	80005ec <__udivmoddi4+0x2c0>
 8000456:	4643      	mov	r3, r8
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000460:	fb07 1110 	mls	r1, r7, r0, r1
 8000464:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000468:	fb0e fe00 	mul.w	lr, lr, r0
 800046c:	45a6      	cmp	lr, r4
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x156>
 8000470:	eb1c 0404 	adds.w	r4, ip, r4
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295
 8000478:	d202      	bcs.n	8000480 <__udivmoddi4+0x154>
 800047a:	45a6      	cmp	lr, r4
 800047c:	f200 80bb 	bhi.w	80005f6 <__udivmoddi4+0x2ca>
 8000480:	4608      	mov	r0, r1
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800048a:	e79c      	b.n	80003c6 <__udivmoddi4+0x9a>
 800048c:	f1c6 0720 	rsb	r7, r6, #32
 8000490:	40b3      	lsls	r3, r6
 8000492:	fa22 fc07 	lsr.w	ip, r2, r7
 8000496:	ea4c 0c03 	orr.w	ip, ip, r3
 800049a:	fa20 f407 	lsr.w	r4, r0, r7
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	431c      	orrs	r4, r3
 80004a4:	40f9      	lsrs	r1, r7
 80004a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004aa:	fa00 f306 	lsl.w	r3, r0, r6
 80004ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80004b2:	0c20      	lsrs	r0, r4, #16
 80004b4:	fa1f fe8c 	uxth.w	lr, ip
 80004b8:	fb09 1118 	mls	r1, r9, r8, r1
 80004bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c0:	fb08 f00e 	mul.w	r0, r8, lr
 80004c4:	4288      	cmp	r0, r1
 80004c6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ca:	d90b      	bls.n	80004e4 <__udivmoddi4+0x1b8>
 80004cc:	eb1c 0101 	adds.w	r1, ip, r1
 80004d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004d4:	f080 8088 	bcs.w	80005e8 <__udivmoddi4+0x2bc>
 80004d8:	4288      	cmp	r0, r1
 80004da:	f240 8085 	bls.w	80005e8 <__udivmoddi4+0x2bc>
 80004de:	f1a8 0802 	sub.w	r8, r8, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	1a09      	subs	r1, r1, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004ec:	fb09 1110 	mls	r1, r9, r0, r1
 80004f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004f8:	458e      	cmp	lr, r1
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x1e2>
 80004fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000500:	f100 34ff 	add.w	r4, r0, #4294967295
 8000504:	d26c      	bcs.n	80005e0 <__udivmoddi4+0x2b4>
 8000506:	458e      	cmp	lr, r1
 8000508:	d96a      	bls.n	80005e0 <__udivmoddi4+0x2b4>
 800050a:	3802      	subs	r0, #2
 800050c:	4461      	add	r1, ip
 800050e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000512:	fba0 9402 	umull	r9, r4, r0, r2
 8000516:	eba1 010e 	sub.w	r1, r1, lr
 800051a:	42a1      	cmp	r1, r4
 800051c:	46c8      	mov	r8, r9
 800051e:	46a6      	mov	lr, r4
 8000520:	d356      	bcc.n	80005d0 <__udivmoddi4+0x2a4>
 8000522:	d053      	beq.n	80005cc <__udivmoddi4+0x2a0>
 8000524:	b15d      	cbz	r5, 800053e <__udivmoddi4+0x212>
 8000526:	ebb3 0208 	subs.w	r2, r3, r8
 800052a:	eb61 010e 	sbc.w	r1, r1, lr
 800052e:	fa01 f707 	lsl.w	r7, r1, r7
 8000532:	fa22 f306 	lsr.w	r3, r2, r6
 8000536:	40f1      	lsrs	r1, r6
 8000538:	431f      	orrs	r7, r3
 800053a:	e9c5 7100 	strd	r7, r1, [r5]
 800053e:	2600      	movs	r6, #0
 8000540:	4631      	mov	r1, r6
 8000542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	40d8      	lsrs	r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa21 f303 	lsr.w	r3, r1, r3
 8000554:	4091      	lsls	r1, r2
 8000556:	4301      	orrs	r1, r0
 8000558:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800055c:	fa1f fe8c 	uxth.w	lr, ip
 8000560:	fbb3 f0f7 	udiv	r0, r3, r7
 8000564:	fb07 3610 	mls	r6, r7, r0, r3
 8000568:	0c0b      	lsrs	r3, r1, #16
 800056a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800056e:	fb00 f60e 	mul.w	r6, r0, lr
 8000572:	429e      	cmp	r6, r3
 8000574:	fa04 f402 	lsl.w	r4, r4, r2
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x260>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000582:	d22f      	bcs.n	80005e4 <__udivmoddi4+0x2b8>
 8000584:	429e      	cmp	r6, r3
 8000586:	d92d      	bls.n	80005e4 <__udivmoddi4+0x2b8>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1b9b      	subs	r3, r3, r6
 800058e:	b289      	uxth	r1, r1
 8000590:	fbb3 f6f7 	udiv	r6, r3, r7
 8000594:	fb07 3316 	mls	r3, r7, r6, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb06 f30e 	mul.w	r3, r6, lr
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x28a>
 80005a4:	eb1c 0101 	adds.w	r1, ip, r1
 80005a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80005ac:	d216      	bcs.n	80005dc <__udivmoddi4+0x2b0>
 80005ae:	428b      	cmp	r3, r1
 80005b0:	d914      	bls.n	80005dc <__udivmoddi4+0x2b0>
 80005b2:	3e02      	subs	r6, #2
 80005b4:	4461      	add	r1, ip
 80005b6:	1ac9      	subs	r1, r1, r3
 80005b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005bc:	e738      	b.n	8000430 <__udivmoddi4+0x104>
 80005be:	462e      	mov	r6, r5
 80005c0:	4628      	mov	r0, r5
 80005c2:	e705      	b.n	80003d0 <__udivmoddi4+0xa4>
 80005c4:	4606      	mov	r6, r0
 80005c6:	e6e3      	b.n	8000390 <__udivmoddi4+0x64>
 80005c8:	4618      	mov	r0, r3
 80005ca:	e6f8      	b.n	80003be <__udivmoddi4+0x92>
 80005cc:	454b      	cmp	r3, r9
 80005ce:	d2a9      	bcs.n	8000524 <__udivmoddi4+0x1f8>
 80005d0:	ebb9 0802 	subs.w	r8, r9, r2
 80005d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005d8:	3801      	subs	r0, #1
 80005da:	e7a3      	b.n	8000524 <__udivmoddi4+0x1f8>
 80005dc:	4646      	mov	r6, r8
 80005de:	e7ea      	b.n	80005b6 <__udivmoddi4+0x28a>
 80005e0:	4620      	mov	r0, r4
 80005e2:	e794      	b.n	800050e <__udivmoddi4+0x1e2>
 80005e4:	4640      	mov	r0, r8
 80005e6:	e7d1      	b.n	800058c <__udivmoddi4+0x260>
 80005e8:	46d0      	mov	r8, sl
 80005ea:	e77b      	b.n	80004e4 <__udivmoddi4+0x1b8>
 80005ec:	3b02      	subs	r3, #2
 80005ee:	4461      	add	r1, ip
 80005f0:	e732      	b.n	8000458 <__udivmoddi4+0x12c>
 80005f2:	4630      	mov	r0, r6
 80005f4:	e709      	b.n	800040a <__udivmoddi4+0xde>
 80005f6:	4464      	add	r4, ip
 80005f8:	3802      	subs	r0, #2
 80005fa:	e742      	b.n	8000482 <__udivmoddi4+0x156>

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b08e      	sub	sp, #56	; 0x38
 8000604:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]
 8000614:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000616:	4b80      	ldr	r3, [pc, #512]	; (8000818 <MX_GPIO_Init+0x218>)
 8000618:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800061c:	4a7e      	ldr	r2, [pc, #504]	; (8000818 <MX_GPIO_Init+0x218>)
 800061e:	f043 0304 	orr.w	r3, r3, #4
 8000622:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000626:	4b7c      	ldr	r3, [pc, #496]	; (8000818 <MX_GPIO_Init+0x218>)
 8000628:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800062c:	f003 0304 	and.w	r3, r3, #4
 8000630:	623b      	str	r3, [r7, #32]
 8000632:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000634:	4b78      	ldr	r3, [pc, #480]	; (8000818 <MX_GPIO_Init+0x218>)
 8000636:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800063a:	4a77      	ldr	r2, [pc, #476]	; (8000818 <MX_GPIO_Init+0x218>)
 800063c:	f043 0320 	orr.w	r3, r3, #32
 8000640:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000644:	4b74      	ldr	r3, [pc, #464]	; (8000818 <MX_GPIO_Init+0x218>)
 8000646:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800064a:	f003 0320 	and.w	r3, r3, #32
 800064e:	61fb      	str	r3, [r7, #28]
 8000650:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000652:	4b71      	ldr	r3, [pc, #452]	; (8000818 <MX_GPIO_Init+0x218>)
 8000654:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000658:	4a6f      	ldr	r2, [pc, #444]	; (8000818 <MX_GPIO_Init+0x218>)
 800065a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800065e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000662:	4b6d      	ldr	r3, [pc, #436]	; (8000818 <MX_GPIO_Init+0x218>)
 8000664:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800066c:	61bb      	str	r3, [r7, #24]
 800066e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000670:	4b69      	ldr	r3, [pc, #420]	; (8000818 <MX_GPIO_Init+0x218>)
 8000672:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000676:	4a68      	ldr	r2, [pc, #416]	; (8000818 <MX_GPIO_Init+0x218>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000680:	4b65      	ldr	r3, [pc, #404]	; (8000818 <MX_GPIO_Init+0x218>)
 8000682:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	617b      	str	r3, [r7, #20]
 800068c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068e:	4b62      	ldr	r3, [pc, #392]	; (8000818 <MX_GPIO_Init+0x218>)
 8000690:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000694:	4a60      	ldr	r2, [pc, #384]	; (8000818 <MX_GPIO_Init+0x218>)
 8000696:	f043 0302 	orr.w	r3, r3, #2
 800069a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800069e:	4b5e      	ldr	r3, [pc, #376]	; (8000818 <MX_GPIO_Init+0x218>)
 80006a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006a4:	f003 0302 	and.w	r3, r3, #2
 80006a8:	613b      	str	r3, [r7, #16]
 80006aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ac:	4b5a      	ldr	r3, [pc, #360]	; (8000818 <MX_GPIO_Init+0x218>)
 80006ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006b2:	4a59      	ldr	r2, [pc, #356]	; (8000818 <MX_GPIO_Init+0x218>)
 80006b4:	f043 0308 	orr.w	r3, r3, #8
 80006b8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006bc:	4b56      	ldr	r3, [pc, #344]	; (8000818 <MX_GPIO_Init+0x218>)
 80006be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006c2:	f003 0308 	and.w	r3, r3, #8
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006ca:	4b53      	ldr	r3, [pc, #332]	; (8000818 <MX_GPIO_Init+0x218>)
 80006cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006d0:	4a51      	ldr	r2, [pc, #324]	; (8000818 <MX_GPIO_Init+0x218>)
 80006d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006d6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006da:	4b4f      	ldr	r3, [pc, #316]	; (8000818 <MX_GPIO_Init+0x218>)
 80006dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006e8:	4b4b      	ldr	r3, [pc, #300]	; (8000818 <MX_GPIO_Init+0x218>)
 80006ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006ee:	4a4a      	ldr	r2, [pc, #296]	; (8000818 <MX_GPIO_Init+0x218>)
 80006f0:	f043 0310 	orr.w	r3, r3, #16
 80006f4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006f8:	4b47      	ldr	r3, [pc, #284]	; (8000818 <MX_GPIO_Init+0x218>)
 80006fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006fe:	f003 0310 	and.w	r3, r3, #16
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800070c:	4843      	ldr	r0, [pc, #268]	; (800081c <MX_GPIO_Init+0x21c>)
 800070e:	f001 fc93 	bl	8002038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	f244 0101 	movw	r1, #16385	; 0x4001
 8000718:	4841      	ldr	r0, [pc, #260]	; (8000820 <MX_GPIO_Init+0x220>)
 800071a:	f001 fc8d 	bl	8002038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	2102      	movs	r1, #2
 8000722:	4840      	ldr	r0, [pc, #256]	; (8000824 <MX_GPIO_Init+0x224>)
 8000724:	f001 fc88 	bl	8002038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000728:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800072e:	2300      	movs	r3, #0
 8000730:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800073a:	4619      	mov	r1, r3
 800073c:	483a      	ldr	r0, [pc, #232]	; (8000828 <MX_GPIO_Init+0x228>)
 800073e:	f001 facb 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000742:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000746:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000748:	2301      	movs	r3, #1
 800074a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000750:	2300      	movs	r3, #0
 8000752:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000758:	4619      	mov	r1, r3
 800075a:	4830      	ldr	r0, [pc, #192]	; (800081c <MX_GPIO_Init+0x21c>)
 800075c:	f001 fabc 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000760:	f244 0301 	movw	r3, #16385	; 0x4001
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000766:	2301      	movs	r3, #1
 8000768:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076e:	2300      	movs	r3, #0
 8000770:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000776:	4619      	mov	r1, r3
 8000778:	4829      	ldr	r0, [pc, #164]	; (8000820 <MX_GPIO_Init+0x220>)
 800077a:	f001 faad 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800077e:	2380      	movs	r3, #128	; 0x80
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000782:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000786:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800078c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000790:	4619      	mov	r1, r3
 8000792:	4826      	ldr	r0, [pc, #152]	; (800082c <MX_GPIO_Init+0x22c>)
 8000794:	f001 faa0 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000798:	f44f 7300 	mov.w	r3, #512	; 0x200
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800079e:	2300      	movs	r3, #0
 80007a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80007a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007aa:	4619      	mov	r1, r3
 80007ac:	4820      	ldr	r0, [pc, #128]	; (8000830 <MX_GPIO_Init+0x230>)
 80007ae:	f001 fa93 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80007b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b8:	2302      	movs	r3, #2
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80007c4:	230a      	movs	r3, #10
 80007c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80007c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007cc:	4619      	mov	r1, r3
 80007ce:	4818      	ldr	r0, [pc, #96]	; (8000830 <MX_GPIO_Init+0x230>)
 80007d0:	f001 fa82 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80007d4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ea:	4619      	mov	r1, r3
 80007ec:	4810      	ldr	r0, [pc, #64]	; (8000830 <MX_GPIO_Init+0x230>)
 80007ee:	f001 fa73 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007f2:	2302      	movs	r3, #2
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000806:	4619      	mov	r1, r3
 8000808:	4806      	ldr	r0, [pc, #24]	; (8000824 <MX_GPIO_Init+0x224>)
 800080a:	f001 fa65 	bl	8001cd8 <HAL_GPIO_Init>

}
 800080e:	bf00      	nop
 8000810:	3738      	adds	r7, #56	; 0x38
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	58024400 	.word	0x58024400
 800081c:	58021400 	.word	0x58021400
 8000820:	58020400 	.word	0x58020400
 8000824:	58021000 	.word	0x58021000
 8000828:	58020800 	.word	0x58020800
 800082c:	58021800 	.word	0x58021800
 8000830:	58020000 	.word	0x58020000

08000834 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000834:	b598      	push	{r3, r4, r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000838:	f000 fb48 	bl	8000ecc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800083c:	f000 f82a 	bl	8000894 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000840:	f7ff fede 	bl	8000600 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000844:	f000 fa28 	bl	8000c98 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000848:	f000 fb0e 	bl	8000e68 <MX_USB_OTG_HS_USB_Init>
  MX_SPI1_Init();
 800084c:	f000 f8a0 	bl	8000990 <MX_SPI1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE BEGIN 3 */
	  if(uartFlag == 1){
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <main+0x50>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b01      	cmp	r3, #1
 8000856:	d1fb      	bne.n	8000850 <main+0x1c>
		  HAL_UART_Transmit(&huart3, (uint8_t*) msglu, strlen(msglu), 100) ;
 8000858:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <main+0x54>)
 800085a:	681c      	ldr	r4, [r3, #0]
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <main+0x54>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff fd43 	bl	80002ec <strlen>
 8000866:	4603      	mov	r3, r0
 8000868:	b29a      	uxth	r2, r3
 800086a:	2364      	movs	r3, #100	; 0x64
 800086c:	4621      	mov	r1, r4
 800086e:	4807      	ldr	r0, [pc, #28]	; (800088c <main+0x58>)
 8000870:	f004 fb9d 	bl	8004fae <HAL_UART_Transmit>
		  HAL_GPIO_TogglePin(LED1_PORT,  LED1_PIN) ;
 8000874:	2101      	movs	r1, #1
 8000876:	4806      	ldr	r0, [pc, #24]	; (8000890 <main+0x5c>)
 8000878:	f001 fbf7 	bl	800206a <HAL_GPIO_TogglePin>
		  uartFlag = 0 ;
 800087c:	4b01      	ldr	r3, [pc, #4]	; (8000884 <main+0x50>)
 800087e:	2200      	movs	r2, #0
 8000880:	701a      	strb	r2, [r3, #0]
	  if(uartFlag == 1){
 8000882:	e7e5      	b.n	8000850 <main+0x1c>
 8000884:	240000b8 	.word	0x240000b8
 8000888:	24000000 	.word	0x24000000
 800088c:	240000fc 	.word	0x240000fc
 8000890:	58020400 	.word	0x58020400

08000894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b09c      	sub	sp, #112	; 0x70
 8000898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089e:	224c      	movs	r2, #76	; 0x4c
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f007 f884 	bl	80079b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	2220      	movs	r2, #32
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f007 f87e 	bl	80079b0 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80008b4:	4b31      	ldr	r3, [pc, #196]	; (800097c <SystemClock_Config+0xe8>)
 80008b6:	f04f 32ff 	mov.w	r2, #4294967295
 80008ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008be:	2004      	movs	r0, #4
 80008c0:	f001 fbee 	bl	80020a0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008c4:	2300      	movs	r3, #0
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	4b2d      	ldr	r3, [pc, #180]	; (8000980 <SystemClock_Config+0xec>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	4a2c      	ldr	r2, [pc, #176]	; (8000980 <SystemClock_Config+0xec>)
 80008ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008d2:	6193      	str	r3, [r2, #24]
 80008d4:	4b2a      	ldr	r3, [pc, #168]	; (8000980 <SystemClock_Config+0xec>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008dc:	603b      	str	r3, [r7, #0]
 80008de:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008e0:	bf00      	nop
 80008e2:	4b27      	ldr	r3, [pc, #156]	; (8000980 <SystemClock_Config+0xec>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008ee:	d1f8      	bne.n	80008e2 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80008f0:	2321      	movs	r3, #33	; 0x21
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008f4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008fa:	2301      	movs	r3, #1
 80008fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fe:	2302      	movs	r3, #2
 8000900:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000902:	2302      	movs	r3, #2
 8000904:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000906:	2304      	movs	r3, #4
 8000908:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 800090a:	f44f 738c 	mov.w	r3, #280	; 0x118
 800090e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000910:	2302      	movs	r3, #2
 8000912:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000914:	2304      	movs	r3, #4
 8000916:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000918:	2302      	movs	r3, #2
 800091a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800091c:	2304      	movs	r3, #4
 800091e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000920:	2300      	movs	r3, #0
 8000922:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092c:	4618      	mov	r0, r3
 800092e:	f001 fc11 	bl	8002154 <HAL_RCC_OscConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000938:	f000 f824 	bl	8000984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093c:	233f      	movs	r3, #63	; 0x3f
 800093e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000940:	2303      	movs	r3, #3
 8000942:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000948:	2300      	movs	r3, #0
 800094a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800094c:	2340      	movs	r3, #64	; 0x40
 800094e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000950:	2340      	movs	r3, #64	; 0x40
 8000952:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000954:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000958:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800095a:	2340      	movs	r3, #64	; 0x40
 800095c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2107      	movs	r1, #7
 8000962:	4618      	mov	r0, r3
 8000964:	f002 f828 	bl	80029b8 <HAL_RCC_ClockConfig>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <SystemClock_Config+0xde>
  {
    Error_Handler();
 800096e:	f000 f809 	bl	8000984 <Error_Handler>
  }
}
 8000972:	bf00      	nop
 8000974:	3770      	adds	r7, #112	; 0x70
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	58024400 	.word	0x58024400
 8000980:	58024800 	.word	0x58024800

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	e7fe      	b.n	800098c <Error_Handler+0x8>
	...

08000990 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000994:	4b27      	ldr	r3, [pc, #156]	; (8000a34 <MX_SPI1_Init+0xa4>)
 8000996:	4a28      	ldr	r2, [pc, #160]	; (8000a38 <MX_SPI1_Init+0xa8>)
 8000998:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800099a:	4b26      	ldr	r3, [pc, #152]	; (8000a34 <MX_SPI1_Init+0xa4>)
 800099c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80009a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009a2:	4b24      	ldr	r3, [pc, #144]	; (8000a34 <MX_SPI1_Init+0xa4>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80009a8:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <MX_SPI1_Init+0xa4>)
 80009aa:	2203      	movs	r2, #3
 80009ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ae:	4b21      	ldr	r3, [pc, #132]	; (8000a34 <MX_SPI1_Init+0xa4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009b4:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <MX_SPI1_Init+0xa4>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009ba:	4b1e      	ldr	r3, [pc, #120]	; (8000a34 <MX_SPI1_Init+0xa4>)
 80009bc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80009c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009c2:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <MX_SPI1_Init+0xa4>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009c8:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <MX_SPI1_Init+0xa4>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ce:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <MX_SPI1_Init+0xa4>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009d4:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <MX_SPI1_Init+0xa4>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80009da:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <MX_SPI1_Init+0xa4>)
 80009dc:	2200      	movs	r2, #0
 80009de:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009e0:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_SPI1_Init+0xa4>)
 80009e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009e6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <MX_SPI1_Init+0xa4>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_SPI1_Init+0xa4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_SPI1_Init+0xa4>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_SPI1_Init+0xa4>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_SPI1_Init+0xa4>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <MX_SPI1_Init+0xa4>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_SPI1_Init+0xa4>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <MX_SPI1_Init+0xa4>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_SPI1_Init+0xa4>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_SPI1_Init+0xa4>)
 8000a20:	f004 f936 	bl	8004c90 <HAL_SPI_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000a2a:	f7ff ffab 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	24000030 	.word	0x24000030
 8000a38:	40013000 	.word	0x40013000

08000a3c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b0ba      	sub	sp, #232	; 0xe8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a54:	f107 0310 	add.w	r3, r7, #16
 8000a58:	22c0      	movs	r2, #192	; 0xc0
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f006 ffa7 	bl	80079b0 <memset>
  if(spiHandle->Instance==SPI1)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a26      	ldr	r2, [pc, #152]	; (8000b00 <HAL_SPI_MspInit+0xc4>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d144      	bne.n	8000af6 <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000a6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a70:	f04f 0300 	mov.w	r3, #0
 8000a74:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a7c:	f107 0310 	add.w	r3, r7, #16
 8000a80:	4618      	mov	r0, r3
 8000a82:	f002 fb25 	bl	80030d0 <HAL_RCCEx_PeriphCLKConfig>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000a8c:	f7ff ff7a 	bl	8000984 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a90:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <HAL_SPI_MspInit+0xc8>)
 8000a92:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000a96:	4a1b      	ldr	r2, [pc, #108]	; (8000b04 <HAL_SPI_MspInit+0xc8>)
 8000a98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a9c:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8000aa0:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <HAL_SPI_MspInit+0xc8>)
 8000aa2:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000aa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <HAL_SPI_MspInit+0xc8>)
 8000ab0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ab4:	4a13      	ldr	r2, [pc, #76]	; (8000b04 <HAL_SPI_MspInit+0xc8>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <HAL_SPI_MspInit+0xc8>)
 8000ac0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000acc:	23f0      	movs	r3, #240	; 0xf0
 8000ace:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ae4:	2305      	movs	r3, #5
 8000ae6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000aee:	4619      	mov	r1, r3
 8000af0:	4805      	ldr	r0, [pc, #20]	; (8000b08 <HAL_SPI_MspInit+0xcc>)
 8000af2:	f001 f8f1 	bl	8001cd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000af6:	bf00      	nop
 8000af8:	37e8      	adds	r7, #232	; 0xe8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40013000 	.word	0x40013000
 8000b04:	58024400 	.word	0x58024400
 8000b08:	58020000 	.word	0x58020000

08000b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b12:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <HAL_MspInit+0x30>)
 8000b14:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b18:	4a08      	ldr	r2, [pc, #32]	; (8000b3c <HAL_MspInit+0x30>)
 8000b1a:	f043 0302 	orr.w	r3, r3, #2
 8000b1e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_MspInit+0x30>)
 8000b24:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b28:	f003 0302 	and.w	r3, r3, #2
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	58024400 	.word	0x58024400

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <NMI_Handler+0x4>

08000b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <HardFault_Handler+0x4>

08000b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <MemManage_Handler+0x4>

08000b52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <BusFault_Handler+0x4>

08000b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <UsageFault_Handler+0x4>

08000b5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8c:	f000 fa10 	bl	8000fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b98:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <USART3_IRQHandler+0x10>)
 8000b9a:	f004 fae3 	bl	8005164 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	240000fc 	.word	0x240000fc

08000ba8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bac:	4b32      	ldr	r3, [pc, #200]	; (8000c78 <SystemInit+0xd0>)
 8000bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bb2:	4a31      	ldr	r2, [pc, #196]	; (8000c78 <SystemInit+0xd0>)
 8000bb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bbc:	4b2f      	ldr	r3, [pc, #188]	; (8000c7c <SystemInit+0xd4>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f003 030f 	and.w	r3, r3, #15
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d807      	bhi.n	8000bd8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bc8:	4b2c      	ldr	r3, [pc, #176]	; (8000c7c <SystemInit+0xd4>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f023 030f 	bic.w	r3, r3, #15
 8000bd0:	4a2a      	ldr	r2, [pc, #168]	; (8000c7c <SystemInit+0xd4>)
 8000bd2:	f043 0303 	orr.w	r3, r3, #3
 8000bd6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bd8:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <SystemInit+0xd8>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a28      	ldr	r2, [pc, #160]	; (8000c80 <SystemInit+0xd8>)
 8000bde:	f043 0301 	orr.w	r3, r3, #1
 8000be2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000be4:	4b26      	ldr	r3, [pc, #152]	; (8000c80 <SystemInit+0xd8>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000bea:	4b25      	ldr	r3, [pc, #148]	; (8000c80 <SystemInit+0xd8>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	4924      	ldr	r1, [pc, #144]	; (8000c80 <SystemInit+0xd8>)
 8000bf0:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <SystemInit+0xdc>)
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bf6:	4b21      	ldr	r3, [pc, #132]	; (8000c7c <SystemInit+0xd4>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f003 030c 	and.w	r3, r3, #12
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d007      	beq.n	8000c12 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c02:	4b1e      	ldr	r3, [pc, #120]	; (8000c7c <SystemInit+0xd4>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f023 030f 	bic.w	r3, r3, #15
 8000c0a:	4a1c      	ldr	r2, [pc, #112]	; (8000c7c <SystemInit+0xd4>)
 8000c0c:	f043 0303 	orr.w	r3, r3, #3
 8000c10:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000c12:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <SystemInit+0xd8>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000c18:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <SystemInit+0xd8>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000c1e:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <SystemInit+0xd8>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c24:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <SystemInit+0xd8>)
 8000c26:	4a18      	ldr	r2, [pc, #96]	; (8000c88 <SystemInit+0xe0>)
 8000c28:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <SystemInit+0xd8>)
 8000c2c:	4a17      	ldr	r2, [pc, #92]	; (8000c8c <SystemInit+0xe4>)
 8000c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c30:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <SystemInit+0xd8>)
 8000c32:	4a17      	ldr	r2, [pc, #92]	; (8000c90 <SystemInit+0xe8>)
 8000c34:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c36:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <SystemInit+0xd8>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c3c:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <SystemInit+0xd8>)
 8000c3e:	4a14      	ldr	r2, [pc, #80]	; (8000c90 <SystemInit+0xe8>)
 8000c40:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c42:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <SystemInit+0xd8>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c48:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <SystemInit+0xd8>)
 8000c4a:	4a11      	ldr	r2, [pc, #68]	; (8000c90 <SystemInit+0xe8>)
 8000c4c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <SystemInit+0xd8>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c54:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <SystemInit+0xd8>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a09      	ldr	r2, [pc, #36]	; (8000c80 <SystemInit+0xd8>)
 8000c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c5e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c60:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <SystemInit+0xd8>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <SystemInit+0xec>)
 8000c68:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c6c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00
 8000c7c:	52002000 	.word	0x52002000
 8000c80:	58024400 	.word	0x58024400
 8000c84:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c88:	02020200 	.word	0x02020200
 8000c8c:	01ff0000 	.word	0x01ff0000
 8000c90:	01010280 	.word	0x01010280
 8000c94:	52004000 	.word	0x52004000

08000c98 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c9c:	4b25      	ldr	r3, [pc, #148]	; (8000d34 <MX_USART3_UART_Init+0x9c>)
 8000c9e:	4a26      	ldr	r2, [pc, #152]	; (8000d38 <MX_USART3_UART_Init+0xa0>)
 8000ca0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ca2:	4b24      	ldr	r3, [pc, #144]	; (8000d34 <MX_USART3_UART_Init+0x9c>)
 8000ca4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ca8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000caa:	4b22      	ldr	r3, [pc, #136]	; (8000d34 <MX_USART3_UART_Init+0x9c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cb0:	4b20      	ldr	r3, [pc, #128]	; (8000d34 <MX_USART3_UART_Init+0x9c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cb6:	4b1f      	ldr	r3, [pc, #124]	; (8000d34 <MX_USART3_UART_Init+0x9c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cbc:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <MX_USART3_UART_Init+0x9c>)
 8000cbe:	220c      	movs	r2, #12
 8000cc0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc2:	4b1c      	ldr	r3, [pc, #112]	; (8000d34 <MX_USART3_UART_Init+0x9c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc8:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <MX_USART3_UART_Init+0x9c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cce:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <MX_USART3_UART_Init+0x9c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cd4:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <MX_USART3_UART_Init+0x9c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cda:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <MX_USART3_UART_Init+0x9c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ce0:	4814      	ldr	r0, [pc, #80]	; (8000d34 <MX_USART3_UART_Init+0x9c>)
 8000ce2:	f004 f914 	bl	8004f0e <HAL_UART_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000cec:	f7ff fe4a 	bl	8000984 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4810      	ldr	r0, [pc, #64]	; (8000d34 <MX_USART3_UART_Init+0x9c>)
 8000cf4:	f006 fd6d 	bl	80077d2 <HAL_UARTEx_SetTxFifoThreshold>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cfe:	f7ff fe41 	bl	8000984 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d02:	2100      	movs	r1, #0
 8000d04:	480b      	ldr	r0, [pc, #44]	; (8000d34 <MX_USART3_UART_Init+0x9c>)
 8000d06:	f006 fda2 	bl	800784e <HAL_UARTEx_SetRxFifoThreshold>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d10:	f7ff fe38 	bl	8000984 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d14:	4807      	ldr	r0, [pc, #28]	; (8000d34 <MX_USART3_UART_Init+0x9c>)
 8000d16:	f006 fd23 	bl	8007760 <HAL_UARTEx_DisableFifoMode>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d20:	f7ff fe30 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  HAL_UART_Receive_IT(&huart3, (uint8_t*) uartRxBuffer, 1);
 8000d24:	2201      	movs	r2, #1
 8000d26:	4905      	ldr	r1, [pc, #20]	; (8000d3c <MX_USART3_UART_Init+0xa4>)
 8000d28:	4802      	ldr	r0, [pc, #8]	; (8000d34 <MX_USART3_UART_Init+0x9c>)
 8000d2a:	f004 f9cf 	bl	80050cc <HAL_UART_Receive_IT>
  /* USER CODE END USART3_Init 2 */

}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	240000fc 	.word	0x240000fc
 8000d38:	40004800 	.word	0x40004800
 8000d3c:	240000dc 	.word	0x240000dc

08000d40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b0ba      	sub	sp, #232	; 0xe8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d58:	f107 0310 	add.w	r3, r7, #16
 8000d5c:	22c0      	movs	r2, #192	; 0xc0
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f006 fe25 	bl	80079b0 <memset>
  if(uartHandle->Instance==USART3)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a2b      	ldr	r2, [pc, #172]	; (8000e18 <HAL_UART_MspInit+0xd8>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d14e      	bne.n	8000e0e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d70:	f04f 0202 	mov.w	r2, #2
 8000d74:	f04f 0300 	mov.w	r3, #0
 8000d78:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d82:	f107 0310 	add.w	r3, r7, #16
 8000d86:	4618      	mov	r0, r3
 8000d88:	f002 f9a2 	bl	80030d0 <HAL_RCCEx_PeriphCLKConfig>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000d92:	f7ff fdf7 	bl	8000984 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d96:	4b21      	ldr	r3, [pc, #132]	; (8000e1c <HAL_UART_MspInit+0xdc>)
 8000d98:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000d9c:	4a1f      	ldr	r2, [pc, #124]	; (8000e1c <HAL_UART_MspInit+0xdc>)
 8000d9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000da2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000da6:	4b1d      	ldr	r3, [pc, #116]	; (8000e1c <HAL_UART_MspInit+0xdc>)
 8000da8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000dac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db4:	4b19      	ldr	r3, [pc, #100]	; (8000e1c <HAL_UART_MspInit+0xdc>)
 8000db6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dba:	4a18      	ldr	r2, [pc, #96]	; (8000e1c <HAL_UART_MspInit+0xdc>)
 8000dbc:	f043 0308 	orr.w	r3, r3, #8
 8000dc0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000dc4:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <HAL_UART_MspInit+0xdc>)
 8000dc6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dca:	f003 0308 	and.w	r3, r3, #8
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000dd2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dec:	2307      	movs	r3, #7
 8000dee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000df2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000df6:	4619      	mov	r1, r3
 8000df8:	4809      	ldr	r0, [pc, #36]	; (8000e20 <HAL_UART_MspInit+0xe0>)
 8000dfa:	f000 ff6d 	bl	8001cd8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2100      	movs	r1, #0
 8000e02:	2027      	movs	r0, #39	; 0x27
 8000e04:	f000 f9cf 	bl	80011a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e08:	2027      	movs	r0, #39	; 0x27
 8000e0a:	f000 f9e6 	bl	80011da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e0e:	bf00      	nop
 8000e10:	37e8      	adds	r7, #232	; 0xe8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40004800 	.word	0x40004800
 8000e1c:	58024400 	.word	0x58024400
 8000e20:	58020c00 	.word	0x58020c00

08000e24 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
	uartFlag = 1;
 8000e2c:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <HAL_UART_RxCpltCallback+0x34>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	701a      	strb	r2, [r3, #0]
	uartTxBuffer[0]=uartRxBuffer[0];
 8000e32:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <HAL_UART_RxCpltCallback+0x38>)
 8000e34:	781a      	ldrb	r2, [r3, #0]
 8000e36:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <HAL_UART_RxCpltCallback+0x3c>)
 8000e38:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*) uartTxBuffer, 1, 100);
 8000e3a:	2364      	movs	r3, #100	; 0x64
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	4908      	ldr	r1, [pc, #32]	; (8000e60 <HAL_UART_RxCpltCallback+0x3c>)
 8000e40:	4808      	ldr	r0, [pc, #32]	; (8000e64 <HAL_UART_RxCpltCallback+0x40>)
 8000e42:	f004 f8b4 	bl	8004fae <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart3, (uint8_t*) uartRxBuffer, 1);
 8000e46:	2201      	movs	r2, #1
 8000e48:	4904      	ldr	r1, [pc, #16]	; (8000e5c <HAL_UART_RxCpltCallback+0x38>)
 8000e4a:	4806      	ldr	r0, [pc, #24]	; (8000e64 <HAL_UART_RxCpltCallback+0x40>)
 8000e4c:	f004 f93e 	bl	80050cc <HAL_UART_Receive_IT>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	240000b8 	.word	0x240000b8
 8000e5c:	240000dc 	.word	0x240000dc
 8000e60:	240000bc 	.word	0x240000bc
 8000e64:	240000fc 	.word	0x240000fc

08000e68 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
	...

08000e78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eb0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e7c:	f7ff fe94 	bl	8000ba8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e80:	480c      	ldr	r0, [pc, #48]	; (8000eb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e82:	490d      	ldr	r1, [pc, #52]	; (8000eb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e84:	4a0d      	ldr	r2, [pc, #52]	; (8000ebc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e88:	e002      	b.n	8000e90 <LoopCopyDataInit>

08000e8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e8e:	3304      	adds	r3, #4

08000e90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000e90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e94:	d3f9      	bcc.n	8000e8a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e96:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e98:	4c0a      	ldr	r4, [pc, #40]	; (8000ec4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e9c:	e001      	b.n	8000ea2 <LoopFillZerobss>

08000e9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea0:	3204      	adds	r2, #4

08000ea2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea4:	d3fb      	bcc.n	8000e9e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ea6:	f006 fd5f 	bl	8007968 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eaa:	f7ff fcc3 	bl	8000834 <main>
  bx  lr
 8000eae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000eb0:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000eb4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000eb8:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8000ebc:	08007a34 	.word	0x08007a34
  ldr r2, =_sbss
 8000ec0:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8000ec4:	24000194 	.word	0x24000194

08000ec8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec8:	e7fe      	b.n	8000ec8 <ADC_IRQHandler>
	...

08000ecc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed2:	2003      	movs	r0, #3
 8000ed4:	f000 f95c 	bl	8001190 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000ed8:	f001 ff24 	bl	8002d24 <HAL_RCC_GetSysClockFreq>
 8000edc:	4602      	mov	r2, r0
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <HAL_Init+0x68>)
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	0a1b      	lsrs	r3, r3, #8
 8000ee4:	f003 030f 	and.w	r3, r3, #15
 8000ee8:	4913      	ldr	r1, [pc, #76]	; (8000f38 <HAL_Init+0x6c>)
 8000eea:	5ccb      	ldrb	r3, [r1, r3]
 8000eec:	f003 031f 	and.w	r3, r3, #31
 8000ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <HAL_Init+0x68>)
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	f003 030f 	and.w	r3, r3, #15
 8000efe:	4a0e      	ldr	r2, [pc, #56]	; (8000f38 <HAL_Init+0x6c>)
 8000f00:	5cd3      	ldrb	r3, [r2, r3]
 8000f02:	f003 031f 	and.w	r3, r3, #31
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	fa22 f303 	lsr.w	r3, r2, r3
 8000f0c:	4a0b      	ldr	r2, [pc, #44]	; (8000f3c <HAL_Init+0x70>)
 8000f0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f10:	4a0b      	ldr	r2, [pc, #44]	; (8000f40 <HAL_Init+0x74>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f16:	2000      	movs	r0, #0
 8000f18:	f000 f814 	bl	8000f44 <HAL_InitTick>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e002      	b.n	8000f2c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f26:	f7ff fdf1 	bl	8000b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f2a:	2300      	movs	r3, #0
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	58024400 	.word	0x58024400
 8000f38:	080079ec 	.word	0x080079ec
 8000f3c:	24000008 	.word	0x24000008
 8000f40:	24000004 	.word	0x24000004

08000f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f4c:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <HAL_InitTick+0x60>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d101      	bne.n	8000f58 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e021      	b.n	8000f9c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f58:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <HAL_InitTick+0x64>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <HAL_InitTick+0x60>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	4619      	mov	r1, r3
 8000f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 f941 	bl	80011f6 <HAL_SYSTICK_Config>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e00e      	b.n	8000f9c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b0f      	cmp	r3, #15
 8000f82:	d80a      	bhi.n	8000f9a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f84:	2200      	movs	r2, #0
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8c:	f000 f90b 	bl	80011a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f90:	4a06      	ldr	r2, [pc, #24]	; (8000fac <HAL_InitTick+0x68>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f96:	2300      	movs	r3, #0
 8000f98:	e000      	b.n	8000f9c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	24000010 	.word	0x24000010
 8000fa8:	24000004 	.word	0x24000004
 8000fac:	2400000c 	.word	0x2400000c

08000fb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <HAL_IncTick+0x20>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_IncTick+0x24>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <HAL_IncTick+0x24>)
 8000fc2:	6013      	str	r3, [r2, #0]
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	24000010 	.word	0x24000010
 8000fd4:	24000190 	.word	0x24000190

08000fd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return uwTick;
 8000fdc:	4b03      	ldr	r3, [pc, #12]	; (8000fec <HAL_GetTick+0x14>)
 8000fde:	681b      	ldr	r3, [r3, #0]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	24000190 	.word	0x24000190

08000ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001000:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <__NVIC_SetPriorityGrouping+0x40>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800100c:	4013      	ands	r3, r2
 800100e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 800101a:	4313      	orrs	r3, r2
 800101c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800101e:	4a04      	ldr	r2, [pc, #16]	; (8001030 <__NVIC_SetPriorityGrouping+0x40>)
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	60d3      	str	r3, [r2, #12]
}
 8001024:	bf00      	nop
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000ed00 	.word	0xe000ed00
 8001034:	05fa0000 	.word	0x05fa0000

08001038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800103c:	4b04      	ldr	r3, [pc, #16]	; (8001050 <__NVIC_GetPriorityGrouping+0x18>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	0a1b      	lsrs	r3, r3, #8
 8001042:	f003 0307 	and.w	r3, r3, #7
}
 8001046:	4618      	mov	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800105e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001062:	2b00      	cmp	r3, #0
 8001064:	db0b      	blt.n	800107e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001066:	88fb      	ldrh	r3, [r7, #6]
 8001068:	f003 021f 	and.w	r2, r3, #31
 800106c:	4907      	ldr	r1, [pc, #28]	; (800108c <__NVIC_EnableIRQ+0x38>)
 800106e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001072:	095b      	lsrs	r3, r3, #5
 8001074:	2001      	movs	r0, #1
 8001076:	fa00 f202 	lsl.w	r2, r0, r2
 800107a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	e000e100 	.word	0xe000e100

08001090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800109c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	db0a      	blt.n	80010ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	490c      	ldr	r1, [pc, #48]	; (80010dc <__NVIC_SetPriority+0x4c>)
 80010aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ae:	0112      	lsls	r2, r2, #4
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	440b      	add	r3, r1
 80010b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b8:	e00a      	b.n	80010d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4908      	ldr	r1, [pc, #32]	; (80010e0 <__NVIC_SetPriority+0x50>)
 80010c0:	88fb      	ldrh	r3, [r7, #6]
 80010c2:	f003 030f 	and.w	r3, r3, #15
 80010c6:	3b04      	subs	r3, #4
 80010c8:	0112      	lsls	r2, r2, #4
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	440b      	add	r3, r1
 80010ce:	761a      	strb	r2, [r3, #24]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000e100 	.word	0xe000e100
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b089      	sub	sp, #36	; 0x24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f1c3 0307 	rsb	r3, r3, #7
 80010fe:	2b04      	cmp	r3, #4
 8001100:	bf28      	it	cs
 8001102:	2304      	movcs	r3, #4
 8001104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3304      	adds	r3, #4
 800110a:	2b06      	cmp	r3, #6
 800110c:	d902      	bls.n	8001114 <NVIC_EncodePriority+0x30>
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3b03      	subs	r3, #3
 8001112:	e000      	b.n	8001116 <NVIC_EncodePriority+0x32>
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	f04f 32ff 	mov.w	r2, #4294967295
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43da      	mvns	r2, r3
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	401a      	ands	r2, r3
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800112c:	f04f 31ff 	mov.w	r1, #4294967295
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	fa01 f303 	lsl.w	r3, r1, r3
 8001136:	43d9      	mvns	r1, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	4313      	orrs	r3, r2
         );
}
 800113e:	4618      	mov	r0, r3
 8001140:	3724      	adds	r7, #36	; 0x24
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3b01      	subs	r3, #1
 8001158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800115c:	d301      	bcc.n	8001162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800115e:	2301      	movs	r3, #1
 8001160:	e00f      	b.n	8001182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001162:	4a0a      	ldr	r2, [pc, #40]	; (800118c <SysTick_Config+0x40>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3b01      	subs	r3, #1
 8001168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116a:	210f      	movs	r1, #15
 800116c:	f04f 30ff 	mov.w	r0, #4294967295
 8001170:	f7ff ff8e 	bl	8001090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <SysTick_Config+0x40>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117a:	4b04      	ldr	r3, [pc, #16]	; (800118c <SysTick_Config+0x40>)
 800117c:	2207      	movs	r2, #7
 800117e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	e000e010 	.word	0xe000e010

08001190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ff29 	bl	8000ff0 <__NVIC_SetPriorityGrouping>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b086      	sub	sp, #24
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011b4:	f7ff ff40 	bl	8001038 <__NVIC_GetPriorityGrouping>
 80011b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	68b9      	ldr	r1, [r7, #8]
 80011be:	6978      	ldr	r0, [r7, #20]
 80011c0:	f7ff ff90 	bl	80010e4 <NVIC_EncodePriority>
 80011c4:	4602      	mov	r2, r0
 80011c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011ca:	4611      	mov	r1, r2
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff5f 	bl	8001090 <__NVIC_SetPriority>
}
 80011d2:	bf00      	nop
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	4603      	mov	r3, r0
 80011e2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff33 	bl	8001054 <__NVIC_EnableIRQ>
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff ffa4 	bl	800114c <SysTick_Config>
 8001204:	4603      	mov	r3, r0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001218:	f7ff fede 	bl	8000fd8 <HAL_GetTick>
 800121c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d101      	bne.n	8001228 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e2dc      	b.n	80017e2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800122e:	b2db      	uxtb	r3, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d008      	beq.n	8001246 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2280      	movs	r2, #128	; 0x80
 8001238:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e2cd      	b.n	80017e2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a76      	ldr	r2, [pc, #472]	; (8001424 <HAL_DMA_Abort+0x214>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d04a      	beq.n	80012e6 <HAL_DMA_Abort+0xd6>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a74      	ldr	r2, [pc, #464]	; (8001428 <HAL_DMA_Abort+0x218>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d045      	beq.n	80012e6 <HAL_DMA_Abort+0xd6>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a73      	ldr	r2, [pc, #460]	; (800142c <HAL_DMA_Abort+0x21c>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d040      	beq.n	80012e6 <HAL_DMA_Abort+0xd6>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a71      	ldr	r2, [pc, #452]	; (8001430 <HAL_DMA_Abort+0x220>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d03b      	beq.n	80012e6 <HAL_DMA_Abort+0xd6>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a70      	ldr	r2, [pc, #448]	; (8001434 <HAL_DMA_Abort+0x224>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d036      	beq.n	80012e6 <HAL_DMA_Abort+0xd6>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a6e      	ldr	r2, [pc, #440]	; (8001438 <HAL_DMA_Abort+0x228>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d031      	beq.n	80012e6 <HAL_DMA_Abort+0xd6>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a6d      	ldr	r2, [pc, #436]	; (800143c <HAL_DMA_Abort+0x22c>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d02c      	beq.n	80012e6 <HAL_DMA_Abort+0xd6>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a6b      	ldr	r2, [pc, #428]	; (8001440 <HAL_DMA_Abort+0x230>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d027      	beq.n	80012e6 <HAL_DMA_Abort+0xd6>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a6a      	ldr	r2, [pc, #424]	; (8001444 <HAL_DMA_Abort+0x234>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d022      	beq.n	80012e6 <HAL_DMA_Abort+0xd6>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a68      	ldr	r2, [pc, #416]	; (8001448 <HAL_DMA_Abort+0x238>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d01d      	beq.n	80012e6 <HAL_DMA_Abort+0xd6>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a67      	ldr	r2, [pc, #412]	; (800144c <HAL_DMA_Abort+0x23c>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d018      	beq.n	80012e6 <HAL_DMA_Abort+0xd6>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a65      	ldr	r2, [pc, #404]	; (8001450 <HAL_DMA_Abort+0x240>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d013      	beq.n	80012e6 <HAL_DMA_Abort+0xd6>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a64      	ldr	r2, [pc, #400]	; (8001454 <HAL_DMA_Abort+0x244>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d00e      	beq.n	80012e6 <HAL_DMA_Abort+0xd6>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a62      	ldr	r2, [pc, #392]	; (8001458 <HAL_DMA_Abort+0x248>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d009      	beq.n	80012e6 <HAL_DMA_Abort+0xd6>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a61      	ldr	r2, [pc, #388]	; (800145c <HAL_DMA_Abort+0x24c>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d004      	beq.n	80012e6 <HAL_DMA_Abort+0xd6>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a5f      	ldr	r2, [pc, #380]	; (8001460 <HAL_DMA_Abort+0x250>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d101      	bne.n	80012ea <HAL_DMA_Abort+0xda>
 80012e6:	2301      	movs	r3, #1
 80012e8:	e000      	b.n	80012ec <HAL_DMA_Abort+0xdc>
 80012ea:	2300      	movs	r3, #0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d013      	beq.n	8001318 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 021e 	bic.w	r2, r2, #30
 80012fe:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	695a      	ldr	r2, [r3, #20]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800130e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	e00a      	b.n	800132e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 020e 	bic.w	r2, r2, #14
 8001326:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a3c      	ldr	r2, [pc, #240]	; (8001424 <HAL_DMA_Abort+0x214>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d072      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a3a      	ldr	r2, [pc, #232]	; (8001428 <HAL_DMA_Abort+0x218>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d06d      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a39      	ldr	r2, [pc, #228]	; (800142c <HAL_DMA_Abort+0x21c>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d068      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a37      	ldr	r2, [pc, #220]	; (8001430 <HAL_DMA_Abort+0x220>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d063      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a36      	ldr	r2, [pc, #216]	; (8001434 <HAL_DMA_Abort+0x224>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d05e      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a34      	ldr	r2, [pc, #208]	; (8001438 <HAL_DMA_Abort+0x228>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d059      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a33      	ldr	r2, [pc, #204]	; (800143c <HAL_DMA_Abort+0x22c>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d054      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a31      	ldr	r2, [pc, #196]	; (8001440 <HAL_DMA_Abort+0x230>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d04f      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a30      	ldr	r2, [pc, #192]	; (8001444 <HAL_DMA_Abort+0x234>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d04a      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a2e      	ldr	r2, [pc, #184]	; (8001448 <HAL_DMA_Abort+0x238>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d045      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a2d      	ldr	r2, [pc, #180]	; (800144c <HAL_DMA_Abort+0x23c>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d040      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a2b      	ldr	r2, [pc, #172]	; (8001450 <HAL_DMA_Abort+0x240>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d03b      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a2a      	ldr	r2, [pc, #168]	; (8001454 <HAL_DMA_Abort+0x244>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d036      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a28      	ldr	r2, [pc, #160]	; (8001458 <HAL_DMA_Abort+0x248>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d031      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a27      	ldr	r2, [pc, #156]	; (800145c <HAL_DMA_Abort+0x24c>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d02c      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a25      	ldr	r2, [pc, #148]	; (8001460 <HAL_DMA_Abort+0x250>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d027      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a24      	ldr	r2, [pc, #144]	; (8001464 <HAL_DMA_Abort+0x254>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d022      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a22      	ldr	r2, [pc, #136]	; (8001468 <HAL_DMA_Abort+0x258>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d01d      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a21      	ldr	r2, [pc, #132]	; (800146c <HAL_DMA_Abort+0x25c>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d018      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a1f      	ldr	r2, [pc, #124]	; (8001470 <HAL_DMA_Abort+0x260>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d013      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a1e      	ldr	r2, [pc, #120]	; (8001474 <HAL_DMA_Abort+0x264>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d00e      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a1c      	ldr	r2, [pc, #112]	; (8001478 <HAL_DMA_Abort+0x268>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d009      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a1b      	ldr	r2, [pc, #108]	; (800147c <HAL_DMA_Abort+0x26c>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d004      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a19      	ldr	r2, [pc, #100]	; (8001480 <HAL_DMA_Abort+0x270>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d132      	bne.n	8001484 <HAL_DMA_Abort+0x274>
 800141e:	2301      	movs	r3, #1
 8001420:	e031      	b.n	8001486 <HAL_DMA_Abort+0x276>
 8001422:	bf00      	nop
 8001424:	40020010 	.word	0x40020010
 8001428:	40020028 	.word	0x40020028
 800142c:	40020040 	.word	0x40020040
 8001430:	40020058 	.word	0x40020058
 8001434:	40020070 	.word	0x40020070
 8001438:	40020088 	.word	0x40020088
 800143c:	400200a0 	.word	0x400200a0
 8001440:	400200b8 	.word	0x400200b8
 8001444:	40020410 	.word	0x40020410
 8001448:	40020428 	.word	0x40020428
 800144c:	40020440 	.word	0x40020440
 8001450:	40020458 	.word	0x40020458
 8001454:	40020470 	.word	0x40020470
 8001458:	40020488 	.word	0x40020488
 800145c:	400204a0 	.word	0x400204a0
 8001460:	400204b8 	.word	0x400204b8
 8001464:	58025408 	.word	0x58025408
 8001468:	5802541c 	.word	0x5802541c
 800146c:	58025430 	.word	0x58025430
 8001470:	58025444 	.word	0x58025444
 8001474:	58025458 	.word	0x58025458
 8001478:	5802546c 	.word	0x5802546c
 800147c:	58025480 	.word	0x58025480
 8001480:	58025494 	.word	0x58025494
 8001484:	2300      	movs	r3, #0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d007      	beq.n	800149a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001494:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001498:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a6d      	ldr	r2, [pc, #436]	; (8001654 <HAL_DMA_Abort+0x444>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d04a      	beq.n	800153a <HAL_DMA_Abort+0x32a>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a6b      	ldr	r2, [pc, #428]	; (8001658 <HAL_DMA_Abort+0x448>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d045      	beq.n	800153a <HAL_DMA_Abort+0x32a>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a6a      	ldr	r2, [pc, #424]	; (800165c <HAL_DMA_Abort+0x44c>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d040      	beq.n	800153a <HAL_DMA_Abort+0x32a>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a68      	ldr	r2, [pc, #416]	; (8001660 <HAL_DMA_Abort+0x450>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d03b      	beq.n	800153a <HAL_DMA_Abort+0x32a>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a67      	ldr	r2, [pc, #412]	; (8001664 <HAL_DMA_Abort+0x454>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d036      	beq.n	800153a <HAL_DMA_Abort+0x32a>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a65      	ldr	r2, [pc, #404]	; (8001668 <HAL_DMA_Abort+0x458>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d031      	beq.n	800153a <HAL_DMA_Abort+0x32a>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a64      	ldr	r2, [pc, #400]	; (800166c <HAL_DMA_Abort+0x45c>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d02c      	beq.n	800153a <HAL_DMA_Abort+0x32a>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a62      	ldr	r2, [pc, #392]	; (8001670 <HAL_DMA_Abort+0x460>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d027      	beq.n	800153a <HAL_DMA_Abort+0x32a>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a61      	ldr	r2, [pc, #388]	; (8001674 <HAL_DMA_Abort+0x464>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d022      	beq.n	800153a <HAL_DMA_Abort+0x32a>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a5f      	ldr	r2, [pc, #380]	; (8001678 <HAL_DMA_Abort+0x468>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d01d      	beq.n	800153a <HAL_DMA_Abort+0x32a>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a5e      	ldr	r2, [pc, #376]	; (800167c <HAL_DMA_Abort+0x46c>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d018      	beq.n	800153a <HAL_DMA_Abort+0x32a>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a5c      	ldr	r2, [pc, #368]	; (8001680 <HAL_DMA_Abort+0x470>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d013      	beq.n	800153a <HAL_DMA_Abort+0x32a>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a5b      	ldr	r2, [pc, #364]	; (8001684 <HAL_DMA_Abort+0x474>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d00e      	beq.n	800153a <HAL_DMA_Abort+0x32a>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a59      	ldr	r2, [pc, #356]	; (8001688 <HAL_DMA_Abort+0x478>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d009      	beq.n	800153a <HAL_DMA_Abort+0x32a>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a58      	ldr	r2, [pc, #352]	; (800168c <HAL_DMA_Abort+0x47c>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d004      	beq.n	800153a <HAL_DMA_Abort+0x32a>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a56      	ldr	r2, [pc, #344]	; (8001690 <HAL_DMA_Abort+0x480>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d108      	bne.n	800154c <HAL_DMA_Abort+0x33c>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 0201 	bic.w	r2, r2, #1
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	e007      	b.n	800155c <HAL_DMA_Abort+0x34c>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 0201 	bic.w	r2, r2, #1
 800155a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800155c:	e013      	b.n	8001586 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800155e:	f7ff fd3b 	bl	8000fd8 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b05      	cmp	r3, #5
 800156a:	d90c      	bls.n	8001586 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2220      	movs	r2, #32
 8001570:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2203      	movs	r2, #3
 8001576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e12d      	b.n	80017e2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1e5      	bne.n	800155e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a2f      	ldr	r2, [pc, #188]	; (8001654 <HAL_DMA_Abort+0x444>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d04a      	beq.n	8001632 <HAL_DMA_Abort+0x422>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a2d      	ldr	r2, [pc, #180]	; (8001658 <HAL_DMA_Abort+0x448>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d045      	beq.n	8001632 <HAL_DMA_Abort+0x422>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a2c      	ldr	r2, [pc, #176]	; (800165c <HAL_DMA_Abort+0x44c>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d040      	beq.n	8001632 <HAL_DMA_Abort+0x422>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a2a      	ldr	r2, [pc, #168]	; (8001660 <HAL_DMA_Abort+0x450>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d03b      	beq.n	8001632 <HAL_DMA_Abort+0x422>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a29      	ldr	r2, [pc, #164]	; (8001664 <HAL_DMA_Abort+0x454>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d036      	beq.n	8001632 <HAL_DMA_Abort+0x422>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a27      	ldr	r2, [pc, #156]	; (8001668 <HAL_DMA_Abort+0x458>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d031      	beq.n	8001632 <HAL_DMA_Abort+0x422>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a26      	ldr	r2, [pc, #152]	; (800166c <HAL_DMA_Abort+0x45c>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d02c      	beq.n	8001632 <HAL_DMA_Abort+0x422>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a24      	ldr	r2, [pc, #144]	; (8001670 <HAL_DMA_Abort+0x460>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d027      	beq.n	8001632 <HAL_DMA_Abort+0x422>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a23      	ldr	r2, [pc, #140]	; (8001674 <HAL_DMA_Abort+0x464>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d022      	beq.n	8001632 <HAL_DMA_Abort+0x422>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a21      	ldr	r2, [pc, #132]	; (8001678 <HAL_DMA_Abort+0x468>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d01d      	beq.n	8001632 <HAL_DMA_Abort+0x422>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a20      	ldr	r2, [pc, #128]	; (800167c <HAL_DMA_Abort+0x46c>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d018      	beq.n	8001632 <HAL_DMA_Abort+0x422>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a1e      	ldr	r2, [pc, #120]	; (8001680 <HAL_DMA_Abort+0x470>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d013      	beq.n	8001632 <HAL_DMA_Abort+0x422>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a1d      	ldr	r2, [pc, #116]	; (8001684 <HAL_DMA_Abort+0x474>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d00e      	beq.n	8001632 <HAL_DMA_Abort+0x422>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a1b      	ldr	r2, [pc, #108]	; (8001688 <HAL_DMA_Abort+0x478>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d009      	beq.n	8001632 <HAL_DMA_Abort+0x422>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a1a      	ldr	r2, [pc, #104]	; (800168c <HAL_DMA_Abort+0x47c>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d004      	beq.n	8001632 <HAL_DMA_Abort+0x422>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a18      	ldr	r2, [pc, #96]	; (8001690 <HAL_DMA_Abort+0x480>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d101      	bne.n	8001636 <HAL_DMA_Abort+0x426>
 8001632:	2301      	movs	r3, #1
 8001634:	e000      	b.n	8001638 <HAL_DMA_Abort+0x428>
 8001636:	2300      	movs	r3, #0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d02b      	beq.n	8001694 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001640:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001646:	f003 031f 	and.w	r3, r3, #31
 800164a:	223f      	movs	r2, #63	; 0x3f
 800164c:	409a      	lsls	r2, r3
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	e02a      	b.n	80016aa <HAL_DMA_Abort+0x49a>
 8001654:	40020010 	.word	0x40020010
 8001658:	40020028 	.word	0x40020028
 800165c:	40020040 	.word	0x40020040
 8001660:	40020058 	.word	0x40020058
 8001664:	40020070 	.word	0x40020070
 8001668:	40020088 	.word	0x40020088
 800166c:	400200a0 	.word	0x400200a0
 8001670:	400200b8 	.word	0x400200b8
 8001674:	40020410 	.word	0x40020410
 8001678:	40020428 	.word	0x40020428
 800167c:	40020440 	.word	0x40020440
 8001680:	40020458 	.word	0x40020458
 8001684:	40020470 	.word	0x40020470
 8001688:	40020488 	.word	0x40020488
 800168c:	400204a0 	.word	0x400204a0
 8001690:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001698:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800169e:	f003 031f 	and.w	r3, r3, #31
 80016a2:	2201      	movs	r2, #1
 80016a4:	409a      	lsls	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a4f      	ldr	r2, [pc, #316]	; (80017ec <HAL_DMA_Abort+0x5dc>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d072      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a4d      	ldr	r2, [pc, #308]	; (80017f0 <HAL_DMA_Abort+0x5e0>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d06d      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a4c      	ldr	r2, [pc, #304]	; (80017f4 <HAL_DMA_Abort+0x5e4>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d068      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a4a      	ldr	r2, [pc, #296]	; (80017f8 <HAL_DMA_Abort+0x5e8>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d063      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a49      	ldr	r2, [pc, #292]	; (80017fc <HAL_DMA_Abort+0x5ec>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d05e      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a47      	ldr	r2, [pc, #284]	; (8001800 <HAL_DMA_Abort+0x5f0>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d059      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a46      	ldr	r2, [pc, #280]	; (8001804 <HAL_DMA_Abort+0x5f4>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d054      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a44      	ldr	r2, [pc, #272]	; (8001808 <HAL_DMA_Abort+0x5f8>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d04f      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a43      	ldr	r2, [pc, #268]	; (800180c <HAL_DMA_Abort+0x5fc>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d04a      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a41      	ldr	r2, [pc, #260]	; (8001810 <HAL_DMA_Abort+0x600>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d045      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a40      	ldr	r2, [pc, #256]	; (8001814 <HAL_DMA_Abort+0x604>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d040      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a3e      	ldr	r2, [pc, #248]	; (8001818 <HAL_DMA_Abort+0x608>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d03b      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a3d      	ldr	r2, [pc, #244]	; (800181c <HAL_DMA_Abort+0x60c>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d036      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a3b      	ldr	r2, [pc, #236]	; (8001820 <HAL_DMA_Abort+0x610>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d031      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a3a      	ldr	r2, [pc, #232]	; (8001824 <HAL_DMA_Abort+0x614>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d02c      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a38      	ldr	r2, [pc, #224]	; (8001828 <HAL_DMA_Abort+0x618>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d027      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a37      	ldr	r2, [pc, #220]	; (800182c <HAL_DMA_Abort+0x61c>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d022      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a35      	ldr	r2, [pc, #212]	; (8001830 <HAL_DMA_Abort+0x620>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d01d      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a34      	ldr	r2, [pc, #208]	; (8001834 <HAL_DMA_Abort+0x624>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d018      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a32      	ldr	r2, [pc, #200]	; (8001838 <HAL_DMA_Abort+0x628>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d013      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a31      	ldr	r2, [pc, #196]	; (800183c <HAL_DMA_Abort+0x62c>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d00e      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a2f      	ldr	r2, [pc, #188]	; (8001840 <HAL_DMA_Abort+0x630>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d009      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a2e      	ldr	r2, [pc, #184]	; (8001844 <HAL_DMA_Abort+0x634>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d004      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a2c      	ldr	r2, [pc, #176]	; (8001848 <HAL_DMA_Abort+0x638>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d101      	bne.n	800179e <HAL_DMA_Abort+0x58e>
 800179a:	2301      	movs	r3, #1
 800179c:	e000      	b.n	80017a0 <HAL_DMA_Abort+0x590>
 800179e:	2300      	movs	r3, #0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d015      	beq.n	80017d0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80017ac:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00c      	beq.n	80017d0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017c4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80017ce:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40020010 	.word	0x40020010
 80017f0:	40020028 	.word	0x40020028
 80017f4:	40020040 	.word	0x40020040
 80017f8:	40020058 	.word	0x40020058
 80017fc:	40020070 	.word	0x40020070
 8001800:	40020088 	.word	0x40020088
 8001804:	400200a0 	.word	0x400200a0
 8001808:	400200b8 	.word	0x400200b8
 800180c:	40020410 	.word	0x40020410
 8001810:	40020428 	.word	0x40020428
 8001814:	40020440 	.word	0x40020440
 8001818:	40020458 	.word	0x40020458
 800181c:	40020470 	.word	0x40020470
 8001820:	40020488 	.word	0x40020488
 8001824:	400204a0 	.word	0x400204a0
 8001828:	400204b8 	.word	0x400204b8
 800182c:	58025408 	.word	0x58025408
 8001830:	5802541c 	.word	0x5802541c
 8001834:	58025430 	.word	0x58025430
 8001838:	58025444 	.word	0x58025444
 800183c:	58025458 	.word	0x58025458
 8001840:	5802546c 	.word	0x5802546c
 8001844:	58025480 	.word	0x58025480
 8001848:	58025494 	.word	0x58025494

0800184c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e237      	b.n	8001cce <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d004      	beq.n	8001874 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2280      	movs	r2, #128	; 0x80
 800186e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e22c      	b.n	8001cce <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a5c      	ldr	r2, [pc, #368]	; (80019ec <HAL_DMA_Abort_IT+0x1a0>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d04a      	beq.n	8001914 <HAL_DMA_Abort_IT+0xc8>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a5b      	ldr	r2, [pc, #364]	; (80019f0 <HAL_DMA_Abort_IT+0x1a4>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d045      	beq.n	8001914 <HAL_DMA_Abort_IT+0xc8>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a59      	ldr	r2, [pc, #356]	; (80019f4 <HAL_DMA_Abort_IT+0x1a8>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d040      	beq.n	8001914 <HAL_DMA_Abort_IT+0xc8>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a58      	ldr	r2, [pc, #352]	; (80019f8 <HAL_DMA_Abort_IT+0x1ac>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d03b      	beq.n	8001914 <HAL_DMA_Abort_IT+0xc8>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a56      	ldr	r2, [pc, #344]	; (80019fc <HAL_DMA_Abort_IT+0x1b0>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d036      	beq.n	8001914 <HAL_DMA_Abort_IT+0xc8>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a55      	ldr	r2, [pc, #340]	; (8001a00 <HAL_DMA_Abort_IT+0x1b4>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d031      	beq.n	8001914 <HAL_DMA_Abort_IT+0xc8>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a53      	ldr	r2, [pc, #332]	; (8001a04 <HAL_DMA_Abort_IT+0x1b8>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d02c      	beq.n	8001914 <HAL_DMA_Abort_IT+0xc8>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a52      	ldr	r2, [pc, #328]	; (8001a08 <HAL_DMA_Abort_IT+0x1bc>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d027      	beq.n	8001914 <HAL_DMA_Abort_IT+0xc8>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a50      	ldr	r2, [pc, #320]	; (8001a0c <HAL_DMA_Abort_IT+0x1c0>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d022      	beq.n	8001914 <HAL_DMA_Abort_IT+0xc8>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a4f      	ldr	r2, [pc, #316]	; (8001a10 <HAL_DMA_Abort_IT+0x1c4>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d01d      	beq.n	8001914 <HAL_DMA_Abort_IT+0xc8>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a4d      	ldr	r2, [pc, #308]	; (8001a14 <HAL_DMA_Abort_IT+0x1c8>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d018      	beq.n	8001914 <HAL_DMA_Abort_IT+0xc8>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a4c      	ldr	r2, [pc, #304]	; (8001a18 <HAL_DMA_Abort_IT+0x1cc>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d013      	beq.n	8001914 <HAL_DMA_Abort_IT+0xc8>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a4a      	ldr	r2, [pc, #296]	; (8001a1c <HAL_DMA_Abort_IT+0x1d0>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d00e      	beq.n	8001914 <HAL_DMA_Abort_IT+0xc8>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a49      	ldr	r2, [pc, #292]	; (8001a20 <HAL_DMA_Abort_IT+0x1d4>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d009      	beq.n	8001914 <HAL_DMA_Abort_IT+0xc8>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a47      	ldr	r2, [pc, #284]	; (8001a24 <HAL_DMA_Abort_IT+0x1d8>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d004      	beq.n	8001914 <HAL_DMA_Abort_IT+0xc8>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a46      	ldr	r2, [pc, #280]	; (8001a28 <HAL_DMA_Abort_IT+0x1dc>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d101      	bne.n	8001918 <HAL_DMA_Abort_IT+0xcc>
 8001914:	2301      	movs	r3, #1
 8001916:	e000      	b.n	800191a <HAL_DMA_Abort_IT+0xce>
 8001918:	2300      	movs	r3, #0
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 8086 	beq.w	8001a2c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2204      	movs	r2, #4
 8001924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a2f      	ldr	r2, [pc, #188]	; (80019ec <HAL_DMA_Abort_IT+0x1a0>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d04a      	beq.n	80019c8 <HAL_DMA_Abort_IT+0x17c>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a2e      	ldr	r2, [pc, #184]	; (80019f0 <HAL_DMA_Abort_IT+0x1a4>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d045      	beq.n	80019c8 <HAL_DMA_Abort_IT+0x17c>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a2c      	ldr	r2, [pc, #176]	; (80019f4 <HAL_DMA_Abort_IT+0x1a8>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d040      	beq.n	80019c8 <HAL_DMA_Abort_IT+0x17c>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a2b      	ldr	r2, [pc, #172]	; (80019f8 <HAL_DMA_Abort_IT+0x1ac>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d03b      	beq.n	80019c8 <HAL_DMA_Abort_IT+0x17c>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a29      	ldr	r2, [pc, #164]	; (80019fc <HAL_DMA_Abort_IT+0x1b0>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d036      	beq.n	80019c8 <HAL_DMA_Abort_IT+0x17c>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a28      	ldr	r2, [pc, #160]	; (8001a00 <HAL_DMA_Abort_IT+0x1b4>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d031      	beq.n	80019c8 <HAL_DMA_Abort_IT+0x17c>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a26      	ldr	r2, [pc, #152]	; (8001a04 <HAL_DMA_Abort_IT+0x1b8>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d02c      	beq.n	80019c8 <HAL_DMA_Abort_IT+0x17c>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a25      	ldr	r2, [pc, #148]	; (8001a08 <HAL_DMA_Abort_IT+0x1bc>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d027      	beq.n	80019c8 <HAL_DMA_Abort_IT+0x17c>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a23      	ldr	r2, [pc, #140]	; (8001a0c <HAL_DMA_Abort_IT+0x1c0>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d022      	beq.n	80019c8 <HAL_DMA_Abort_IT+0x17c>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a22      	ldr	r2, [pc, #136]	; (8001a10 <HAL_DMA_Abort_IT+0x1c4>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d01d      	beq.n	80019c8 <HAL_DMA_Abort_IT+0x17c>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a20      	ldr	r2, [pc, #128]	; (8001a14 <HAL_DMA_Abort_IT+0x1c8>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d018      	beq.n	80019c8 <HAL_DMA_Abort_IT+0x17c>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a1f      	ldr	r2, [pc, #124]	; (8001a18 <HAL_DMA_Abort_IT+0x1cc>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d013      	beq.n	80019c8 <HAL_DMA_Abort_IT+0x17c>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a1d      	ldr	r2, [pc, #116]	; (8001a1c <HAL_DMA_Abort_IT+0x1d0>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d00e      	beq.n	80019c8 <HAL_DMA_Abort_IT+0x17c>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a1c      	ldr	r2, [pc, #112]	; (8001a20 <HAL_DMA_Abort_IT+0x1d4>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d009      	beq.n	80019c8 <HAL_DMA_Abort_IT+0x17c>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a1a      	ldr	r2, [pc, #104]	; (8001a24 <HAL_DMA_Abort_IT+0x1d8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d004      	beq.n	80019c8 <HAL_DMA_Abort_IT+0x17c>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a19      	ldr	r2, [pc, #100]	; (8001a28 <HAL_DMA_Abort_IT+0x1dc>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d108      	bne.n	80019da <HAL_DMA_Abort_IT+0x18e>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0201 	bic.w	r2, r2, #1
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	e178      	b.n	8001ccc <HAL_DMA_Abort_IT+0x480>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 0201 	bic.w	r2, r2, #1
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	e16f      	b.n	8001ccc <HAL_DMA_Abort_IT+0x480>
 80019ec:	40020010 	.word	0x40020010
 80019f0:	40020028 	.word	0x40020028
 80019f4:	40020040 	.word	0x40020040
 80019f8:	40020058 	.word	0x40020058
 80019fc:	40020070 	.word	0x40020070
 8001a00:	40020088 	.word	0x40020088
 8001a04:	400200a0 	.word	0x400200a0
 8001a08:	400200b8 	.word	0x400200b8
 8001a0c:	40020410 	.word	0x40020410
 8001a10:	40020428 	.word	0x40020428
 8001a14:	40020440 	.word	0x40020440
 8001a18:	40020458 	.word	0x40020458
 8001a1c:	40020470 	.word	0x40020470
 8001a20:	40020488 	.word	0x40020488
 8001a24:	400204a0 	.word	0x400204a0
 8001a28:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 020e 	bic.w	r2, r2, #14
 8001a3a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a6c      	ldr	r2, [pc, #432]	; (8001bf4 <HAL_DMA_Abort_IT+0x3a8>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d04a      	beq.n	8001adc <HAL_DMA_Abort_IT+0x290>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a6b      	ldr	r2, [pc, #428]	; (8001bf8 <HAL_DMA_Abort_IT+0x3ac>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d045      	beq.n	8001adc <HAL_DMA_Abort_IT+0x290>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a69      	ldr	r2, [pc, #420]	; (8001bfc <HAL_DMA_Abort_IT+0x3b0>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d040      	beq.n	8001adc <HAL_DMA_Abort_IT+0x290>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a68      	ldr	r2, [pc, #416]	; (8001c00 <HAL_DMA_Abort_IT+0x3b4>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d03b      	beq.n	8001adc <HAL_DMA_Abort_IT+0x290>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a66      	ldr	r2, [pc, #408]	; (8001c04 <HAL_DMA_Abort_IT+0x3b8>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d036      	beq.n	8001adc <HAL_DMA_Abort_IT+0x290>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a65      	ldr	r2, [pc, #404]	; (8001c08 <HAL_DMA_Abort_IT+0x3bc>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d031      	beq.n	8001adc <HAL_DMA_Abort_IT+0x290>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a63      	ldr	r2, [pc, #396]	; (8001c0c <HAL_DMA_Abort_IT+0x3c0>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d02c      	beq.n	8001adc <HAL_DMA_Abort_IT+0x290>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a62      	ldr	r2, [pc, #392]	; (8001c10 <HAL_DMA_Abort_IT+0x3c4>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d027      	beq.n	8001adc <HAL_DMA_Abort_IT+0x290>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a60      	ldr	r2, [pc, #384]	; (8001c14 <HAL_DMA_Abort_IT+0x3c8>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d022      	beq.n	8001adc <HAL_DMA_Abort_IT+0x290>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a5f      	ldr	r2, [pc, #380]	; (8001c18 <HAL_DMA_Abort_IT+0x3cc>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d01d      	beq.n	8001adc <HAL_DMA_Abort_IT+0x290>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a5d      	ldr	r2, [pc, #372]	; (8001c1c <HAL_DMA_Abort_IT+0x3d0>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d018      	beq.n	8001adc <HAL_DMA_Abort_IT+0x290>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a5c      	ldr	r2, [pc, #368]	; (8001c20 <HAL_DMA_Abort_IT+0x3d4>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d013      	beq.n	8001adc <HAL_DMA_Abort_IT+0x290>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a5a      	ldr	r2, [pc, #360]	; (8001c24 <HAL_DMA_Abort_IT+0x3d8>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d00e      	beq.n	8001adc <HAL_DMA_Abort_IT+0x290>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a59      	ldr	r2, [pc, #356]	; (8001c28 <HAL_DMA_Abort_IT+0x3dc>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d009      	beq.n	8001adc <HAL_DMA_Abort_IT+0x290>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a57      	ldr	r2, [pc, #348]	; (8001c2c <HAL_DMA_Abort_IT+0x3e0>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d004      	beq.n	8001adc <HAL_DMA_Abort_IT+0x290>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a56      	ldr	r2, [pc, #344]	; (8001c30 <HAL_DMA_Abort_IT+0x3e4>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d108      	bne.n	8001aee <HAL_DMA_Abort_IT+0x2a2>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 0201 	bic.w	r2, r2, #1
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	e007      	b.n	8001afe <HAL_DMA_Abort_IT+0x2b2>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 0201 	bic.w	r2, r2, #1
 8001afc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a3c      	ldr	r2, [pc, #240]	; (8001bf4 <HAL_DMA_Abort_IT+0x3a8>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d072      	beq.n	8001bee <HAL_DMA_Abort_IT+0x3a2>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a3a      	ldr	r2, [pc, #232]	; (8001bf8 <HAL_DMA_Abort_IT+0x3ac>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d06d      	beq.n	8001bee <HAL_DMA_Abort_IT+0x3a2>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a39      	ldr	r2, [pc, #228]	; (8001bfc <HAL_DMA_Abort_IT+0x3b0>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d068      	beq.n	8001bee <HAL_DMA_Abort_IT+0x3a2>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a37      	ldr	r2, [pc, #220]	; (8001c00 <HAL_DMA_Abort_IT+0x3b4>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d063      	beq.n	8001bee <HAL_DMA_Abort_IT+0x3a2>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a36      	ldr	r2, [pc, #216]	; (8001c04 <HAL_DMA_Abort_IT+0x3b8>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d05e      	beq.n	8001bee <HAL_DMA_Abort_IT+0x3a2>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a34      	ldr	r2, [pc, #208]	; (8001c08 <HAL_DMA_Abort_IT+0x3bc>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d059      	beq.n	8001bee <HAL_DMA_Abort_IT+0x3a2>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a33      	ldr	r2, [pc, #204]	; (8001c0c <HAL_DMA_Abort_IT+0x3c0>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d054      	beq.n	8001bee <HAL_DMA_Abort_IT+0x3a2>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a31      	ldr	r2, [pc, #196]	; (8001c10 <HAL_DMA_Abort_IT+0x3c4>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d04f      	beq.n	8001bee <HAL_DMA_Abort_IT+0x3a2>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a30      	ldr	r2, [pc, #192]	; (8001c14 <HAL_DMA_Abort_IT+0x3c8>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d04a      	beq.n	8001bee <HAL_DMA_Abort_IT+0x3a2>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a2e      	ldr	r2, [pc, #184]	; (8001c18 <HAL_DMA_Abort_IT+0x3cc>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d045      	beq.n	8001bee <HAL_DMA_Abort_IT+0x3a2>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a2d      	ldr	r2, [pc, #180]	; (8001c1c <HAL_DMA_Abort_IT+0x3d0>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d040      	beq.n	8001bee <HAL_DMA_Abort_IT+0x3a2>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a2b      	ldr	r2, [pc, #172]	; (8001c20 <HAL_DMA_Abort_IT+0x3d4>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d03b      	beq.n	8001bee <HAL_DMA_Abort_IT+0x3a2>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a2a      	ldr	r2, [pc, #168]	; (8001c24 <HAL_DMA_Abort_IT+0x3d8>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d036      	beq.n	8001bee <HAL_DMA_Abort_IT+0x3a2>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a28      	ldr	r2, [pc, #160]	; (8001c28 <HAL_DMA_Abort_IT+0x3dc>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d031      	beq.n	8001bee <HAL_DMA_Abort_IT+0x3a2>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a27      	ldr	r2, [pc, #156]	; (8001c2c <HAL_DMA_Abort_IT+0x3e0>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d02c      	beq.n	8001bee <HAL_DMA_Abort_IT+0x3a2>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a25      	ldr	r2, [pc, #148]	; (8001c30 <HAL_DMA_Abort_IT+0x3e4>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d027      	beq.n	8001bee <HAL_DMA_Abort_IT+0x3a2>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a24      	ldr	r2, [pc, #144]	; (8001c34 <HAL_DMA_Abort_IT+0x3e8>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d022      	beq.n	8001bee <HAL_DMA_Abort_IT+0x3a2>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a22      	ldr	r2, [pc, #136]	; (8001c38 <HAL_DMA_Abort_IT+0x3ec>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d01d      	beq.n	8001bee <HAL_DMA_Abort_IT+0x3a2>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a21      	ldr	r2, [pc, #132]	; (8001c3c <HAL_DMA_Abort_IT+0x3f0>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d018      	beq.n	8001bee <HAL_DMA_Abort_IT+0x3a2>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a1f      	ldr	r2, [pc, #124]	; (8001c40 <HAL_DMA_Abort_IT+0x3f4>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d013      	beq.n	8001bee <HAL_DMA_Abort_IT+0x3a2>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a1e      	ldr	r2, [pc, #120]	; (8001c44 <HAL_DMA_Abort_IT+0x3f8>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d00e      	beq.n	8001bee <HAL_DMA_Abort_IT+0x3a2>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a1c      	ldr	r2, [pc, #112]	; (8001c48 <HAL_DMA_Abort_IT+0x3fc>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d009      	beq.n	8001bee <HAL_DMA_Abort_IT+0x3a2>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a1b      	ldr	r2, [pc, #108]	; (8001c4c <HAL_DMA_Abort_IT+0x400>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d004      	beq.n	8001bee <HAL_DMA_Abort_IT+0x3a2>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a19      	ldr	r2, [pc, #100]	; (8001c50 <HAL_DMA_Abort_IT+0x404>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d132      	bne.n	8001c54 <HAL_DMA_Abort_IT+0x408>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e031      	b.n	8001c56 <HAL_DMA_Abort_IT+0x40a>
 8001bf2:	bf00      	nop
 8001bf4:	40020010 	.word	0x40020010
 8001bf8:	40020028 	.word	0x40020028
 8001bfc:	40020040 	.word	0x40020040
 8001c00:	40020058 	.word	0x40020058
 8001c04:	40020070 	.word	0x40020070
 8001c08:	40020088 	.word	0x40020088
 8001c0c:	400200a0 	.word	0x400200a0
 8001c10:	400200b8 	.word	0x400200b8
 8001c14:	40020410 	.word	0x40020410
 8001c18:	40020428 	.word	0x40020428
 8001c1c:	40020440 	.word	0x40020440
 8001c20:	40020458 	.word	0x40020458
 8001c24:	40020470 	.word	0x40020470
 8001c28:	40020488 	.word	0x40020488
 8001c2c:	400204a0 	.word	0x400204a0
 8001c30:	400204b8 	.word	0x400204b8
 8001c34:	58025408 	.word	0x58025408
 8001c38:	5802541c 	.word	0x5802541c
 8001c3c:	58025430 	.word	0x58025430
 8001c40:	58025444 	.word	0x58025444
 8001c44:	58025458 	.word	0x58025458
 8001c48:	5802546c 	.word	0x5802546c
 8001c4c:	58025480 	.word	0x58025480
 8001c50:	58025494 	.word	0x58025494
 8001c54:	2300      	movs	r3, #0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d028      	beq.n	8001cac <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c68:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c74:	f003 031f 	and.w	r3, r3, #31
 8001c78:	2201      	movs	r2, #1
 8001c7a:	409a      	lsls	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001c88:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00c      	beq.n	8001cac <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ca0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001caa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop

08001cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b089      	sub	sp, #36	; 0x24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001ce6:	4b89      	ldr	r3, [pc, #548]	; (8001f0c <HAL_GPIO_Init+0x234>)
 8001ce8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001cea:	e194      	b.n	8002016 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 8186 	beq.w	8002010 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 0303 	and.w	r3, r3, #3
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d005      	beq.n	8001d1c <HAL_GPIO_Init+0x44>
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 0303 	and.w	r3, r3, #3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d130      	bne.n	8001d7e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	2203      	movs	r2, #3
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	68da      	ldr	r2, [r3, #12]
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d52:	2201      	movs	r2, #1
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	091b      	lsrs	r3, r3, #4
 8001d68:	f003 0201 	and.w	r2, r3, #1
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	d017      	beq.n	8001dba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	2203      	movs	r2, #3
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d123      	bne.n	8001e0e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	08da      	lsrs	r2, r3, #3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3208      	adds	r2, #8
 8001dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	220f      	movs	r2, #15
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4013      	ands	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	691a      	ldr	r2, [r3, #16]
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	08da      	lsrs	r2, r3, #3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3208      	adds	r2, #8
 8001e08:	69b9      	ldr	r1, [r7, #24]
 8001e0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	2203      	movs	r2, #3
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4013      	ands	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 0203 	and.w	r2, r3, #3
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 80e0 	beq.w	8002010 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e50:	4b2f      	ldr	r3, [pc, #188]	; (8001f10 <HAL_GPIO_Init+0x238>)
 8001e52:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001e56:	4a2e      	ldr	r2, [pc, #184]	; (8001f10 <HAL_GPIO_Init+0x238>)
 8001e58:	f043 0302 	orr.w	r3, r3, #2
 8001e5c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001e60:	4b2b      	ldr	r3, [pc, #172]	; (8001f10 <HAL_GPIO_Init+0x238>)
 8001e62:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e6e:	4a29      	ldr	r2, [pc, #164]	; (8001f14 <HAL_GPIO_Init+0x23c>)
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	089b      	lsrs	r3, r3, #2
 8001e74:	3302      	adds	r3, #2
 8001e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	220f      	movs	r2, #15
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a20      	ldr	r2, [pc, #128]	; (8001f18 <HAL_GPIO_Init+0x240>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d052      	beq.n	8001f40 <HAL_GPIO_Init+0x268>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a1f      	ldr	r2, [pc, #124]	; (8001f1c <HAL_GPIO_Init+0x244>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d031      	beq.n	8001f06 <HAL_GPIO_Init+0x22e>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a1e      	ldr	r2, [pc, #120]	; (8001f20 <HAL_GPIO_Init+0x248>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d02b      	beq.n	8001f02 <HAL_GPIO_Init+0x22a>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a1d      	ldr	r2, [pc, #116]	; (8001f24 <HAL_GPIO_Init+0x24c>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d025      	beq.n	8001efe <HAL_GPIO_Init+0x226>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a1c      	ldr	r2, [pc, #112]	; (8001f28 <HAL_GPIO_Init+0x250>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d01f      	beq.n	8001efa <HAL_GPIO_Init+0x222>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a1b      	ldr	r2, [pc, #108]	; (8001f2c <HAL_GPIO_Init+0x254>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d019      	beq.n	8001ef6 <HAL_GPIO_Init+0x21e>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a1a      	ldr	r2, [pc, #104]	; (8001f30 <HAL_GPIO_Init+0x258>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d013      	beq.n	8001ef2 <HAL_GPIO_Init+0x21a>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a19      	ldr	r2, [pc, #100]	; (8001f34 <HAL_GPIO_Init+0x25c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d00d      	beq.n	8001eee <HAL_GPIO_Init+0x216>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a18      	ldr	r2, [pc, #96]	; (8001f38 <HAL_GPIO_Init+0x260>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d007      	beq.n	8001eea <HAL_GPIO_Init+0x212>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a17      	ldr	r2, [pc, #92]	; (8001f3c <HAL_GPIO_Init+0x264>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d101      	bne.n	8001ee6 <HAL_GPIO_Init+0x20e>
 8001ee2:	2309      	movs	r3, #9
 8001ee4:	e02d      	b.n	8001f42 <HAL_GPIO_Init+0x26a>
 8001ee6:	230a      	movs	r3, #10
 8001ee8:	e02b      	b.n	8001f42 <HAL_GPIO_Init+0x26a>
 8001eea:	2308      	movs	r3, #8
 8001eec:	e029      	b.n	8001f42 <HAL_GPIO_Init+0x26a>
 8001eee:	2307      	movs	r3, #7
 8001ef0:	e027      	b.n	8001f42 <HAL_GPIO_Init+0x26a>
 8001ef2:	2306      	movs	r3, #6
 8001ef4:	e025      	b.n	8001f42 <HAL_GPIO_Init+0x26a>
 8001ef6:	2305      	movs	r3, #5
 8001ef8:	e023      	b.n	8001f42 <HAL_GPIO_Init+0x26a>
 8001efa:	2304      	movs	r3, #4
 8001efc:	e021      	b.n	8001f42 <HAL_GPIO_Init+0x26a>
 8001efe:	2303      	movs	r3, #3
 8001f00:	e01f      	b.n	8001f42 <HAL_GPIO_Init+0x26a>
 8001f02:	2302      	movs	r3, #2
 8001f04:	e01d      	b.n	8001f42 <HAL_GPIO_Init+0x26a>
 8001f06:	2301      	movs	r3, #1
 8001f08:	e01b      	b.n	8001f42 <HAL_GPIO_Init+0x26a>
 8001f0a:	bf00      	nop
 8001f0c:	58000080 	.word	0x58000080
 8001f10:	58024400 	.word	0x58024400
 8001f14:	58000400 	.word	0x58000400
 8001f18:	58020000 	.word	0x58020000
 8001f1c:	58020400 	.word	0x58020400
 8001f20:	58020800 	.word	0x58020800
 8001f24:	58020c00 	.word	0x58020c00
 8001f28:	58021000 	.word	0x58021000
 8001f2c:	58021400 	.word	0x58021400
 8001f30:	58021800 	.word	0x58021800
 8001f34:	58021c00 	.word	0x58021c00
 8001f38:	58022000 	.word	0x58022000
 8001f3c:	58022400 	.word	0x58022400
 8001f40:	2300      	movs	r3, #0
 8001f42:	69fa      	ldr	r2, [r7, #28]
 8001f44:	f002 0203 	and.w	r2, r2, #3
 8001f48:	0092      	lsls	r2, r2, #2
 8001f4a:	4093      	lsls	r3, r2
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f52:	4938      	ldr	r1, [pc, #224]	; (8002034 <HAL_GPIO_Init+0x35c>)
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	089b      	lsrs	r3, r3, #2
 8001f58:	3302      	adds	r3, #2
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001f86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001fb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4313      	orrs	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	3301      	adds	r3, #1
 8002014:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	fa22 f303 	lsr.w	r3, r2, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	f47f ae63 	bne.w	8001cec <HAL_GPIO_Init+0x14>
  }
}
 8002026:	bf00      	nop
 8002028:	bf00      	nop
 800202a:	3724      	adds	r7, #36	; 0x24
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	58000400 	.word	0x58000400

08002038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	807b      	strh	r3, [r7, #2]
 8002044:	4613      	mov	r3, r2
 8002046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002048:	787b      	ldrb	r3, [r7, #1]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800204e:	887a      	ldrh	r2, [r7, #2]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002054:	e003      	b.n	800205e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002056:	887b      	ldrh	r3, [r7, #2]
 8002058:	041a      	lsls	r2, r3, #16
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	619a      	str	r2, [r3, #24]
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800206a:	b480      	push	{r7}
 800206c:	b085      	sub	sp, #20
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	460b      	mov	r3, r1
 8002074:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800207c:	887a      	ldrh	r2, [r7, #2]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	4013      	ands	r3, r2
 8002082:	041a      	lsls	r2, r3, #16
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	43d9      	mvns	r1, r3
 8002088:	887b      	ldrh	r3, [r7, #2]
 800208a:	400b      	ands	r3, r1
 800208c:	431a      	orrs	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	619a      	str	r2, [r3, #24]
}
 8002092:	bf00      	nop
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
	...

080020a0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80020a8:	4b29      	ldr	r3, [pc, #164]	; (8002150 <HAL_PWREx_ConfigSupply+0xb0>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	2b06      	cmp	r3, #6
 80020b2:	d00a      	beq.n	80020ca <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80020b4:	4b26      	ldr	r3, [pc, #152]	; (8002150 <HAL_PWREx_ConfigSupply+0xb0>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d001      	beq.n	80020c6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e040      	b.n	8002148 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80020c6:	2300      	movs	r3, #0
 80020c8:	e03e      	b.n	8002148 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80020ca:	4b21      	ldr	r3, [pc, #132]	; (8002150 <HAL_PWREx_ConfigSupply+0xb0>)
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80020d2:	491f      	ldr	r1, [pc, #124]	; (8002150 <HAL_PWREx_ConfigSupply+0xb0>)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80020da:	f7fe ff7d 	bl	8000fd8 <HAL_GetTick>
 80020de:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80020e0:	e009      	b.n	80020f6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80020e2:	f7fe ff79 	bl	8000fd8 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020f0:	d901      	bls.n	80020f6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e028      	b.n	8002148 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80020f6:	4b16      	ldr	r3, [pc, #88]	; (8002150 <HAL_PWREx_ConfigSupply+0xb0>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002102:	d1ee      	bne.n	80020e2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b1e      	cmp	r3, #30
 8002108:	d008      	beq.n	800211c <HAL_PWREx_ConfigSupply+0x7c>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b2e      	cmp	r3, #46	; 0x2e
 800210e:	d005      	beq.n	800211c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b1d      	cmp	r3, #29
 8002114:	d002      	beq.n	800211c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b2d      	cmp	r3, #45	; 0x2d
 800211a:	d114      	bne.n	8002146 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800211c:	f7fe ff5c 	bl	8000fd8 <HAL_GetTick>
 8002120:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002122:	e009      	b.n	8002138 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002124:	f7fe ff58 	bl	8000fd8 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002132:	d901      	bls.n	8002138 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e007      	b.n	8002148 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002138:	4b05      	ldr	r3, [pc, #20]	; (8002150 <HAL_PWREx_ConfigSupply+0xb0>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002144:	d1ee      	bne.n	8002124 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	58024800 	.word	0x58024800

08002154 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08c      	sub	sp, #48	; 0x30
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d102      	bne.n	8002168 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	f000 bc1f 	b.w	80029a6 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 80b3 	beq.w	80022dc <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002176:	4b95      	ldr	r3, [pc, #596]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800217e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002180:	4b92      	ldr	r3, [pc, #584]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 8002182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002184:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002188:	2b10      	cmp	r3, #16
 800218a:	d007      	beq.n	800219c <HAL_RCC_OscConfig+0x48>
 800218c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800218e:	2b18      	cmp	r3, #24
 8002190:	d112      	bne.n	80021b8 <HAL_RCC_OscConfig+0x64>
 8002192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002194:	f003 0303 	and.w	r3, r3, #3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d10d      	bne.n	80021b8 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800219c:	4b8b      	ldr	r3, [pc, #556]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 8098 	beq.w	80022da <HAL_RCC_OscConfig+0x186>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f040 8093 	bne.w	80022da <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e3f6      	b.n	80029a6 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c0:	d106      	bne.n	80021d0 <HAL_RCC_OscConfig+0x7c>
 80021c2:	4b82      	ldr	r3, [pc, #520]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a81      	ldr	r2, [pc, #516]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 80021c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	e058      	b.n	8002282 <HAL_RCC_OscConfig+0x12e>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d112      	bne.n	80021fe <HAL_RCC_OscConfig+0xaa>
 80021d8:	4b7c      	ldr	r3, [pc, #496]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a7b      	ldr	r2, [pc, #492]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 80021de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	4b79      	ldr	r3, [pc, #484]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a78      	ldr	r2, [pc, #480]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 80021ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	4b76      	ldr	r3, [pc, #472]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a75      	ldr	r2, [pc, #468]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 80021f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021fa:	6013      	str	r3, [r2, #0]
 80021fc:	e041      	b.n	8002282 <HAL_RCC_OscConfig+0x12e>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002206:	d112      	bne.n	800222e <HAL_RCC_OscConfig+0xda>
 8002208:	4b70      	ldr	r3, [pc, #448]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a6f      	ldr	r2, [pc, #444]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 800220e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002212:	6013      	str	r3, [r2, #0]
 8002214:	4b6d      	ldr	r3, [pc, #436]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a6c      	ldr	r2, [pc, #432]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 800221a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800221e:	6013      	str	r3, [r2, #0]
 8002220:	4b6a      	ldr	r3, [pc, #424]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a69      	ldr	r2, [pc, #420]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 8002226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222a:	6013      	str	r3, [r2, #0]
 800222c:	e029      	b.n	8002282 <HAL_RCC_OscConfig+0x12e>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002236:	d112      	bne.n	800225e <HAL_RCC_OscConfig+0x10a>
 8002238:	4b64      	ldr	r3, [pc, #400]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a63      	ldr	r2, [pc, #396]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 800223e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002242:	6013      	str	r3, [r2, #0]
 8002244:	4b61      	ldr	r3, [pc, #388]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a60      	ldr	r2, [pc, #384]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 800224a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800224e:	6013      	str	r3, [r2, #0]
 8002250:	4b5e      	ldr	r3, [pc, #376]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a5d      	ldr	r2, [pc, #372]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 8002256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800225a:	6013      	str	r3, [r2, #0]
 800225c:	e011      	b.n	8002282 <HAL_RCC_OscConfig+0x12e>
 800225e:	4b5b      	ldr	r3, [pc, #364]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a5a      	ldr	r2, [pc, #360]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 8002264:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	4b58      	ldr	r3, [pc, #352]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a57      	ldr	r2, [pc, #348]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 8002270:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	4b55      	ldr	r3, [pc, #340]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a54      	ldr	r2, [pc, #336]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 800227c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002280:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d013      	beq.n	80022b2 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228a:	f7fe fea5 	bl	8000fd8 <HAL_GetTick>
 800228e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002292:	f7fe fea1 	bl	8000fd8 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b64      	cmp	r3, #100	; 0x64
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e380      	b.n	80029a6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022a4:	4b49      	ldr	r3, [pc, #292]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0f0      	beq.n	8002292 <HAL_RCC_OscConfig+0x13e>
 80022b0:	e014      	b.n	80022dc <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b2:	f7fe fe91 	bl	8000fd8 <HAL_GetTick>
 80022b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022ba:	f7fe fe8d 	bl	8000fd8 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b64      	cmp	r3, #100	; 0x64
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e36c      	b.n	80029a6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022cc:	4b3f      	ldr	r3, [pc, #252]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1f0      	bne.n	80022ba <HAL_RCC_OscConfig+0x166>
 80022d8:	e000      	b.n	80022dc <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022da:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 808c 	beq.w	8002402 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ea:	4b38      	ldr	r3, [pc, #224]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022f2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022f4:	4b35      	ldr	r3, [pc, #212]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 80022f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f8:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80022fa:	6a3b      	ldr	r3, [r7, #32]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d007      	beq.n	8002310 <HAL_RCC_OscConfig+0x1bc>
 8002300:	6a3b      	ldr	r3, [r7, #32]
 8002302:	2b18      	cmp	r3, #24
 8002304:	d137      	bne.n	8002376 <HAL_RCC_OscConfig+0x222>
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	2b00      	cmp	r3, #0
 800230e:	d132      	bne.n	8002376 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002310:	4b2e      	ldr	r3, [pc, #184]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <HAL_RCC_OscConfig+0x1d4>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e33e      	b.n	80029a6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002328:	4b28      	ldr	r3, [pc, #160]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f023 0219 	bic.w	r2, r3, #25
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	4925      	ldr	r1, [pc, #148]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 8002336:	4313      	orrs	r3, r2
 8002338:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233a:	f7fe fe4d 	bl	8000fd8 <HAL_GetTick>
 800233e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002342:	f7fe fe49 	bl	8000fd8 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e328      	b.n	80029a6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002354:	4b1d      	ldr	r3, [pc, #116]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0f0      	beq.n	8002342 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002360:	4b1a      	ldr	r3, [pc, #104]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	061b      	lsls	r3, r3, #24
 800236e:	4917      	ldr	r1, [pc, #92]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 8002370:	4313      	orrs	r3, r2
 8002372:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002374:	e045      	b.n	8002402 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d028      	beq.n	80023d0 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800237e:	4b13      	ldr	r3, [pc, #76]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 0219 	bic.w	r2, r3, #25
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	4910      	ldr	r1, [pc, #64]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 800238c:	4313      	orrs	r3, r2
 800238e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002390:	f7fe fe22 	bl	8000fd8 <HAL_GetTick>
 8002394:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002398:	f7fe fe1e 	bl	8000fd8 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e2fd      	b.n	80029a6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023aa:	4b08      	ldr	r3, [pc, #32]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0f0      	beq.n	8002398 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b6:	4b05      	ldr	r3, [pc, #20]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	061b      	lsls	r3, r3, #24
 80023c4:	4901      	ldr	r1, [pc, #4]	; (80023cc <HAL_RCC_OscConfig+0x278>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	604b      	str	r3, [r1, #4]
 80023ca:	e01a      	b.n	8002402 <HAL_RCC_OscConfig+0x2ae>
 80023cc:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023d0:	4b97      	ldr	r3, [pc, #604]	; (8002630 <HAL_RCC_OscConfig+0x4dc>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a96      	ldr	r2, [pc, #600]	; (8002630 <HAL_RCC_OscConfig+0x4dc>)
 80023d6:	f023 0301 	bic.w	r3, r3, #1
 80023da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023dc:	f7fe fdfc 	bl	8000fd8 <HAL_GetTick>
 80023e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e4:	f7fe fdf8 	bl	8000fd8 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e2d7      	b.n	80029a6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023f6:	4b8e      	ldr	r3, [pc, #568]	; (8002630 <HAL_RCC_OscConfig+0x4dc>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0304 	and.w	r3, r3, #4
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0310 	and.w	r3, r3, #16
 800240a:	2b00      	cmp	r3, #0
 800240c:	d06a      	beq.n	80024e4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800240e:	4b88      	ldr	r3, [pc, #544]	; (8002630 <HAL_RCC_OscConfig+0x4dc>)
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002416:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002418:	4b85      	ldr	r3, [pc, #532]	; (8002630 <HAL_RCC_OscConfig+0x4dc>)
 800241a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	2b08      	cmp	r3, #8
 8002422:	d007      	beq.n	8002434 <HAL_RCC_OscConfig+0x2e0>
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	2b18      	cmp	r3, #24
 8002428:	d11b      	bne.n	8002462 <HAL_RCC_OscConfig+0x30e>
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	2b01      	cmp	r3, #1
 8002432:	d116      	bne.n	8002462 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002434:	4b7e      	ldr	r3, [pc, #504]	; (8002630 <HAL_RCC_OscConfig+0x4dc>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243c:	2b00      	cmp	r3, #0
 800243e:	d005      	beq.n	800244c <HAL_RCC_OscConfig+0x2f8>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69db      	ldr	r3, [r3, #28]
 8002444:	2b80      	cmp	r3, #128	; 0x80
 8002446:	d001      	beq.n	800244c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e2ac      	b.n	80029a6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800244c:	4b78      	ldr	r3, [pc, #480]	; (8002630 <HAL_RCC_OscConfig+0x4dc>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	061b      	lsls	r3, r3, #24
 800245a:	4975      	ldr	r1, [pc, #468]	; (8002630 <HAL_RCC_OscConfig+0x4dc>)
 800245c:	4313      	orrs	r3, r2
 800245e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002460:	e040      	b.n	80024e4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d023      	beq.n	80024b2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800246a:	4b71      	ldr	r3, [pc, #452]	; (8002630 <HAL_RCC_OscConfig+0x4dc>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a70      	ldr	r2, [pc, #448]	; (8002630 <HAL_RCC_OscConfig+0x4dc>)
 8002470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002474:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002476:	f7fe fdaf 	bl	8000fd8 <HAL_GetTick>
 800247a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800247c:	e008      	b.n	8002490 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800247e:	f7fe fdab 	bl	8000fd8 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e28a      	b.n	80029a6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002490:	4b67      	ldr	r3, [pc, #412]	; (8002630 <HAL_RCC_OscConfig+0x4dc>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0f0      	beq.n	800247e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800249c:	4b64      	ldr	r3, [pc, #400]	; (8002630 <HAL_RCC_OscConfig+0x4dc>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	061b      	lsls	r3, r3, #24
 80024aa:	4961      	ldr	r1, [pc, #388]	; (8002630 <HAL_RCC_OscConfig+0x4dc>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	60cb      	str	r3, [r1, #12]
 80024b0:	e018      	b.n	80024e4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80024b2:	4b5f      	ldr	r3, [pc, #380]	; (8002630 <HAL_RCC_OscConfig+0x4dc>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a5e      	ldr	r2, [pc, #376]	; (8002630 <HAL_RCC_OscConfig+0x4dc>)
 80024b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024be:	f7fe fd8b 	bl	8000fd8 <HAL_GetTick>
 80024c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80024c6:	f7fe fd87 	bl	8000fd8 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e266      	b.n	80029a6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80024d8:	4b55      	ldr	r3, [pc, #340]	; (8002630 <HAL_RCC_OscConfig+0x4dc>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1f0      	bne.n	80024c6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0308 	and.w	r3, r3, #8
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d036      	beq.n	800255e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d019      	beq.n	800252c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024f8:	4b4d      	ldr	r3, [pc, #308]	; (8002630 <HAL_RCC_OscConfig+0x4dc>)
 80024fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024fc:	4a4c      	ldr	r2, [pc, #304]	; (8002630 <HAL_RCC_OscConfig+0x4dc>)
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002504:	f7fe fd68 	bl	8000fd8 <HAL_GetTick>
 8002508:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800250c:	f7fe fd64 	bl	8000fd8 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e243      	b.n	80029a6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800251e:	4b44      	ldr	r3, [pc, #272]	; (8002630 <HAL_RCC_OscConfig+0x4dc>)
 8002520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0f0      	beq.n	800250c <HAL_RCC_OscConfig+0x3b8>
 800252a:	e018      	b.n	800255e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800252c:	4b40      	ldr	r3, [pc, #256]	; (8002630 <HAL_RCC_OscConfig+0x4dc>)
 800252e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002530:	4a3f      	ldr	r2, [pc, #252]	; (8002630 <HAL_RCC_OscConfig+0x4dc>)
 8002532:	f023 0301 	bic.w	r3, r3, #1
 8002536:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002538:	f7fe fd4e 	bl	8000fd8 <HAL_GetTick>
 800253c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002540:	f7fe fd4a 	bl	8000fd8 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e229      	b.n	80029a6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002552:	4b37      	ldr	r3, [pc, #220]	; (8002630 <HAL_RCC_OscConfig+0x4dc>)
 8002554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0320 	and.w	r3, r3, #32
 8002566:	2b00      	cmp	r3, #0
 8002568:	d036      	beq.n	80025d8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d019      	beq.n	80025a6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002572:	4b2f      	ldr	r3, [pc, #188]	; (8002630 <HAL_RCC_OscConfig+0x4dc>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a2e      	ldr	r2, [pc, #184]	; (8002630 <HAL_RCC_OscConfig+0x4dc>)
 8002578:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800257c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800257e:	f7fe fd2b 	bl	8000fd8 <HAL_GetTick>
 8002582:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002586:	f7fe fd27 	bl	8000fd8 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e206      	b.n	80029a6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002598:	4b25      	ldr	r3, [pc, #148]	; (8002630 <HAL_RCC_OscConfig+0x4dc>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0f0      	beq.n	8002586 <HAL_RCC_OscConfig+0x432>
 80025a4:	e018      	b.n	80025d8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025a6:	4b22      	ldr	r3, [pc, #136]	; (8002630 <HAL_RCC_OscConfig+0x4dc>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a21      	ldr	r2, [pc, #132]	; (8002630 <HAL_RCC_OscConfig+0x4dc>)
 80025ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80025b2:	f7fe fd11 	bl	8000fd8 <HAL_GetTick>
 80025b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025ba:	f7fe fd0d 	bl	8000fd8 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e1ec      	b.n	80029a6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80025cc:	4b18      	ldr	r3, [pc, #96]	; (8002630 <HAL_RCC_OscConfig+0x4dc>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1f0      	bne.n	80025ba <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 80af 	beq.w	8002744 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80025e6:	4b13      	ldr	r3, [pc, #76]	; (8002634 <HAL_RCC_OscConfig+0x4e0>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a12      	ldr	r2, [pc, #72]	; (8002634 <HAL_RCC_OscConfig+0x4e0>)
 80025ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025f2:	f7fe fcf1 	bl	8000fd8 <HAL_GetTick>
 80025f6:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025fa:	f7fe fced 	bl	8000fd8 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b64      	cmp	r3, #100	; 0x64
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e1cc      	b.n	80029a6 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800260c:	4b09      	ldr	r3, [pc, #36]	; (8002634 <HAL_RCC_OscConfig+0x4e0>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0f0      	beq.n	80025fa <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d10b      	bne.n	8002638 <HAL_RCC_OscConfig+0x4e4>
 8002620:	4b03      	ldr	r3, [pc, #12]	; (8002630 <HAL_RCC_OscConfig+0x4dc>)
 8002622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002624:	4a02      	ldr	r2, [pc, #8]	; (8002630 <HAL_RCC_OscConfig+0x4dc>)
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	6713      	str	r3, [r2, #112]	; 0x70
 800262c:	e05b      	b.n	80026e6 <HAL_RCC_OscConfig+0x592>
 800262e:	bf00      	nop
 8002630:	58024400 	.word	0x58024400
 8002634:	58024800 	.word	0x58024800
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d112      	bne.n	8002666 <HAL_RCC_OscConfig+0x512>
 8002640:	4b9d      	ldr	r3, [pc, #628]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 8002642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002644:	4a9c      	ldr	r2, [pc, #624]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 8002646:	f023 0301 	bic.w	r3, r3, #1
 800264a:	6713      	str	r3, [r2, #112]	; 0x70
 800264c:	4b9a      	ldr	r3, [pc, #616]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 800264e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002650:	4a99      	ldr	r2, [pc, #612]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 8002652:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002656:	6713      	str	r3, [r2, #112]	; 0x70
 8002658:	4b97      	ldr	r3, [pc, #604]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 800265a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265c:	4a96      	ldr	r2, [pc, #600]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 800265e:	f023 0304 	bic.w	r3, r3, #4
 8002662:	6713      	str	r3, [r2, #112]	; 0x70
 8002664:	e03f      	b.n	80026e6 <HAL_RCC_OscConfig+0x592>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	2b05      	cmp	r3, #5
 800266c:	d112      	bne.n	8002694 <HAL_RCC_OscConfig+0x540>
 800266e:	4b92      	ldr	r3, [pc, #584]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 8002670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002672:	4a91      	ldr	r2, [pc, #580]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 8002674:	f043 0304 	orr.w	r3, r3, #4
 8002678:	6713      	str	r3, [r2, #112]	; 0x70
 800267a:	4b8f      	ldr	r3, [pc, #572]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 800267c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267e:	4a8e      	ldr	r2, [pc, #568]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 8002680:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002684:	6713      	str	r3, [r2, #112]	; 0x70
 8002686:	4b8c      	ldr	r3, [pc, #560]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 8002688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268a:	4a8b      	ldr	r2, [pc, #556]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	6713      	str	r3, [r2, #112]	; 0x70
 8002692:	e028      	b.n	80026e6 <HAL_RCC_OscConfig+0x592>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	2b85      	cmp	r3, #133	; 0x85
 800269a:	d112      	bne.n	80026c2 <HAL_RCC_OscConfig+0x56e>
 800269c:	4b86      	ldr	r3, [pc, #536]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 800269e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a0:	4a85      	ldr	r2, [pc, #532]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 80026a2:	f043 0304 	orr.w	r3, r3, #4
 80026a6:	6713      	str	r3, [r2, #112]	; 0x70
 80026a8:	4b83      	ldr	r3, [pc, #524]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 80026aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ac:	4a82      	ldr	r2, [pc, #520]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 80026ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026b2:	6713      	str	r3, [r2, #112]	; 0x70
 80026b4:	4b80      	ldr	r3, [pc, #512]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	4a7f      	ldr	r2, [pc, #508]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 80026ba:	f043 0301 	orr.w	r3, r3, #1
 80026be:	6713      	str	r3, [r2, #112]	; 0x70
 80026c0:	e011      	b.n	80026e6 <HAL_RCC_OscConfig+0x592>
 80026c2:	4b7d      	ldr	r3, [pc, #500]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 80026c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c6:	4a7c      	ldr	r2, [pc, #496]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 80026c8:	f023 0301 	bic.w	r3, r3, #1
 80026cc:	6713      	str	r3, [r2, #112]	; 0x70
 80026ce:	4b7a      	ldr	r3, [pc, #488]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 80026d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d2:	4a79      	ldr	r2, [pc, #484]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 80026d4:	f023 0304 	bic.w	r3, r3, #4
 80026d8:	6713      	str	r3, [r2, #112]	; 0x70
 80026da:	4b77      	ldr	r3, [pc, #476]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 80026dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026de:	4a76      	ldr	r2, [pc, #472]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 80026e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d015      	beq.n	800271a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ee:	f7fe fc73 	bl	8000fd8 <HAL_GetTick>
 80026f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026f4:	e00a      	b.n	800270c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f6:	f7fe fc6f 	bl	8000fd8 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	f241 3288 	movw	r2, #5000	; 0x1388
 8002704:	4293      	cmp	r3, r2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e14c      	b.n	80029a6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800270c:	4b6a      	ldr	r3, [pc, #424]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 800270e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0ee      	beq.n	80026f6 <HAL_RCC_OscConfig+0x5a2>
 8002718:	e014      	b.n	8002744 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271a:	f7fe fc5d 	bl	8000fd8 <HAL_GetTick>
 800271e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002720:	e00a      	b.n	8002738 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002722:	f7fe fc59 	bl	8000fd8 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002730:	4293      	cmp	r3, r2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e136      	b.n	80029a6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002738:	4b5f      	ldr	r3, [pc, #380]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 800273a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1ee      	bne.n	8002722 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 812b 	beq.w	80029a4 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800274e:	4b5a      	ldr	r3, [pc, #360]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002756:	2b18      	cmp	r3, #24
 8002758:	f000 80bb 	beq.w	80028d2 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	2b02      	cmp	r3, #2
 8002762:	f040 8095 	bne.w	8002890 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002766:	4b54      	ldr	r3, [pc, #336]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a53      	ldr	r2, [pc, #332]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 800276c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002772:	f7fe fc31 	bl	8000fd8 <HAL_GetTick>
 8002776:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800277a:	f7fe fc2d 	bl	8000fd8 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e10c      	b.n	80029a6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800278c:	4b4a      	ldr	r3, [pc, #296]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1f0      	bne.n	800277a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002798:	4b47      	ldr	r3, [pc, #284]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 800279a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800279c:	4b47      	ldr	r3, [pc, #284]	; (80028bc <HAL_RCC_OscConfig+0x768>)
 800279e:	4013      	ands	r3, r2
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80027a8:	0112      	lsls	r2, r2, #4
 80027aa:	430a      	orrs	r2, r1
 80027ac:	4942      	ldr	r1, [pc, #264]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	628b      	str	r3, [r1, #40]	; 0x28
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	3b01      	subs	r3, #1
 80027b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c0:	3b01      	subs	r3, #1
 80027c2:	025b      	lsls	r3, r3, #9
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027cc:	3b01      	subs	r3, #1
 80027ce:	041b      	lsls	r3, r3, #16
 80027d0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80027d4:	431a      	orrs	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027da:	3b01      	subs	r3, #1
 80027dc:	061b      	lsls	r3, r3, #24
 80027de:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80027e2:	4935      	ldr	r1, [pc, #212]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80027e8:	4b33      	ldr	r3, [pc, #204]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 80027ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ec:	4a32      	ldr	r2, [pc, #200]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 80027ee:	f023 0301 	bic.w	r3, r3, #1
 80027f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80027f4:	4b30      	ldr	r3, [pc, #192]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 80027f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027f8:	4b31      	ldr	r3, [pc, #196]	; (80028c0 <HAL_RCC_OscConfig+0x76c>)
 80027fa:	4013      	ands	r3, r2
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002800:	00d2      	lsls	r2, r2, #3
 8002802:	492d      	ldr	r1, [pc, #180]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 8002804:	4313      	orrs	r3, r2
 8002806:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002808:	4b2b      	ldr	r3, [pc, #172]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 800280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280c:	f023 020c 	bic.w	r2, r3, #12
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002814:	4928      	ldr	r1, [pc, #160]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 8002816:	4313      	orrs	r3, r2
 8002818:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800281a:	4b27      	ldr	r3, [pc, #156]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 800281c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281e:	f023 0202 	bic.w	r2, r3, #2
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002826:	4924      	ldr	r1, [pc, #144]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 8002828:	4313      	orrs	r3, r2
 800282a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800282c:	4b22      	ldr	r3, [pc, #136]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 800282e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002830:	4a21      	ldr	r2, [pc, #132]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 8002832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002836:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002838:	4b1f      	ldr	r3, [pc, #124]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 800283a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283c:	4a1e      	ldr	r2, [pc, #120]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 800283e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002842:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002844:	4b1c      	ldr	r3, [pc, #112]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 8002846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002848:	4a1b      	ldr	r2, [pc, #108]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 800284a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800284e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002850:	4b19      	ldr	r3, [pc, #100]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 8002852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002854:	4a18      	ldr	r2, [pc, #96]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800285c:	4b16      	ldr	r3, [pc, #88]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a15      	ldr	r2, [pc, #84]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 8002862:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002866:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002868:	f7fe fbb6 	bl	8000fd8 <HAL_GetTick>
 800286c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002870:	f7fe fbb2 	bl	8000fd8 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e091      	b.n	80029a6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002882:	4b0d      	ldr	r3, [pc, #52]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0f0      	beq.n	8002870 <HAL_RCC_OscConfig+0x71c>
 800288e:	e089      	b.n	80029a4 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002890:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a08      	ldr	r2, [pc, #32]	; (80028b8 <HAL_RCC_OscConfig+0x764>)
 8002896:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800289a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289c:	f7fe fb9c 	bl	8000fd8 <HAL_GetTick>
 80028a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028a2:	e00f      	b.n	80028c4 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a4:	f7fe fb98 	bl	8000fd8 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d908      	bls.n	80028c4 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e077      	b.n	80029a6 <HAL_RCC_OscConfig+0x852>
 80028b6:	bf00      	nop
 80028b8:	58024400 	.word	0x58024400
 80028bc:	fffffc0c 	.word	0xfffffc0c
 80028c0:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028c4:	4b3a      	ldr	r3, [pc, #232]	; (80029b0 <HAL_RCC_OscConfig+0x85c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1e9      	bne.n	80028a4 <HAL_RCC_OscConfig+0x750>
 80028d0:	e068      	b.n	80029a4 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80028d2:	4b37      	ldr	r3, [pc, #220]	; (80029b0 <HAL_RCC_OscConfig+0x85c>)
 80028d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80028d8:	4b35      	ldr	r3, [pc, #212]	; (80029b0 <HAL_RCC_OscConfig+0x85c>)
 80028da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028dc:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d031      	beq.n	800294a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	f003 0203 	and.w	r2, r3, #3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d12a      	bne.n	800294a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	091b      	lsrs	r3, r3, #4
 80028f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002900:	429a      	cmp	r2, r3
 8002902:	d122      	bne.n	800294a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002910:	429a      	cmp	r2, r3
 8002912:	d11a      	bne.n	800294a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	0a5b      	lsrs	r3, r3, #9
 8002918:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002920:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002922:	429a      	cmp	r2, r3
 8002924:	d111      	bne.n	800294a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	0c1b      	lsrs	r3, r3, #16
 800292a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002932:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002934:	429a      	cmp	r2, r3
 8002936:	d108      	bne.n	800294a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	0e1b      	lsrs	r3, r3, #24
 800293c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002944:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002946:	429a      	cmp	r2, r3
 8002948:	d001      	beq.n	800294e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e02b      	b.n	80029a6 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800294e:	4b18      	ldr	r3, [pc, #96]	; (80029b0 <HAL_RCC_OscConfig+0x85c>)
 8002950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002952:	08db      	lsrs	r3, r3, #3
 8002954:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002958:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	429a      	cmp	r2, r3
 8002962:	d01f      	beq.n	80029a4 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002964:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <HAL_RCC_OscConfig+0x85c>)
 8002966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002968:	4a11      	ldr	r2, [pc, #68]	; (80029b0 <HAL_RCC_OscConfig+0x85c>)
 800296a:	f023 0301 	bic.w	r3, r3, #1
 800296e:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002970:	f7fe fb32 	bl	8000fd8 <HAL_GetTick>
 8002974:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002976:	bf00      	nop
 8002978:	f7fe fb2e 	bl	8000fd8 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	4293      	cmp	r3, r2
 8002982:	d0f9      	beq.n	8002978 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002984:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <HAL_RCC_OscConfig+0x85c>)
 8002986:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002988:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <HAL_RCC_OscConfig+0x860>)
 800298a:	4013      	ands	r3, r2
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002990:	00d2      	lsls	r2, r2, #3
 8002992:	4907      	ldr	r1, [pc, #28]	; (80029b0 <HAL_RCC_OscConfig+0x85c>)
 8002994:	4313      	orrs	r3, r2
 8002996:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002998:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <HAL_RCC_OscConfig+0x85c>)
 800299a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299c:	4a04      	ldr	r2, [pc, #16]	; (80029b0 <HAL_RCC_OscConfig+0x85c>)
 800299e:	f043 0301 	orr.w	r3, r3, #1
 80029a2:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3730      	adds	r7, #48	; 0x30
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	58024400 	.word	0x58024400
 80029b4:	ffff0007 	.word	0xffff0007

080029b8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e19c      	b.n	8002d06 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029cc:	4b8a      	ldr	r3, [pc, #552]	; (8002bf8 <HAL_RCC_ClockConfig+0x240>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 030f 	and.w	r3, r3, #15
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d910      	bls.n	80029fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029da:	4b87      	ldr	r3, [pc, #540]	; (8002bf8 <HAL_RCC_ClockConfig+0x240>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f023 020f 	bic.w	r2, r3, #15
 80029e2:	4985      	ldr	r1, [pc, #532]	; (8002bf8 <HAL_RCC_ClockConfig+0x240>)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ea:	4b83      	ldr	r3, [pc, #524]	; (8002bf8 <HAL_RCC_ClockConfig+0x240>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d001      	beq.n	80029fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e184      	b.n	8002d06 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d010      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691a      	ldr	r2, [r3, #16]
 8002a0c:	4b7b      	ldr	r3, [pc, #492]	; (8002bfc <HAL_RCC_ClockConfig+0x244>)
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d908      	bls.n	8002a2a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002a18:	4b78      	ldr	r3, [pc, #480]	; (8002bfc <HAL_RCC_ClockConfig+0x244>)
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	4975      	ldr	r1, [pc, #468]	; (8002bfc <HAL_RCC_ClockConfig+0x244>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d010      	beq.n	8002a58 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	695a      	ldr	r2, [r3, #20]
 8002a3a:	4b70      	ldr	r3, [pc, #448]	; (8002bfc <HAL_RCC_ClockConfig+0x244>)
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d908      	bls.n	8002a58 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002a46:	4b6d      	ldr	r3, [pc, #436]	; (8002bfc <HAL_RCC_ClockConfig+0x244>)
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	496a      	ldr	r1, [pc, #424]	; (8002bfc <HAL_RCC_ClockConfig+0x244>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0310 	and.w	r3, r3, #16
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d010      	beq.n	8002a86 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	699a      	ldr	r2, [r3, #24]
 8002a68:	4b64      	ldr	r3, [pc, #400]	; (8002bfc <HAL_RCC_ClockConfig+0x244>)
 8002a6a:	69db      	ldr	r3, [r3, #28]
 8002a6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d908      	bls.n	8002a86 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002a74:	4b61      	ldr	r3, [pc, #388]	; (8002bfc <HAL_RCC_ClockConfig+0x244>)
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	495e      	ldr	r1, [pc, #376]	; (8002bfc <HAL_RCC_ClockConfig+0x244>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0320 	and.w	r3, r3, #32
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d010      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69da      	ldr	r2, [r3, #28]
 8002a96:	4b59      	ldr	r3, [pc, #356]	; (8002bfc <HAL_RCC_ClockConfig+0x244>)
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d908      	bls.n	8002ab4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002aa2:	4b56      	ldr	r3, [pc, #344]	; (8002bfc <HAL_RCC_ClockConfig+0x244>)
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	4953      	ldr	r1, [pc, #332]	; (8002bfc <HAL_RCC_ClockConfig+0x244>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d010      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	4b4d      	ldr	r3, [pc, #308]	; (8002bfc <HAL_RCC_ClockConfig+0x244>)
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	f003 030f 	and.w	r3, r3, #15
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d908      	bls.n	8002ae2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad0:	4b4a      	ldr	r3, [pc, #296]	; (8002bfc <HAL_RCC_ClockConfig+0x244>)
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	f023 020f 	bic.w	r2, r3, #15
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	4947      	ldr	r1, [pc, #284]	; (8002bfc <HAL_RCC_ClockConfig+0x244>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d055      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002aee:	4b43      	ldr	r3, [pc, #268]	; (8002bfc <HAL_RCC_ClockConfig+0x244>)
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	4940      	ldr	r1, [pc, #256]	; (8002bfc <HAL_RCC_ClockConfig+0x244>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d107      	bne.n	8002b18 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b08:	4b3c      	ldr	r3, [pc, #240]	; (8002bfc <HAL_RCC_ClockConfig+0x244>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d121      	bne.n	8002b58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e0f6      	b.n	8002d06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2b03      	cmp	r3, #3
 8002b1e:	d107      	bne.n	8002b30 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b20:	4b36      	ldr	r3, [pc, #216]	; (8002bfc <HAL_RCC_ClockConfig+0x244>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d115      	bne.n	8002b58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e0ea      	b.n	8002d06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d107      	bne.n	8002b48 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b38:	4b30      	ldr	r3, [pc, #192]	; (8002bfc <HAL_RCC_ClockConfig+0x244>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d109      	bne.n	8002b58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e0de      	b.n	8002d06 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b48:	4b2c      	ldr	r3, [pc, #176]	; (8002bfc <HAL_RCC_ClockConfig+0x244>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e0d6      	b.n	8002d06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b58:	4b28      	ldr	r3, [pc, #160]	; (8002bfc <HAL_RCC_ClockConfig+0x244>)
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	f023 0207 	bic.w	r2, r3, #7
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	4925      	ldr	r1, [pc, #148]	; (8002bfc <HAL_RCC_ClockConfig+0x244>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b6a:	f7fe fa35 	bl	8000fd8 <HAL_GetTick>
 8002b6e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b70:	e00a      	b.n	8002b88 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b72:	f7fe fa31 	bl	8000fd8 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e0be      	b.n	8002d06 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b88:	4b1c      	ldr	r3, [pc, #112]	; (8002bfc <HAL_RCC_ClockConfig+0x244>)
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d1eb      	bne.n	8002b72 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d010      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68da      	ldr	r2, [r3, #12]
 8002baa:	4b14      	ldr	r3, [pc, #80]	; (8002bfc <HAL_RCC_ClockConfig+0x244>)
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d208      	bcs.n	8002bc8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb6:	4b11      	ldr	r3, [pc, #68]	; (8002bfc <HAL_RCC_ClockConfig+0x244>)
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	f023 020f 	bic.w	r2, r3, #15
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	490e      	ldr	r1, [pc, #56]	; (8002bfc <HAL_RCC_ClockConfig+0x244>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <HAL_RCC_ClockConfig+0x240>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 030f 	and.w	r3, r3, #15
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d214      	bcs.n	8002c00 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd6:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <HAL_RCC_ClockConfig+0x240>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f023 020f 	bic.w	r2, r3, #15
 8002bde:	4906      	ldr	r1, [pc, #24]	; (8002bf8 <HAL_RCC_ClockConfig+0x240>)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be6:	4b04      	ldr	r3, [pc, #16]	; (8002bf8 <HAL_RCC_ClockConfig+0x240>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d005      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e086      	b.n	8002d06 <HAL_RCC_ClockConfig+0x34e>
 8002bf8:	52002000 	.word	0x52002000
 8002bfc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d010      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	691a      	ldr	r2, [r3, #16]
 8002c10:	4b3f      	ldr	r3, [pc, #252]	; (8002d10 <HAL_RCC_ClockConfig+0x358>)
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d208      	bcs.n	8002c2e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c1c:	4b3c      	ldr	r3, [pc, #240]	; (8002d10 <HAL_RCC_ClockConfig+0x358>)
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	4939      	ldr	r1, [pc, #228]	; (8002d10 <HAL_RCC_ClockConfig+0x358>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d010      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	695a      	ldr	r2, [r3, #20]
 8002c3e:	4b34      	ldr	r3, [pc, #208]	; (8002d10 <HAL_RCC_ClockConfig+0x358>)
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d208      	bcs.n	8002c5c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c4a:	4b31      	ldr	r3, [pc, #196]	; (8002d10 <HAL_RCC_ClockConfig+0x358>)
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	492e      	ldr	r1, [pc, #184]	; (8002d10 <HAL_RCC_ClockConfig+0x358>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0310 	and.w	r3, r3, #16
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d010      	beq.n	8002c8a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	699a      	ldr	r2, [r3, #24]
 8002c6c:	4b28      	ldr	r3, [pc, #160]	; (8002d10 <HAL_RCC_ClockConfig+0x358>)
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d208      	bcs.n	8002c8a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c78:	4b25      	ldr	r3, [pc, #148]	; (8002d10 <HAL_RCC_ClockConfig+0x358>)
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	4922      	ldr	r1, [pc, #136]	; (8002d10 <HAL_RCC_ClockConfig+0x358>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0320 	and.w	r3, r3, #32
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d010      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69da      	ldr	r2, [r3, #28]
 8002c9a:	4b1d      	ldr	r3, [pc, #116]	; (8002d10 <HAL_RCC_ClockConfig+0x358>)
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d208      	bcs.n	8002cb8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002ca6:	4b1a      	ldr	r3, [pc, #104]	; (8002d10 <HAL_RCC_ClockConfig+0x358>)
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	4917      	ldr	r1, [pc, #92]	; (8002d10 <HAL_RCC_ClockConfig+0x358>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002cb8:	f000 f834 	bl	8002d24 <HAL_RCC_GetSysClockFreq>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	4b14      	ldr	r3, [pc, #80]	; (8002d10 <HAL_RCC_ClockConfig+0x358>)
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	0a1b      	lsrs	r3, r3, #8
 8002cc4:	f003 030f 	and.w	r3, r3, #15
 8002cc8:	4912      	ldr	r1, [pc, #72]	; (8002d14 <HAL_RCC_ClockConfig+0x35c>)
 8002cca:	5ccb      	ldrb	r3, [r1, r3]
 8002ccc:	f003 031f 	and.w	r3, r3, #31
 8002cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002cd6:	4b0e      	ldr	r3, [pc, #56]	; (8002d10 <HAL_RCC_ClockConfig+0x358>)
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	4a0d      	ldr	r2, [pc, #52]	; (8002d14 <HAL_RCC_ClockConfig+0x35c>)
 8002ce0:	5cd3      	ldrb	r3, [r2, r3]
 8002ce2:	f003 031f 	and.w	r3, r3, #31
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8002cec:	4a0a      	ldr	r2, [pc, #40]	; (8002d18 <HAL_RCC_ClockConfig+0x360>)
 8002cee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002cf0:	4a0a      	ldr	r2, [pc, #40]	; (8002d1c <HAL_RCC_ClockConfig+0x364>)
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002cf6:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <HAL_RCC_ClockConfig+0x368>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fe f922 	bl	8000f44 <HAL_InitTick>
 8002d00:	4603      	mov	r3, r0
 8002d02:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	58024400 	.word	0x58024400
 8002d14:	080079ec 	.word	0x080079ec
 8002d18:	24000008 	.word	0x24000008
 8002d1c:	24000004 	.word	0x24000004
 8002d20:	2400000c 	.word	0x2400000c

08002d24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b089      	sub	sp, #36	; 0x24
 8002d28:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d2a:	4bb3      	ldr	r3, [pc, #716]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d32:	2b18      	cmp	r3, #24
 8002d34:	f200 8155 	bhi.w	8002fe2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002d38:	a201      	add	r2, pc, #4	; (adr r2, 8002d40 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3e:	bf00      	nop
 8002d40:	08002da5 	.word	0x08002da5
 8002d44:	08002fe3 	.word	0x08002fe3
 8002d48:	08002fe3 	.word	0x08002fe3
 8002d4c:	08002fe3 	.word	0x08002fe3
 8002d50:	08002fe3 	.word	0x08002fe3
 8002d54:	08002fe3 	.word	0x08002fe3
 8002d58:	08002fe3 	.word	0x08002fe3
 8002d5c:	08002fe3 	.word	0x08002fe3
 8002d60:	08002dcb 	.word	0x08002dcb
 8002d64:	08002fe3 	.word	0x08002fe3
 8002d68:	08002fe3 	.word	0x08002fe3
 8002d6c:	08002fe3 	.word	0x08002fe3
 8002d70:	08002fe3 	.word	0x08002fe3
 8002d74:	08002fe3 	.word	0x08002fe3
 8002d78:	08002fe3 	.word	0x08002fe3
 8002d7c:	08002fe3 	.word	0x08002fe3
 8002d80:	08002dd1 	.word	0x08002dd1
 8002d84:	08002fe3 	.word	0x08002fe3
 8002d88:	08002fe3 	.word	0x08002fe3
 8002d8c:	08002fe3 	.word	0x08002fe3
 8002d90:	08002fe3 	.word	0x08002fe3
 8002d94:	08002fe3 	.word	0x08002fe3
 8002d98:	08002fe3 	.word	0x08002fe3
 8002d9c:	08002fe3 	.word	0x08002fe3
 8002da0:	08002dd7 	.word	0x08002dd7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002da4:	4b94      	ldr	r3, [pc, #592]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0320 	and.w	r3, r3, #32
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d009      	beq.n	8002dc4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002db0:	4b91      	ldr	r3, [pc, #580]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	08db      	lsrs	r3, r3, #3
 8002db6:	f003 0303 	and.w	r3, r3, #3
 8002dba:	4a90      	ldr	r2, [pc, #576]	; (8002ffc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002dc2:	e111      	b.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002dc4:	4b8d      	ldr	r3, [pc, #564]	; (8002ffc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002dc6:	61bb      	str	r3, [r7, #24]
      break;
 8002dc8:	e10e      	b.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002dca:	4b8d      	ldr	r3, [pc, #564]	; (8003000 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002dcc:	61bb      	str	r3, [r7, #24]
      break;
 8002dce:	e10b      	b.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002dd0:	4b8c      	ldr	r3, [pc, #560]	; (8003004 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002dd2:	61bb      	str	r3, [r7, #24]
      break;
 8002dd4:	e108      	b.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002dd6:	4b88      	ldr	r3, [pc, #544]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dda:	f003 0303 	and.w	r3, r3, #3
 8002dde:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002de0:	4b85      	ldr	r3, [pc, #532]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de4:	091b      	lsrs	r3, r3, #4
 8002de6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002dec:	4b82      	ldr	r3, [pc, #520]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002df6:	4b80      	ldr	r3, [pc, #512]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dfa:	08db      	lsrs	r3, r3, #3
 8002dfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	fb02 f303 	mul.w	r3, r2, r3
 8002e06:	ee07 3a90 	vmov	s15, r3
 8002e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e0e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 80e1 	beq.w	8002fdc <HAL_RCC_GetSysClockFreq+0x2b8>
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	f000 8083 	beq.w	8002f28 <HAL_RCC_GetSysClockFreq+0x204>
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	f200 80a1 	bhi.w	8002f6c <HAL_RCC_GetSysClockFreq+0x248>
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <HAL_RCC_GetSysClockFreq+0x114>
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d056      	beq.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002e36:	e099      	b.n	8002f6c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e38:	4b6f      	ldr	r3, [pc, #444]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0320 	and.w	r3, r3, #32
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d02d      	beq.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e44:	4b6c      	ldr	r3, [pc, #432]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	08db      	lsrs	r3, r3, #3
 8002e4a:	f003 0303 	and.w	r3, r3, #3
 8002e4e:	4a6b      	ldr	r2, [pc, #428]	; (8002ffc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e50:	fa22 f303 	lsr.w	r3, r2, r3
 8002e54:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	ee07 3a90 	vmov	s15, r3
 8002e5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	ee07 3a90 	vmov	s15, r3
 8002e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e6e:	4b62      	ldr	r3, [pc, #392]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e76:	ee07 3a90 	vmov	s15, r3
 8002e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e82:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003008 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e9a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002e9e:	e087      	b.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	ee07 3a90 	vmov	s15, r3
 8002ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eaa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800300c <HAL_RCC_GetSysClockFreq+0x2e8>
 8002eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002eb2:	4b51      	ldr	r3, [pc, #324]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eba:	ee07 3a90 	vmov	s15, r3
 8002ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ec2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ec6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003008 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002eca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ed2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ede:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ee2:	e065      	b.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	ee07 3a90 	vmov	s15, r3
 8002eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003010 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ef6:	4b40      	ldr	r3, [pc, #256]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002efe:	ee07 3a90 	vmov	s15, r3
 8002f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f06:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f0a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003008 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f26:	e043      	b.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	ee07 3a90 	vmov	s15, r3
 8002f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f32:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003014 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f3a:	4b2f      	ldr	r3, [pc, #188]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f42:	ee07 3a90 	vmov	s15, r3
 8002f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f4e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003008 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f6a:	e021      	b.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	ee07 3a90 	vmov	s15, r3
 8002f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f76:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003010 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f7e:	4b1e      	ldr	r3, [pc, #120]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f86:	ee07 3a90 	vmov	s15, r3
 8002f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f92:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003008 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002faa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002fae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002fb0:	4b11      	ldr	r3, [pc, #68]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb4:	0a5b      	lsrs	r3, r3, #9
 8002fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fba:	3301      	adds	r3, #1
 8002fbc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	ee07 3a90 	vmov	s15, r3
 8002fc4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8002fcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fd4:	ee17 3a90 	vmov	r3, s15
 8002fd8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002fda:	e005      	b.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	61bb      	str	r3, [r7, #24]
      break;
 8002fe0:	e002      	b.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002fe2:	4b07      	ldr	r3, [pc, #28]	; (8003000 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002fe4:	61bb      	str	r3, [r7, #24]
      break;
 8002fe6:	bf00      	nop
  }

  return sysclockfreq;
 8002fe8:	69bb      	ldr	r3, [r7, #24]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3724      	adds	r7, #36	; 0x24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	58024400 	.word	0x58024400
 8002ffc:	03d09000 	.word	0x03d09000
 8003000:	003d0900 	.word	0x003d0900
 8003004:	007a1200 	.word	0x007a1200
 8003008:	46000000 	.word	0x46000000
 800300c:	4c742400 	.word	0x4c742400
 8003010:	4a742400 	.word	0x4a742400
 8003014:	4af42400 	.word	0x4af42400

08003018 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800301e:	f7ff fe81 	bl	8002d24 <HAL_RCC_GetSysClockFreq>
 8003022:	4602      	mov	r2, r0
 8003024:	4b10      	ldr	r3, [pc, #64]	; (8003068 <HAL_RCC_GetHCLKFreq+0x50>)
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	0a1b      	lsrs	r3, r3, #8
 800302a:	f003 030f 	and.w	r3, r3, #15
 800302e:	490f      	ldr	r1, [pc, #60]	; (800306c <HAL_RCC_GetHCLKFreq+0x54>)
 8003030:	5ccb      	ldrb	r3, [r1, r3]
 8003032:	f003 031f 	and.w	r3, r3, #31
 8003036:	fa22 f303 	lsr.w	r3, r2, r3
 800303a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800303c:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <HAL_RCC_GetHCLKFreq+0x50>)
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	f003 030f 	and.w	r3, r3, #15
 8003044:	4a09      	ldr	r2, [pc, #36]	; (800306c <HAL_RCC_GetHCLKFreq+0x54>)
 8003046:	5cd3      	ldrb	r3, [r2, r3]
 8003048:	f003 031f 	and.w	r3, r3, #31
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	fa22 f303 	lsr.w	r3, r2, r3
 8003052:	4a07      	ldr	r2, [pc, #28]	; (8003070 <HAL_RCC_GetHCLKFreq+0x58>)
 8003054:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003056:	4a07      	ldr	r2, [pc, #28]	; (8003074 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800305c:	4b04      	ldr	r3, [pc, #16]	; (8003070 <HAL_RCC_GetHCLKFreq+0x58>)
 800305e:	681b      	ldr	r3, [r3, #0]
}
 8003060:	4618      	mov	r0, r3
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	58024400 	.word	0x58024400
 800306c:	080079ec 	.word	0x080079ec
 8003070:	24000008 	.word	0x24000008
 8003074:	24000004 	.word	0x24000004

08003078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800307c:	f7ff ffcc 	bl	8003018 <HAL_RCC_GetHCLKFreq>
 8003080:	4602      	mov	r2, r0
 8003082:	4b06      	ldr	r3, [pc, #24]	; (800309c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	091b      	lsrs	r3, r3, #4
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	4904      	ldr	r1, [pc, #16]	; (80030a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800308e:	5ccb      	ldrb	r3, [r1, r3]
 8003090:	f003 031f 	and.w	r3, r3, #31
 8003094:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003098:	4618      	mov	r0, r3
 800309a:	bd80      	pop	{r7, pc}
 800309c:	58024400 	.word	0x58024400
 80030a0:	080079ec 	.word	0x080079ec

080030a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80030a8:	f7ff ffb6 	bl	8003018 <HAL_RCC_GetHCLKFreq>
 80030ac:	4602      	mov	r2, r0
 80030ae:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	0a1b      	lsrs	r3, r3, #8
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	4904      	ldr	r1, [pc, #16]	; (80030cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80030ba:	5ccb      	ldrb	r3, [r1, r3]
 80030bc:	f003 031f 	and.w	r3, r3, #31
 80030c0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	58024400 	.word	0x58024400
 80030cc:	080079ec 	.word	0x080079ec

080030d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030d4:	b0c8      	sub	sp, #288	; 0x120
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030dc:	2300      	movs	r3, #0
 80030de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030e2:	2300      	movs	r3, #0
 80030e4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80030f4:	2500      	movs	r5, #0
 80030f6:	ea54 0305 	orrs.w	r3, r4, r5
 80030fa:	d049      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80030fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003102:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003106:	d02f      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003108:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800310c:	d828      	bhi.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800310e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003112:	d01a      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003114:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003118:	d822      	bhi.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800311e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003122:	d007      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003124:	e01c      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003126:	4ba7      	ldr	r3, [pc, #668]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312a:	4aa6      	ldr	r2, [pc, #664]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800312c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003130:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003132:	e01a      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003134:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003138:	3308      	adds	r3, #8
 800313a:	2102      	movs	r1, #2
 800313c:	4618      	mov	r0, r3
 800313e:	f001 fc43 	bl	80049c8 <RCCEx_PLL2_Config>
 8003142:	4603      	mov	r3, r0
 8003144:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003148:	e00f      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800314a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800314e:	3328      	adds	r3, #40	; 0x28
 8003150:	2102      	movs	r1, #2
 8003152:	4618      	mov	r0, r3
 8003154:	f001 fcea 	bl	8004b2c <RCCEx_PLL3_Config>
 8003158:	4603      	mov	r3, r0
 800315a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800315e:	e004      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003166:	e000      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003168:	bf00      	nop
    }

    if (ret == HAL_OK)
 800316a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10a      	bne.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003172:	4b94      	ldr	r3, [pc, #592]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003176:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800317a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800317e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003180:	4a90      	ldr	r2, [pc, #576]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003182:	430b      	orrs	r3, r1
 8003184:	6513      	str	r3, [r2, #80]	; 0x50
 8003186:	e003      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003188:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800318c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003190:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003198:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800319c:	f04f 0900 	mov.w	r9, #0
 80031a0:	ea58 0309 	orrs.w	r3, r8, r9
 80031a4:	d047      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80031a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d82a      	bhi.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80031b0:	a201      	add	r2, pc, #4	; (adr r2, 80031b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80031b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b6:	bf00      	nop
 80031b8:	080031cd 	.word	0x080031cd
 80031bc:	080031db 	.word	0x080031db
 80031c0:	080031f1 	.word	0x080031f1
 80031c4:	0800320f 	.word	0x0800320f
 80031c8:	0800320f 	.word	0x0800320f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031cc:	4b7d      	ldr	r3, [pc, #500]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d0:	4a7c      	ldr	r2, [pc, #496]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031d8:	e01a      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031de:	3308      	adds	r3, #8
 80031e0:	2100      	movs	r1, #0
 80031e2:	4618      	mov	r0, r3
 80031e4:	f001 fbf0 	bl	80049c8 <RCCEx_PLL2_Config>
 80031e8:	4603      	mov	r3, r0
 80031ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031ee:	e00f      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80031f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031f4:	3328      	adds	r3, #40	; 0x28
 80031f6:	2100      	movs	r1, #0
 80031f8:	4618      	mov	r0, r3
 80031fa:	f001 fc97 	bl	8004b2c <RCCEx_PLL3_Config>
 80031fe:	4603      	mov	r3, r0
 8003200:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003204:	e004      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800320c:	e000      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800320e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003210:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10a      	bne.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003218:	4b6a      	ldr	r3, [pc, #424]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800321a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800321c:	f023 0107 	bic.w	r1, r3, #7
 8003220:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003226:	4a67      	ldr	r2, [pc, #412]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003228:	430b      	orrs	r3, r1
 800322a:	6513      	str	r3, [r2, #80]	; 0x50
 800322c:	e003      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800322e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003232:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003236:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800323a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800323e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003242:	f04f 0b00 	mov.w	fp, #0
 8003246:	ea5a 030b 	orrs.w	r3, sl, fp
 800324a:	d054      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800324c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003252:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003256:	d036      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003258:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800325c:	d82f      	bhi.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800325e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003262:	d032      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003268:	d829      	bhi.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800326a:	2bc0      	cmp	r3, #192	; 0xc0
 800326c:	d02f      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800326e:	2bc0      	cmp	r3, #192	; 0xc0
 8003270:	d825      	bhi.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003272:	2b80      	cmp	r3, #128	; 0x80
 8003274:	d018      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003276:	2b80      	cmp	r3, #128	; 0x80
 8003278:	d821      	bhi.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800327a:	2b00      	cmp	r3, #0
 800327c:	d002      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800327e:	2b40      	cmp	r3, #64	; 0x40
 8003280:	d007      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003282:	e01c      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003284:	4b4f      	ldr	r3, [pc, #316]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003288:	4a4e      	ldr	r2, [pc, #312]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800328a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800328e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003290:	e01e      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003292:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003296:	3308      	adds	r3, #8
 8003298:	2100      	movs	r1, #0
 800329a:	4618      	mov	r0, r3
 800329c:	f001 fb94 	bl	80049c8 <RCCEx_PLL2_Config>
 80032a0:	4603      	mov	r3, r0
 80032a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80032a6:	e013      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80032a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032ac:	3328      	adds	r3, #40	; 0x28
 80032ae:	2100      	movs	r1, #0
 80032b0:	4618      	mov	r0, r3
 80032b2:	f001 fc3b 	bl	8004b2c <RCCEx_PLL3_Config>
 80032b6:	4603      	mov	r3, r0
 80032b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80032bc:	e008      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80032c4:	e004      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80032c6:	bf00      	nop
 80032c8:	e002      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80032ca:	bf00      	nop
 80032cc:	e000      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80032ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10a      	bne.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80032d8:	4b3a      	ldr	r3, [pc, #232]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032dc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80032e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e6:	4a37      	ldr	r2, [pc, #220]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032e8:	430b      	orrs	r3, r1
 80032ea:	6513      	str	r3, [r2, #80]	; 0x50
 80032ec:	e003      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032f2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80032f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fe:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003302:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003306:	2300      	movs	r3, #0
 8003308:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800330c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003310:	460b      	mov	r3, r1
 8003312:	4313      	orrs	r3, r2
 8003314:	d05c      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8003316:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800331a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800331c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003320:	d03b      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003322:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003326:	d834      	bhi.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003328:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800332c:	d037      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800332e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003332:	d82e      	bhi.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003334:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003338:	d033      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800333a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800333e:	d828      	bhi.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003344:	d01a      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800334a:	d822      	bhi.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800334c:	2b00      	cmp	r3, #0
 800334e:	d003      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003354:	d007      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003356:	e01c      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003358:	4b1a      	ldr	r3, [pc, #104]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800335a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335c:	4a19      	ldr	r2, [pc, #100]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800335e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003362:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003364:	e01e      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003366:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800336a:	3308      	adds	r3, #8
 800336c:	2100      	movs	r1, #0
 800336e:	4618      	mov	r0, r3
 8003370:	f001 fb2a 	bl	80049c8 <RCCEx_PLL2_Config>
 8003374:	4603      	mov	r3, r0
 8003376:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800337a:	e013      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800337c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003380:	3328      	adds	r3, #40	; 0x28
 8003382:	2100      	movs	r1, #0
 8003384:	4618      	mov	r0, r3
 8003386:	f001 fbd1 	bl	8004b2c <RCCEx_PLL3_Config>
 800338a:	4603      	mov	r3, r0
 800338c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003390:	e008      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003398:	e004      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800339a:	bf00      	nop
 800339c:	e002      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800339e:	bf00      	nop
 80033a0:	e000      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80033a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10d      	bne.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80033ac:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033b0:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80033b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ba:	4a02      	ldr	r2, [pc, #8]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033bc:	430b      	orrs	r3, r1
 80033be:	6513      	str	r3, [r2, #80]	; 0x50
 80033c0:	e006      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80033c2:	bf00      	nop
 80033c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033cc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80033d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80033dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80033e0:	2300      	movs	r3, #0
 80033e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80033e6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80033ea:	460b      	mov	r3, r1
 80033ec:	4313      	orrs	r3, r2
 80033ee:	d03a      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80033f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f6:	2b30      	cmp	r3, #48	; 0x30
 80033f8:	d01f      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80033fa:	2b30      	cmp	r3, #48	; 0x30
 80033fc:	d819      	bhi.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80033fe:	2b20      	cmp	r3, #32
 8003400:	d00c      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003402:	2b20      	cmp	r3, #32
 8003404:	d815      	bhi.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003406:	2b00      	cmp	r3, #0
 8003408:	d019      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800340a:	2b10      	cmp	r3, #16
 800340c:	d111      	bne.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800340e:	4bae      	ldr	r3, [pc, #696]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003412:	4aad      	ldr	r2, [pc, #692]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003418:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800341a:	e011      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800341c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003420:	3308      	adds	r3, #8
 8003422:	2102      	movs	r1, #2
 8003424:	4618      	mov	r0, r3
 8003426:	f001 facf 	bl	80049c8 <RCCEx_PLL2_Config>
 800342a:	4603      	mov	r3, r0
 800342c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003430:	e006      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003438:	e002      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800343a:	bf00      	nop
 800343c:	e000      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800343e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003440:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10a      	bne.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003448:	4b9f      	ldr	r3, [pc, #636]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800344a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800344c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003450:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003456:	4a9c      	ldr	r2, [pc, #624]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003458:	430b      	orrs	r3, r1
 800345a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800345c:	e003      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800345e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003462:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003466:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800346a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800346e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003472:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003476:	2300      	movs	r3, #0
 8003478:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800347c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003480:	460b      	mov	r3, r1
 8003482:	4313      	orrs	r3, r2
 8003484:	d051      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003486:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800348a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800348c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003490:	d035      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003492:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003496:	d82e      	bhi.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003498:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800349c:	d031      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800349e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034a2:	d828      	bhi.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80034a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034a8:	d01a      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80034aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034ae:	d822      	bhi.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d003      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80034b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034b8:	d007      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80034ba:	e01c      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034bc:	4b82      	ldr	r3, [pc, #520]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c0:	4a81      	ldr	r2, [pc, #516]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80034c8:	e01c      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034ce:	3308      	adds	r3, #8
 80034d0:	2100      	movs	r1, #0
 80034d2:	4618      	mov	r0, r3
 80034d4:	f001 fa78 	bl	80049c8 <RCCEx_PLL2_Config>
 80034d8:	4603      	mov	r3, r0
 80034da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80034de:	e011      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034e4:	3328      	adds	r3, #40	; 0x28
 80034e6:	2100      	movs	r1, #0
 80034e8:	4618      	mov	r0, r3
 80034ea:	f001 fb1f 	bl	8004b2c <RCCEx_PLL3_Config>
 80034ee:	4603      	mov	r3, r0
 80034f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80034f4:	e006      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80034fc:	e002      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80034fe:	bf00      	nop
 8003500:	e000      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003502:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003504:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10a      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800350c:	4b6e      	ldr	r3, [pc, #440]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800350e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003510:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003514:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003518:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800351a:	4a6b      	ldr	r2, [pc, #428]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800351c:	430b      	orrs	r3, r1
 800351e:	6513      	str	r3, [r2, #80]	; 0x50
 8003520:	e003      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003522:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003526:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800352a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800352e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003532:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003536:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800353a:	2300      	movs	r3, #0
 800353c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003540:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003544:	460b      	mov	r3, r1
 8003546:	4313      	orrs	r3, r2
 8003548:	d053      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800354a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800354e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003550:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003554:	d033      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003556:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800355a:	d82c      	bhi.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800355c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003560:	d02f      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003562:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003566:	d826      	bhi.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003568:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800356c:	d02b      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800356e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003572:	d820      	bhi.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003574:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003578:	d012      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800357a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800357e:	d81a      	bhi.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003580:	2b00      	cmp	r3, #0
 8003582:	d022      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003588:	d115      	bne.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800358a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800358e:	3308      	adds	r3, #8
 8003590:	2101      	movs	r1, #1
 8003592:	4618      	mov	r0, r3
 8003594:	f001 fa18 	bl	80049c8 <RCCEx_PLL2_Config>
 8003598:	4603      	mov	r3, r0
 800359a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800359e:	e015      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80035a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035a4:	3328      	adds	r3, #40	; 0x28
 80035a6:	2101      	movs	r1, #1
 80035a8:	4618      	mov	r0, r3
 80035aa:	f001 fabf 	bl	8004b2c <RCCEx_PLL3_Config>
 80035ae:	4603      	mov	r3, r0
 80035b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80035b4:	e00a      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80035bc:	e006      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80035be:	bf00      	nop
 80035c0:	e004      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80035c2:	bf00      	nop
 80035c4:	e002      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80035c6:	bf00      	nop
 80035c8:	e000      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80035ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10a      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80035d4:	4b3c      	ldr	r3, [pc, #240]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80035dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035e2:	4a39      	ldr	r2, [pc, #228]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035e4:	430b      	orrs	r3, r1
 80035e6:	6513      	str	r3, [r2, #80]	; 0x50
 80035e8:	e003      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035ee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80035f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fa:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80035fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003602:	2300      	movs	r3, #0
 8003604:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003608:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800360c:	460b      	mov	r3, r1
 800360e:	4313      	orrs	r3, r2
 8003610:	d060      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003612:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003616:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800361a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800361e:	d039      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8003620:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003624:	d832      	bhi.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003626:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800362a:	d035      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800362c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003630:	d82c      	bhi.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003636:	d031      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800363c:	d826      	bhi.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800363e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003642:	d02d      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003644:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003648:	d820      	bhi.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800364a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800364e:	d012      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003650:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003654:	d81a      	bhi.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003656:	2b00      	cmp	r3, #0
 8003658:	d024      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800365a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800365e:	d115      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003660:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003664:	3308      	adds	r3, #8
 8003666:	2101      	movs	r1, #1
 8003668:	4618      	mov	r0, r3
 800366a:	f001 f9ad 	bl	80049c8 <RCCEx_PLL2_Config>
 800366e:	4603      	mov	r3, r0
 8003670:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003674:	e017      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003676:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800367a:	3328      	adds	r3, #40	; 0x28
 800367c:	2101      	movs	r1, #1
 800367e:	4618      	mov	r0, r3
 8003680:	f001 fa54 	bl	8004b2c <RCCEx_PLL3_Config>
 8003684:	4603      	mov	r3, r0
 8003686:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800368a:	e00c      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003692:	e008      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003694:	bf00      	nop
 8003696:	e006      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003698:	bf00      	nop
 800369a:	e004      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800369c:	bf00      	nop
 800369e:	e002      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80036a0:	bf00      	nop
 80036a2:	e000      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80036a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036a6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10e      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80036ae:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80036b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80036be:	4a02      	ldr	r2, [pc, #8]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036c0:	430b      	orrs	r3, r1
 80036c2:	6593      	str	r3, [r2, #88]	; 0x58
 80036c4:	e006      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80036c6:	bf00      	nop
 80036c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036d0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80036d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036dc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80036e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80036e4:	2300      	movs	r3, #0
 80036e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80036ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80036ee:	460b      	mov	r3, r1
 80036f0:	4313      	orrs	r3, r2
 80036f2:	d037      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80036f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036fe:	d00e      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003700:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003704:	d816      	bhi.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003706:	2b00      	cmp	r3, #0
 8003708:	d018      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800370a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800370e:	d111      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003710:	4bc4      	ldr	r3, [pc, #784]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003714:	4ac3      	ldr	r2, [pc, #780]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800371a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800371c:	e00f      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800371e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003722:	3308      	adds	r3, #8
 8003724:	2101      	movs	r1, #1
 8003726:	4618      	mov	r0, r3
 8003728:	f001 f94e 	bl	80049c8 <RCCEx_PLL2_Config>
 800372c:	4603      	mov	r3, r0
 800372e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003732:	e004      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800373a:	e000      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800373c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800373e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10a      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003746:	4bb7      	ldr	r3, [pc, #732]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800374a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800374e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003752:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003754:	4ab3      	ldr	r2, [pc, #716]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003756:	430b      	orrs	r3, r1
 8003758:	6513      	str	r3, [r2, #80]	; 0x50
 800375a:	e003      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800375c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003760:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003764:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003770:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003774:	2300      	movs	r3, #0
 8003776:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800377a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800377e:	460b      	mov	r3, r1
 8003780:	4313      	orrs	r3, r2
 8003782:	d039      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003784:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800378a:	2b03      	cmp	r3, #3
 800378c:	d81c      	bhi.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800378e:	a201      	add	r2, pc, #4	; (adr r2, 8003794 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003794:	080037d1 	.word	0x080037d1
 8003798:	080037a5 	.word	0x080037a5
 800379c:	080037b3 	.word	0x080037b3
 80037a0:	080037d1 	.word	0x080037d1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037a4:	4b9f      	ldr	r3, [pc, #636]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	4a9e      	ldr	r2, [pc, #632]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80037b0:	e00f      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037b6:	3308      	adds	r3, #8
 80037b8:	2102      	movs	r1, #2
 80037ba:	4618      	mov	r0, r3
 80037bc:	f001 f904 	bl	80049c8 <RCCEx_PLL2_Config>
 80037c0:	4603      	mov	r3, r0
 80037c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80037c6:	e004      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80037ce:	e000      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80037d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037d2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10a      	bne.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80037da:	4b92      	ldr	r3, [pc, #584]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037de:	f023 0103 	bic.w	r1, r3, #3
 80037e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e8:	4a8e      	ldr	r2, [pc, #568]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037ea:	430b      	orrs	r3, r1
 80037ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037ee:	e003      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003800:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003804:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003808:	2300      	movs	r3, #0
 800380a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800380e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003812:	460b      	mov	r3, r1
 8003814:	4313      	orrs	r3, r2
 8003816:	f000 8099 	beq.w	800394c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800381a:	4b83      	ldr	r3, [pc, #524]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a82      	ldr	r2, [pc, #520]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003824:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003826:	f7fd fbd7 	bl	8000fd8 <HAL_GetTick>
 800382a:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800382e:	e00b      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003830:	f7fd fbd2 	bl	8000fd8 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b64      	cmp	r3, #100	; 0x64
 800383e:	d903      	bls.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003846:	e005      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003848:	4b77      	ldr	r3, [pc, #476]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0ed      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003854:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003858:	2b00      	cmp	r3, #0
 800385a:	d173      	bne.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800385c:	4b71      	ldr	r3, [pc, #452]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800385e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003860:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003864:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003868:	4053      	eors	r3, r2
 800386a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800386e:	2b00      	cmp	r3, #0
 8003870:	d015      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003872:	4b6c      	ldr	r3, [pc, #432]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003876:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800387a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800387e:	4b69      	ldr	r3, [pc, #420]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003882:	4a68      	ldr	r2, [pc, #416]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003888:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800388a:	4b66      	ldr	r3, [pc, #408]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800388c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388e:	4a65      	ldr	r2, [pc, #404]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003890:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003894:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003896:	4a63      	ldr	r2, [pc, #396]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800389c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800389e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80038a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038aa:	d118      	bne.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ac:	f7fd fb94 	bl	8000fd8 <HAL_GetTick>
 80038b0:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038b4:	e00d      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038b6:	f7fd fb8f 	bl	8000fd8 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80038c0:	1ad2      	subs	r2, r2, r3
 80038c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d903      	bls.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 80038d0:	e005      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038d2:	4b54      	ldr	r3, [pc, #336]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0eb      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80038de:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d129      	bne.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80038ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038f6:	d10e      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80038f8:	4b4a      	ldr	r3, [pc, #296]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003900:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003904:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003908:	091a      	lsrs	r2, r3, #4
 800390a:	4b48      	ldr	r3, [pc, #288]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800390c:	4013      	ands	r3, r2
 800390e:	4a45      	ldr	r2, [pc, #276]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003910:	430b      	orrs	r3, r1
 8003912:	6113      	str	r3, [r2, #16]
 8003914:	e005      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003916:	4b43      	ldr	r3, [pc, #268]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	4a42      	ldr	r2, [pc, #264]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800391c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003920:	6113      	str	r3, [r2, #16]
 8003922:	4b40      	ldr	r3, [pc, #256]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003924:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003926:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800392a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800392e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003932:	4a3c      	ldr	r2, [pc, #240]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003934:	430b      	orrs	r3, r1
 8003936:	6713      	str	r3, [r2, #112]	; 0x70
 8003938:	e008      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800393a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800393e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8003942:	e003      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003944:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003948:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800394c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003954:	f002 0301 	and.w	r3, r2, #1
 8003958:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800395c:	2300      	movs	r3, #0
 800395e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003962:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003966:	460b      	mov	r3, r1
 8003968:	4313      	orrs	r3, r2
 800396a:	f000 8090 	beq.w	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800396e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003972:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003976:	2b28      	cmp	r3, #40	; 0x28
 8003978:	d870      	bhi.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800397a:	a201      	add	r2, pc, #4	; (adr r2, 8003980 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800397c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003980:	08003a65 	.word	0x08003a65
 8003984:	08003a5d 	.word	0x08003a5d
 8003988:	08003a5d 	.word	0x08003a5d
 800398c:	08003a5d 	.word	0x08003a5d
 8003990:	08003a5d 	.word	0x08003a5d
 8003994:	08003a5d 	.word	0x08003a5d
 8003998:	08003a5d 	.word	0x08003a5d
 800399c:	08003a5d 	.word	0x08003a5d
 80039a0:	08003a31 	.word	0x08003a31
 80039a4:	08003a5d 	.word	0x08003a5d
 80039a8:	08003a5d 	.word	0x08003a5d
 80039ac:	08003a5d 	.word	0x08003a5d
 80039b0:	08003a5d 	.word	0x08003a5d
 80039b4:	08003a5d 	.word	0x08003a5d
 80039b8:	08003a5d 	.word	0x08003a5d
 80039bc:	08003a5d 	.word	0x08003a5d
 80039c0:	08003a47 	.word	0x08003a47
 80039c4:	08003a5d 	.word	0x08003a5d
 80039c8:	08003a5d 	.word	0x08003a5d
 80039cc:	08003a5d 	.word	0x08003a5d
 80039d0:	08003a5d 	.word	0x08003a5d
 80039d4:	08003a5d 	.word	0x08003a5d
 80039d8:	08003a5d 	.word	0x08003a5d
 80039dc:	08003a5d 	.word	0x08003a5d
 80039e0:	08003a65 	.word	0x08003a65
 80039e4:	08003a5d 	.word	0x08003a5d
 80039e8:	08003a5d 	.word	0x08003a5d
 80039ec:	08003a5d 	.word	0x08003a5d
 80039f0:	08003a5d 	.word	0x08003a5d
 80039f4:	08003a5d 	.word	0x08003a5d
 80039f8:	08003a5d 	.word	0x08003a5d
 80039fc:	08003a5d 	.word	0x08003a5d
 8003a00:	08003a65 	.word	0x08003a65
 8003a04:	08003a5d 	.word	0x08003a5d
 8003a08:	08003a5d 	.word	0x08003a5d
 8003a0c:	08003a5d 	.word	0x08003a5d
 8003a10:	08003a5d 	.word	0x08003a5d
 8003a14:	08003a5d 	.word	0x08003a5d
 8003a18:	08003a5d 	.word	0x08003a5d
 8003a1c:	08003a5d 	.word	0x08003a5d
 8003a20:	08003a65 	.word	0x08003a65
 8003a24:	58024400 	.word	0x58024400
 8003a28:	58024800 	.word	0x58024800
 8003a2c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a34:	3308      	adds	r3, #8
 8003a36:	2101      	movs	r1, #1
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f000 ffc5 	bl	80049c8 <RCCEx_PLL2_Config>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003a44:	e00f      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a4a:	3328      	adds	r3, #40	; 0x28
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f001 f86c 	bl	8004b2c <RCCEx_PLL3_Config>
 8003a54:	4603      	mov	r3, r0
 8003a56:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003a5a:	e004      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003a62:	e000      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003a64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a66:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10b      	bne.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003a6e:	4bc0      	ldr	r3, [pc, #768]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a72:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003a76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a7e:	4abc      	ldr	r2, [pc, #752]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003a80:	430b      	orrs	r3, r1
 8003a82:	6553      	str	r3, [r2, #84]	; 0x54
 8003a84:	e003      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a86:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a8a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003a8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a96:	f002 0302 	and.w	r3, r2, #2
 8003a9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003aa4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	d043      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003aae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ab6:	2b05      	cmp	r3, #5
 8003ab8:	d824      	bhi.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8003aba:	a201      	add	r2, pc, #4	; (adr r2, 8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac0:	08003b0d 	.word	0x08003b0d
 8003ac4:	08003ad9 	.word	0x08003ad9
 8003ac8:	08003aef 	.word	0x08003aef
 8003acc:	08003b0d 	.word	0x08003b0d
 8003ad0:	08003b0d 	.word	0x08003b0d
 8003ad4:	08003b0d 	.word	0x08003b0d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ad8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003adc:	3308      	adds	r3, #8
 8003ade:	2101      	movs	r1, #1
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 ff71 	bl	80049c8 <RCCEx_PLL2_Config>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003aec:	e00f      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003aee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003af2:	3328      	adds	r3, #40	; 0x28
 8003af4:	2101      	movs	r1, #1
 8003af6:	4618      	mov	r0, r3
 8003af8:	f001 f818 	bl	8004b2c <RCCEx_PLL3_Config>
 8003afc:	4603      	mov	r3, r0
 8003afe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003b02:	e004      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003b0a:	e000      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8003b0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b0e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10b      	bne.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003b16:	4b96      	ldr	r3, [pc, #600]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1a:	f023 0107 	bic.w	r1, r3, #7
 8003b1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b26:	4a92      	ldr	r2, [pc, #584]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003b28:	430b      	orrs	r3, r1
 8003b2a:	6553      	str	r3, [r2, #84]	; 0x54
 8003b2c:	e003      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b2e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b32:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3e:	f002 0304 	and.w	r3, r2, #4
 8003b42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b46:	2300      	movs	r3, #0
 8003b48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b4c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003b50:	460b      	mov	r3, r1
 8003b52:	4313      	orrs	r3, r2
 8003b54:	d043      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003b56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b5e:	2b05      	cmp	r3, #5
 8003b60:	d824      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003b62:	a201      	add	r2, pc, #4	; (adr r2, 8003b68 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8003b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b68:	08003bb5 	.word	0x08003bb5
 8003b6c:	08003b81 	.word	0x08003b81
 8003b70:	08003b97 	.word	0x08003b97
 8003b74:	08003bb5 	.word	0x08003bb5
 8003b78:	08003bb5 	.word	0x08003bb5
 8003b7c:	08003bb5 	.word	0x08003bb5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b84:	3308      	adds	r3, #8
 8003b86:	2101      	movs	r1, #1
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 ff1d 	bl	80049c8 <RCCEx_PLL2_Config>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003b94:	e00f      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b9a:	3328      	adds	r3, #40	; 0x28
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 ffc4 	bl	8004b2c <RCCEx_PLL3_Config>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003baa:	e004      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003bb2:	e000      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003bb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bb6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10b      	bne.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bbe:	4b6c      	ldr	r3, [pc, #432]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc2:	f023 0107 	bic.w	r1, r3, #7
 8003bc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bce:	4a68      	ldr	r2, [pc, #416]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003bd0:	430b      	orrs	r3, r1
 8003bd2:	6593      	str	r3, [r2, #88]	; 0x58
 8003bd4:	e003      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bda:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003bde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be6:	f002 0320 	and.w	r3, r2, #32
 8003bea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003bee:	2300      	movs	r3, #0
 8003bf0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003bf4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	d055      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003bfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c0a:	d033      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003c0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c10:	d82c      	bhi.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c16:	d02f      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c1c:	d826      	bhi.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003c1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c22:	d02b      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003c24:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c28:	d820      	bhi.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003c2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c2e:	d012      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003c30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c34:	d81a      	bhi.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d022      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003c3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c3e:	d115      	bne.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c44:	3308      	adds	r3, #8
 8003c46:	2100      	movs	r1, #0
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 febd 	bl	80049c8 <RCCEx_PLL2_Config>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003c54:	e015      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c5a:	3328      	adds	r3, #40	; 0x28
 8003c5c:	2102      	movs	r1, #2
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 ff64 	bl	8004b2c <RCCEx_PLL3_Config>
 8003c64:	4603      	mov	r3, r0
 8003c66:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003c6a:	e00a      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003c72:	e006      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003c74:	bf00      	nop
 8003c76:	e004      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003c78:	bf00      	nop
 8003c7a:	e002      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003c7c:	bf00      	nop
 8003c7e:	e000      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003c80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c82:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10b      	bne.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c8a:	4b39      	ldr	r3, [pc, #228]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003c92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c9a:	4a35      	ldr	r2, [pc, #212]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003c9c:	430b      	orrs	r3, r1
 8003c9e:	6553      	str	r3, [r2, #84]	; 0x54
 8003ca0:	e003      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ca6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003cb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003cba:	2300      	movs	r3, #0
 8003cbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003cc0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	d058      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003cca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003cd2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003cd6:	d033      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003cd8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003cdc:	d82c      	bhi.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ce2:	d02f      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ce8:	d826      	bhi.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003cea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cee:	d02b      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003cf0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cf4:	d820      	bhi.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003cf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cfa:	d012      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003cfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d00:	d81a      	bhi.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d022      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8003d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d0a:	d115      	bne.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d10:	3308      	adds	r3, #8
 8003d12:	2100      	movs	r1, #0
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 fe57 	bl	80049c8 <RCCEx_PLL2_Config>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003d20:	e015      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d26:	3328      	adds	r3, #40	; 0x28
 8003d28:	2102      	movs	r1, #2
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 fefe 	bl	8004b2c <RCCEx_PLL3_Config>
 8003d30:	4603      	mov	r3, r0
 8003d32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003d36:	e00a      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003d3e:	e006      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003d40:	bf00      	nop
 8003d42:	e004      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003d44:	bf00      	nop
 8003d46:	e002      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003d48:	bf00      	nop
 8003d4a:	e000      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003d4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d4e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10e      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d56:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003d5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003d66:	4a02      	ldr	r2, [pc, #8]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003d68:	430b      	orrs	r3, r1
 8003d6a:	6593      	str	r3, [r2, #88]	; 0x58
 8003d6c:	e006      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8003d6e:	bf00      	nop
 8003d70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d74:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d78:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003d7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d84:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003d88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d92:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003d96:	460b      	mov	r3, r1
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	d055      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003d9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003da0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003da4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003da8:	d033      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003daa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003dae:	d82c      	bhi.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003db0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003db4:	d02f      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003db6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dba:	d826      	bhi.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003dbc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003dc0:	d02b      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003dc2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003dc6:	d820      	bhi.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003dc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dcc:	d012      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003dce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dd2:	d81a      	bhi.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d022      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ddc:	d115      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003dde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003de2:	3308      	adds	r3, #8
 8003de4:	2100      	movs	r1, #0
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 fdee 	bl	80049c8 <RCCEx_PLL2_Config>
 8003dec:	4603      	mov	r3, r0
 8003dee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003df2:	e015      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003df4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003df8:	3328      	adds	r3, #40	; 0x28
 8003dfa:	2102      	movs	r1, #2
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 fe95 	bl	8004b2c <RCCEx_PLL3_Config>
 8003e02:	4603      	mov	r3, r0
 8003e04:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003e08:	e00a      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003e10:	e006      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003e12:	bf00      	nop
 8003e14:	e004      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003e16:	bf00      	nop
 8003e18:	e002      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003e1a:	bf00      	nop
 8003e1c:	e000      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003e1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e20:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10b      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003e28:	4ba1      	ldr	r3, [pc, #644]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003e30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e34:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e38:	4a9d      	ldr	r2, [pc, #628]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003e3a:	430b      	orrs	r3, r1
 8003e3c:	6593      	str	r3, [r2, #88]	; 0x58
 8003e3e:	e003      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e44:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003e48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e50:	f002 0308 	and.w	r3, r2, #8
 8003e54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e58:	2300      	movs	r3, #0
 8003e5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e5e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003e62:	460b      	mov	r3, r1
 8003e64:	4313      	orrs	r3, r2
 8003e66:	d01e      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003e68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e74:	d10c      	bne.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e7a:	3328      	adds	r3, #40	; 0x28
 8003e7c:	2102      	movs	r1, #2
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 fe54 	bl	8004b2c <RCCEx_PLL3_Config>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d002      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003e90:	4b87      	ldr	r3, [pc, #540]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e94:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ea0:	4a83      	ldr	r2, [pc, #524]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ea2:	430b      	orrs	r3, r1
 8003ea4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ea6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eae:	f002 0310 	and.w	r3, r2, #16
 8003eb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003ebc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	d01e      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003ec6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003ece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ed2:	d10c      	bne.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003ed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ed8:	3328      	adds	r3, #40	; 0x28
 8003eda:	2102      	movs	r1, #2
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 fe25 	bl	8004b2c <RCCEx_PLL3_Config>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d002      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003eee:	4b70      	ldr	r3, [pc, #448]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ef6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003efa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003efe:	4a6c      	ldr	r2, [pc, #432]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003f00:	430b      	orrs	r3, r1
 8003f02:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003f10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f14:	2300      	movs	r3, #0
 8003f16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f1a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003f1e:	460b      	mov	r3, r1
 8003f20:	4313      	orrs	r3, r2
 8003f22:	d03e      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003f24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f28:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003f2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f30:	d022      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8003f32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f36:	d81b      	bhi.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8003f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f40:	d00b      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8003f42:	e015      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f48:	3308      	adds	r3, #8
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 fd3b 	bl	80049c8 <RCCEx_PLL2_Config>
 8003f52:	4603      	mov	r3, r0
 8003f54:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003f58:	e00f      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f5e:	3328      	adds	r3, #40	; 0x28
 8003f60:	2102      	movs	r1, #2
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 fde2 	bl	8004b2c <RCCEx_PLL3_Config>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003f6e:	e004      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003f76:	e000      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8003f78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f7a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10b      	bne.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f82:	4b4b      	ldr	r3, [pc, #300]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f86:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003f8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003f92:	4a47      	ldr	r2, [pc, #284]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003f94:	430b      	orrs	r3, r1
 8003f96:	6593      	str	r3, [r2, #88]	; 0x58
 8003f98:	e003      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f9a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f9e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003fa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003faa:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003fae:	67bb      	str	r3, [r7, #120]	; 0x78
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003fb4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003fb8:	460b      	mov	r3, r1
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	d03b      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003fbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003fca:	d01f      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8003fcc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003fd0:	d818      	bhi.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003fd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fd6:	d003      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8003fd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fdc:	d007      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8003fde:	e011      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fe0:	4b33      	ldr	r3, [pc, #204]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe4:	4a32      	ldr	r2, [pc, #200]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003fe6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003fec:	e00f      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ff2:	3328      	adds	r3, #40	; 0x28
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 fd98 	bl	8004b2c <RCCEx_PLL3_Config>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004002:	e004      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800400a:	e000      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800400c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800400e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10b      	bne.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004016:	4b26      	ldr	r3, [pc, #152]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800401e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004026:	4a22      	ldr	r2, [pc, #136]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004028:	430b      	orrs	r3, r1
 800402a:	6553      	str	r3, [r2, #84]	; 0x54
 800402c:	e003      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800402e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004032:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004036:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800403a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004042:	673b      	str	r3, [r7, #112]	; 0x70
 8004044:	2300      	movs	r3, #0
 8004046:	677b      	str	r3, [r7, #116]	; 0x74
 8004048:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800404c:	460b      	mov	r3, r1
 800404e:	4313      	orrs	r3, r2
 8004050:	d034      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004052:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004058:	2b00      	cmp	r3, #0
 800405a:	d003      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800405c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004060:	d007      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004062:	e011      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004064:	4b12      	ldr	r3, [pc, #72]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004068:	4a11      	ldr	r2, [pc, #68]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800406a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800406e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004070:	e00e      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004072:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004076:	3308      	adds	r3, #8
 8004078:	2102      	movs	r1, #2
 800407a:	4618      	mov	r0, r3
 800407c:	f000 fca4 	bl	80049c8 <RCCEx_PLL2_Config>
 8004080:	4603      	mov	r3, r0
 8004082:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004086:	e003      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800408e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004090:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10d      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004098:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800409a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800409c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040a6:	4a02      	ldr	r2, [pc, #8]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80040a8:	430b      	orrs	r3, r1
 80040aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040ac:	e006      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80040ae:	bf00      	nop
 80040b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040b8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80040c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80040ca:	2300      	movs	r3, #0
 80040cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040ce:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80040d2:	460b      	mov	r3, r1
 80040d4:	4313      	orrs	r3, r2
 80040d6:	d00c      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040dc:	3328      	adds	r3, #40	; 0x28
 80040de:	2102      	movs	r1, #2
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 fd23 	bl	8004b2c <RCCEx_PLL3_Config>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d002      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80040f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fa:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80040fe:	663b      	str	r3, [r7, #96]	; 0x60
 8004100:	2300      	movs	r3, #0
 8004102:	667b      	str	r3, [r7, #100]	; 0x64
 8004104:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004108:	460b      	mov	r3, r1
 800410a:	4313      	orrs	r3, r2
 800410c:	d038      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800410e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004116:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800411a:	d018      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800411c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004120:	d811      	bhi.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004122:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004126:	d014      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800412c:	d80b      	bhi.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800412e:	2b00      	cmp	r3, #0
 8004130:	d011      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004136:	d106      	bne.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004138:	4bc3      	ldr	r3, [pc, #780]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800413a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413c:	4ac2      	ldr	r2, [pc, #776]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800413e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004142:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004144:	e008      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800414c:	e004      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800414e:	bf00      	nop
 8004150:	e002      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004152:	bf00      	nop
 8004154:	e000      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004156:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004158:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10b      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004160:	4bb9      	ldr	r3, [pc, #740]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004164:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004168:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800416c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004170:	4ab5      	ldr	r2, [pc, #724]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004172:	430b      	orrs	r3, r1
 8004174:	6553      	str	r3, [r2, #84]	; 0x54
 8004176:	e003      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004178:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800417c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004180:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004188:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800418c:	65bb      	str	r3, [r7, #88]	; 0x58
 800418e:	2300      	movs	r3, #0
 8004190:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004192:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004196:	460b      	mov	r3, r1
 8004198:	4313      	orrs	r3, r2
 800419a:	d009      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800419c:	4baa      	ldr	r3, [pc, #680]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800419e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80041a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041aa:	4aa7      	ldr	r2, [pc, #668]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80041ac:	430b      	orrs	r3, r1
 80041ae:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b8:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80041bc:	653b      	str	r3, [r7, #80]	; 0x50
 80041be:	2300      	movs	r3, #0
 80041c0:	657b      	str	r3, [r7, #84]	; 0x54
 80041c2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80041c6:	460b      	mov	r3, r1
 80041c8:	4313      	orrs	r3, r2
 80041ca:	d009      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041cc:	4b9e      	ldr	r3, [pc, #632]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80041ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041d0:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80041d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041da:	4a9b      	ldr	r2, [pc, #620]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80041dc:	430b      	orrs	r3, r1
 80041de:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80041e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80041ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80041ee:	2300      	movs	r3, #0
 80041f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041f2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80041f6:	460b      	mov	r3, r1
 80041f8:	4313      	orrs	r3, r2
 80041fa:	d009      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80041fc:	4b92      	ldr	r3, [pc, #584]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80041fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004200:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8004204:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800420a:	4a8f      	ldr	r2, [pc, #572]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800420c:	430b      	orrs	r3, r1
 800420e:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004210:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004218:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800421c:	643b      	str	r3, [r7, #64]	; 0x40
 800421e:	2300      	movs	r3, #0
 8004220:	647b      	str	r3, [r7, #68]	; 0x44
 8004222:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004226:	460b      	mov	r3, r1
 8004228:	4313      	orrs	r3, r2
 800422a:	d00e      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800422c:	4b86      	ldr	r3, [pc, #536]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	4a85      	ldr	r2, [pc, #532]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004232:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004236:	6113      	str	r3, [r2, #16]
 8004238:	4b83      	ldr	r3, [pc, #524]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800423a:	6919      	ldr	r1, [r3, #16]
 800423c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004240:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004244:	4a80      	ldr	r2, [pc, #512]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004246:	430b      	orrs	r3, r1
 8004248:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800424a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800424e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004252:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004256:	63bb      	str	r3, [r7, #56]	; 0x38
 8004258:	2300      	movs	r3, #0
 800425a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800425c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004260:	460b      	mov	r3, r1
 8004262:	4313      	orrs	r3, r2
 8004264:	d009      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004266:	4b78      	ldr	r3, [pc, #480]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800426a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800426e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004274:	4a74      	ldr	r2, [pc, #464]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004276:	430b      	orrs	r3, r1
 8004278:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800427a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800427e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004282:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004286:	633b      	str	r3, [r7, #48]	; 0x30
 8004288:	2300      	movs	r3, #0
 800428a:	637b      	str	r3, [r7, #52]	; 0x34
 800428c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004290:	460b      	mov	r3, r1
 8004292:	4313      	orrs	r3, r2
 8004294:	d00a      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004296:	4b6c      	ldr	r3, [pc, #432]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800429a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800429e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042a6:	4a68      	ldr	r2, [pc, #416]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80042a8:	430b      	orrs	r3, r1
 80042aa:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80042ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b4:	2100      	movs	r1, #0
 80042b6:	62b9      	str	r1, [r7, #40]	; 0x28
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042be:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80042c2:	460b      	mov	r3, r1
 80042c4:	4313      	orrs	r3, r2
 80042c6:	d011      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042cc:	3308      	adds	r3, #8
 80042ce:	2100      	movs	r1, #0
 80042d0:	4618      	mov	r0, r3
 80042d2:	f000 fb79 	bl	80049c8 <RCCEx_PLL2_Config>
 80042d6:	4603      	mov	r3, r0
 80042d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80042dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042e8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80042ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f4:	2100      	movs	r1, #0
 80042f6:	6239      	str	r1, [r7, #32]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	627b      	str	r3, [r7, #36]	; 0x24
 80042fe:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004302:	460b      	mov	r3, r1
 8004304:	4313      	orrs	r3, r2
 8004306:	d011      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004308:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800430c:	3308      	adds	r3, #8
 800430e:	2101      	movs	r1, #1
 8004310:	4618      	mov	r0, r3
 8004312:	f000 fb59 	bl	80049c8 <RCCEx_PLL2_Config>
 8004316:	4603      	mov	r3, r0
 8004318:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800431c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004320:	2b00      	cmp	r3, #0
 8004322:	d003      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004324:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004328:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800432c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004334:	2100      	movs	r1, #0
 8004336:	61b9      	str	r1, [r7, #24]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	61fb      	str	r3, [r7, #28]
 800433e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004342:	460b      	mov	r3, r1
 8004344:	4313      	orrs	r3, r2
 8004346:	d011      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004348:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800434c:	3308      	adds	r3, #8
 800434e:	2102      	movs	r1, #2
 8004350:	4618      	mov	r0, r3
 8004352:	f000 fb39 	bl	80049c8 <RCCEx_PLL2_Config>
 8004356:	4603      	mov	r3, r0
 8004358:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800435c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004360:	2b00      	cmp	r3, #0
 8004362:	d003      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004364:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004368:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800436c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004374:	2100      	movs	r1, #0
 8004376:	6139      	str	r1, [r7, #16]
 8004378:	f003 0308 	and.w	r3, r3, #8
 800437c:	617b      	str	r3, [r7, #20]
 800437e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004382:	460b      	mov	r3, r1
 8004384:	4313      	orrs	r3, r2
 8004386:	d011      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004388:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800438c:	3328      	adds	r3, #40	; 0x28
 800438e:	2100      	movs	r1, #0
 8004390:	4618      	mov	r0, r3
 8004392:	f000 fbcb 	bl	8004b2c <RCCEx_PLL3_Config>
 8004396:	4603      	mov	r3, r0
 8004398:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800439c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d003      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043a8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80043ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b4:	2100      	movs	r1, #0
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	f003 0310 	and.w	r3, r3, #16
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80043c2:	460b      	mov	r3, r1
 80043c4:	4313      	orrs	r3, r2
 80043c6:	d011      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043cc:	3328      	adds	r3, #40	; 0x28
 80043ce:	2101      	movs	r1, #1
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 fbab 	bl	8004b2c <RCCEx_PLL3_Config>
 80043d6:	4603      	mov	r3, r0
 80043d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80043dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d003      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043e8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80043ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f4:	2100      	movs	r1, #0
 80043f6:	6039      	str	r1, [r7, #0]
 80043f8:	f003 0320 	and.w	r3, r3, #32
 80043fc:	607b      	str	r3, [r7, #4]
 80043fe:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004402:	460b      	mov	r3, r1
 8004404:	4313      	orrs	r3, r2
 8004406:	d011      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004408:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800440c:	3328      	adds	r3, #40	; 0x28
 800440e:	2102      	movs	r1, #2
 8004410:	4618      	mov	r0, r3
 8004412:	f000 fb8b 	bl	8004b2c <RCCEx_PLL3_Config>
 8004416:	4603      	mov	r3, r0
 8004418:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800441c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004420:	2b00      	cmp	r3, #0
 8004422:	d003      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004424:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004428:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 800442c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004430:	2b00      	cmp	r3, #0
 8004432:	d101      	bne.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004434:	2300      	movs	r3, #0
 8004436:	e000      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
}
 800443a:	4618      	mov	r0, r3
 800443c:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8004440:	46bd      	mov	sp, r7
 8004442:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004446:	bf00      	nop
 8004448:	58024400 	.word	0x58024400

0800444c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004450:	f7fe fde2 	bl	8003018 <HAL_RCC_GetHCLKFreq>
 8004454:	4602      	mov	r2, r0
 8004456:	4b06      	ldr	r3, [pc, #24]	; (8004470 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	091b      	lsrs	r3, r3, #4
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	4904      	ldr	r1, [pc, #16]	; (8004474 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004462:	5ccb      	ldrb	r3, [r1, r3]
 8004464:	f003 031f 	and.w	r3, r3, #31
 8004468:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800446c:	4618      	mov	r0, r3
 800446e:	bd80      	pop	{r7, pc}
 8004470:	58024400 	.word	0x58024400
 8004474:	080079ec 	.word	0x080079ec

08004478 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004478:	b480      	push	{r7}
 800447a:	b089      	sub	sp, #36	; 0x24
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004480:	4ba1      	ldr	r3, [pc, #644]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004484:	f003 0303 	and.w	r3, r3, #3
 8004488:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800448a:	4b9f      	ldr	r3, [pc, #636]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800448c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448e:	0b1b      	lsrs	r3, r3, #12
 8004490:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004494:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004496:	4b9c      	ldr	r3, [pc, #624]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449a:	091b      	lsrs	r3, r3, #4
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80044a2:	4b99      	ldr	r3, [pc, #612]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a6:	08db      	lsrs	r3, r3, #3
 80044a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	fb02 f303 	mul.w	r3, r2, r3
 80044b2:	ee07 3a90 	vmov	s15, r3
 80044b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f000 8111 	beq.w	80046e8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	f000 8083 	beq.w	80045d4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	f200 80a1 	bhi.w	8004618 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d003      	beq.n	80044e4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d056      	beq.n	8004590 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80044e2:	e099      	b.n	8004618 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044e4:	4b88      	ldr	r3, [pc, #544]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0320 	and.w	r3, r3, #32
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d02d      	beq.n	800454c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80044f0:	4b85      	ldr	r3, [pc, #532]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	08db      	lsrs	r3, r3, #3
 80044f6:	f003 0303 	and.w	r3, r3, #3
 80044fa:	4a84      	ldr	r2, [pc, #528]	; (800470c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80044fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004500:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	ee07 3a90 	vmov	s15, r3
 8004508:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	ee07 3a90 	vmov	s15, r3
 8004512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800451a:	4b7b      	ldr	r3, [pc, #492]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800451c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004522:	ee07 3a90 	vmov	s15, r3
 8004526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800452a:	ed97 6a03 	vldr	s12, [r7, #12]
 800452e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004710 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800453a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800453e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004546:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800454a:	e087      	b.n	800465c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	ee07 3a90 	vmov	s15, r3
 8004552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004556:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004714 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800455a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800455e:	4b6a      	ldr	r3, [pc, #424]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004566:	ee07 3a90 	vmov	s15, r3
 800456a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800456e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004572:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004710 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800457a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800457e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800458a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800458e:	e065      	b.n	800465c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	ee07 3a90 	vmov	s15, r3
 8004596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800459a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004718 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800459e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045a2:	4b59      	ldr	r3, [pc, #356]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045aa:	ee07 3a90 	vmov	s15, r3
 80045ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80045b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004710 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045d2:	e043      	b.n	800465c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	ee07 3a90 	vmov	s15, r3
 80045da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800471c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80045e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045e6:	4b48      	ldr	r3, [pc, #288]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ee:	ee07 3a90 	vmov	s15, r3
 80045f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80045fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004710 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800460a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800460e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004612:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004616:	e021      	b.n	800465c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	ee07 3a90 	vmov	s15, r3
 800461e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004622:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004718 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800462a:	4b37      	ldr	r3, [pc, #220]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800462c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004632:	ee07 3a90 	vmov	s15, r3
 8004636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800463a:	ed97 6a03 	vldr	s12, [r7, #12]
 800463e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004710 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800464a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800464e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004656:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800465a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800465c:	4b2a      	ldr	r3, [pc, #168]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800465e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004660:	0a5b      	lsrs	r3, r3, #9
 8004662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004666:	ee07 3a90 	vmov	s15, r3
 800466a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800466e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004672:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004676:	edd7 6a07 	vldr	s13, [r7, #28]
 800467a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800467e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004682:	ee17 2a90 	vmov	r2, s15
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800468a:	4b1f      	ldr	r3, [pc, #124]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800468c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468e:	0c1b      	lsrs	r3, r3, #16
 8004690:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004694:	ee07 3a90 	vmov	s15, r3
 8004698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800469c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80046a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046b0:	ee17 2a90 	vmov	r2, s15
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80046b8:	4b13      	ldr	r3, [pc, #76]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046bc:	0e1b      	lsrs	r3, r3, #24
 80046be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046c2:	ee07 3a90 	vmov	s15, r3
 80046c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80046d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046de:	ee17 2a90 	vmov	r2, s15
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80046e6:	e008      	b.n	80046fa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	609a      	str	r2, [r3, #8]
}
 80046fa:	bf00      	nop
 80046fc:	3724      	adds	r7, #36	; 0x24
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	58024400 	.word	0x58024400
 800470c:	03d09000 	.word	0x03d09000
 8004710:	46000000 	.word	0x46000000
 8004714:	4c742400 	.word	0x4c742400
 8004718:	4a742400 	.word	0x4a742400
 800471c:	4af42400 	.word	0x4af42400

08004720 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004720:	b480      	push	{r7}
 8004722:	b089      	sub	sp, #36	; 0x24
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004728:	4ba1      	ldr	r3, [pc, #644]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800472a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472c:	f003 0303 	and.w	r3, r3, #3
 8004730:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004732:	4b9f      	ldr	r3, [pc, #636]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004736:	0d1b      	lsrs	r3, r3, #20
 8004738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800473c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800473e:	4b9c      	ldr	r3, [pc, #624]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004742:	0a1b      	lsrs	r3, r3, #8
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800474a:	4b99      	ldr	r3, [pc, #612]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800474c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474e:	08db      	lsrs	r3, r3, #3
 8004750:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	fb02 f303 	mul.w	r3, r2, r3
 800475a:	ee07 3a90 	vmov	s15, r3
 800475e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004762:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 8111 	beq.w	8004990 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	2b02      	cmp	r3, #2
 8004772:	f000 8083 	beq.w	800487c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	2b02      	cmp	r3, #2
 800477a:	f200 80a1 	bhi.w	80048c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d056      	beq.n	8004838 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800478a:	e099      	b.n	80048c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800478c:	4b88      	ldr	r3, [pc, #544]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0320 	and.w	r3, r3, #32
 8004794:	2b00      	cmp	r3, #0
 8004796:	d02d      	beq.n	80047f4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004798:	4b85      	ldr	r3, [pc, #532]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	08db      	lsrs	r3, r3, #3
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	4a84      	ldr	r2, [pc, #528]	; (80049b4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80047a4:	fa22 f303 	lsr.w	r3, r2, r3
 80047a8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	ee07 3a90 	vmov	s15, r3
 80047b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	ee07 3a90 	vmov	s15, r3
 80047ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047c2:	4b7b      	ldr	r3, [pc, #492]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ca:	ee07 3a90 	vmov	s15, r3
 80047ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80047d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80049b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80047f2:	e087      	b.n	8004904 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	ee07 3a90 	vmov	s15, r3
 80047fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80049bc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004806:	4b6a      	ldr	r3, [pc, #424]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800480e:	ee07 3a90 	vmov	s15, r3
 8004812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004816:	ed97 6a03 	vldr	s12, [r7, #12]
 800481a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80049b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800481e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004826:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800482a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800482e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004832:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004836:	e065      	b.n	8004904 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	ee07 3a90 	vmov	s15, r3
 800483e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004842:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80049c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800484a:	4b59      	ldr	r3, [pc, #356]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004852:	ee07 3a90 	vmov	s15, r3
 8004856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800485a:	ed97 6a03 	vldr	s12, [r7, #12]
 800485e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80049b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800486a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800486e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004876:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800487a:	e043      	b.n	8004904 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	ee07 3a90 	vmov	s15, r3
 8004882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004886:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80049c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800488a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800488e:	4b48      	ldr	r3, [pc, #288]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004896:	ee07 3a90 	vmov	s15, r3
 800489a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800489e:	ed97 6a03 	vldr	s12, [r7, #12]
 80048a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80049b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048be:	e021      	b.n	8004904 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	ee07 3a90 	vmov	s15, r3
 80048c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80049c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80048ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048d2:	4b37      	ldr	r3, [pc, #220]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048da:	ee07 3a90 	vmov	s15, r3
 80048de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80049b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004902:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004904:	4b2a      	ldr	r3, [pc, #168]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004908:	0a5b      	lsrs	r3, r3, #9
 800490a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800490e:	ee07 3a90 	vmov	s15, r3
 8004912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004916:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800491a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800491e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004922:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004926:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800492a:	ee17 2a90 	vmov	r2, s15
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004932:	4b1f      	ldr	r3, [pc, #124]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004936:	0c1b      	lsrs	r3, r3, #16
 8004938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800493c:	ee07 3a90 	vmov	s15, r3
 8004940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004944:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004948:	ee37 7a87 	vadd.f32	s14, s15, s14
 800494c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004950:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004954:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004958:	ee17 2a90 	vmov	r2, s15
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004960:	4b13      	ldr	r3, [pc, #76]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004964:	0e1b      	lsrs	r3, r3, #24
 8004966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800496a:	ee07 3a90 	vmov	s15, r3
 800496e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004972:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004976:	ee37 7a87 	vadd.f32	s14, s15, s14
 800497a:	edd7 6a07 	vldr	s13, [r7, #28]
 800497e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004986:	ee17 2a90 	vmov	r2, s15
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800498e:	e008      	b.n	80049a2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	609a      	str	r2, [r3, #8]
}
 80049a2:	bf00      	nop
 80049a4:	3724      	adds	r7, #36	; 0x24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	58024400 	.word	0x58024400
 80049b4:	03d09000 	.word	0x03d09000
 80049b8:	46000000 	.word	0x46000000
 80049bc:	4c742400 	.word	0x4c742400
 80049c0:	4a742400 	.word	0x4a742400
 80049c4:	4af42400 	.word	0x4af42400

080049c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049d2:	2300      	movs	r3, #0
 80049d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80049d6:	4b53      	ldr	r3, [pc, #332]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 80049d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049da:	f003 0303 	and.w	r3, r3, #3
 80049de:	2b03      	cmp	r3, #3
 80049e0:	d101      	bne.n	80049e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e099      	b.n	8004b1a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80049e6:	4b4f      	ldr	r3, [pc, #316]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a4e      	ldr	r2, [pc, #312]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 80049ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049f2:	f7fc faf1 	bl	8000fd8 <HAL_GetTick>
 80049f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80049f8:	e008      	b.n	8004a0c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80049fa:	f7fc faed 	bl	8000fd8 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d901      	bls.n	8004a0c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e086      	b.n	8004b1a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a0c:	4b45      	ldr	r3, [pc, #276]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1f0      	bne.n	80049fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004a18:	4b42      	ldr	r3, [pc, #264]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	031b      	lsls	r3, r3, #12
 8004a26:	493f      	ldr	r1, [pc, #252]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	628b      	str	r3, [r1, #40]	; 0x28
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	3b01      	subs	r3, #1
 8004a32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	025b      	lsls	r3, r3, #9
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	431a      	orrs	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	3b01      	subs	r3, #1
 8004a48:	041b      	lsls	r3, r3, #16
 8004a4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	3b01      	subs	r3, #1
 8004a56:	061b      	lsls	r3, r3, #24
 8004a58:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a5c:	4931      	ldr	r1, [pc, #196]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004a62:	4b30      	ldr	r3, [pc, #192]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	492d      	ldr	r1, [pc, #180]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004a74:	4b2b      	ldr	r3, [pc, #172]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a78:	f023 0220 	bic.w	r2, r3, #32
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	4928      	ldr	r1, [pc, #160]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004a86:	4b27      	ldr	r3, [pc, #156]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8a:	4a26      	ldr	r2, [pc, #152]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004a8c:	f023 0310 	bic.w	r3, r3, #16
 8004a90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004a92:	4b24      	ldr	r3, [pc, #144]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004a94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a96:	4b24      	ldr	r3, [pc, #144]	; (8004b28 <RCCEx_PLL2_Config+0x160>)
 8004a98:	4013      	ands	r3, r2
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	69d2      	ldr	r2, [r2, #28]
 8004a9e:	00d2      	lsls	r2, r2, #3
 8004aa0:	4920      	ldr	r1, [pc, #128]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004aa6:	4b1f      	ldr	r3, [pc, #124]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aaa:	4a1e      	ldr	r2, [pc, #120]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004aac:	f043 0310 	orr.w	r3, r3, #16
 8004ab0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d106      	bne.n	8004ac6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004ab8:	4b1a      	ldr	r3, [pc, #104]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abc:	4a19      	ldr	r2, [pc, #100]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004abe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ac2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ac4:	e00f      	b.n	8004ae6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d106      	bne.n	8004ada <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004acc:	4b15      	ldr	r3, [pc, #84]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad0:	4a14      	ldr	r2, [pc, #80]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004ad2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ad6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ad8:	e005      	b.n	8004ae6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004ada:	4b12      	ldr	r3, [pc, #72]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ade:	4a11      	ldr	r2, [pc, #68]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004ae0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ae4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004ae6:	4b0f      	ldr	r3, [pc, #60]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a0e      	ldr	r2, [pc, #56]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004aec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004af0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004af2:	f7fc fa71 	bl	8000fd8 <HAL_GetTick>
 8004af6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004af8:	e008      	b.n	8004b0c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004afa:	f7fc fa6d 	bl	8000fd8 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d901      	bls.n	8004b0c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e006      	b.n	8004b1a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b0c:	4b05      	ldr	r3, [pc, #20]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d0f0      	beq.n	8004afa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	58024400 	.word	0x58024400
 8004b28:	ffff0007 	.word	0xffff0007

08004b2c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b36:	2300      	movs	r3, #0
 8004b38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b3a:	4b53      	ldr	r3, [pc, #332]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3e:	f003 0303 	and.w	r3, r3, #3
 8004b42:	2b03      	cmp	r3, #3
 8004b44:	d101      	bne.n	8004b4a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e099      	b.n	8004c7e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004b4a:	4b4f      	ldr	r3, [pc, #316]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a4e      	ldr	r2, [pc, #312]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004b50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b56:	f7fc fa3f 	bl	8000fd8 <HAL_GetTick>
 8004b5a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b5c:	e008      	b.n	8004b70 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004b5e:	f7fc fa3b 	bl	8000fd8 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d901      	bls.n	8004b70 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e086      	b.n	8004c7e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b70:	4b45      	ldr	r3, [pc, #276]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1f0      	bne.n	8004b5e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004b7c:	4b42      	ldr	r3, [pc, #264]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b80:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	051b      	lsls	r3, r3, #20
 8004b8a:	493f      	ldr	r1, [pc, #252]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	628b      	str	r3, [r1, #40]	; 0x28
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	3b01      	subs	r3, #1
 8004b96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	025b      	lsls	r3, r3, #9
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	431a      	orrs	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	3b01      	subs	r3, #1
 8004bac:	041b      	lsls	r3, r3, #16
 8004bae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	061b      	lsls	r3, r3, #24
 8004bbc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004bc0:	4931      	ldr	r1, [pc, #196]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004bc6:	4b30      	ldr	r3, [pc, #192]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	492d      	ldr	r1, [pc, #180]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004bd8:	4b2b      	ldr	r3, [pc, #172]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bdc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	4928      	ldr	r1, [pc, #160]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004bea:	4b27      	ldr	r3, [pc, #156]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bee:	4a26      	ldr	r2, [pc, #152]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004bf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bf4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004bf6:	4b24      	ldr	r3, [pc, #144]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004bf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bfa:	4b24      	ldr	r3, [pc, #144]	; (8004c8c <RCCEx_PLL3_Config+0x160>)
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	69d2      	ldr	r2, [r2, #28]
 8004c02:	00d2      	lsls	r2, r2, #3
 8004c04:	4920      	ldr	r1, [pc, #128]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004c0a:	4b1f      	ldr	r3, [pc, #124]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0e:	4a1e      	ldr	r2, [pc, #120]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d106      	bne.n	8004c2a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004c1c:	4b1a      	ldr	r3, [pc, #104]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c20:	4a19      	ldr	r2, [pc, #100]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004c22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c28:	e00f      	b.n	8004c4a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d106      	bne.n	8004c3e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004c30:	4b15      	ldr	r3, [pc, #84]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c34:	4a14      	ldr	r2, [pc, #80]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004c36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c3c:	e005      	b.n	8004c4a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004c3e:	4b12      	ldr	r3, [pc, #72]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c42:	4a11      	ldr	r2, [pc, #68]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004c44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c48:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004c4a:	4b0f      	ldr	r3, [pc, #60]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a0e      	ldr	r2, [pc, #56]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c56:	f7fc f9bf 	bl	8000fd8 <HAL_GetTick>
 8004c5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c5c:	e008      	b.n	8004c70 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004c5e:	f7fc f9bb 	bl	8000fd8 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d901      	bls.n	8004c70 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e006      	b.n	8004c7e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c70:	4b05      	ldr	r3, [pc, #20]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d0f0      	beq.n	8004c5e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	58024400 	.word	0x58024400
 8004c8c:	ffff0007 	.word	0xffff0007

08004c90 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e10f      	b.n	8004ec2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a87      	ldr	r2, [pc, #540]	; (8004ecc <HAL_SPI_Init+0x23c>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d00f      	beq.n	8004cd2 <HAL_SPI_Init+0x42>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a86      	ldr	r2, [pc, #536]	; (8004ed0 <HAL_SPI_Init+0x240>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d00a      	beq.n	8004cd2 <HAL_SPI_Init+0x42>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a84      	ldr	r2, [pc, #528]	; (8004ed4 <HAL_SPI_Init+0x244>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d005      	beq.n	8004cd2 <HAL_SPI_Init+0x42>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	2b0f      	cmp	r3, #15
 8004ccc:	d901      	bls.n	8004cd2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e0f7      	b.n	8004ec2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f900 	bl	8004ed8 <SPI_GetPacketSize>
 8004cd8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a7b      	ldr	r2, [pc, #492]	; (8004ecc <HAL_SPI_Init+0x23c>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d00c      	beq.n	8004cfe <HAL_SPI_Init+0x6e>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a79      	ldr	r2, [pc, #484]	; (8004ed0 <HAL_SPI_Init+0x240>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d007      	beq.n	8004cfe <HAL_SPI_Init+0x6e>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a78      	ldr	r2, [pc, #480]	; (8004ed4 <HAL_SPI_Init+0x244>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d002      	beq.n	8004cfe <HAL_SPI_Init+0x6e>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2b08      	cmp	r3, #8
 8004cfc:	d811      	bhi.n	8004d22 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004d02:	4a72      	ldr	r2, [pc, #456]	; (8004ecc <HAL_SPI_Init+0x23c>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d009      	beq.n	8004d1c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a70      	ldr	r2, [pc, #448]	; (8004ed0 <HAL_SPI_Init+0x240>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d004      	beq.n	8004d1c <HAL_SPI_Init+0x8c>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a6f      	ldr	r2, [pc, #444]	; (8004ed4 <HAL_SPI_Init+0x244>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d104      	bne.n	8004d26 <HAL_SPI_Init+0x96>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2b10      	cmp	r3, #16
 8004d20:	d901      	bls.n	8004d26 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e0cd      	b.n	8004ec2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d106      	bne.n	8004d40 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7fb fe7e 	bl	8000a3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2202      	movs	r2, #2
 8004d44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f022 0201 	bic.w	r2, r2, #1
 8004d56:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004d62:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d6c:	d119      	bne.n	8004da2 <HAL_SPI_Init+0x112>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d76:	d103      	bne.n	8004d80 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d008      	beq.n	8004d92 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10c      	bne.n	8004da2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004d8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d90:	d107      	bne.n	8004da2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004da0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00f      	beq.n	8004dce <HAL_SPI_Init+0x13e>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	2b06      	cmp	r3, #6
 8004db4:	d90b      	bls.n	8004dce <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	e007      	b.n	8004dde <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ddc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	69da      	ldr	r2, [r3, #28]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de6:	431a      	orrs	r2, r3
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	431a      	orrs	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df0:	ea42 0103 	orr.w	r1, r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68da      	ldr	r2, [r3, #12]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	431a      	orrs	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	695b      	ldr	r3, [r3, #20]
 8004e20:	431a      	orrs	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	431a      	orrs	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e32:	431a      	orrs	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	431a      	orrs	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e3e:	ea42 0103 	orr.w	r1, r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d113      	bne.n	8004e7e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e68:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e7c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f022 0201 	bic.w	r2, r2, #1
 8004e8c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00a      	beq.n	8004eb0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	430a      	orrs	r2, r1
 8004eae:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	40013000 	.word	0x40013000
 8004ed0:	40003800 	.word	0x40003800
 8004ed4:	40003c00 	.word	0x40003c00

08004ed8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee4:	095b      	lsrs	r3, r3, #5
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	3301      	adds	r3, #1
 8004ef0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	3307      	adds	r3, #7
 8004ef6:	08db      	lsrs	r3, r3, #3
 8004ef8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	fb02 f303 	mul.w	r3, r2, r3
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b082      	sub	sp, #8
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d101      	bne.n	8004f20 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e042      	b.n	8004fa6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d106      	bne.n	8004f38 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7fb ff04 	bl	8000d40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2224      	movs	r2, #36	; 0x24
 8004f3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 0201 	bic.w	r2, r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 fce1 	bl	8005918 <UART_SetConfig>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d101      	bne.n	8004f60 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e022      	b.n	8004fa6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d002      	beq.n	8004f6e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f001 fb41 	bl	80065f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f7c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689a      	ldr	r2, [r3, #8]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f8c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f042 0201 	orr.w	r2, r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f001 fbc8 	bl	8006734 <UART_CheckIdleState>
 8004fa4:	4603      	mov	r3, r0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3708      	adds	r7, #8
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b08a      	sub	sp, #40	; 0x28
 8004fb2:	af02      	add	r7, sp, #8
 8004fb4:	60f8      	str	r0, [r7, #12]
 8004fb6:	60b9      	str	r1, [r7, #8]
 8004fb8:	603b      	str	r3, [r7, #0]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc4:	2b20      	cmp	r3, #32
 8004fc6:	d17b      	bne.n	80050c0 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d002      	beq.n	8004fd4 <HAL_UART_Transmit+0x26>
 8004fce:	88fb      	ldrh	r3, [r7, #6]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e074      	b.n	80050c2 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2221      	movs	r2, #33	; 0x21
 8004fe4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004fe8:	f7fb fff6 	bl	8000fd8 <HAL_GetTick>
 8004fec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	88fa      	ldrh	r2, [r7, #6]
 8004ff2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	88fa      	ldrh	r2, [r7, #6]
 8004ffa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005006:	d108      	bne.n	800501a <HAL_UART_Transmit+0x6c>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d104      	bne.n	800501a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005010:	2300      	movs	r3, #0
 8005012:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	61bb      	str	r3, [r7, #24]
 8005018:	e003      	b.n	8005022 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800501e:	2300      	movs	r3, #0
 8005020:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005022:	e030      	b.n	8005086 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	2200      	movs	r2, #0
 800502c:	2180      	movs	r1, #128	; 0x80
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f001 fc2a 	bl	8006888 <UART_WaitOnFlagUntilTimeout>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d005      	beq.n	8005046 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2220      	movs	r2, #32
 800503e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e03d      	b.n	80050c2 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d10b      	bne.n	8005064 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	881b      	ldrh	r3, [r3, #0]
 8005050:	461a      	mov	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800505a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	3302      	adds	r3, #2
 8005060:	61bb      	str	r3, [r7, #24]
 8005062:	e007      	b.n	8005074 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	781a      	ldrb	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	3301      	adds	r3, #1
 8005072:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800507a:	b29b      	uxth	r3, r3
 800507c:	3b01      	subs	r3, #1
 800507e:	b29a      	uxth	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800508c:	b29b      	uxth	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1c8      	bne.n	8005024 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2200      	movs	r2, #0
 800509a:	2140      	movs	r1, #64	; 0x40
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f001 fbf3 	bl	8006888 <UART_WaitOnFlagUntilTimeout>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d005      	beq.n	80050b4 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2220      	movs	r2, #32
 80050ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e006      	b.n	80050c2 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2220      	movs	r2, #32
 80050b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80050bc:	2300      	movs	r3, #0
 80050be:	e000      	b.n	80050c2 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80050c0:	2302      	movs	r3, #2
  }
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3720      	adds	r7, #32
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
	...

080050cc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b08a      	sub	sp, #40	; 0x28
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	4613      	mov	r3, r2
 80050d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050e0:	2b20      	cmp	r3, #32
 80050e2:	d137      	bne.n	8005154 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d002      	beq.n	80050f0 <HAL_UART_Receive_IT+0x24>
 80050ea:	88fb      	ldrh	r3, [r7, #6]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d101      	bne.n	80050f4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e030      	b.n	8005156 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a18      	ldr	r2, [pc, #96]	; (8005160 <HAL_UART_Receive_IT+0x94>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d01f      	beq.n	8005144 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d018      	beq.n	8005144 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	e853 3f00 	ldrex	r3, [r3]
 800511e:	613b      	str	r3, [r7, #16]
   return(result);
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005126:	627b      	str	r3, [r7, #36]	; 0x24
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	461a      	mov	r2, r3
 800512e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005130:	623b      	str	r3, [r7, #32]
 8005132:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005134:	69f9      	ldr	r1, [r7, #28]
 8005136:	6a3a      	ldr	r2, [r7, #32]
 8005138:	e841 2300 	strex	r3, r2, [r1]
 800513c:	61bb      	str	r3, [r7, #24]
   return(result);
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1e6      	bne.n	8005112 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005144:	88fb      	ldrh	r3, [r7, #6]
 8005146:	461a      	mov	r2, r3
 8005148:	68b9      	ldr	r1, [r7, #8]
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f001 fc04 	bl	8006958 <UART_Start_Receive_IT>
 8005150:	4603      	mov	r3, r0
 8005152:	e000      	b.n	8005156 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005154:	2302      	movs	r3, #2
  }
}
 8005156:	4618      	mov	r0, r3
 8005158:	3728      	adds	r7, #40	; 0x28
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	58000c00 	.word	0x58000c00

08005164 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b0ba      	sub	sp, #232	; 0xe8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800518a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800518e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005192:	4013      	ands	r3, r2
 8005194:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005198:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800519c:	2b00      	cmp	r3, #0
 800519e:	d11b      	bne.n	80051d8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80051a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051a4:	f003 0320 	and.w	r3, r3, #32
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d015      	beq.n	80051d8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80051ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051b0:	f003 0320 	and.w	r3, r3, #32
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d105      	bne.n	80051c4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80051b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d009      	beq.n	80051d8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 8377 	beq.w	80058bc <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	4798      	blx	r3
      }
      return;
 80051d6:	e371      	b.n	80058bc <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80051d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f000 8123 	beq.w	8005428 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80051e2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80051e6:	4b8d      	ldr	r3, [pc, #564]	; (800541c <HAL_UART_IRQHandler+0x2b8>)
 80051e8:	4013      	ands	r3, r2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d106      	bne.n	80051fc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80051ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80051f2:	4b8b      	ldr	r3, [pc, #556]	; (8005420 <HAL_UART_IRQHandler+0x2bc>)
 80051f4:	4013      	ands	r3, r2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f000 8116 	beq.w	8005428 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80051fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005200:	f003 0301 	and.w	r3, r3, #1
 8005204:	2b00      	cmp	r3, #0
 8005206:	d011      	beq.n	800522c <HAL_UART_IRQHandler+0xc8>
 8005208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800520c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00b      	beq.n	800522c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2201      	movs	r2, #1
 800521a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005222:	f043 0201 	orr.w	r2, r3, #1
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800522c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005230:	f003 0302 	and.w	r3, r3, #2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d011      	beq.n	800525c <HAL_UART_IRQHandler+0xf8>
 8005238:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00b      	beq.n	800525c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2202      	movs	r2, #2
 800524a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005252:	f043 0204 	orr.w	r2, r3, #4
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800525c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005260:	f003 0304 	and.w	r3, r3, #4
 8005264:	2b00      	cmp	r3, #0
 8005266:	d011      	beq.n	800528c <HAL_UART_IRQHandler+0x128>
 8005268:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00b      	beq.n	800528c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2204      	movs	r2, #4
 800527a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005282:	f043 0202 	orr.w	r2, r3, #2
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800528c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005290:	f003 0308 	and.w	r3, r3, #8
 8005294:	2b00      	cmp	r3, #0
 8005296:	d017      	beq.n	80052c8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800529c:	f003 0320 	and.w	r3, r3, #32
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d105      	bne.n	80052b0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80052a4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80052a8:	4b5c      	ldr	r3, [pc, #368]	; (800541c <HAL_UART_IRQHandler+0x2b8>)
 80052aa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00b      	beq.n	80052c8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2208      	movs	r2, #8
 80052b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052be:	f043 0208 	orr.w	r2, r3, #8
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80052c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d012      	beq.n	80052fa <HAL_UART_IRQHandler+0x196>
 80052d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00c      	beq.n	80052fa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f0:	f043 0220 	orr.w	r2, r3, #32
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005300:	2b00      	cmp	r3, #0
 8005302:	f000 82dd 	beq.w	80058c0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800530a:	f003 0320 	and.w	r3, r3, #32
 800530e:	2b00      	cmp	r3, #0
 8005310:	d013      	beq.n	800533a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005312:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005316:	f003 0320 	and.w	r3, r3, #32
 800531a:	2b00      	cmp	r3, #0
 800531c:	d105      	bne.n	800532a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800531e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d007      	beq.n	800533a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800532e:	2b00      	cmp	r3, #0
 8005330:	d003      	beq.n	800533a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005340:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800534e:	2b40      	cmp	r3, #64	; 0x40
 8005350:	d005      	beq.n	800535e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005352:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005356:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800535a:	2b00      	cmp	r3, #0
 800535c:	d054      	beq.n	8005408 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f001 fc1c 	bl	8006b9c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536e:	2b40      	cmp	r3, #64	; 0x40
 8005370:	d146      	bne.n	8005400 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	3308      	adds	r3, #8
 8005378:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005380:	e853 3f00 	ldrex	r3, [r3]
 8005384:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005388:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800538c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005390:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3308      	adds	r3, #8
 800539a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800539e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80053a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80053aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80053ae:	e841 2300 	strex	r3, r2, [r1]
 80053b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80053b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1d9      	bne.n	8005372 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d017      	beq.n	80053f8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053ce:	4a15      	ldr	r2, [pc, #84]	; (8005424 <HAL_UART_IRQHandler+0x2c0>)
 80053d0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053d8:	4618      	mov	r0, r3
 80053da:	f7fc fa37 	bl	800184c <HAL_DMA_Abort_IT>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d019      	beq.n	8005418 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80053f2:	4610      	mov	r0, r2
 80053f4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053f6:	e00f      	b.n	8005418 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 fa77 	bl	80058ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053fe:	e00b      	b.n	8005418 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 fa73 	bl	80058ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005406:	e007      	b.n	8005418 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 fa6f 	bl	80058ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8005416:	e253      	b.n	80058c0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005418:	bf00      	nop
    return;
 800541a:	e251      	b.n	80058c0 <HAL_UART_IRQHandler+0x75c>
 800541c:	10000001 	.word	0x10000001
 8005420:	04000120 	.word	0x04000120
 8005424:	08006c69 	.word	0x08006c69

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800542c:	2b01      	cmp	r3, #1
 800542e:	f040 81e7 	bne.w	8005800 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005436:	f003 0310 	and.w	r3, r3, #16
 800543a:	2b00      	cmp	r3, #0
 800543c:	f000 81e0 	beq.w	8005800 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005444:	f003 0310 	and.w	r3, r3, #16
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 81d9 	beq.w	8005800 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2210      	movs	r2, #16
 8005454:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005460:	2b40      	cmp	r3, #64	; 0x40
 8005462:	f040 8151 	bne.w	8005708 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a96      	ldr	r2, [pc, #600]	; (80056c8 <HAL_UART_IRQHandler+0x564>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d068      	beq.n	8005546 <HAL_UART_IRQHandler+0x3e2>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a93      	ldr	r2, [pc, #588]	; (80056cc <HAL_UART_IRQHandler+0x568>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d061      	beq.n	8005546 <HAL_UART_IRQHandler+0x3e2>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a91      	ldr	r2, [pc, #580]	; (80056d0 <HAL_UART_IRQHandler+0x56c>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d05a      	beq.n	8005546 <HAL_UART_IRQHandler+0x3e2>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a8e      	ldr	r2, [pc, #568]	; (80056d4 <HAL_UART_IRQHandler+0x570>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d053      	beq.n	8005546 <HAL_UART_IRQHandler+0x3e2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a8c      	ldr	r2, [pc, #560]	; (80056d8 <HAL_UART_IRQHandler+0x574>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d04c      	beq.n	8005546 <HAL_UART_IRQHandler+0x3e2>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a89      	ldr	r2, [pc, #548]	; (80056dc <HAL_UART_IRQHandler+0x578>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d045      	beq.n	8005546 <HAL_UART_IRQHandler+0x3e2>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a87      	ldr	r2, [pc, #540]	; (80056e0 <HAL_UART_IRQHandler+0x57c>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d03e      	beq.n	8005546 <HAL_UART_IRQHandler+0x3e2>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a84      	ldr	r2, [pc, #528]	; (80056e4 <HAL_UART_IRQHandler+0x580>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d037      	beq.n	8005546 <HAL_UART_IRQHandler+0x3e2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a82      	ldr	r2, [pc, #520]	; (80056e8 <HAL_UART_IRQHandler+0x584>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d030      	beq.n	8005546 <HAL_UART_IRQHandler+0x3e2>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a7f      	ldr	r2, [pc, #508]	; (80056ec <HAL_UART_IRQHandler+0x588>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d029      	beq.n	8005546 <HAL_UART_IRQHandler+0x3e2>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a7d      	ldr	r2, [pc, #500]	; (80056f0 <HAL_UART_IRQHandler+0x58c>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d022      	beq.n	8005546 <HAL_UART_IRQHandler+0x3e2>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a7a      	ldr	r2, [pc, #488]	; (80056f4 <HAL_UART_IRQHandler+0x590>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d01b      	beq.n	8005546 <HAL_UART_IRQHandler+0x3e2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a78      	ldr	r2, [pc, #480]	; (80056f8 <HAL_UART_IRQHandler+0x594>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d014      	beq.n	8005546 <HAL_UART_IRQHandler+0x3e2>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a75      	ldr	r2, [pc, #468]	; (80056fc <HAL_UART_IRQHandler+0x598>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d00d      	beq.n	8005546 <HAL_UART_IRQHandler+0x3e2>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a73      	ldr	r2, [pc, #460]	; (8005700 <HAL_UART_IRQHandler+0x59c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d006      	beq.n	8005546 <HAL_UART_IRQHandler+0x3e2>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a70      	ldr	r2, [pc, #448]	; (8005704 <HAL_UART_IRQHandler+0x5a0>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d106      	bne.n	8005554 <HAL_UART_IRQHandler+0x3f0>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	b29b      	uxth	r3, r3
 8005552:	e005      	b.n	8005560 <HAL_UART_IRQHandler+0x3fc>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	b29b      	uxth	r3, r3
 8005560:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005564:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005568:	2b00      	cmp	r3, #0
 800556a:	f000 81ab 	beq.w	80058c4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005574:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005578:	429a      	cmp	r2, r3
 800557a:	f080 81a3 	bcs.w	80058c4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005584:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800558e:	69db      	ldr	r3, [r3, #28]
 8005590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005594:	f000 8087 	beq.w	80056a6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055a4:	e853 3f00 	ldrex	r3, [r3]
 80055a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80055ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	461a      	mov	r2, r3
 80055be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80055c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80055c6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80055ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80055d2:	e841 2300 	strex	r3, r2, [r1]
 80055d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80055da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1da      	bne.n	8005598 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	3308      	adds	r3, #8
 80055e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055ec:	e853 3f00 	ldrex	r3, [r3]
 80055f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80055f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055f4:	f023 0301 	bic.w	r3, r3, #1
 80055f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	3308      	adds	r3, #8
 8005602:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005606:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800560a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800560e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005612:	e841 2300 	strex	r3, r2, [r1]
 8005616:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005618:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1e1      	bne.n	80055e2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	3308      	adds	r3, #8
 8005624:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005626:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005628:	e853 3f00 	ldrex	r3, [r3]
 800562c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800562e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005634:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	3308      	adds	r3, #8
 800563e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005642:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005644:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005646:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005648:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800564a:	e841 2300 	strex	r3, r2, [r1]
 800564e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005650:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1e3      	bne.n	800561e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2220      	movs	r2, #32
 800565a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800566c:	e853 3f00 	ldrex	r3, [r3]
 8005670:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005674:	f023 0310 	bic.w	r3, r3, #16
 8005678:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	461a      	mov	r2, r3
 8005682:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005686:	65bb      	str	r3, [r7, #88]	; 0x58
 8005688:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800568c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800568e:	e841 2300 	strex	r3, r2, [r1]
 8005692:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1e4      	bne.n	8005664 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7fb fdb5 	bl	8001210 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2202      	movs	r2, #2
 80056aa:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	b29b      	uxth	r3, r3
 80056be:	4619      	mov	r1, r3
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 f91d 	bl	8005900 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80056c6:	e0fd      	b.n	80058c4 <HAL_UART_IRQHandler+0x760>
 80056c8:	40020010 	.word	0x40020010
 80056cc:	40020028 	.word	0x40020028
 80056d0:	40020040 	.word	0x40020040
 80056d4:	40020058 	.word	0x40020058
 80056d8:	40020070 	.word	0x40020070
 80056dc:	40020088 	.word	0x40020088
 80056e0:	400200a0 	.word	0x400200a0
 80056e4:	400200b8 	.word	0x400200b8
 80056e8:	40020410 	.word	0x40020410
 80056ec:	40020428 	.word	0x40020428
 80056f0:	40020440 	.word	0x40020440
 80056f4:	40020458 	.word	0x40020458
 80056f8:	40020470 	.word	0x40020470
 80056fc:	40020488 	.word	0x40020488
 8005700:	400204a0 	.word	0x400204a0
 8005704:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005714:	b29b      	uxth	r3, r3
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005722:	b29b      	uxth	r3, r3
 8005724:	2b00      	cmp	r3, #0
 8005726:	f000 80cf 	beq.w	80058c8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800572a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800572e:	2b00      	cmp	r3, #0
 8005730:	f000 80ca 	beq.w	80058c8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573c:	e853 3f00 	ldrex	r3, [r3]
 8005740:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005744:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005748:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	461a      	mov	r2, r3
 8005752:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005756:	647b      	str	r3, [r7, #68]	; 0x44
 8005758:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800575c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800575e:	e841 2300 	strex	r3, r2, [r1]
 8005762:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1e4      	bne.n	8005734 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3308      	adds	r3, #8
 8005770:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005774:	e853 3f00 	ldrex	r3, [r3]
 8005778:	623b      	str	r3, [r7, #32]
   return(result);
 800577a:	6a3a      	ldr	r2, [r7, #32]
 800577c:	4b55      	ldr	r3, [pc, #340]	; (80058d4 <HAL_UART_IRQHandler+0x770>)
 800577e:	4013      	ands	r3, r2
 8005780:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	3308      	adds	r3, #8
 800578a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800578e:	633a      	str	r2, [r7, #48]	; 0x30
 8005790:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005792:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005796:	e841 2300 	strex	r3, r2, [r1]
 800579a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800579c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1e3      	bne.n	800576a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2220      	movs	r2, #32
 80057a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	e853 3f00 	ldrex	r3, [r3]
 80057c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f023 0310 	bic.w	r3, r3, #16
 80057ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	461a      	mov	r2, r3
 80057d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80057d8:	61fb      	str	r3, [r7, #28]
 80057da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057dc:	69b9      	ldr	r1, [r7, #24]
 80057de:	69fa      	ldr	r2, [r7, #28]
 80057e0:	e841 2300 	strex	r3, r2, [r1]
 80057e4:	617b      	str	r3, [r7, #20]
   return(result);
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1e4      	bne.n	80057b6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057f6:	4619      	mov	r1, r3
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 f881 	bl	8005900 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057fe:	e063      	b.n	80058c8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005804:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00e      	beq.n	800582a <HAL_UART_IRQHandler+0x6c6>
 800580c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005810:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d008      	beq.n	800582a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005820:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f001 ff7e 	bl	8007724 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005828:	e051      	b.n	80058ce <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800582a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800582e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005832:	2b00      	cmp	r3, #0
 8005834:	d014      	beq.n	8005860 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800583a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800583e:	2b00      	cmp	r3, #0
 8005840:	d105      	bne.n	800584e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005842:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005846:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d008      	beq.n	8005860 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005852:	2b00      	cmp	r3, #0
 8005854:	d03a      	beq.n	80058cc <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	4798      	blx	r3
    }
    return;
 800585e:	e035      	b.n	80058cc <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005868:	2b00      	cmp	r3, #0
 800586a:	d009      	beq.n	8005880 <HAL_UART_IRQHandler+0x71c>
 800586c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005874:	2b00      	cmp	r3, #0
 8005876:	d003      	beq.n	8005880 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f001 fa0b 	bl	8006c94 <UART_EndTransmit_IT>
    return;
 800587e:	e026      	b.n	80058ce <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005884:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d009      	beq.n	80058a0 <HAL_UART_IRQHandler+0x73c>
 800588c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005890:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d003      	beq.n	80058a0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f001 ff57 	bl	800774c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800589e:	e016      	b.n	80058ce <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80058a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d010      	beq.n	80058ce <HAL_UART_IRQHandler+0x76a>
 80058ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	da0c      	bge.n	80058ce <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f001 ff3f 	bl	8007738 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058ba:	e008      	b.n	80058ce <HAL_UART_IRQHandler+0x76a>
      return;
 80058bc:	bf00      	nop
 80058be:	e006      	b.n	80058ce <HAL_UART_IRQHandler+0x76a>
    return;
 80058c0:	bf00      	nop
 80058c2:	e004      	b.n	80058ce <HAL_UART_IRQHandler+0x76a>
      return;
 80058c4:	bf00      	nop
 80058c6:	e002      	b.n	80058ce <HAL_UART_IRQHandler+0x76a>
      return;
 80058c8:	bf00      	nop
 80058ca:	e000      	b.n	80058ce <HAL_UART_IRQHandler+0x76a>
    return;
 80058cc:	bf00      	nop
  }
}
 80058ce:	37e8      	adds	r7, #232	; 0xe8
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	effffffe 	.word	0xeffffffe

080058d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	460b      	mov	r3, r1
 800590a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800591c:	b092      	sub	sp, #72	; 0x48
 800591e:	af00      	add	r7, sp, #0
 8005920:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005922:	2300      	movs	r3, #0
 8005924:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	689a      	ldr	r2, [r3, #8]
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	431a      	orrs	r2, r3
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	431a      	orrs	r2, r3
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	69db      	ldr	r3, [r3, #28]
 800593c:	4313      	orrs	r3, r2
 800593e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	4bbe      	ldr	r3, [pc, #760]	; (8005c40 <UART_SetConfig+0x328>)
 8005948:	4013      	ands	r3, r2
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	6812      	ldr	r2, [r2, #0]
 800594e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005950:	430b      	orrs	r3, r1
 8005952:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	68da      	ldr	r2, [r3, #12]
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	430a      	orrs	r2, r1
 8005968:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4ab3      	ldr	r2, [pc, #716]	; (8005c44 <UART_SetConfig+0x32c>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d004      	beq.n	8005984 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005980:	4313      	orrs	r3, r2
 8005982:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689a      	ldr	r2, [r3, #8]
 800598a:	4baf      	ldr	r3, [pc, #700]	; (8005c48 <UART_SetConfig+0x330>)
 800598c:	4013      	ands	r3, r2
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	6812      	ldr	r2, [r2, #0]
 8005992:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005994:	430b      	orrs	r3, r1
 8005996:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599e:	f023 010f 	bic.w	r1, r3, #15
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4aa6      	ldr	r2, [pc, #664]	; (8005c4c <UART_SetConfig+0x334>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d177      	bne.n	8005aa8 <UART_SetConfig+0x190>
 80059b8:	4ba5      	ldr	r3, [pc, #660]	; (8005c50 <UART_SetConfig+0x338>)
 80059ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059c0:	2b28      	cmp	r3, #40	; 0x28
 80059c2:	d86d      	bhi.n	8005aa0 <UART_SetConfig+0x188>
 80059c4:	a201      	add	r2, pc, #4	; (adr r2, 80059cc <UART_SetConfig+0xb4>)
 80059c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ca:	bf00      	nop
 80059cc:	08005a71 	.word	0x08005a71
 80059d0:	08005aa1 	.word	0x08005aa1
 80059d4:	08005aa1 	.word	0x08005aa1
 80059d8:	08005aa1 	.word	0x08005aa1
 80059dc:	08005aa1 	.word	0x08005aa1
 80059e0:	08005aa1 	.word	0x08005aa1
 80059e4:	08005aa1 	.word	0x08005aa1
 80059e8:	08005aa1 	.word	0x08005aa1
 80059ec:	08005a79 	.word	0x08005a79
 80059f0:	08005aa1 	.word	0x08005aa1
 80059f4:	08005aa1 	.word	0x08005aa1
 80059f8:	08005aa1 	.word	0x08005aa1
 80059fc:	08005aa1 	.word	0x08005aa1
 8005a00:	08005aa1 	.word	0x08005aa1
 8005a04:	08005aa1 	.word	0x08005aa1
 8005a08:	08005aa1 	.word	0x08005aa1
 8005a0c:	08005a81 	.word	0x08005a81
 8005a10:	08005aa1 	.word	0x08005aa1
 8005a14:	08005aa1 	.word	0x08005aa1
 8005a18:	08005aa1 	.word	0x08005aa1
 8005a1c:	08005aa1 	.word	0x08005aa1
 8005a20:	08005aa1 	.word	0x08005aa1
 8005a24:	08005aa1 	.word	0x08005aa1
 8005a28:	08005aa1 	.word	0x08005aa1
 8005a2c:	08005a89 	.word	0x08005a89
 8005a30:	08005aa1 	.word	0x08005aa1
 8005a34:	08005aa1 	.word	0x08005aa1
 8005a38:	08005aa1 	.word	0x08005aa1
 8005a3c:	08005aa1 	.word	0x08005aa1
 8005a40:	08005aa1 	.word	0x08005aa1
 8005a44:	08005aa1 	.word	0x08005aa1
 8005a48:	08005aa1 	.word	0x08005aa1
 8005a4c:	08005a91 	.word	0x08005a91
 8005a50:	08005aa1 	.word	0x08005aa1
 8005a54:	08005aa1 	.word	0x08005aa1
 8005a58:	08005aa1 	.word	0x08005aa1
 8005a5c:	08005aa1 	.word	0x08005aa1
 8005a60:	08005aa1 	.word	0x08005aa1
 8005a64:	08005aa1 	.word	0x08005aa1
 8005a68:	08005aa1 	.word	0x08005aa1
 8005a6c:	08005a99 	.word	0x08005a99
 8005a70:	2301      	movs	r3, #1
 8005a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a76:	e326      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005a78:	2304      	movs	r3, #4
 8005a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a7e:	e322      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005a80:	2308      	movs	r3, #8
 8005a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a86:	e31e      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005a88:	2310      	movs	r3, #16
 8005a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a8e:	e31a      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005a90:	2320      	movs	r3, #32
 8005a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a96:	e316      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005a98:	2340      	movs	r3, #64	; 0x40
 8005a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a9e:	e312      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005aa0:	2380      	movs	r3, #128	; 0x80
 8005aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aa6:	e30e      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a69      	ldr	r2, [pc, #420]	; (8005c54 <UART_SetConfig+0x33c>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d130      	bne.n	8005b14 <UART_SetConfig+0x1fc>
 8005ab2:	4b67      	ldr	r3, [pc, #412]	; (8005c50 <UART_SetConfig+0x338>)
 8005ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab6:	f003 0307 	and.w	r3, r3, #7
 8005aba:	2b05      	cmp	r3, #5
 8005abc:	d826      	bhi.n	8005b0c <UART_SetConfig+0x1f4>
 8005abe:	a201      	add	r2, pc, #4	; (adr r2, 8005ac4 <UART_SetConfig+0x1ac>)
 8005ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac4:	08005add 	.word	0x08005add
 8005ac8:	08005ae5 	.word	0x08005ae5
 8005acc:	08005aed 	.word	0x08005aed
 8005ad0:	08005af5 	.word	0x08005af5
 8005ad4:	08005afd 	.word	0x08005afd
 8005ad8:	08005b05 	.word	0x08005b05
 8005adc:	2300      	movs	r3, #0
 8005ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ae2:	e2f0      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005ae4:	2304      	movs	r3, #4
 8005ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aea:	e2ec      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005aec:	2308      	movs	r3, #8
 8005aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005af2:	e2e8      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005af4:	2310      	movs	r3, #16
 8005af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005afa:	e2e4      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005afc:	2320      	movs	r3, #32
 8005afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b02:	e2e0      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005b04:	2340      	movs	r3, #64	; 0x40
 8005b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b0a:	e2dc      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005b0c:	2380      	movs	r3, #128	; 0x80
 8005b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b12:	e2d8      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a4f      	ldr	r2, [pc, #316]	; (8005c58 <UART_SetConfig+0x340>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d130      	bne.n	8005b80 <UART_SetConfig+0x268>
 8005b1e:	4b4c      	ldr	r3, [pc, #304]	; (8005c50 <UART_SetConfig+0x338>)
 8005b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b22:	f003 0307 	and.w	r3, r3, #7
 8005b26:	2b05      	cmp	r3, #5
 8005b28:	d826      	bhi.n	8005b78 <UART_SetConfig+0x260>
 8005b2a:	a201      	add	r2, pc, #4	; (adr r2, 8005b30 <UART_SetConfig+0x218>)
 8005b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b30:	08005b49 	.word	0x08005b49
 8005b34:	08005b51 	.word	0x08005b51
 8005b38:	08005b59 	.word	0x08005b59
 8005b3c:	08005b61 	.word	0x08005b61
 8005b40:	08005b69 	.word	0x08005b69
 8005b44:	08005b71 	.word	0x08005b71
 8005b48:	2300      	movs	r3, #0
 8005b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b4e:	e2ba      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005b50:	2304      	movs	r3, #4
 8005b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b56:	e2b6      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005b58:	2308      	movs	r3, #8
 8005b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b5e:	e2b2      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005b60:	2310      	movs	r3, #16
 8005b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b66:	e2ae      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005b68:	2320      	movs	r3, #32
 8005b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b6e:	e2aa      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005b70:	2340      	movs	r3, #64	; 0x40
 8005b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b76:	e2a6      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005b78:	2380      	movs	r3, #128	; 0x80
 8005b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b7e:	e2a2      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a35      	ldr	r2, [pc, #212]	; (8005c5c <UART_SetConfig+0x344>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d130      	bne.n	8005bec <UART_SetConfig+0x2d4>
 8005b8a:	4b31      	ldr	r3, [pc, #196]	; (8005c50 <UART_SetConfig+0x338>)
 8005b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b8e:	f003 0307 	and.w	r3, r3, #7
 8005b92:	2b05      	cmp	r3, #5
 8005b94:	d826      	bhi.n	8005be4 <UART_SetConfig+0x2cc>
 8005b96:	a201      	add	r2, pc, #4	; (adr r2, 8005b9c <UART_SetConfig+0x284>)
 8005b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b9c:	08005bb5 	.word	0x08005bb5
 8005ba0:	08005bbd 	.word	0x08005bbd
 8005ba4:	08005bc5 	.word	0x08005bc5
 8005ba8:	08005bcd 	.word	0x08005bcd
 8005bac:	08005bd5 	.word	0x08005bd5
 8005bb0:	08005bdd 	.word	0x08005bdd
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bba:	e284      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005bbc:	2304      	movs	r3, #4
 8005bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bc2:	e280      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005bc4:	2308      	movs	r3, #8
 8005bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bca:	e27c      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005bcc:	2310      	movs	r3, #16
 8005bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bd2:	e278      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005bd4:	2320      	movs	r3, #32
 8005bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bda:	e274      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005bdc:	2340      	movs	r3, #64	; 0x40
 8005bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005be2:	e270      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005be4:	2380      	movs	r3, #128	; 0x80
 8005be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bea:	e26c      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a1b      	ldr	r2, [pc, #108]	; (8005c60 <UART_SetConfig+0x348>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d142      	bne.n	8005c7c <UART_SetConfig+0x364>
 8005bf6:	4b16      	ldr	r3, [pc, #88]	; (8005c50 <UART_SetConfig+0x338>)
 8005bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bfa:	f003 0307 	and.w	r3, r3, #7
 8005bfe:	2b05      	cmp	r3, #5
 8005c00:	d838      	bhi.n	8005c74 <UART_SetConfig+0x35c>
 8005c02:	a201      	add	r2, pc, #4	; (adr r2, 8005c08 <UART_SetConfig+0x2f0>)
 8005c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c08:	08005c21 	.word	0x08005c21
 8005c0c:	08005c29 	.word	0x08005c29
 8005c10:	08005c31 	.word	0x08005c31
 8005c14:	08005c39 	.word	0x08005c39
 8005c18:	08005c65 	.word	0x08005c65
 8005c1c:	08005c6d 	.word	0x08005c6d
 8005c20:	2300      	movs	r3, #0
 8005c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c26:	e24e      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005c28:	2304      	movs	r3, #4
 8005c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c2e:	e24a      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005c30:	2308      	movs	r3, #8
 8005c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c36:	e246      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005c38:	2310      	movs	r3, #16
 8005c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c3e:	e242      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005c40:	cfff69f3 	.word	0xcfff69f3
 8005c44:	58000c00 	.word	0x58000c00
 8005c48:	11fff4ff 	.word	0x11fff4ff
 8005c4c:	40011000 	.word	0x40011000
 8005c50:	58024400 	.word	0x58024400
 8005c54:	40004400 	.word	0x40004400
 8005c58:	40004800 	.word	0x40004800
 8005c5c:	40004c00 	.word	0x40004c00
 8005c60:	40005000 	.word	0x40005000
 8005c64:	2320      	movs	r3, #32
 8005c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c6a:	e22c      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005c6c:	2340      	movs	r3, #64	; 0x40
 8005c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c72:	e228      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005c74:	2380      	movs	r3, #128	; 0x80
 8005c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c7a:	e224      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4ab1      	ldr	r2, [pc, #708]	; (8005f48 <UART_SetConfig+0x630>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d176      	bne.n	8005d74 <UART_SetConfig+0x45c>
 8005c86:	4bb1      	ldr	r3, [pc, #708]	; (8005f4c <UART_SetConfig+0x634>)
 8005c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c8e:	2b28      	cmp	r3, #40	; 0x28
 8005c90:	d86c      	bhi.n	8005d6c <UART_SetConfig+0x454>
 8005c92:	a201      	add	r2, pc, #4	; (adr r2, 8005c98 <UART_SetConfig+0x380>)
 8005c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c98:	08005d3d 	.word	0x08005d3d
 8005c9c:	08005d6d 	.word	0x08005d6d
 8005ca0:	08005d6d 	.word	0x08005d6d
 8005ca4:	08005d6d 	.word	0x08005d6d
 8005ca8:	08005d6d 	.word	0x08005d6d
 8005cac:	08005d6d 	.word	0x08005d6d
 8005cb0:	08005d6d 	.word	0x08005d6d
 8005cb4:	08005d6d 	.word	0x08005d6d
 8005cb8:	08005d45 	.word	0x08005d45
 8005cbc:	08005d6d 	.word	0x08005d6d
 8005cc0:	08005d6d 	.word	0x08005d6d
 8005cc4:	08005d6d 	.word	0x08005d6d
 8005cc8:	08005d6d 	.word	0x08005d6d
 8005ccc:	08005d6d 	.word	0x08005d6d
 8005cd0:	08005d6d 	.word	0x08005d6d
 8005cd4:	08005d6d 	.word	0x08005d6d
 8005cd8:	08005d4d 	.word	0x08005d4d
 8005cdc:	08005d6d 	.word	0x08005d6d
 8005ce0:	08005d6d 	.word	0x08005d6d
 8005ce4:	08005d6d 	.word	0x08005d6d
 8005ce8:	08005d6d 	.word	0x08005d6d
 8005cec:	08005d6d 	.word	0x08005d6d
 8005cf0:	08005d6d 	.word	0x08005d6d
 8005cf4:	08005d6d 	.word	0x08005d6d
 8005cf8:	08005d55 	.word	0x08005d55
 8005cfc:	08005d6d 	.word	0x08005d6d
 8005d00:	08005d6d 	.word	0x08005d6d
 8005d04:	08005d6d 	.word	0x08005d6d
 8005d08:	08005d6d 	.word	0x08005d6d
 8005d0c:	08005d6d 	.word	0x08005d6d
 8005d10:	08005d6d 	.word	0x08005d6d
 8005d14:	08005d6d 	.word	0x08005d6d
 8005d18:	08005d5d 	.word	0x08005d5d
 8005d1c:	08005d6d 	.word	0x08005d6d
 8005d20:	08005d6d 	.word	0x08005d6d
 8005d24:	08005d6d 	.word	0x08005d6d
 8005d28:	08005d6d 	.word	0x08005d6d
 8005d2c:	08005d6d 	.word	0x08005d6d
 8005d30:	08005d6d 	.word	0x08005d6d
 8005d34:	08005d6d 	.word	0x08005d6d
 8005d38:	08005d65 	.word	0x08005d65
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d42:	e1c0      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005d44:	2304      	movs	r3, #4
 8005d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d4a:	e1bc      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005d4c:	2308      	movs	r3, #8
 8005d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d52:	e1b8      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005d54:	2310      	movs	r3, #16
 8005d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d5a:	e1b4      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005d5c:	2320      	movs	r3, #32
 8005d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d62:	e1b0      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005d64:	2340      	movs	r3, #64	; 0x40
 8005d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d6a:	e1ac      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005d6c:	2380      	movs	r3, #128	; 0x80
 8005d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d72:	e1a8      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a75      	ldr	r2, [pc, #468]	; (8005f50 <UART_SetConfig+0x638>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d130      	bne.n	8005de0 <UART_SetConfig+0x4c8>
 8005d7e:	4b73      	ldr	r3, [pc, #460]	; (8005f4c <UART_SetConfig+0x634>)
 8005d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d82:	f003 0307 	and.w	r3, r3, #7
 8005d86:	2b05      	cmp	r3, #5
 8005d88:	d826      	bhi.n	8005dd8 <UART_SetConfig+0x4c0>
 8005d8a:	a201      	add	r2, pc, #4	; (adr r2, 8005d90 <UART_SetConfig+0x478>)
 8005d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d90:	08005da9 	.word	0x08005da9
 8005d94:	08005db1 	.word	0x08005db1
 8005d98:	08005db9 	.word	0x08005db9
 8005d9c:	08005dc1 	.word	0x08005dc1
 8005da0:	08005dc9 	.word	0x08005dc9
 8005da4:	08005dd1 	.word	0x08005dd1
 8005da8:	2300      	movs	r3, #0
 8005daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dae:	e18a      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005db0:	2304      	movs	r3, #4
 8005db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005db6:	e186      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005db8:	2308      	movs	r3, #8
 8005dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dbe:	e182      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005dc0:	2310      	movs	r3, #16
 8005dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dc6:	e17e      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005dc8:	2320      	movs	r3, #32
 8005dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dce:	e17a      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005dd0:	2340      	movs	r3, #64	; 0x40
 8005dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dd6:	e176      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005dd8:	2380      	movs	r3, #128	; 0x80
 8005dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dde:	e172      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a5b      	ldr	r2, [pc, #364]	; (8005f54 <UART_SetConfig+0x63c>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d130      	bne.n	8005e4c <UART_SetConfig+0x534>
 8005dea:	4b58      	ldr	r3, [pc, #352]	; (8005f4c <UART_SetConfig+0x634>)
 8005dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dee:	f003 0307 	and.w	r3, r3, #7
 8005df2:	2b05      	cmp	r3, #5
 8005df4:	d826      	bhi.n	8005e44 <UART_SetConfig+0x52c>
 8005df6:	a201      	add	r2, pc, #4	; (adr r2, 8005dfc <UART_SetConfig+0x4e4>)
 8005df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfc:	08005e15 	.word	0x08005e15
 8005e00:	08005e1d 	.word	0x08005e1d
 8005e04:	08005e25 	.word	0x08005e25
 8005e08:	08005e2d 	.word	0x08005e2d
 8005e0c:	08005e35 	.word	0x08005e35
 8005e10:	08005e3d 	.word	0x08005e3d
 8005e14:	2300      	movs	r3, #0
 8005e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e1a:	e154      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005e1c:	2304      	movs	r3, #4
 8005e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e22:	e150      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005e24:	2308      	movs	r3, #8
 8005e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e2a:	e14c      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005e2c:	2310      	movs	r3, #16
 8005e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e32:	e148      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005e34:	2320      	movs	r3, #32
 8005e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e3a:	e144      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005e3c:	2340      	movs	r3, #64	; 0x40
 8005e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e42:	e140      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005e44:	2380      	movs	r3, #128	; 0x80
 8005e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e4a:	e13c      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a41      	ldr	r2, [pc, #260]	; (8005f58 <UART_SetConfig+0x640>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	f040 8082 	bne.w	8005f5c <UART_SetConfig+0x644>
 8005e58:	4b3c      	ldr	r3, [pc, #240]	; (8005f4c <UART_SetConfig+0x634>)
 8005e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e60:	2b28      	cmp	r3, #40	; 0x28
 8005e62:	d86d      	bhi.n	8005f40 <UART_SetConfig+0x628>
 8005e64:	a201      	add	r2, pc, #4	; (adr r2, 8005e6c <UART_SetConfig+0x554>)
 8005e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6a:	bf00      	nop
 8005e6c:	08005f11 	.word	0x08005f11
 8005e70:	08005f41 	.word	0x08005f41
 8005e74:	08005f41 	.word	0x08005f41
 8005e78:	08005f41 	.word	0x08005f41
 8005e7c:	08005f41 	.word	0x08005f41
 8005e80:	08005f41 	.word	0x08005f41
 8005e84:	08005f41 	.word	0x08005f41
 8005e88:	08005f41 	.word	0x08005f41
 8005e8c:	08005f19 	.word	0x08005f19
 8005e90:	08005f41 	.word	0x08005f41
 8005e94:	08005f41 	.word	0x08005f41
 8005e98:	08005f41 	.word	0x08005f41
 8005e9c:	08005f41 	.word	0x08005f41
 8005ea0:	08005f41 	.word	0x08005f41
 8005ea4:	08005f41 	.word	0x08005f41
 8005ea8:	08005f41 	.word	0x08005f41
 8005eac:	08005f21 	.word	0x08005f21
 8005eb0:	08005f41 	.word	0x08005f41
 8005eb4:	08005f41 	.word	0x08005f41
 8005eb8:	08005f41 	.word	0x08005f41
 8005ebc:	08005f41 	.word	0x08005f41
 8005ec0:	08005f41 	.word	0x08005f41
 8005ec4:	08005f41 	.word	0x08005f41
 8005ec8:	08005f41 	.word	0x08005f41
 8005ecc:	08005f29 	.word	0x08005f29
 8005ed0:	08005f41 	.word	0x08005f41
 8005ed4:	08005f41 	.word	0x08005f41
 8005ed8:	08005f41 	.word	0x08005f41
 8005edc:	08005f41 	.word	0x08005f41
 8005ee0:	08005f41 	.word	0x08005f41
 8005ee4:	08005f41 	.word	0x08005f41
 8005ee8:	08005f41 	.word	0x08005f41
 8005eec:	08005f31 	.word	0x08005f31
 8005ef0:	08005f41 	.word	0x08005f41
 8005ef4:	08005f41 	.word	0x08005f41
 8005ef8:	08005f41 	.word	0x08005f41
 8005efc:	08005f41 	.word	0x08005f41
 8005f00:	08005f41 	.word	0x08005f41
 8005f04:	08005f41 	.word	0x08005f41
 8005f08:	08005f41 	.word	0x08005f41
 8005f0c:	08005f39 	.word	0x08005f39
 8005f10:	2301      	movs	r3, #1
 8005f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f16:	e0d6      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005f18:	2304      	movs	r3, #4
 8005f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f1e:	e0d2      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005f20:	2308      	movs	r3, #8
 8005f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f26:	e0ce      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005f28:	2310      	movs	r3, #16
 8005f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f2e:	e0ca      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005f30:	2320      	movs	r3, #32
 8005f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f36:	e0c6      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005f38:	2340      	movs	r3, #64	; 0x40
 8005f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f3e:	e0c2      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005f40:	2380      	movs	r3, #128	; 0x80
 8005f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f46:	e0be      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8005f48:	40011400 	.word	0x40011400
 8005f4c:	58024400 	.word	0x58024400
 8005f50:	40007800 	.word	0x40007800
 8005f54:	40007c00 	.word	0x40007c00
 8005f58:	40011800 	.word	0x40011800
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4aad      	ldr	r2, [pc, #692]	; (8006218 <UART_SetConfig+0x900>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d176      	bne.n	8006054 <UART_SetConfig+0x73c>
 8005f66:	4bad      	ldr	r3, [pc, #692]	; (800621c <UART_SetConfig+0x904>)
 8005f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f6e:	2b28      	cmp	r3, #40	; 0x28
 8005f70:	d86c      	bhi.n	800604c <UART_SetConfig+0x734>
 8005f72:	a201      	add	r2, pc, #4	; (adr r2, 8005f78 <UART_SetConfig+0x660>)
 8005f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f78:	0800601d 	.word	0x0800601d
 8005f7c:	0800604d 	.word	0x0800604d
 8005f80:	0800604d 	.word	0x0800604d
 8005f84:	0800604d 	.word	0x0800604d
 8005f88:	0800604d 	.word	0x0800604d
 8005f8c:	0800604d 	.word	0x0800604d
 8005f90:	0800604d 	.word	0x0800604d
 8005f94:	0800604d 	.word	0x0800604d
 8005f98:	08006025 	.word	0x08006025
 8005f9c:	0800604d 	.word	0x0800604d
 8005fa0:	0800604d 	.word	0x0800604d
 8005fa4:	0800604d 	.word	0x0800604d
 8005fa8:	0800604d 	.word	0x0800604d
 8005fac:	0800604d 	.word	0x0800604d
 8005fb0:	0800604d 	.word	0x0800604d
 8005fb4:	0800604d 	.word	0x0800604d
 8005fb8:	0800602d 	.word	0x0800602d
 8005fbc:	0800604d 	.word	0x0800604d
 8005fc0:	0800604d 	.word	0x0800604d
 8005fc4:	0800604d 	.word	0x0800604d
 8005fc8:	0800604d 	.word	0x0800604d
 8005fcc:	0800604d 	.word	0x0800604d
 8005fd0:	0800604d 	.word	0x0800604d
 8005fd4:	0800604d 	.word	0x0800604d
 8005fd8:	08006035 	.word	0x08006035
 8005fdc:	0800604d 	.word	0x0800604d
 8005fe0:	0800604d 	.word	0x0800604d
 8005fe4:	0800604d 	.word	0x0800604d
 8005fe8:	0800604d 	.word	0x0800604d
 8005fec:	0800604d 	.word	0x0800604d
 8005ff0:	0800604d 	.word	0x0800604d
 8005ff4:	0800604d 	.word	0x0800604d
 8005ff8:	0800603d 	.word	0x0800603d
 8005ffc:	0800604d 	.word	0x0800604d
 8006000:	0800604d 	.word	0x0800604d
 8006004:	0800604d 	.word	0x0800604d
 8006008:	0800604d 	.word	0x0800604d
 800600c:	0800604d 	.word	0x0800604d
 8006010:	0800604d 	.word	0x0800604d
 8006014:	0800604d 	.word	0x0800604d
 8006018:	08006045 	.word	0x08006045
 800601c:	2301      	movs	r3, #1
 800601e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006022:	e050      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8006024:	2304      	movs	r3, #4
 8006026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800602a:	e04c      	b.n	80060c6 <UART_SetConfig+0x7ae>
 800602c:	2308      	movs	r3, #8
 800602e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006032:	e048      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8006034:	2310      	movs	r3, #16
 8006036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800603a:	e044      	b.n	80060c6 <UART_SetConfig+0x7ae>
 800603c:	2320      	movs	r3, #32
 800603e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006042:	e040      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8006044:	2340      	movs	r3, #64	; 0x40
 8006046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800604a:	e03c      	b.n	80060c6 <UART_SetConfig+0x7ae>
 800604c:	2380      	movs	r3, #128	; 0x80
 800604e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006052:	e038      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a71      	ldr	r2, [pc, #452]	; (8006220 <UART_SetConfig+0x908>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d130      	bne.n	80060c0 <UART_SetConfig+0x7a8>
 800605e:	4b6f      	ldr	r3, [pc, #444]	; (800621c <UART_SetConfig+0x904>)
 8006060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006062:	f003 0307 	and.w	r3, r3, #7
 8006066:	2b05      	cmp	r3, #5
 8006068:	d826      	bhi.n	80060b8 <UART_SetConfig+0x7a0>
 800606a:	a201      	add	r2, pc, #4	; (adr r2, 8006070 <UART_SetConfig+0x758>)
 800606c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006070:	08006089 	.word	0x08006089
 8006074:	08006091 	.word	0x08006091
 8006078:	08006099 	.word	0x08006099
 800607c:	080060a1 	.word	0x080060a1
 8006080:	080060a9 	.word	0x080060a9
 8006084:	080060b1 	.word	0x080060b1
 8006088:	2302      	movs	r3, #2
 800608a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800608e:	e01a      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8006090:	2304      	movs	r3, #4
 8006092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006096:	e016      	b.n	80060c6 <UART_SetConfig+0x7ae>
 8006098:	2308      	movs	r3, #8
 800609a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800609e:	e012      	b.n	80060c6 <UART_SetConfig+0x7ae>
 80060a0:	2310      	movs	r3, #16
 80060a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060a6:	e00e      	b.n	80060c6 <UART_SetConfig+0x7ae>
 80060a8:	2320      	movs	r3, #32
 80060aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ae:	e00a      	b.n	80060c6 <UART_SetConfig+0x7ae>
 80060b0:	2340      	movs	r3, #64	; 0x40
 80060b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060b6:	e006      	b.n	80060c6 <UART_SetConfig+0x7ae>
 80060b8:	2380      	movs	r3, #128	; 0x80
 80060ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060be:	e002      	b.n	80060c6 <UART_SetConfig+0x7ae>
 80060c0:	2380      	movs	r3, #128	; 0x80
 80060c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a55      	ldr	r2, [pc, #340]	; (8006220 <UART_SetConfig+0x908>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	f040 80f8 	bne.w	80062c2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80060d2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80060d6:	2b20      	cmp	r3, #32
 80060d8:	dc46      	bgt.n	8006168 <UART_SetConfig+0x850>
 80060da:	2b02      	cmp	r3, #2
 80060dc:	db75      	blt.n	80061ca <UART_SetConfig+0x8b2>
 80060de:	3b02      	subs	r3, #2
 80060e0:	2b1e      	cmp	r3, #30
 80060e2:	d872      	bhi.n	80061ca <UART_SetConfig+0x8b2>
 80060e4:	a201      	add	r2, pc, #4	; (adr r2, 80060ec <UART_SetConfig+0x7d4>)
 80060e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ea:	bf00      	nop
 80060ec:	0800616f 	.word	0x0800616f
 80060f0:	080061cb 	.word	0x080061cb
 80060f4:	08006177 	.word	0x08006177
 80060f8:	080061cb 	.word	0x080061cb
 80060fc:	080061cb 	.word	0x080061cb
 8006100:	080061cb 	.word	0x080061cb
 8006104:	08006187 	.word	0x08006187
 8006108:	080061cb 	.word	0x080061cb
 800610c:	080061cb 	.word	0x080061cb
 8006110:	080061cb 	.word	0x080061cb
 8006114:	080061cb 	.word	0x080061cb
 8006118:	080061cb 	.word	0x080061cb
 800611c:	080061cb 	.word	0x080061cb
 8006120:	080061cb 	.word	0x080061cb
 8006124:	08006197 	.word	0x08006197
 8006128:	080061cb 	.word	0x080061cb
 800612c:	080061cb 	.word	0x080061cb
 8006130:	080061cb 	.word	0x080061cb
 8006134:	080061cb 	.word	0x080061cb
 8006138:	080061cb 	.word	0x080061cb
 800613c:	080061cb 	.word	0x080061cb
 8006140:	080061cb 	.word	0x080061cb
 8006144:	080061cb 	.word	0x080061cb
 8006148:	080061cb 	.word	0x080061cb
 800614c:	080061cb 	.word	0x080061cb
 8006150:	080061cb 	.word	0x080061cb
 8006154:	080061cb 	.word	0x080061cb
 8006158:	080061cb 	.word	0x080061cb
 800615c:	080061cb 	.word	0x080061cb
 8006160:	080061cb 	.word	0x080061cb
 8006164:	080061bd 	.word	0x080061bd
 8006168:	2b40      	cmp	r3, #64	; 0x40
 800616a:	d02a      	beq.n	80061c2 <UART_SetConfig+0x8aa>
 800616c:	e02d      	b.n	80061ca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800616e:	f7fe f96d 	bl	800444c <HAL_RCCEx_GetD3PCLK1Freq>
 8006172:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006174:	e02f      	b.n	80061d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800617a:	4618      	mov	r0, r3
 800617c:	f7fe f97c 	bl	8004478 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006182:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006184:	e027      	b.n	80061d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006186:	f107 0318 	add.w	r3, r7, #24
 800618a:	4618      	mov	r0, r3
 800618c:	f7fe fac8 	bl	8004720 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006194:	e01f      	b.n	80061d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006196:	4b21      	ldr	r3, [pc, #132]	; (800621c <UART_SetConfig+0x904>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 0320 	and.w	r3, r3, #32
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d009      	beq.n	80061b6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80061a2:	4b1e      	ldr	r3, [pc, #120]	; (800621c <UART_SetConfig+0x904>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	08db      	lsrs	r3, r3, #3
 80061a8:	f003 0303 	and.w	r3, r3, #3
 80061ac:	4a1d      	ldr	r2, [pc, #116]	; (8006224 <UART_SetConfig+0x90c>)
 80061ae:	fa22 f303 	lsr.w	r3, r2, r3
 80061b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80061b4:	e00f      	b.n	80061d6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80061b6:	4b1b      	ldr	r3, [pc, #108]	; (8006224 <UART_SetConfig+0x90c>)
 80061b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061ba:	e00c      	b.n	80061d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80061bc:	4b1a      	ldr	r3, [pc, #104]	; (8006228 <UART_SetConfig+0x910>)
 80061be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061c0:	e009      	b.n	80061d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061c8:	e005      	b.n	80061d6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80061ca:	2300      	movs	r3, #0
 80061cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80061d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80061d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f000 81ee 	beq.w	80065ba <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e2:	4a12      	ldr	r2, [pc, #72]	; (800622c <UART_SetConfig+0x914>)
 80061e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061e8:	461a      	mov	r2, r3
 80061ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80061f0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	4613      	mov	r3, r2
 80061f8:	005b      	lsls	r3, r3, #1
 80061fa:	4413      	add	r3, r2
 80061fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061fe:	429a      	cmp	r2, r3
 8006200:	d305      	bcc.n	800620e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800620a:	429a      	cmp	r2, r3
 800620c:	d910      	bls.n	8006230 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006214:	e1d1      	b.n	80065ba <UART_SetConfig+0xca2>
 8006216:	bf00      	nop
 8006218:	40011c00 	.word	0x40011c00
 800621c:	58024400 	.word	0x58024400
 8006220:	58000c00 	.word	0x58000c00
 8006224:	03d09000 	.word	0x03d09000
 8006228:	003d0900 	.word	0x003d0900
 800622c:	080079fc 	.word	0x080079fc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006232:	2200      	movs	r2, #0
 8006234:	60bb      	str	r3, [r7, #8]
 8006236:	60fa      	str	r2, [r7, #12]
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623c:	4ac0      	ldr	r2, [pc, #768]	; (8006540 <UART_SetConfig+0xc28>)
 800623e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006242:	b29b      	uxth	r3, r3
 8006244:	2200      	movs	r2, #0
 8006246:	603b      	str	r3, [r7, #0]
 8006248:	607a      	str	r2, [r7, #4]
 800624a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800624e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006252:	f7fa f853 	bl	80002fc <__aeabi_uldivmod>
 8006256:	4602      	mov	r2, r0
 8006258:	460b      	mov	r3, r1
 800625a:	4610      	mov	r0, r2
 800625c:	4619      	mov	r1, r3
 800625e:	f04f 0200 	mov.w	r2, #0
 8006262:	f04f 0300 	mov.w	r3, #0
 8006266:	020b      	lsls	r3, r1, #8
 8006268:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800626c:	0202      	lsls	r2, r0, #8
 800626e:	6979      	ldr	r1, [r7, #20]
 8006270:	6849      	ldr	r1, [r1, #4]
 8006272:	0849      	lsrs	r1, r1, #1
 8006274:	2000      	movs	r0, #0
 8006276:	460c      	mov	r4, r1
 8006278:	4605      	mov	r5, r0
 800627a:	eb12 0804 	adds.w	r8, r2, r4
 800627e:	eb43 0905 	adc.w	r9, r3, r5
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	469a      	mov	sl, r3
 800628a:	4693      	mov	fp, r2
 800628c:	4652      	mov	r2, sl
 800628e:	465b      	mov	r3, fp
 8006290:	4640      	mov	r0, r8
 8006292:	4649      	mov	r1, r9
 8006294:	f7fa f832 	bl	80002fc <__aeabi_uldivmod>
 8006298:	4602      	mov	r2, r0
 800629a:	460b      	mov	r3, r1
 800629c:	4613      	mov	r3, r2
 800629e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062a6:	d308      	bcc.n	80062ba <UART_SetConfig+0x9a2>
 80062a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062ae:	d204      	bcs.n	80062ba <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062b6:	60da      	str	r2, [r3, #12]
 80062b8:	e17f      	b.n	80065ba <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80062c0:	e17b      	b.n	80065ba <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	69db      	ldr	r3, [r3, #28]
 80062c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062ca:	f040 80bd 	bne.w	8006448 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80062ce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80062d2:	2b20      	cmp	r3, #32
 80062d4:	dc48      	bgt.n	8006368 <UART_SetConfig+0xa50>
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	db7b      	blt.n	80063d2 <UART_SetConfig+0xaba>
 80062da:	2b20      	cmp	r3, #32
 80062dc:	d879      	bhi.n	80063d2 <UART_SetConfig+0xaba>
 80062de:	a201      	add	r2, pc, #4	; (adr r2, 80062e4 <UART_SetConfig+0x9cc>)
 80062e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e4:	0800636f 	.word	0x0800636f
 80062e8:	08006377 	.word	0x08006377
 80062ec:	080063d3 	.word	0x080063d3
 80062f0:	080063d3 	.word	0x080063d3
 80062f4:	0800637f 	.word	0x0800637f
 80062f8:	080063d3 	.word	0x080063d3
 80062fc:	080063d3 	.word	0x080063d3
 8006300:	080063d3 	.word	0x080063d3
 8006304:	0800638f 	.word	0x0800638f
 8006308:	080063d3 	.word	0x080063d3
 800630c:	080063d3 	.word	0x080063d3
 8006310:	080063d3 	.word	0x080063d3
 8006314:	080063d3 	.word	0x080063d3
 8006318:	080063d3 	.word	0x080063d3
 800631c:	080063d3 	.word	0x080063d3
 8006320:	080063d3 	.word	0x080063d3
 8006324:	0800639f 	.word	0x0800639f
 8006328:	080063d3 	.word	0x080063d3
 800632c:	080063d3 	.word	0x080063d3
 8006330:	080063d3 	.word	0x080063d3
 8006334:	080063d3 	.word	0x080063d3
 8006338:	080063d3 	.word	0x080063d3
 800633c:	080063d3 	.word	0x080063d3
 8006340:	080063d3 	.word	0x080063d3
 8006344:	080063d3 	.word	0x080063d3
 8006348:	080063d3 	.word	0x080063d3
 800634c:	080063d3 	.word	0x080063d3
 8006350:	080063d3 	.word	0x080063d3
 8006354:	080063d3 	.word	0x080063d3
 8006358:	080063d3 	.word	0x080063d3
 800635c:	080063d3 	.word	0x080063d3
 8006360:	080063d3 	.word	0x080063d3
 8006364:	080063c5 	.word	0x080063c5
 8006368:	2b40      	cmp	r3, #64	; 0x40
 800636a:	d02e      	beq.n	80063ca <UART_SetConfig+0xab2>
 800636c:	e031      	b.n	80063d2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800636e:	f7fc fe83 	bl	8003078 <HAL_RCC_GetPCLK1Freq>
 8006372:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006374:	e033      	b.n	80063de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006376:	f7fc fe95 	bl	80030a4 <HAL_RCC_GetPCLK2Freq>
 800637a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800637c:	e02f      	b.n	80063de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800637e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006382:	4618      	mov	r0, r3
 8006384:	f7fe f878 	bl	8004478 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800638c:	e027      	b.n	80063de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800638e:	f107 0318 	add.w	r3, r7, #24
 8006392:	4618      	mov	r0, r3
 8006394:	f7fe f9c4 	bl	8004720 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800639c:	e01f      	b.n	80063de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800639e:	4b69      	ldr	r3, [pc, #420]	; (8006544 <UART_SetConfig+0xc2c>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0320 	and.w	r3, r3, #32
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d009      	beq.n	80063be <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80063aa:	4b66      	ldr	r3, [pc, #408]	; (8006544 <UART_SetConfig+0xc2c>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	08db      	lsrs	r3, r3, #3
 80063b0:	f003 0303 	and.w	r3, r3, #3
 80063b4:	4a64      	ldr	r2, [pc, #400]	; (8006548 <UART_SetConfig+0xc30>)
 80063b6:	fa22 f303 	lsr.w	r3, r2, r3
 80063ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063bc:	e00f      	b.n	80063de <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80063be:	4b62      	ldr	r3, [pc, #392]	; (8006548 <UART_SetConfig+0xc30>)
 80063c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063c2:	e00c      	b.n	80063de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80063c4:	4b61      	ldr	r3, [pc, #388]	; (800654c <UART_SetConfig+0xc34>)
 80063c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063c8:	e009      	b.n	80063de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063d0:	e005      	b.n	80063de <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80063d2:	2300      	movs	r3, #0
 80063d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80063dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 80ea 	beq.w	80065ba <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ea:	4a55      	ldr	r2, [pc, #340]	; (8006540 <UART_SetConfig+0xc28>)
 80063ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063f0:	461a      	mov	r2, r3
 80063f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80063f8:	005a      	lsls	r2, r3, #1
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	085b      	lsrs	r3, r3, #1
 8006400:	441a      	add	r2, r3
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	fbb2 f3f3 	udiv	r3, r2, r3
 800640a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800640c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640e:	2b0f      	cmp	r3, #15
 8006410:	d916      	bls.n	8006440 <UART_SetConfig+0xb28>
 8006412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006418:	d212      	bcs.n	8006440 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800641a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641c:	b29b      	uxth	r3, r3
 800641e:	f023 030f 	bic.w	r3, r3, #15
 8006422:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006426:	085b      	lsrs	r3, r3, #1
 8006428:	b29b      	uxth	r3, r3
 800642a:	f003 0307 	and.w	r3, r3, #7
 800642e:	b29a      	uxth	r2, r3
 8006430:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006432:	4313      	orrs	r3, r2
 8006434:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800643c:	60da      	str	r2, [r3, #12]
 800643e:	e0bc      	b.n	80065ba <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006446:	e0b8      	b.n	80065ba <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006448:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800644c:	2b20      	cmp	r3, #32
 800644e:	dc4b      	bgt.n	80064e8 <UART_SetConfig+0xbd0>
 8006450:	2b00      	cmp	r3, #0
 8006452:	f2c0 8087 	blt.w	8006564 <UART_SetConfig+0xc4c>
 8006456:	2b20      	cmp	r3, #32
 8006458:	f200 8084 	bhi.w	8006564 <UART_SetConfig+0xc4c>
 800645c:	a201      	add	r2, pc, #4	; (adr r2, 8006464 <UART_SetConfig+0xb4c>)
 800645e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006462:	bf00      	nop
 8006464:	080064ef 	.word	0x080064ef
 8006468:	080064f7 	.word	0x080064f7
 800646c:	08006565 	.word	0x08006565
 8006470:	08006565 	.word	0x08006565
 8006474:	080064ff 	.word	0x080064ff
 8006478:	08006565 	.word	0x08006565
 800647c:	08006565 	.word	0x08006565
 8006480:	08006565 	.word	0x08006565
 8006484:	0800650f 	.word	0x0800650f
 8006488:	08006565 	.word	0x08006565
 800648c:	08006565 	.word	0x08006565
 8006490:	08006565 	.word	0x08006565
 8006494:	08006565 	.word	0x08006565
 8006498:	08006565 	.word	0x08006565
 800649c:	08006565 	.word	0x08006565
 80064a0:	08006565 	.word	0x08006565
 80064a4:	0800651f 	.word	0x0800651f
 80064a8:	08006565 	.word	0x08006565
 80064ac:	08006565 	.word	0x08006565
 80064b0:	08006565 	.word	0x08006565
 80064b4:	08006565 	.word	0x08006565
 80064b8:	08006565 	.word	0x08006565
 80064bc:	08006565 	.word	0x08006565
 80064c0:	08006565 	.word	0x08006565
 80064c4:	08006565 	.word	0x08006565
 80064c8:	08006565 	.word	0x08006565
 80064cc:	08006565 	.word	0x08006565
 80064d0:	08006565 	.word	0x08006565
 80064d4:	08006565 	.word	0x08006565
 80064d8:	08006565 	.word	0x08006565
 80064dc:	08006565 	.word	0x08006565
 80064e0:	08006565 	.word	0x08006565
 80064e4:	08006557 	.word	0x08006557
 80064e8:	2b40      	cmp	r3, #64	; 0x40
 80064ea:	d037      	beq.n	800655c <UART_SetConfig+0xc44>
 80064ec:	e03a      	b.n	8006564 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064ee:	f7fc fdc3 	bl	8003078 <HAL_RCC_GetPCLK1Freq>
 80064f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80064f4:	e03c      	b.n	8006570 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064f6:	f7fc fdd5 	bl	80030a4 <HAL_RCC_GetPCLK2Freq>
 80064fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80064fc:	e038      	b.n	8006570 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006502:	4618      	mov	r0, r3
 8006504:	f7fd ffb8 	bl	8004478 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800650c:	e030      	b.n	8006570 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800650e:	f107 0318 	add.w	r3, r7, #24
 8006512:	4618      	mov	r0, r3
 8006514:	f7fe f904 	bl	8004720 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800651c:	e028      	b.n	8006570 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800651e:	4b09      	ldr	r3, [pc, #36]	; (8006544 <UART_SetConfig+0xc2c>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0320 	and.w	r3, r3, #32
 8006526:	2b00      	cmp	r3, #0
 8006528:	d012      	beq.n	8006550 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800652a:	4b06      	ldr	r3, [pc, #24]	; (8006544 <UART_SetConfig+0xc2c>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	08db      	lsrs	r3, r3, #3
 8006530:	f003 0303 	and.w	r3, r3, #3
 8006534:	4a04      	ldr	r2, [pc, #16]	; (8006548 <UART_SetConfig+0xc30>)
 8006536:	fa22 f303 	lsr.w	r3, r2, r3
 800653a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800653c:	e018      	b.n	8006570 <UART_SetConfig+0xc58>
 800653e:	bf00      	nop
 8006540:	080079fc 	.word	0x080079fc
 8006544:	58024400 	.word	0x58024400
 8006548:	03d09000 	.word	0x03d09000
 800654c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006550:	4b24      	ldr	r3, [pc, #144]	; (80065e4 <UART_SetConfig+0xccc>)
 8006552:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006554:	e00c      	b.n	8006570 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006556:	4b24      	ldr	r3, [pc, #144]	; (80065e8 <UART_SetConfig+0xcd0>)
 8006558:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800655a:	e009      	b.n	8006570 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800655c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006560:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006562:	e005      	b.n	8006570 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006564:	2300      	movs	r3, #0
 8006566:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800656e:	bf00      	nop
    }

    if (pclk != 0U)
 8006570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006572:	2b00      	cmp	r3, #0
 8006574:	d021      	beq.n	80065ba <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657a:	4a1c      	ldr	r2, [pc, #112]	; (80065ec <UART_SetConfig+0xcd4>)
 800657c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006580:	461a      	mov	r2, r3
 8006582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006584:	fbb3 f2f2 	udiv	r2, r3, r2
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	085b      	lsrs	r3, r3, #1
 800658e:	441a      	add	r2, r3
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	fbb2 f3f3 	udiv	r3, r2, r3
 8006598:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800659a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800659c:	2b0f      	cmp	r3, #15
 800659e:	d909      	bls.n	80065b4 <UART_SetConfig+0xc9c>
 80065a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065a6:	d205      	bcs.n	80065b4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	60da      	str	r2, [r3, #12]
 80065b2:	e002      	b.n	80065ba <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	2201      	movs	r2, #1
 80065be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	2200      	movs	r2, #0
 80065ce:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	2200      	movs	r2, #0
 80065d4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80065d6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3748      	adds	r7, #72	; 0x48
 80065de:	46bd      	mov	sp, r7
 80065e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065e4:	03d09000 	.word	0x03d09000
 80065e8:	003d0900 	.word	0x003d0900
 80065ec:	080079fc 	.word	0x080079fc

080065f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fc:	f003 0301 	and.w	r3, r3, #1
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00a      	beq.n	800661a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	430a      	orrs	r2, r1
 8006618:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661e:	f003 0302 	and.w	r3, r3, #2
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00a      	beq.n	800663c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	430a      	orrs	r2, r1
 800663a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006640:	f003 0304 	and.w	r3, r3, #4
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00a      	beq.n	800665e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	430a      	orrs	r2, r1
 800665c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006662:	f003 0308 	and.w	r3, r3, #8
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00a      	beq.n	8006680 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	430a      	orrs	r2, r1
 800667e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006684:	f003 0310 	and.w	r3, r3, #16
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00a      	beq.n	80066a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	430a      	orrs	r2, r1
 80066a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a6:	f003 0320 	and.w	r3, r3, #32
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00a      	beq.n	80066c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	430a      	orrs	r2, r1
 80066c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d01a      	beq.n	8006706 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	430a      	orrs	r2, r1
 80066e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066ee:	d10a      	bne.n	8006706 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	430a      	orrs	r2, r1
 8006704:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800670a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00a      	beq.n	8006728 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	430a      	orrs	r2, r1
 8006726:	605a      	str	r2, [r3, #4]
  }
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b098      	sub	sp, #96	; 0x60
 8006738:	af02      	add	r7, sp, #8
 800673a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006744:	f7fa fc48 	bl	8000fd8 <HAL_GetTick>
 8006748:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 0308 	and.w	r3, r3, #8
 8006754:	2b08      	cmp	r3, #8
 8006756:	d12f      	bne.n	80067b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006758:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800675c:	9300      	str	r3, [sp, #0]
 800675e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006760:	2200      	movs	r2, #0
 8006762:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 f88e 	bl	8006888 <UART_WaitOnFlagUntilTimeout>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d022      	beq.n	80067b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677a:	e853 3f00 	ldrex	r3, [r3]
 800677e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006786:	653b      	str	r3, [r7, #80]	; 0x50
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	461a      	mov	r2, r3
 800678e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006790:	647b      	str	r3, [r7, #68]	; 0x44
 8006792:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006794:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006796:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006798:	e841 2300 	strex	r3, r2, [r1]
 800679c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800679e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d1e6      	bne.n	8006772 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2220      	movs	r2, #32
 80067a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e063      	b.n	8006880 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0304 	and.w	r3, r3, #4
 80067c2:	2b04      	cmp	r3, #4
 80067c4:	d149      	bne.n	800685a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067ca:	9300      	str	r3, [sp, #0]
 80067cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067ce:	2200      	movs	r2, #0
 80067d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 f857 	bl	8006888 <UART_WaitOnFlagUntilTimeout>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d03c      	beq.n	800685a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e8:	e853 3f00 	ldrex	r3, [r3]
 80067ec:	623b      	str	r3, [r7, #32]
   return(result);
 80067ee:	6a3b      	ldr	r3, [r7, #32]
 80067f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	461a      	mov	r2, r3
 80067fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067fe:	633b      	str	r3, [r7, #48]	; 0x30
 8006800:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006802:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006806:	e841 2300 	strex	r3, r2, [r1]
 800680a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800680c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1e6      	bne.n	80067e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	3308      	adds	r3, #8
 8006818:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	e853 3f00 	ldrex	r3, [r3]
 8006820:	60fb      	str	r3, [r7, #12]
   return(result);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f023 0301 	bic.w	r3, r3, #1
 8006828:	64bb      	str	r3, [r7, #72]	; 0x48
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	3308      	adds	r3, #8
 8006830:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006832:	61fa      	str	r2, [r7, #28]
 8006834:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006836:	69b9      	ldr	r1, [r7, #24]
 8006838:	69fa      	ldr	r2, [r7, #28]
 800683a:	e841 2300 	strex	r3, r2, [r1]
 800683e:	617b      	str	r3, [r7, #20]
   return(result);
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1e5      	bne.n	8006812 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2220      	movs	r2, #32
 800684a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e012      	b.n	8006880 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2220      	movs	r2, #32
 800685e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2220      	movs	r2, #32
 8006866:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3758      	adds	r7, #88	; 0x58
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	603b      	str	r3, [r7, #0]
 8006894:	4613      	mov	r3, r2
 8006896:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006898:	e049      	b.n	800692e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a0:	d045      	beq.n	800692e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068a2:	f7fa fb99 	bl	8000fd8 <HAL_GetTick>
 80068a6:	4602      	mov	r2, r0
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	69ba      	ldr	r2, [r7, #24]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d302      	bcc.n	80068b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d101      	bne.n	80068bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e048      	b.n	800694e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0304 	and.w	r3, r3, #4
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d031      	beq.n	800692e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	69db      	ldr	r3, [r3, #28]
 80068d0:	f003 0308 	and.w	r3, r3, #8
 80068d4:	2b08      	cmp	r3, #8
 80068d6:	d110      	bne.n	80068fa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2208      	movs	r2, #8
 80068de:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80068e0:	68f8      	ldr	r0, [r7, #12]
 80068e2:	f000 f95b 	bl	8006b9c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2208      	movs	r2, #8
 80068ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e029      	b.n	800694e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	69db      	ldr	r3, [r3, #28]
 8006900:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006904:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006908:	d111      	bne.n	800692e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006912:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f000 f941 	bl	8006b9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2220      	movs	r2, #32
 800691e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800692a:	2303      	movs	r3, #3
 800692c:	e00f      	b.n	800694e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	69da      	ldr	r2, [r3, #28]
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	4013      	ands	r3, r2
 8006938:	68ba      	ldr	r2, [r7, #8]
 800693a:	429a      	cmp	r2, r3
 800693c:	bf0c      	ite	eq
 800693e:	2301      	moveq	r3, #1
 8006940:	2300      	movne	r3, #0
 8006942:	b2db      	uxtb	r3, r3
 8006944:	461a      	mov	r2, r3
 8006946:	79fb      	ldrb	r3, [r7, #7]
 8006948:	429a      	cmp	r2, r3
 800694a:	d0a6      	beq.n	800689a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
	...

08006958 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006958:	b480      	push	{r7}
 800695a:	b0a3      	sub	sp, #140	; 0x8c
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	4613      	mov	r3, r2
 8006964:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	88fa      	ldrh	r2, [r7, #6]
 8006970:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	88fa      	ldrh	r2, [r7, #6]
 8006978:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800698a:	d10e      	bne.n	80069aa <UART_Start_Receive_IT+0x52>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d105      	bne.n	80069a0 <UART_Start_Receive_IT+0x48>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f240 12ff 	movw	r2, #511	; 0x1ff
 800699a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800699e:	e02d      	b.n	80069fc <UART_Start_Receive_IT+0xa4>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	22ff      	movs	r2, #255	; 0xff
 80069a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80069a8:	e028      	b.n	80069fc <UART_Start_Receive_IT+0xa4>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d10d      	bne.n	80069ce <UART_Start_Receive_IT+0x76>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d104      	bne.n	80069c4 <UART_Start_Receive_IT+0x6c>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	22ff      	movs	r2, #255	; 0xff
 80069be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80069c2:	e01b      	b.n	80069fc <UART_Start_Receive_IT+0xa4>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	227f      	movs	r2, #127	; 0x7f
 80069c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80069cc:	e016      	b.n	80069fc <UART_Start_Receive_IT+0xa4>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069d6:	d10d      	bne.n	80069f4 <UART_Start_Receive_IT+0x9c>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d104      	bne.n	80069ea <UART_Start_Receive_IT+0x92>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	227f      	movs	r2, #127	; 0x7f
 80069e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80069e8:	e008      	b.n	80069fc <UART_Start_Receive_IT+0xa4>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	223f      	movs	r2, #63	; 0x3f
 80069ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80069f2:	e003      	b.n	80069fc <UART_Start_Receive_IT+0xa4>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2222      	movs	r2, #34	; 0x22
 8006a08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	3308      	adds	r3, #8
 8006a12:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a16:	e853 3f00 	ldrex	r3, [r3]
 8006a1a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006a1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a1e:	f043 0301 	orr.w	r3, r3, #1
 8006a22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	3308      	adds	r3, #8
 8006a2c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006a30:	673a      	str	r2, [r7, #112]	; 0x70
 8006a32:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a34:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006a36:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006a38:	e841 2300 	strex	r3, r2, [r1]
 8006a3c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006a3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1e3      	bne.n	8006a0c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a4c:	d14f      	bne.n	8006aee <UART_Start_Receive_IT+0x196>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006a54:	88fa      	ldrh	r2, [r7, #6]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d349      	bcc.n	8006aee <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a62:	d107      	bne.n	8006a74 <UART_Start_Receive_IT+0x11c>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d103      	bne.n	8006a74 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	4a47      	ldr	r2, [pc, #284]	; (8006b8c <UART_Start_Receive_IT+0x234>)
 8006a70:	675a      	str	r2, [r3, #116]	; 0x74
 8006a72:	e002      	b.n	8006a7a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	4a46      	ldr	r2, [pc, #280]	; (8006b90 <UART_Start_Receive_IT+0x238>)
 8006a78:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d01a      	beq.n	8006ab8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a8a:	e853 3f00 	ldrex	r3, [r3]
 8006a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006aa6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006aaa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006aac:	e841 2300 	strex	r3, r2, [r1]
 8006ab0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d1e4      	bne.n	8006a82 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	3308      	adds	r3, #8
 8006abe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ac2:	e853 3f00 	ldrex	r3, [r3]
 8006ac6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ace:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	3308      	adds	r3, #8
 8006ad6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006ad8:	64ba      	str	r2, [r7, #72]	; 0x48
 8006ada:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006adc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ade:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ae0:	e841 2300 	strex	r3, r2, [r1]
 8006ae4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006ae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1e5      	bne.n	8006ab8 <UART_Start_Receive_IT+0x160>
 8006aec:	e046      	b.n	8006b7c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006af6:	d107      	bne.n	8006b08 <UART_Start_Receive_IT+0x1b0>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d103      	bne.n	8006b08 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	4a24      	ldr	r2, [pc, #144]	; (8006b94 <UART_Start_Receive_IT+0x23c>)
 8006b04:	675a      	str	r2, [r3, #116]	; 0x74
 8006b06:	e002      	b.n	8006b0e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	4a23      	ldr	r2, [pc, #140]	; (8006b98 <UART_Start_Receive_IT+0x240>)
 8006b0c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d019      	beq.n	8006b4a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1e:	e853 3f00 	ldrex	r3, [r3]
 8006b22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b26:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006b2a:	677b      	str	r3, [r7, #116]	; 0x74
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	461a      	mov	r2, r3
 8006b32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b34:	637b      	str	r3, [r7, #52]	; 0x34
 8006b36:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b3c:	e841 2300 	strex	r3, r2, [r1]
 8006b40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1e6      	bne.n	8006b16 <UART_Start_Receive_IT+0x1be>
 8006b48:	e018      	b.n	8006b7c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	e853 3f00 	ldrex	r3, [r3]
 8006b56:	613b      	str	r3, [r7, #16]
   return(result);
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	f043 0320 	orr.w	r3, r3, #32
 8006b5e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	461a      	mov	r2, r3
 8006b66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b68:	623b      	str	r3, [r7, #32]
 8006b6a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6c:	69f9      	ldr	r1, [r7, #28]
 8006b6e:	6a3a      	ldr	r2, [r7, #32]
 8006b70:	e841 2300 	strex	r3, r2, [r1]
 8006b74:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1e6      	bne.n	8006b4a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	378c      	adds	r7, #140	; 0x8c
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	080073bd 	.word	0x080073bd
 8006b90:	0800705d 	.word	0x0800705d
 8006b94:	08006ea5 	.word	0x08006ea5
 8006b98:	08006ced 	.word	0x08006ced

08006b9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b095      	sub	sp, #84	; 0x54
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bac:	e853 3f00 	ldrex	r3, [r3]
 8006bb0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bc2:	643b      	str	r3, [r7, #64]	; 0x40
 8006bc4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006bc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bca:	e841 2300 	strex	r3, r2, [r1]
 8006bce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1e6      	bne.n	8006ba4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	3308      	adds	r3, #8
 8006bdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bde:	6a3b      	ldr	r3, [r7, #32]
 8006be0:	e853 3f00 	ldrex	r3, [r3]
 8006be4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006be6:	69fa      	ldr	r2, [r7, #28]
 8006be8:	4b1e      	ldr	r3, [pc, #120]	; (8006c64 <UART_EndRxTransfer+0xc8>)
 8006bea:	4013      	ands	r3, r2
 8006bec:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	3308      	adds	r3, #8
 8006bf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bf6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bf8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bfe:	e841 2300 	strex	r3, r2, [r1]
 8006c02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1e5      	bne.n	8006bd6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d118      	bne.n	8006c44 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	e853 3f00 	ldrex	r3, [r3]
 8006c1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	f023 0310 	bic.w	r3, r3, #16
 8006c26:	647b      	str	r3, [r7, #68]	; 0x44
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c30:	61bb      	str	r3, [r7, #24]
 8006c32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c34:	6979      	ldr	r1, [r7, #20]
 8006c36:	69ba      	ldr	r2, [r7, #24]
 8006c38:	e841 2300 	strex	r3, r2, [r1]
 8006c3c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d1e6      	bne.n	8006c12 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2220      	movs	r2, #32
 8006c48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006c58:	bf00      	nop
 8006c5a:	3754      	adds	r7, #84	; 0x54
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr
 8006c64:	effffffe 	.word	0xeffffffe

08006c68 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f7fe fe30 	bl	80058ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c8c:	bf00      	nop
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b088      	sub	sp, #32
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	e853 3f00 	ldrex	r3, [r3]
 8006ca8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cb0:	61fb      	str	r3, [r7, #28]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	61bb      	str	r3, [r7, #24]
 8006cbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cbe:	6979      	ldr	r1, [r7, #20]
 8006cc0:	69ba      	ldr	r2, [r7, #24]
 8006cc2:	e841 2300 	strex	r3, r2, [r1]
 8006cc6:	613b      	str	r3, [r7, #16]
   return(result);
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1e6      	bne.n	8006c9c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2220      	movs	r2, #32
 8006cd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f7fe fdfb 	bl	80058d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ce2:	bf00      	nop
 8006ce4:	3720      	adds	r7, #32
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
	...

08006cec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b09c      	sub	sp, #112	; 0x70
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006cfa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d04:	2b22      	cmp	r3, #34	; 0x22
 8006d06:	f040 80be 	bne.w	8006e86 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d10:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006d14:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006d18:	b2d9      	uxtb	r1, r3
 8006d1a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006d1e:	b2da      	uxtb	r2, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d24:	400a      	ands	r2, r1
 8006d26:	b2d2      	uxtb	r2, r2
 8006d28:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d2e:	1c5a      	adds	r2, r3, #1
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	3b01      	subs	r3, #1
 8006d3e:	b29a      	uxth	r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f040 80a1 	bne.w	8006e96 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d5c:	e853 3f00 	ldrex	r3, [r3]
 8006d60:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d68:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	461a      	mov	r2, r3
 8006d70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d72:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d74:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d7a:	e841 2300 	strex	r3, r2, [r1]
 8006d7e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006d80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1e6      	bne.n	8006d54 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	3308      	adds	r3, #8
 8006d8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d90:	e853 3f00 	ldrex	r3, [r3]
 8006d94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d98:	f023 0301 	bic.w	r3, r3, #1
 8006d9c:	667b      	str	r3, [r7, #100]	; 0x64
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	3308      	adds	r3, #8
 8006da4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006da6:	647a      	str	r2, [r7, #68]	; 0x44
 8006da8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006daa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006dac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006dae:	e841 2300 	strex	r3, r2, [r1]
 8006db2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1e5      	bne.n	8006d86 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2220      	movs	r2, #32
 8006dbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a33      	ldr	r2, [pc, #204]	; (8006ea0 <UART_RxISR_8BIT+0x1b4>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d01f      	beq.n	8006e18 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d018      	beq.n	8006e18 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dee:	e853 3f00 	ldrex	r3, [r3]
 8006df2:	623b      	str	r3, [r7, #32]
   return(result);
 8006df4:	6a3b      	ldr	r3, [r7, #32]
 8006df6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006dfa:	663b      	str	r3, [r7, #96]	; 0x60
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	461a      	mov	r2, r3
 8006e02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e04:	633b      	str	r3, [r7, #48]	; 0x30
 8006e06:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e0c:	e841 2300 	strex	r3, r2, [r1]
 8006e10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1e6      	bne.n	8006de6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d12e      	bne.n	8006e7e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	e853 3f00 	ldrex	r3, [r3]
 8006e32:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f023 0310 	bic.w	r3, r3, #16
 8006e3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	461a      	mov	r2, r3
 8006e42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e44:	61fb      	str	r3, [r7, #28]
 8006e46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e48:	69b9      	ldr	r1, [r7, #24]
 8006e4a:	69fa      	ldr	r2, [r7, #28]
 8006e4c:	e841 2300 	strex	r3, r2, [r1]
 8006e50:	617b      	str	r3, [r7, #20]
   return(result);
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1e6      	bne.n	8006e26 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	69db      	ldr	r3, [r3, #28]
 8006e5e:	f003 0310 	and.w	r3, r3, #16
 8006e62:	2b10      	cmp	r3, #16
 8006e64:	d103      	bne.n	8006e6e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2210      	movs	r2, #16
 8006e6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e74:	4619      	mov	r1, r3
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f7fe fd42 	bl	8005900 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e7c:	e00b      	b.n	8006e96 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7f9 ffd0 	bl	8000e24 <HAL_UART_RxCpltCallback>
}
 8006e84:	e007      	b.n	8006e96 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	699a      	ldr	r2, [r3, #24]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f042 0208 	orr.w	r2, r2, #8
 8006e94:	619a      	str	r2, [r3, #24]
}
 8006e96:	bf00      	nop
 8006e98:	3770      	adds	r7, #112	; 0x70
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	58000c00 	.word	0x58000c00

08006ea4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b09c      	sub	sp, #112	; 0x70
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006eb2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ebc:	2b22      	cmp	r3, #34	; 0x22
 8006ebe:	f040 80be 	bne.w	800703e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ed0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006ed2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006ed6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006eda:	4013      	ands	r3, r2
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ee0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ee6:	1c9a      	adds	r2, r3, #2
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	f040 80a1 	bne.w	800704e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f14:	e853 3f00 	ldrex	r3, [r3]
 8006f18:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006f1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f20:	667b      	str	r3, [r7, #100]	; 0x64
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	461a      	mov	r2, r3
 8006f28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f2a:	657b      	str	r3, [r7, #84]	; 0x54
 8006f2c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006f30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006f32:	e841 2300 	strex	r3, r2, [r1]
 8006f36:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1e6      	bne.n	8006f0c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	3308      	adds	r3, #8
 8006f44:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f48:	e853 3f00 	ldrex	r3, [r3]
 8006f4c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f50:	f023 0301 	bic.w	r3, r3, #1
 8006f54:	663b      	str	r3, [r7, #96]	; 0x60
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	3308      	adds	r3, #8
 8006f5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006f5e:	643a      	str	r2, [r7, #64]	; 0x40
 8006f60:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f62:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f66:	e841 2300 	strex	r3, r2, [r1]
 8006f6a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1e5      	bne.n	8006f3e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2220      	movs	r2, #32
 8006f76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a33      	ldr	r2, [pc, #204]	; (8007058 <UART_RxISR_16BIT+0x1b4>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d01f      	beq.n	8006fd0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d018      	beq.n	8006fd0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa4:	6a3b      	ldr	r3, [r7, #32]
 8006fa6:	e853 3f00 	ldrex	r3, [r3]
 8006faa:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006fb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	461a      	mov	r2, r3
 8006fba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fbe:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fc4:	e841 2300 	strex	r3, r2, [r1]
 8006fc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d1e6      	bne.n	8006f9e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d12e      	bne.n	8007036 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	e853 3f00 	ldrex	r3, [r3]
 8006fea:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	f023 0310 	bic.w	r3, r3, #16
 8006ff2:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ffc:	61bb      	str	r3, [r7, #24]
 8006ffe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007000:	6979      	ldr	r1, [r7, #20]
 8007002:	69ba      	ldr	r2, [r7, #24]
 8007004:	e841 2300 	strex	r3, r2, [r1]
 8007008:	613b      	str	r3, [r7, #16]
   return(result);
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1e6      	bne.n	8006fde <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	69db      	ldr	r3, [r3, #28]
 8007016:	f003 0310 	and.w	r3, r3, #16
 800701a:	2b10      	cmp	r3, #16
 800701c:	d103      	bne.n	8007026 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2210      	movs	r2, #16
 8007024:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800702c:	4619      	mov	r1, r3
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f7fe fc66 	bl	8005900 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007034:	e00b      	b.n	800704e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f7f9 fef4 	bl	8000e24 <HAL_UART_RxCpltCallback>
}
 800703c:	e007      	b.n	800704e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	699a      	ldr	r2, [r3, #24]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f042 0208 	orr.w	r2, r2, #8
 800704c:	619a      	str	r2, [r3, #24]
}
 800704e:	bf00      	nop
 8007050:	3770      	adds	r7, #112	; 0x70
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	58000c00 	.word	0x58000c00

0800705c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b0ac      	sub	sp, #176	; 0xb0
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800706a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	69db      	ldr	r3, [r3, #28]
 8007074:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007092:	2b22      	cmp	r3, #34	; 0x22
 8007094:	f040 8180 	bne.w	8007398 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800709e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80070a2:	e123      	b.n	80072ec <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070aa:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80070ae:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80070b2:	b2d9      	uxtb	r1, r3
 80070b4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80070b8:	b2da      	uxtb	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070be:	400a      	ands	r2, r1
 80070c0:	b2d2      	uxtb	r2, r2
 80070c2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070c8:	1c5a      	adds	r2, r3, #1
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	3b01      	subs	r3, #1
 80070d8:	b29a      	uxth	r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	69db      	ldr	r3, [r3, #28]
 80070e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80070ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070ee:	f003 0307 	and.w	r3, r3, #7
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d053      	beq.n	800719e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80070f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070fa:	f003 0301 	and.w	r3, r3, #1
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d011      	beq.n	8007126 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007102:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00b      	beq.n	8007126 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2201      	movs	r2, #1
 8007114:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800711c:	f043 0201 	orr.w	r2, r3, #1
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007126:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800712a:	f003 0302 	and.w	r3, r3, #2
 800712e:	2b00      	cmp	r3, #0
 8007130:	d011      	beq.n	8007156 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007132:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007136:	f003 0301 	and.w	r3, r3, #1
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00b      	beq.n	8007156 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2202      	movs	r2, #2
 8007144:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800714c:	f043 0204 	orr.w	r2, r3, #4
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007156:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800715a:	f003 0304 	and.w	r3, r3, #4
 800715e:	2b00      	cmp	r3, #0
 8007160:	d011      	beq.n	8007186 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007162:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007166:	f003 0301 	and.w	r3, r3, #1
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00b      	beq.n	8007186 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2204      	movs	r2, #4
 8007174:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800717c:	f043 0202 	orr.w	r2, r3, #2
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800718c:	2b00      	cmp	r3, #0
 800718e:	d006      	beq.n	800719e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f7fe fbab 	bl	80058ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f040 80a0 	bne.w	80072ec <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071b4:	e853 3f00 	ldrex	r3, [r3]
 80071b8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80071ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	461a      	mov	r2, r3
 80071ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 80071d0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80071d4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80071d6:	e841 2300 	strex	r3, r2, [r1]
 80071da:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80071dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1e4      	bne.n	80071ac <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	3308      	adds	r3, #8
 80071e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071ec:	e853 3f00 	ldrex	r3, [r3]
 80071f0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80071f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071f4:	4b6e      	ldr	r3, [pc, #440]	; (80073b0 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80071f6:	4013      	ands	r3, r2
 80071f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	3308      	adds	r3, #8
 8007202:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007206:	66ba      	str	r2, [r7, #104]	; 0x68
 8007208:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800720c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800720e:	e841 2300 	strex	r3, r2, [r1]
 8007212:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007214:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1e3      	bne.n	80071e2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2220      	movs	r2, #32
 800721e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a60      	ldr	r2, [pc, #384]	; (80073b4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d021      	beq.n	800727c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d01a      	beq.n	800727c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800724e:	e853 3f00 	ldrex	r3, [r3]
 8007252:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007254:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007256:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800725a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	461a      	mov	r2, r3
 8007264:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007268:	657b      	str	r3, [r7, #84]	; 0x54
 800726a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800726e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007270:	e841 2300 	strex	r3, r2, [r1]
 8007274:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007278:	2b00      	cmp	r3, #0
 800727a:	d1e4      	bne.n	8007246 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007280:	2b01      	cmp	r3, #1
 8007282:	d130      	bne.n	80072e6 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007292:	e853 3f00 	ldrex	r3, [r3]
 8007296:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729a:	f023 0310 	bic.w	r3, r3, #16
 800729e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	461a      	mov	r2, r3
 80072a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072ac:	643b      	str	r3, [r7, #64]	; 0x40
 80072ae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80072b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072b4:	e841 2300 	strex	r3, r2, [r1]
 80072b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1e4      	bne.n	800728a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	69db      	ldr	r3, [r3, #28]
 80072c6:	f003 0310 	and.w	r3, r3, #16
 80072ca:	2b10      	cmp	r3, #16
 80072cc:	d103      	bne.n	80072d6 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2210      	movs	r2, #16
 80072d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80072dc:	4619      	mov	r1, r3
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f7fe fb0e 	bl	8005900 <HAL_UARTEx_RxEventCallback>
 80072e4:	e002      	b.n	80072ec <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f7f9 fd9c 	bl	8000e24 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80072ec:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d006      	beq.n	8007302 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80072f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072f8:	f003 0320 	and.w	r3, r3, #32
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f47f aed1 	bne.w	80070a4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007308:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800730c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007310:	2b00      	cmp	r3, #0
 8007312:	d049      	beq.n	80073a8 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800731a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800731e:	429a      	cmp	r2, r3
 8007320:	d242      	bcs.n	80073a8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	3308      	adds	r3, #8
 8007328:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732a:	6a3b      	ldr	r3, [r7, #32]
 800732c:	e853 3f00 	ldrex	r3, [r3]
 8007330:	61fb      	str	r3, [r7, #28]
   return(result);
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007338:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	3308      	adds	r3, #8
 8007342:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007346:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007348:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800734c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800734e:	e841 2300 	strex	r3, r2, [r1]
 8007352:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007356:	2b00      	cmp	r3, #0
 8007358:	d1e3      	bne.n	8007322 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a16      	ldr	r2, [pc, #88]	; (80073b8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800735e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	e853 3f00 	ldrex	r3, [r3]
 800736c:	60bb      	str	r3, [r7, #8]
   return(result);
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	f043 0320 	orr.w	r3, r3, #32
 8007374:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	461a      	mov	r2, r3
 800737e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007382:	61bb      	str	r3, [r7, #24]
 8007384:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007386:	6979      	ldr	r1, [r7, #20]
 8007388:	69ba      	ldr	r2, [r7, #24]
 800738a:	e841 2300 	strex	r3, r2, [r1]
 800738e:	613b      	str	r3, [r7, #16]
   return(result);
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1e4      	bne.n	8007360 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007396:	e007      	b.n	80073a8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	699a      	ldr	r2, [r3, #24]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f042 0208 	orr.w	r2, r2, #8
 80073a6:	619a      	str	r2, [r3, #24]
}
 80073a8:	bf00      	nop
 80073aa:	37b0      	adds	r7, #176	; 0xb0
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	effffffe 	.word	0xeffffffe
 80073b4:	58000c00 	.word	0x58000c00
 80073b8:	08006ced 	.word	0x08006ced

080073bc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b0ae      	sub	sp, #184	; 0xb8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80073ca:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	69db      	ldr	r3, [r3, #28]
 80073d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073f2:	2b22      	cmp	r3, #34	; 0x22
 80073f4:	f040 8184 	bne.w	8007700 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80073fe:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007402:	e127      	b.n	8007654 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007412:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007416:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800741a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800741e:	4013      	ands	r3, r2
 8007420:	b29a      	uxth	r2, r3
 8007422:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007426:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800742c:	1c9a      	adds	r2, r3, #2
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007438:	b29b      	uxth	r3, r3
 800743a:	3b01      	subs	r3, #1
 800743c:	b29a      	uxth	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	69db      	ldr	r3, [r3, #28]
 800744a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800744e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007452:	f003 0307 	and.w	r3, r3, #7
 8007456:	2b00      	cmp	r3, #0
 8007458:	d053      	beq.n	8007502 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800745a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800745e:	f003 0301 	and.w	r3, r3, #1
 8007462:	2b00      	cmp	r3, #0
 8007464:	d011      	beq.n	800748a <UART_RxISR_16BIT_FIFOEN+0xce>
 8007466:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800746a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00b      	beq.n	800748a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2201      	movs	r2, #1
 8007478:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007480:	f043 0201 	orr.w	r2, r3, #1
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800748a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800748e:	f003 0302 	and.w	r3, r3, #2
 8007492:	2b00      	cmp	r3, #0
 8007494:	d011      	beq.n	80074ba <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007496:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800749a:	f003 0301 	and.w	r3, r3, #1
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00b      	beq.n	80074ba <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2202      	movs	r2, #2
 80074a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074b0:	f043 0204 	orr.w	r2, r3, #4
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80074be:	f003 0304 	and.w	r3, r3, #4
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d011      	beq.n	80074ea <UART_RxISR_16BIT_FIFOEN+0x12e>
 80074c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00b      	beq.n	80074ea <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2204      	movs	r2, #4
 80074d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074e0:	f043 0202 	orr.w	r2, r3, #2
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d006      	beq.n	8007502 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f7fe f9f9 	bl	80058ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007508:	b29b      	uxth	r3, r3
 800750a:	2b00      	cmp	r3, #0
 800750c:	f040 80a2 	bne.w	8007654 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007516:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007518:	e853 3f00 	ldrex	r3, [r3]
 800751c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800751e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007524:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	461a      	mov	r2, r3
 800752e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007532:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007536:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007538:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800753a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800753e:	e841 2300 	strex	r3, r2, [r1]
 8007542:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007544:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007546:	2b00      	cmp	r3, #0
 8007548:	d1e2      	bne.n	8007510 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	3308      	adds	r3, #8
 8007550:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007552:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007554:	e853 3f00 	ldrex	r3, [r3]
 8007558:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800755a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800755c:	4b6e      	ldr	r3, [pc, #440]	; (8007718 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800755e:	4013      	ands	r3, r2
 8007560:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	3308      	adds	r3, #8
 800756a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800756e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007570:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007572:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007574:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007576:	e841 2300 	strex	r3, r2, [r1]
 800757a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800757c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800757e:	2b00      	cmp	r3, #0
 8007580:	d1e3      	bne.n	800754a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2220      	movs	r2, #32
 8007586:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a60      	ldr	r2, [pc, #384]	; (800771c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d021      	beq.n	80075e4 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d01a      	beq.n	80075e4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075b6:	e853 3f00 	ldrex	r3, [r3]
 80075ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80075bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80075c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	461a      	mov	r2, r3
 80075cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80075d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80075d2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80075d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075d8:	e841 2300 	strex	r3, r2, [r1]
 80075dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80075de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d1e4      	bne.n	80075ae <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d130      	bne.n	800764e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fa:	e853 3f00 	ldrex	r3, [r3]
 80075fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007602:	f023 0310 	bic.w	r3, r3, #16
 8007606:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	461a      	mov	r2, r3
 8007610:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007614:	647b      	str	r3, [r7, #68]	; 0x44
 8007616:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007618:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800761a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800761c:	e841 2300 	strex	r3, r2, [r1]
 8007620:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007624:	2b00      	cmp	r3, #0
 8007626:	d1e4      	bne.n	80075f2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	69db      	ldr	r3, [r3, #28]
 800762e:	f003 0310 	and.w	r3, r3, #16
 8007632:	2b10      	cmp	r3, #16
 8007634:	d103      	bne.n	800763e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2210      	movs	r2, #16
 800763c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007644:	4619      	mov	r1, r3
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f7fe f95a 	bl	8005900 <HAL_UARTEx_RxEventCallback>
 800764c:	e002      	b.n	8007654 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f7f9 fbe8 	bl	8000e24 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007654:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8007658:	2b00      	cmp	r3, #0
 800765a:	d006      	beq.n	800766a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800765c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007660:	f003 0320 	and.w	r3, r3, #32
 8007664:	2b00      	cmp	r3, #0
 8007666:	f47f aecd 	bne.w	8007404 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007670:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007674:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007678:	2b00      	cmp	r3, #0
 800767a:	d049      	beq.n	8007710 <UART_RxISR_16BIT_FIFOEN+0x354>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007682:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8007686:	429a      	cmp	r2, r3
 8007688:	d242      	bcs.n	8007710 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	3308      	adds	r3, #8
 8007690:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007694:	e853 3f00 	ldrex	r3, [r3]
 8007698:	623b      	str	r3, [r7, #32]
   return(result);
 800769a:	6a3b      	ldr	r3, [r7, #32]
 800769c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	3308      	adds	r3, #8
 80076aa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80076ae:	633a      	str	r2, [r7, #48]	; 0x30
 80076b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076b6:	e841 2300 	strex	r3, r2, [r1]
 80076ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1e3      	bne.n	800768a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a16      	ldr	r2, [pc, #88]	; (8007720 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80076c6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	e853 3f00 	ldrex	r3, [r3]
 80076d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f043 0320 	orr.w	r3, r3, #32
 80076dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	461a      	mov	r2, r3
 80076e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076ea:	61fb      	str	r3, [r7, #28]
 80076ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ee:	69b9      	ldr	r1, [r7, #24]
 80076f0:	69fa      	ldr	r2, [r7, #28]
 80076f2:	e841 2300 	strex	r3, r2, [r1]
 80076f6:	617b      	str	r3, [r7, #20]
   return(result);
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1e4      	bne.n	80076c8 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076fe:	e007      	b.n	8007710 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	699a      	ldr	r2, [r3, #24]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f042 0208 	orr.w	r2, r2, #8
 800770e:	619a      	str	r2, [r3, #24]
}
 8007710:	bf00      	nop
 8007712:	37b8      	adds	r7, #184	; 0xb8
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}
 8007718:	effffffe 	.word	0xeffffffe
 800771c:	58000c00 	.word	0x58000c00
 8007720:	08006ea5 	.word	0x08006ea5

08007724 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800772c:	bf00      	nop
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007740:	bf00      	nop
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007754:	bf00      	nop
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007760:	b480      	push	{r7}
 8007762:	b085      	sub	sp, #20
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800776e:	2b01      	cmp	r3, #1
 8007770:	d101      	bne.n	8007776 <HAL_UARTEx_DisableFifoMode+0x16>
 8007772:	2302      	movs	r3, #2
 8007774:	e027      	b.n	80077c6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2201      	movs	r2, #1
 800777a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2224      	movs	r2, #36	; 0x24
 8007782:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f022 0201 	bic.w	r2, r2, #1
 800779c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80077a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	68fa      	ldr	r2, [r7, #12]
 80077b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2220      	movs	r2, #32
 80077b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3714      	adds	r7, #20
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr

080077d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b084      	sub	sp, #16
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
 80077da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d101      	bne.n	80077ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80077e6:	2302      	movs	r3, #2
 80077e8:	e02d      	b.n	8007846 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2201      	movs	r2, #1
 80077ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2224      	movs	r2, #36	; 0x24
 80077f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f022 0201 	bic.w	r2, r2, #1
 8007810:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	683a      	ldr	r2, [r7, #0]
 8007822:	430a      	orrs	r2, r1
 8007824:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 f850 	bl	80078cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	68fa      	ldr	r2, [r7, #12]
 8007832:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2220      	movs	r2, #32
 8007838:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800784e:	b580      	push	{r7, lr}
 8007850:	b084      	sub	sp, #16
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
 8007856:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800785e:	2b01      	cmp	r3, #1
 8007860:	d101      	bne.n	8007866 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007862:	2302      	movs	r3, #2
 8007864:	e02d      	b.n	80078c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2201      	movs	r2, #1
 800786a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2224      	movs	r2, #36	; 0x24
 8007872:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f022 0201 	bic.w	r2, r2, #1
 800788c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	683a      	ldr	r2, [r7, #0]
 800789e:	430a      	orrs	r2, r1
 80078a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f812 	bl	80078cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2220      	movs	r2, #32
 80078b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
	...

080078cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d108      	bne.n	80078ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80078ec:	e031      	b.n	8007952 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80078ee:	2310      	movs	r3, #16
 80078f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80078f2:	2310      	movs	r3, #16
 80078f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	0e5b      	lsrs	r3, r3, #25
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	f003 0307 	and.w	r3, r3, #7
 8007904:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	0f5b      	lsrs	r3, r3, #29
 800790e:	b2db      	uxtb	r3, r3
 8007910:	f003 0307 	and.w	r3, r3, #7
 8007914:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007916:	7bbb      	ldrb	r3, [r7, #14]
 8007918:	7b3a      	ldrb	r2, [r7, #12]
 800791a:	4911      	ldr	r1, [pc, #68]	; (8007960 <UARTEx_SetNbDataToProcess+0x94>)
 800791c:	5c8a      	ldrb	r2, [r1, r2]
 800791e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007922:	7b3a      	ldrb	r2, [r7, #12]
 8007924:	490f      	ldr	r1, [pc, #60]	; (8007964 <UARTEx_SetNbDataToProcess+0x98>)
 8007926:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007928:	fb93 f3f2 	sdiv	r3, r3, r2
 800792c:	b29a      	uxth	r2, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007934:	7bfb      	ldrb	r3, [r7, #15]
 8007936:	7b7a      	ldrb	r2, [r7, #13]
 8007938:	4909      	ldr	r1, [pc, #36]	; (8007960 <UARTEx_SetNbDataToProcess+0x94>)
 800793a:	5c8a      	ldrb	r2, [r1, r2]
 800793c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007940:	7b7a      	ldrb	r2, [r7, #13]
 8007942:	4908      	ldr	r1, [pc, #32]	; (8007964 <UARTEx_SetNbDataToProcess+0x98>)
 8007944:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007946:	fb93 f3f2 	sdiv	r3, r3, r2
 800794a:	b29a      	uxth	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007952:	bf00      	nop
 8007954:	3714      	adds	r7, #20
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	08007a14 	.word	0x08007a14
 8007964:	08007a1c 	.word	0x08007a1c

08007968 <__libc_init_array>:
 8007968:	b570      	push	{r4, r5, r6, lr}
 800796a:	4d0d      	ldr	r5, [pc, #52]	; (80079a0 <__libc_init_array+0x38>)
 800796c:	4c0d      	ldr	r4, [pc, #52]	; (80079a4 <__libc_init_array+0x3c>)
 800796e:	1b64      	subs	r4, r4, r5
 8007970:	10a4      	asrs	r4, r4, #2
 8007972:	2600      	movs	r6, #0
 8007974:	42a6      	cmp	r6, r4
 8007976:	d109      	bne.n	800798c <__libc_init_array+0x24>
 8007978:	4d0b      	ldr	r5, [pc, #44]	; (80079a8 <__libc_init_array+0x40>)
 800797a:	4c0c      	ldr	r4, [pc, #48]	; (80079ac <__libc_init_array+0x44>)
 800797c:	f000 f820 	bl	80079c0 <_init>
 8007980:	1b64      	subs	r4, r4, r5
 8007982:	10a4      	asrs	r4, r4, #2
 8007984:	2600      	movs	r6, #0
 8007986:	42a6      	cmp	r6, r4
 8007988:	d105      	bne.n	8007996 <__libc_init_array+0x2e>
 800798a:	bd70      	pop	{r4, r5, r6, pc}
 800798c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007990:	4798      	blx	r3
 8007992:	3601      	adds	r6, #1
 8007994:	e7ee      	b.n	8007974 <__libc_init_array+0xc>
 8007996:	f855 3b04 	ldr.w	r3, [r5], #4
 800799a:	4798      	blx	r3
 800799c:	3601      	adds	r6, #1
 800799e:	e7f2      	b.n	8007986 <__libc_init_array+0x1e>
 80079a0:	08007a2c 	.word	0x08007a2c
 80079a4:	08007a2c 	.word	0x08007a2c
 80079a8:	08007a2c 	.word	0x08007a2c
 80079ac:	08007a30 	.word	0x08007a30

080079b0 <memset>:
 80079b0:	4402      	add	r2, r0
 80079b2:	4603      	mov	r3, r0
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d100      	bne.n	80079ba <memset+0xa>
 80079b8:	4770      	bx	lr
 80079ba:	f803 1b01 	strb.w	r1, [r3], #1
 80079be:	e7f9      	b.n	80079b4 <memset+0x4>

080079c0 <_init>:
 80079c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079c2:	bf00      	nop
 80079c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079c6:	bc08      	pop	{r3}
 80079c8:	469e      	mov	lr, r3
 80079ca:	4770      	bx	lr

080079cc <_fini>:
 80079cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ce:	bf00      	nop
 80079d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079d2:	bc08      	pop	{r3}
 80079d4:	469e      	mov	lr, r3
 80079d6:	4770      	bx	lr
