
NUCLEO-H7A3_NRF24_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009438  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  080096e8  080096e8  000196e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080097ec  080097ec  000197ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080097f4  080097f4  000197f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080097f8  080097f8  000197f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  24000000  080097fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000194  24000084  08009880  00020084  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000218  08009880  00020218  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015767  00000000  00000000  000200b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002ab6  00000000  00000000  00035819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000dc0  00000000  00000000  000382d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000ca8  00000000  00000000  00039090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00030b03  00000000  00000000  00039d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001556e  00000000  00000000  0006a83b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001373bd  00000000  00000000  0007fda9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001b7166  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003b94  00000000  00000000  001b71b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000084 	.word	0x24000084
 80002cc:	00000000 	.word	0x00000000
 80002d0:	080096d0 	.word	0x080096d0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000088 	.word	0x24000088
 80002ec:	080096d0 	.word	0x080096d0

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b974 	b.w	80006a0 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	468e      	mov	lr, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d14d      	bne.n	800047a <__udivmoddi4+0xaa>
 80003de:	428a      	cmp	r2, r1
 80003e0:	4694      	mov	ip, r2
 80003e2:	d969      	bls.n	80004b8 <__udivmoddi4+0xe8>
 80003e4:	fab2 f282 	clz	r2, r2
 80003e8:	b152      	cbz	r2, 8000400 <__udivmoddi4+0x30>
 80003ea:	fa01 f302 	lsl.w	r3, r1, r2
 80003ee:	f1c2 0120 	rsb	r1, r2, #32
 80003f2:	fa20 f101 	lsr.w	r1, r0, r1
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	ea41 0e03 	orr.w	lr, r1, r3
 80003fe:	4094      	lsls	r4, r2
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	0c21      	lsrs	r1, r4, #16
 8000406:	fbbe f6f8 	udiv	r6, lr, r8
 800040a:	fa1f f78c 	uxth.w	r7, ip
 800040e:	fb08 e316 	mls	r3, r8, r6, lr
 8000412:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000416:	fb06 f107 	mul.w	r1, r6, r7
 800041a:	4299      	cmp	r1, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x64>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f106 30ff 	add.w	r0, r6, #4294967295
 8000426:	f080 811f 	bcs.w	8000668 <__udivmoddi4+0x298>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 811c 	bls.w	8000668 <__udivmoddi4+0x298>
 8000430:	3e02      	subs	r6, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a5b      	subs	r3, r3, r1
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3310 	mls	r3, r8, r0, r3
 8000440:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000444:	fb00 f707 	mul.w	r7, r0, r7
 8000448:	42a7      	cmp	r7, r4
 800044a:	d90a      	bls.n	8000462 <__udivmoddi4+0x92>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 33ff 	add.w	r3, r0, #4294967295
 8000454:	f080 810a 	bcs.w	800066c <__udivmoddi4+0x29c>
 8000458:	42a7      	cmp	r7, r4
 800045a:	f240 8107 	bls.w	800066c <__udivmoddi4+0x29c>
 800045e:	4464      	add	r4, ip
 8000460:	3802      	subs	r0, #2
 8000462:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000466:	1be4      	subs	r4, r4, r7
 8000468:	2600      	movs	r6, #0
 800046a:	b11d      	cbz	r5, 8000474 <__udivmoddi4+0xa4>
 800046c:	40d4      	lsrs	r4, r2
 800046e:	2300      	movs	r3, #0
 8000470:	e9c5 4300 	strd	r4, r3, [r5]
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	428b      	cmp	r3, r1
 800047c:	d909      	bls.n	8000492 <__udivmoddi4+0xc2>
 800047e:	2d00      	cmp	r5, #0
 8000480:	f000 80ef 	beq.w	8000662 <__udivmoddi4+0x292>
 8000484:	2600      	movs	r6, #0
 8000486:	e9c5 0100 	strd	r0, r1, [r5]
 800048a:	4630      	mov	r0, r6
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	fab3 f683 	clz	r6, r3
 8000496:	2e00      	cmp	r6, #0
 8000498:	d14a      	bne.n	8000530 <__udivmoddi4+0x160>
 800049a:	428b      	cmp	r3, r1
 800049c:	d302      	bcc.n	80004a4 <__udivmoddi4+0xd4>
 800049e:	4282      	cmp	r2, r0
 80004a0:	f200 80f9 	bhi.w	8000696 <__udivmoddi4+0x2c6>
 80004a4:	1a84      	subs	r4, r0, r2
 80004a6:	eb61 0303 	sbc.w	r3, r1, r3
 80004aa:	2001      	movs	r0, #1
 80004ac:	469e      	mov	lr, r3
 80004ae:	2d00      	cmp	r5, #0
 80004b0:	d0e0      	beq.n	8000474 <__udivmoddi4+0xa4>
 80004b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004b6:	e7dd      	b.n	8000474 <__udivmoddi4+0xa4>
 80004b8:	b902      	cbnz	r2, 80004bc <__udivmoddi4+0xec>
 80004ba:	deff      	udf	#255	; 0xff
 80004bc:	fab2 f282 	clz	r2, r2
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	f040 8092 	bne.w	80005ea <__udivmoddi4+0x21a>
 80004c6:	eba1 010c 	sub.w	r1, r1, ip
 80004ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ce:	fa1f fe8c 	uxth.w	lr, ip
 80004d2:	2601      	movs	r6, #1
 80004d4:	0c20      	lsrs	r0, r4, #16
 80004d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004da:	fb07 1113 	mls	r1, r7, r3, r1
 80004de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e2:	fb0e f003 	mul.w	r0, lr, r3
 80004e6:	4288      	cmp	r0, r1
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x12c>
 80004ea:	eb1c 0101 	adds.w	r1, ip, r1
 80004ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x12a>
 80004f4:	4288      	cmp	r0, r1
 80004f6:	f200 80cb 	bhi.w	8000690 <__udivmoddi4+0x2c0>
 80004fa:	4643      	mov	r3, r8
 80004fc:	1a09      	subs	r1, r1, r0
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1110 	mls	r1, r7, r0, r1
 8000508:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800050c:	fb0e fe00 	mul.w	lr, lr, r0
 8000510:	45a6      	cmp	lr, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x156>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f100 31ff 	add.w	r1, r0, #4294967295
 800051c:	d202      	bcs.n	8000524 <__udivmoddi4+0x154>
 800051e:	45a6      	cmp	lr, r4
 8000520:	f200 80bb 	bhi.w	800069a <__udivmoddi4+0x2ca>
 8000524:	4608      	mov	r0, r1
 8000526:	eba4 040e 	sub.w	r4, r4, lr
 800052a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x9a>
 8000530:	f1c6 0720 	rsb	r7, r6, #32
 8000534:	40b3      	lsls	r3, r6
 8000536:	fa22 fc07 	lsr.w	ip, r2, r7
 800053a:	ea4c 0c03 	orr.w	ip, ip, r3
 800053e:	fa20 f407 	lsr.w	r4, r0, r7
 8000542:	fa01 f306 	lsl.w	r3, r1, r6
 8000546:	431c      	orrs	r4, r3
 8000548:	40f9      	lsrs	r1, r7
 800054a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800054e:	fa00 f306 	lsl.w	r3, r0, r6
 8000552:	fbb1 f8f9 	udiv	r8, r1, r9
 8000556:	0c20      	lsrs	r0, r4, #16
 8000558:	fa1f fe8c 	uxth.w	lr, ip
 800055c:	fb09 1118 	mls	r1, r9, r8, r1
 8000560:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000564:	fb08 f00e 	mul.w	r0, r8, lr
 8000568:	4288      	cmp	r0, r1
 800056a:	fa02 f206 	lsl.w	r2, r2, r6
 800056e:	d90b      	bls.n	8000588 <__udivmoddi4+0x1b8>
 8000570:	eb1c 0101 	adds.w	r1, ip, r1
 8000574:	f108 3aff 	add.w	sl, r8, #4294967295
 8000578:	f080 8088 	bcs.w	800068c <__udivmoddi4+0x2bc>
 800057c:	4288      	cmp	r0, r1
 800057e:	f240 8085 	bls.w	800068c <__udivmoddi4+0x2bc>
 8000582:	f1a8 0802 	sub.w	r8, r8, #2
 8000586:	4461      	add	r1, ip
 8000588:	1a09      	subs	r1, r1, r0
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000590:	fb09 1110 	mls	r1, r9, r0, r1
 8000594:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000598:	fb00 fe0e 	mul.w	lr, r0, lr
 800059c:	458e      	cmp	lr, r1
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x1e2>
 80005a0:	eb1c 0101 	adds.w	r1, ip, r1
 80005a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005a8:	d26c      	bcs.n	8000684 <__udivmoddi4+0x2b4>
 80005aa:	458e      	cmp	lr, r1
 80005ac:	d96a      	bls.n	8000684 <__udivmoddi4+0x2b4>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4461      	add	r1, ip
 80005b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005b6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ba:	eba1 010e 	sub.w	r1, r1, lr
 80005be:	42a1      	cmp	r1, r4
 80005c0:	46c8      	mov	r8, r9
 80005c2:	46a6      	mov	lr, r4
 80005c4:	d356      	bcc.n	8000674 <__udivmoddi4+0x2a4>
 80005c6:	d053      	beq.n	8000670 <__udivmoddi4+0x2a0>
 80005c8:	b15d      	cbz	r5, 80005e2 <__udivmoddi4+0x212>
 80005ca:	ebb3 0208 	subs.w	r2, r3, r8
 80005ce:	eb61 010e 	sbc.w	r1, r1, lr
 80005d2:	fa01 f707 	lsl.w	r7, r1, r7
 80005d6:	fa22 f306 	lsr.w	r3, r2, r6
 80005da:	40f1      	lsrs	r1, r6
 80005dc:	431f      	orrs	r7, r3
 80005de:	e9c5 7100 	strd	r7, r1, [r5]
 80005e2:	2600      	movs	r6, #0
 80005e4:	4631      	mov	r1, r6
 80005e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	40d8      	lsrs	r0, r3
 80005f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f4:	fa21 f303 	lsr.w	r3, r1, r3
 80005f8:	4091      	lsls	r1, r2
 80005fa:	4301      	orrs	r1, r0
 80005fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000600:	fa1f fe8c 	uxth.w	lr, ip
 8000604:	fbb3 f0f7 	udiv	r0, r3, r7
 8000608:	fb07 3610 	mls	r6, r7, r0, r3
 800060c:	0c0b      	lsrs	r3, r1, #16
 800060e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000612:	fb00 f60e 	mul.w	r6, r0, lr
 8000616:	429e      	cmp	r6, r3
 8000618:	fa04 f402 	lsl.w	r4, r4, r2
 800061c:	d908      	bls.n	8000630 <__udivmoddi4+0x260>
 800061e:	eb1c 0303 	adds.w	r3, ip, r3
 8000622:	f100 38ff 	add.w	r8, r0, #4294967295
 8000626:	d22f      	bcs.n	8000688 <__udivmoddi4+0x2b8>
 8000628:	429e      	cmp	r6, r3
 800062a:	d92d      	bls.n	8000688 <__udivmoddi4+0x2b8>
 800062c:	3802      	subs	r0, #2
 800062e:	4463      	add	r3, ip
 8000630:	1b9b      	subs	r3, r3, r6
 8000632:	b289      	uxth	r1, r1
 8000634:	fbb3 f6f7 	udiv	r6, r3, r7
 8000638:	fb07 3316 	mls	r3, r7, r6, r3
 800063c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000640:	fb06 f30e 	mul.w	r3, r6, lr
 8000644:	428b      	cmp	r3, r1
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x28a>
 8000648:	eb1c 0101 	adds.w	r1, ip, r1
 800064c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000650:	d216      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000652:	428b      	cmp	r3, r1
 8000654:	d914      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000656:	3e02      	subs	r6, #2
 8000658:	4461      	add	r1, ip
 800065a:	1ac9      	subs	r1, r1, r3
 800065c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000660:	e738      	b.n	80004d4 <__udivmoddi4+0x104>
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e705      	b.n	8000474 <__udivmoddi4+0xa4>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e3      	b.n	8000434 <__udivmoddi4+0x64>
 800066c:	4618      	mov	r0, r3
 800066e:	e6f8      	b.n	8000462 <__udivmoddi4+0x92>
 8000670:	454b      	cmp	r3, r9
 8000672:	d2a9      	bcs.n	80005c8 <__udivmoddi4+0x1f8>
 8000674:	ebb9 0802 	subs.w	r8, r9, r2
 8000678:	eb64 0e0c 	sbc.w	lr, r4, ip
 800067c:	3801      	subs	r0, #1
 800067e:	e7a3      	b.n	80005c8 <__udivmoddi4+0x1f8>
 8000680:	4646      	mov	r6, r8
 8000682:	e7ea      	b.n	800065a <__udivmoddi4+0x28a>
 8000684:	4620      	mov	r0, r4
 8000686:	e794      	b.n	80005b2 <__udivmoddi4+0x1e2>
 8000688:	4640      	mov	r0, r8
 800068a:	e7d1      	b.n	8000630 <__udivmoddi4+0x260>
 800068c:	46d0      	mov	r8, sl
 800068e:	e77b      	b.n	8000588 <__udivmoddi4+0x1b8>
 8000690:	3b02      	subs	r3, #2
 8000692:	4461      	add	r1, ip
 8000694:	e732      	b.n	80004fc <__udivmoddi4+0x12c>
 8000696:	4630      	mov	r0, r6
 8000698:	e709      	b.n	80004ae <__udivmoddi4+0xde>
 800069a:	4464      	add	r4, ip
 800069c:	3802      	subs	r0, #2
 800069e:	e742      	b.n	8000526 <__udivmoddi4+0x156>

080006a0 <__aeabi_idiv0>:
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <nrf24_ToggleCSCE>:
 *
 * nrf24_ToggleCSCE will be used to select or unselect the device.
 *
 *
 */
void nrf24_ToggleCSCE(uint8_t sel){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
	switch (sel){
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	3b01      	subs	r3, #1
 80006b2:	2b07      	cmp	r3, #7
 80006b4:	d82a      	bhi.n	800070c <nrf24_ToggleCSCE+0x68>
 80006b6:	a201      	add	r2, pc, #4	; (adr r2, 80006bc <nrf24_ToggleCSCE+0x18>)
 80006b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006bc:	080006dd 	.word	0x080006dd
 80006c0:	080006e9 	.word	0x080006e9
 80006c4:	0800070d 	.word	0x0800070d
 80006c8:	080006f5 	.word	0x080006f5
 80006cc:	0800070d 	.word	0x0800070d
 80006d0:	0800070d 	.word	0x0800070d
 80006d4:	0800070d 	.word	0x0800070d
 80006d8:	08000701 	.word	0x08000701
	case CS_UP:
		HAL_GPIO_WritePin(GPIO_CS_Port, GPIO_CS_Pin, SET) ;
 80006dc:	2201      	movs	r2, #1
 80006de:	2110      	movs	r1, #16
 80006e0:	480c      	ldr	r0, [pc, #48]	; (8000714 <nrf24_ToggleCSCE+0x70>)
 80006e2:	f002 f849 	bl	8002778 <HAL_GPIO_WritePin>
		break ;
 80006e6:	e011      	b.n	800070c <nrf24_ToggleCSCE+0x68>
	case CS_DOWN:
		HAL_GPIO_WritePin(GPIO_CS_Port, GPIO_CS_Pin, RESET) ;
 80006e8:	2200      	movs	r2, #0
 80006ea:	2110      	movs	r1, #16
 80006ec:	4809      	ldr	r0, [pc, #36]	; (8000714 <nrf24_ToggleCSCE+0x70>)
 80006ee:	f002 f843 	bl	8002778 <HAL_GPIO_WritePin>
		break ;
 80006f2:	e00b      	b.n	800070c <nrf24_ToggleCSCE+0x68>
	case CE_UP:
		HAL_GPIO_WritePin(GPIO_CE_Port, GPIO_CE_Pin, SET) ;
 80006f4:	2201      	movs	r2, #1
 80006f6:	2120      	movs	r1, #32
 80006f8:	4807      	ldr	r0, [pc, #28]	; (8000718 <nrf24_ToggleCSCE+0x74>)
 80006fa:	f002 f83d 	bl	8002778 <HAL_GPIO_WritePin>
		break ;
 80006fe:	e005      	b.n	800070c <nrf24_ToggleCSCE+0x68>
	case CE_DOWN:
		HAL_GPIO_WritePin(GPIO_CE_Port, GPIO_CE_Pin, RESET) ;
 8000700:	2200      	movs	r2, #0
 8000702:	2120      	movs	r1, #32
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <nrf24_ToggleCSCE+0x74>)
 8000706:	f002 f837 	bl	8002778 <HAL_GPIO_WritePin>
		break ;
 800070a:	bf00      	nop
	}
}
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	58020000 	.word	0x58020000
 8000718:	58020800 	.word	0x58020800

0800071c <nrf24_WriteRegister1bit>:
 *
 * nrf24_WriteRegister1bit will be use to write 1 bit of data inside one register using SPI connection
 *
 *
 */
void nrf24_WriteRegister1bit(uint8_t reg , uint8_t data){
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	460a      	mov	r2, r1
 8000726:	71fb      	strb	r3, [r7, #7]
 8000728:	4613      	mov	r3, r2
 800072a:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2] ;
	buf[0] = reg | 1<<5 ;
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	f043 0320 	orr.w	r3, r3, #32
 8000732:	b2db      	uxtb	r3, r3
 8000734:	733b      	strb	r3, [r7, #12]
	buf[1] = data ;
 8000736:	79bb      	ldrb	r3, [r7, #6]
 8000738:	737b      	strb	r3, [r7, #13]

	nrf24_ToggleCSCE(CS_DOWN); // Put the CS pin low
 800073a:	2002      	movs	r0, #2
 800073c:	f7ff ffb2 	bl	80006a4 <nrf24_ToggleCSCE>

	if(HAL_OK!=HAL_SPI_Transmit(&hspi1,buf,2,1000)){
 8000740:	f107 010c 	add.w	r1, r7, #12
 8000744:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000748:	2202      	movs	r2, #2
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <nrf24_WriteRegister1bit+0x44>)
 800074c:	f004 ff64 	bl	8005618 <HAL_SPI_Transmit>
		//ERROR !!;
	}

	nrf24_ToggleCSCE(CS_UP); // Put the CS pin up
 8000750:	2001      	movs	r0, #1
 8000752:	f7ff ffa7 	bl	80006a4 <nrf24_ToggleCSCE>
}
 8000756:	bf00      	nop
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	240000a0 	.word	0x240000a0

08000764 <nrf24_WriteRegisterNbit>:
 *
 * nrf24_WriteRegisterNbit will be use to write N bit (N = size) of data inside one register using SPI connection
 *
 *
 */
void nrf24_WriteRegisterNbit(uint8_t reg , uint8_t* data ,int size){
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	607a      	str	r2, [r7, #4]
 8000770:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2] ;
	buf[0] = reg | 1<<5 ;
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	f043 0320 	orr.w	r3, r3, #32
 8000778:	b2db      	uxtb	r3, r3
 800077a:	753b      	strb	r3, [r7, #20]

	nrf24_ToggleCSCE(CS_DOWN); // Put the CS pin low
 800077c:	2002      	movs	r0, #2
 800077e:	f7ff ff91 	bl	80006a4 <nrf24_ToggleCSCE>

	HAL_SPI_Transmit(&hspi1,buf,1,100);
 8000782:	f107 0114 	add.w	r1, r7, #20
 8000786:	2364      	movs	r3, #100	; 0x64
 8000788:	2201      	movs	r2, #1
 800078a:	4809      	ldr	r0, [pc, #36]	; (80007b0 <nrf24_WriteRegisterNbit+0x4c>)
 800078c:	f004 ff44 	bl	8005618 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1,data,size,1000);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	b29a      	uxth	r2, r3
 8000794:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000798:	68b9      	ldr	r1, [r7, #8]
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <nrf24_WriteRegisterNbit+0x4c>)
 800079c:	f004 ff3c 	bl	8005618 <HAL_SPI_Transmit>


	nrf24_ToggleCSCE(CS_UP); // Put the CS pin up
 80007a0:	2001      	movs	r0, #1
 80007a2:	f7ff ff7f 	bl	80006a4 <nrf24_ToggleCSCE>
}
 80007a6:	bf00      	nop
 80007a8:	3718      	adds	r7, #24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	240000a0 	.word	0x240000a0

080007b4 <nrf24_ShowMemory>:
 *
 *
 *
 *
 */
void nrf24_ShowMemory(){
 80007b4:	b5b0      	push	{r4, r5, r7, lr}
 80007b6:	b098      	sub	sp, #96	; 0x60
 80007b8:	af00      	add	r7, sp, #0
	uint8_t storage[26] ;
	uint8_t data;
	uint8_t tab[26] = {CONFIG,EN_AA,EN_RXADDR,SETUP_AW,SETUP_RETR,RF_CH,RF_SETUP,STATUS,OBSERVE_TX,
 80007ba:	4b24      	ldr	r3, [pc, #144]	; (800084c <nrf24_ShowMemory+0x98>)
 80007bc:	f107 0420 	add.w	r4, r7, #32
 80007c0:	461d      	mov	r5, r3
 80007c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007ca:	c403      	stmia	r4!, {r0, r1}
 80007cc:	8022      	strh	r2, [r4, #0]
			RPD,RX_ADDR_P0,RX_ADDR_P1,RX_ADDR_P2,RX_ADDR_P3,RX_ADDR_P4,RX_ADDR_P5,TX_ADDR,RX_PW_P0,
			RX_PW_P1,RX_PW_P2,RX_PW_P3,RX_PW_P4,RX_PW_P5,FIFO_STATUS,DYNPD,FEATURE};
	char buffer[32];
	for(int i = 0 ; i<26 ; i++){
 80007ce:	2300      	movs	r3, #0
 80007d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80007d2:	e015      	b.n	8000800 <nrf24_ShowMemory+0x4c>
		nrf24_ReadRegisterNbit(tab[i],&data,1);
 80007d4:	f107 0220 	add.w	r2, r7, #32
 80007d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007da:	4413      	add	r3, r2
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	f107 013b 	add.w	r1, r7, #59	; 0x3b
 80007e2:	2201      	movs	r2, #1
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 f855 	bl	8000894 <nrf24_ReadRegisterNbit>
		storage[i]=data ;
 80007ea:	f897 103b 	ldrb.w	r1, [r7, #59]	; 0x3b
 80007ee:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80007f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007f4:	4413      	add	r3, r2
 80007f6:	460a      	mov	r2, r1
 80007f8:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i<26 ; i++){
 80007fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007fc:	3301      	adds	r3, #1
 80007fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000800:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000802:	2b19      	cmp	r3, #25
 8000804:	dde6      	ble.n	80007d4 <nrf24_ShowMemory+0x20>
	}

	for(int i = 0 ; i<26 ; i++){
 8000806:	2300      	movs	r3, #0
 8000808:	65bb      	str	r3, [r7, #88]	; 0x58
 800080a:	e016      	b.n	800083a <nrf24_ShowMemory+0x86>
		sprintf(buffer, "Mem 0x%2x : 0x%2x \r\n",tab[i],storage[i]);
 800080c:	f107 0220 	add.w	r2, r7, #32
 8000810:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000812:	4413      	add	r3, r2
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	4619      	mov	r1, r3
 8000818:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800081c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800081e:	4413      	add	r3, r2
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	4638      	mov	r0, r7
 8000824:	460a      	mov	r2, r1
 8000826:	490a      	ldr	r1, [pc, #40]	; (8000850 <nrf24_ShowMemory+0x9c>)
 8000828:	f008 fae4 	bl	8008df4 <siprintf>
		HAL_UART_Print(buffer);
 800082c:	463b      	mov	r3, r7
 800082e:	4618      	mov	r0, r3
 8000830:	f000 fe80 	bl	8001534 <HAL_UART_Print>
	for(int i = 0 ; i<26 ; i++){
 8000834:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000836:	3301      	adds	r3, #1
 8000838:	65bb      	str	r3, [r7, #88]	; 0x58
 800083a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800083c:	2b19      	cmp	r3, #25
 800083e:	dde5      	ble.n	800080c <nrf24_ShowMemory+0x58>
	}
}
 8000840:	bf00      	nop
 8000842:	bf00      	nop
 8000844:	3760      	adds	r7, #96	; 0x60
 8000846:	46bd      	mov	sp, r7
 8000848:	bdb0      	pop	{r4, r5, r7, pc}
 800084a:	bf00      	nop
 800084c:	08009700 	.word	0x08009700
 8000850:	080096e8 	.word	0x080096e8

08000854 <nrf24_ReadRegister1bit>:
 * nrf24_ReadRegister1bit will be use to read 1 bit of data inside one register using SPI connection.
 * It will be return inside a uint8_t data.
 *
 *
 */
uint8_t nrf24_ReadRegister1bit(uint8_t reg){
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]
	uint8_t data ;

	nrf24_ToggleCSCE(CS_DOWN) ;
 800085e:	2002      	movs	r0, #2
 8000860:	f7ff ff20 	bl	80006a4 <nrf24_ToggleCSCE>

	HAL_SPI_Transmit(&hspi1,&reg,1,100) ;
 8000864:	1df9      	adds	r1, r7, #7
 8000866:	2364      	movs	r3, #100	; 0x64
 8000868:	2201      	movs	r2, #1
 800086a:	4809      	ldr	r0, [pc, #36]	; (8000890 <nrf24_ReadRegister1bit+0x3c>)
 800086c:	f004 fed4 	bl	8005618 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1,&data,1,100) ;
 8000870:	f107 010f 	add.w	r1, r7, #15
 8000874:	2364      	movs	r3, #100	; 0x64
 8000876:	2201      	movs	r2, #1
 8000878:	4805      	ldr	r0, [pc, #20]	; (8000890 <nrf24_ReadRegister1bit+0x3c>)
 800087a:	f005 f8c9 	bl	8005a10 <HAL_SPI_Receive>

	nrf24_ToggleCSCE(CS_UP) ;
 800087e:	2001      	movs	r0, #1
 8000880:	f7ff ff10 	bl	80006a4 <nrf24_ToggleCSCE>

	return data ;
 8000884:	7bfb      	ldrb	r3, [r7, #15]
}
 8000886:	4618      	mov	r0, r3
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	240000a0 	.word	0x240000a0

08000894 <nrf24_ReadRegisterNbit>:
 * nrf24_ReadRegisterNbit will be use to read N bit (N = size) of data inside one register using SPI connection.
 * It will be stored inside a uint8_t data.
 *
 *
 */
void nrf24_ReadRegisterNbit(uint8_t reg, uint8_t *data, int size){
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
 80008a0:	73fb      	strb	r3, [r7, #15]
	nrf24_ToggleCSCE(CS_DOWN) ;
 80008a2:	2002      	movs	r0, #2
 80008a4:	f7ff fefe 	bl	80006a4 <nrf24_ToggleCSCE>

	HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 80008a8:	f107 010f 	add.w	r1, r7, #15
 80008ac:	2364      	movs	r3, #100	; 0x64
 80008ae:	2201      	movs	r2, #1
 80008b0:	4808      	ldr	r0, [pc, #32]	; (80008d4 <nrf24_ReadRegisterNbit+0x40>)
 80008b2:	f004 feb1 	bl	8005618 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, data, size, 1000);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008be:	68b9      	ldr	r1, [r7, #8]
 80008c0:	4804      	ldr	r0, [pc, #16]	; (80008d4 <nrf24_ReadRegisterNbit+0x40>)
 80008c2:	f005 f8a5 	bl	8005a10 <HAL_SPI_Receive>

	nrf24_ToggleCSCE(CS_UP) ;
 80008c6:	2001      	movs	r0, #1
 80008c8:	f7ff feec 	bl	80006a4 <nrf24_ToggleCSCE>
}
 80008cc:	bf00      	nop
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	240000a0 	.word	0x240000a0

080008d8 <nrf24_reset>:
 *
 * nrf24_reset will be use to reset the registers of the nrf24 to their original value.
 *
 *
 */
void nrf24_reset(uint8_t Reg){
 80008d8:	b580      	push	{r7, lr}
 80008da:	b088      	sub	sp, #32
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	71fb      	strb	r3, [r7, #7]

	switch(Reg){
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	2b07      	cmp	r3, #7
 80008e6:	d002      	beq.n	80008ee <nrf24_reset+0x16>
 80008e8:	2b17      	cmp	r3, #23
 80008ea:	d005      	beq.n	80008f8 <nrf24_reset+0x20>
 80008ec:	e009      	b.n	8000902 <nrf24_reset+0x2a>

	case STATUS:
		nrf24_WriteRegister1bit(STATUS, 0x00);
 80008ee:	2100      	movs	r1, #0
 80008f0:	2007      	movs	r0, #7
 80008f2:	f7ff ff13 	bl	800071c <nrf24_WriteRegister1bit>
		break ;
 80008f6:	e08e      	b.n	8000a16 <nrf24_reset+0x13e>

	case FIFO_STATUS:
		nrf24_WriteRegister1bit(FIFO_STATUS, 0x11);
 80008f8:	2111      	movs	r1, #17
 80008fa:	2017      	movs	r0, #23
 80008fc:	f7ff ff0e 	bl	800071c <nrf24_WriteRegister1bit>
		break ;
 8000900:	e089      	b.n	8000a16 <nrf24_reset+0x13e>

	default:
		nrf24_WriteRegister1bit(CONFIG, 0x08);
 8000902:	2108      	movs	r1, #8
 8000904:	2000      	movs	r0, #0
 8000906:	f7ff ff09 	bl	800071c <nrf24_WriteRegister1bit>
		nrf24_WriteRegister1bit(EN_AA, 0x3F);
 800090a:	213f      	movs	r1, #63	; 0x3f
 800090c:	2001      	movs	r0, #1
 800090e:	f7ff ff05 	bl	800071c <nrf24_WriteRegister1bit>
		nrf24_WriteRegister1bit(EN_RXADDR, 0x03);
 8000912:	2103      	movs	r1, #3
 8000914:	2002      	movs	r0, #2
 8000916:	f7ff ff01 	bl	800071c <nrf24_WriteRegister1bit>
		nrf24_WriteRegister1bit(SETUP_AW, 0x03);
 800091a:	2103      	movs	r1, #3
 800091c:	2003      	movs	r0, #3
 800091e:	f7ff fefd 	bl	800071c <nrf24_WriteRegister1bit>
		nrf24_WriteRegister1bit(SETUP_RETR, 0x03);
 8000922:	2103      	movs	r1, #3
 8000924:	2004      	movs	r0, #4
 8000926:	f7ff fef9 	bl	800071c <nrf24_WriteRegister1bit>
		nrf24_WriteRegister1bit(RF_CH, 0x02);
 800092a:	2102      	movs	r1, #2
 800092c:	2005      	movs	r0, #5
 800092e:	f7ff fef5 	bl	800071c <nrf24_WriteRegister1bit>
		nrf24_WriteRegister1bit(RF_SETUP, 0x0E);
 8000932:	210e      	movs	r1, #14
 8000934:	2006      	movs	r0, #6
 8000936:	f7ff fef1 	bl	800071c <nrf24_WriteRegister1bit>
		nrf24_WriteRegister1bit(STATUS, 0x00);
 800093a:	2100      	movs	r1, #0
 800093c:	2007      	movs	r0, #7
 800093e:	f7ff feed 	bl	800071c <nrf24_WriteRegister1bit>
		nrf24_WriteRegister1bit(OBSERVE_TX, 0x00);
 8000942:	2100      	movs	r1, #0
 8000944:	2008      	movs	r0, #8
 8000946:	f7ff fee9 	bl	800071c <nrf24_WriteRegister1bit>
		nrf24_WriteRegister1bit(RPD, 0x00);
 800094a:	2100      	movs	r1, #0
 800094c:	2009      	movs	r0, #9
 800094e:	f7ff fee5 	bl	800071c <nrf24_WriteRegister1bit>

		uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000952:	4a33      	ldr	r2, [pc, #204]	; (8000a20 <nrf24_reset+0x148>)
 8000954:	f107 0318 	add.w	r3, r7, #24
 8000958:	e892 0003 	ldmia.w	r2, {r0, r1}
 800095c:	6018      	str	r0, [r3, #0]
 800095e:	3304      	adds	r3, #4
 8000960:	7019      	strb	r1, [r3, #0]
		nrf24_WriteRegisterNbit(RX_ADDR_P0, rx_addr_p0_def, 5);
 8000962:	f107 0318 	add.w	r3, r7, #24
 8000966:	2205      	movs	r2, #5
 8000968:	4619      	mov	r1, r3
 800096a:	200a      	movs	r0, #10
 800096c:	f7ff fefa 	bl	8000764 <nrf24_WriteRegisterNbit>

		uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000970:	4a2c      	ldr	r2, [pc, #176]	; (8000a24 <nrf24_reset+0x14c>)
 8000972:	f107 0310 	add.w	r3, r7, #16
 8000976:	e892 0003 	ldmia.w	r2, {r0, r1}
 800097a:	6018      	str	r0, [r3, #0]
 800097c:	3304      	adds	r3, #4
 800097e:	7019      	strb	r1, [r3, #0]
		nrf24_WriteRegisterNbit(RX_ADDR_P1, rx_addr_p1_def, 5);
 8000980:	f107 0310 	add.w	r3, r7, #16
 8000984:	2205      	movs	r2, #5
 8000986:	4619      	mov	r1, r3
 8000988:	200b      	movs	r0, #11
 800098a:	f7ff feeb 	bl	8000764 <nrf24_WriteRegisterNbit>

		nrf24_WriteRegister1bit(RX_ADDR_P2, 0xC3);
 800098e:	21c3      	movs	r1, #195	; 0xc3
 8000990:	200c      	movs	r0, #12
 8000992:	f7ff fec3 	bl	800071c <nrf24_WriteRegister1bit>
		nrf24_WriteRegister1bit(RX_ADDR_P3, 0xC4);
 8000996:	21c4      	movs	r1, #196	; 0xc4
 8000998:	200d      	movs	r0, #13
 800099a:	f7ff febf 	bl	800071c <nrf24_WriteRegister1bit>
		nrf24_WriteRegister1bit(RX_ADDR_P4, 0xC5);
 800099e:	21c5      	movs	r1, #197	; 0xc5
 80009a0:	200e      	movs	r0, #14
 80009a2:	f7ff febb 	bl	800071c <nrf24_WriteRegister1bit>
		nrf24_WriteRegister1bit(RX_ADDR_P5, 0xC6);
 80009a6:	21c6      	movs	r1, #198	; 0xc6
 80009a8:	200f      	movs	r0, #15
 80009aa:	f7ff feb7 	bl	800071c <nrf24_WriteRegister1bit>

		uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80009ae:	4a1c      	ldr	r2, [pc, #112]	; (8000a20 <nrf24_reset+0x148>)
 80009b0:	f107 0308 	add.w	r3, r7, #8
 80009b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009b8:	6018      	str	r0, [r3, #0]
 80009ba:	3304      	adds	r3, #4
 80009bc:	7019      	strb	r1, [r3, #0]
		nrf24_WriteRegisterNbit(TX_ADDR, tx_addr_def, 5);
 80009be:	f107 0308 	add.w	r3, r7, #8
 80009c2:	2205      	movs	r2, #5
 80009c4:	4619      	mov	r1, r3
 80009c6:	2010      	movs	r0, #16
 80009c8:	f7ff fecc 	bl	8000764 <nrf24_WriteRegisterNbit>

		nrf24_WriteRegister1bit(RX_PW_P0, 0);
 80009cc:	2100      	movs	r1, #0
 80009ce:	2011      	movs	r0, #17
 80009d0:	f7ff fea4 	bl	800071c <nrf24_WriteRegister1bit>
		nrf24_WriteRegister1bit(RX_PW_P1, 0);
 80009d4:	2100      	movs	r1, #0
 80009d6:	2012      	movs	r0, #18
 80009d8:	f7ff fea0 	bl	800071c <nrf24_WriteRegister1bit>
		nrf24_WriteRegister1bit(RX_PW_P2, 0);
 80009dc:	2100      	movs	r1, #0
 80009de:	2013      	movs	r0, #19
 80009e0:	f7ff fe9c 	bl	800071c <nrf24_WriteRegister1bit>
		nrf24_WriteRegister1bit(RX_PW_P3, 0);
 80009e4:	2100      	movs	r1, #0
 80009e6:	2014      	movs	r0, #20
 80009e8:	f7ff fe98 	bl	800071c <nrf24_WriteRegister1bit>
		nrf24_WriteRegister1bit(RX_PW_P4, 0);
 80009ec:	2100      	movs	r1, #0
 80009ee:	2015      	movs	r0, #21
 80009f0:	f7ff fe94 	bl	800071c <nrf24_WriteRegister1bit>
		nrf24_WriteRegister1bit(RX_PW_P5, 0);
 80009f4:	2100      	movs	r1, #0
 80009f6:	2016      	movs	r0, #22
 80009f8:	f7ff fe90 	bl	800071c <nrf24_WriteRegister1bit>
		nrf24_WriteRegister1bit(FIFO_STATUS, 0x11);
 80009fc:	2111      	movs	r1, #17
 80009fe:	2017      	movs	r0, #23
 8000a00:	f7ff fe8c 	bl	800071c <nrf24_WriteRegister1bit>
		nrf24_WriteRegister1bit(DYNPD, 0);
 8000a04:	2100      	movs	r1, #0
 8000a06:	201c      	movs	r0, #28
 8000a08:	f7ff fe88 	bl	800071c <nrf24_WriteRegister1bit>
		nrf24_WriteRegister1bit(FEATURE, 0);
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	201d      	movs	r0, #29
 8000a10:	f7ff fe84 	bl	800071c <nrf24_WriteRegister1bit>
		break;
 8000a14:	bf00      	nop
	}
}
 8000a16:	bf00      	nop
 8000a18:	3720      	adds	r7, #32
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	0800971c 	.word	0x0800971c
 8000a24:	08009724 	.word	0x08009724

08000a28 <nrf24_Init>:
 *
 * nrf24_Init will initialise the nrf24.
 *
 *
 */
void nrf24_Init(){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	nrf24_ToggleCSCE(CE_DOWN);
 8000a2c:	2008      	movs	r0, #8
 8000a2e:	f7ff fe39 	bl	80006a4 <nrf24_ToggleCSCE>

	nrf24_reset(0);
 8000a32:	2000      	movs	r0, #0
 8000a34:	f7ff ff50 	bl	80008d8 <nrf24_reset>
	nrf24_WriteRegister1bit(CONFIG, 0);
 8000a38:	2100      	movs	r1, #0
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f7ff fe6e 	bl	800071c <nrf24_WriteRegister1bit>
	nrf24_WriteRegister1bit(EN_AA, 0);  // No Auto ACK
 8000a40:	2100      	movs	r1, #0
 8000a42:	2001      	movs	r0, #1
 8000a44:	f7ff fe6a 	bl	800071c <nrf24_WriteRegister1bit>
	nrf24_WriteRegister1bit(EN_RXADDR, 0);
 8000a48:	2100      	movs	r1, #0
 8000a4a:	2002      	movs	r0, #2
 8000a4c:	f7ff fe66 	bl	800071c <nrf24_WriteRegister1bit>
	nrf24_WriteRegister1bit(SETUP_AW, 0x03); // Define the 5 byte for adresses
 8000a50:	2103      	movs	r1, #3
 8000a52:	2003      	movs	r0, #3
 8000a54:	f7ff fe62 	bl	800071c <nrf24_WriteRegister1bit>
	nrf24_WriteRegister1bit(SETUP_RETR, 0);
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2004      	movs	r0, #4
 8000a5c:	f7ff fe5e 	bl	800071c <nrf24_WriteRegister1bit>
	nrf24_WriteRegister1bit(RF_CH, 0);  // will be setup during Tx or RX, currently disable
 8000a60:	2100      	movs	r1, #0
 8000a62:	2005      	movs	r0, #5
 8000a64:	f7ff fe5a 	bl	800071c <nrf24_WriteRegister1bit>

	nrf24_WriteRegister1bit (RF_SETUP, 0x0E);   // Setup the Power at 0db and data rate at 2Mbps
 8000a68:	210e      	movs	r1, #14
 8000a6a:	2006      	movs	r0, #6
 8000a6c:	f7ff fe56 	bl	800071c <nrf24_WriteRegister1bit>

	nrf24_ToggleCSCE(CE_UP);
 8000a70:	2004      	movs	r0, #4
 8000a72:	f7ff fe17 	bl	80006a4 <nrf24_ToggleCSCE>

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <nrf24_TxMode>:
 *
 * nrf24_TxMode will be use to activate the Transmit mode.
 *
 *
 */
void nrf24_TxMode(uint8_t *Address, uint8_t channel){
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b084      	sub	sp, #16
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
 8000a82:	460b      	mov	r3, r1
 8000a84:	70fb      	strb	r3, [r7, #3]
	nrf24_ToggleCSCE(CE_DOWN);
 8000a86:	2008      	movs	r0, #8
 8000a88:	f7ff fe0c 	bl	80006a4 <nrf24_ToggleCSCE>

	nrf24_WriteRegister1bit(RF_CH, channel);
 8000a8c:	78fb      	ldrb	r3, [r7, #3]
 8000a8e:	4619      	mov	r1, r3
 8000a90:	2005      	movs	r0, #5
 8000a92:	f7ff fe43 	bl	800071c <nrf24_WriteRegister1bit>
	nrf24_WriteRegisterNbit(TX_ADDR, Address, 5);
 8000a96:	2205      	movs	r2, #5
 8000a98:	6879      	ldr	r1, [r7, #4]
 8000a9a:	2010      	movs	r0, #16
 8000a9c:	f7ff fe62 	bl	8000764 <nrf24_WriteRegisterNbit>

	uint8_t config = nrf24_ReadRegister1bit(CONFIG);
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f7ff fed7 	bl	8000854 <nrf24_ReadRegister1bit>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	73fb      	strb	r3, [r7, #15]
	config = config & (0xF2);
 8000aaa:	7bfb      	ldrb	r3, [r7, #15]
 8000aac:	f023 030d 	bic.w	r3, r3, #13
 8000ab0:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteRegister1bit(CONFIG, config);
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f7ff fe30 	bl	800071c <nrf24_WriteRegister1bit>

	nrf24_ToggleCSCE(CE_UP);
 8000abc:	2004      	movs	r0, #4
 8000abe:	f7ff fdf1 	bl	80006a4 <nrf24_ToggleCSCE>
}
 8000ac2:	bf00      	nop
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
	...

08000acc <nrf24_Transmit>:
 * nrf24_Transmit will be use to transmit data using the nrf24.
 * It will return a 1 if it succeed to send the data, otherwise it will return a 0.
 *
 *
 */
HAL_StatusTypeDef nrf24_Transmit(uint8_t *data){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
	uint8_t cmd;

	nrf24_ToggleCSCE(CS_DOWN);
 8000ad4:	2002      	movs	r0, #2
 8000ad6:	f7ff fde5 	bl	80006a4 <nrf24_ToggleCSCE>

	cmd = W_TX_PAYLOAD;
 8000ada:	23a0      	movs	r3, #160	; 0xa0
 8000adc:	73bb      	strb	r3, [r7, #14]

	HAL_SPI_Transmit(&hspi1, &cmd, 1, 100);
 8000ade:	f107 010e 	add.w	r1, r7, #14
 8000ae2:	2364      	movs	r3, #100	; 0x64
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	480a      	ldr	r0, [pc, #40]	; (8000b10 <nrf24_Transmit+0x44>)
 8000ae8:	f004 fd96 	bl	8005618 <HAL_SPI_Transmit>
	HAL_StatusTypeDef hal_status = HAL_SPI_Transmit(&hspi1, data, 32, 1000);
 8000aec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af0:	2220      	movs	r2, #32
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	4806      	ldr	r0, [pc, #24]	; (8000b10 <nrf24_Transmit+0x44>)
 8000af6:	f004 fd8f 	bl	8005618 <HAL_SPI_Transmit>
 8000afa:	4603      	mov	r3, r0
 8000afc:	73fb      	strb	r3, [r7, #15]

	nrf24_ToggleCSCE(CS_UP);
 8000afe:	2001      	movs	r0, #1
 8000b00:	f7ff fdd0 	bl	80006a4 <nrf24_ToggleCSCE>

	return hal_status;
 8000b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	240000a0 	.word	0x240000a0

08000b14 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08e      	sub	sp, #56	; 0x38
 8000b18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2a:	4b93      	ldr	r3, [pc, #588]	; (8000d78 <MX_GPIO_Init+0x264>)
 8000b2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b30:	4a91      	ldr	r2, [pc, #580]	; (8000d78 <MX_GPIO_Init+0x264>)
 8000b32:	f043 0304 	orr.w	r3, r3, #4
 8000b36:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b3a:	4b8f      	ldr	r3, [pc, #572]	; (8000d78 <MX_GPIO_Init+0x264>)
 8000b3c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b40:	f003 0304 	and.w	r3, r3, #4
 8000b44:	623b      	str	r3, [r7, #32]
 8000b46:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b48:	4b8b      	ldr	r3, [pc, #556]	; (8000d78 <MX_GPIO_Init+0x264>)
 8000b4a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b4e:	4a8a      	ldr	r2, [pc, #552]	; (8000d78 <MX_GPIO_Init+0x264>)
 8000b50:	f043 0320 	orr.w	r3, r3, #32
 8000b54:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b58:	4b87      	ldr	r3, [pc, #540]	; (8000d78 <MX_GPIO_Init+0x264>)
 8000b5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b5e:	f003 0320 	and.w	r3, r3, #32
 8000b62:	61fb      	str	r3, [r7, #28]
 8000b64:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b66:	4b84      	ldr	r3, [pc, #528]	; (8000d78 <MX_GPIO_Init+0x264>)
 8000b68:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b6c:	4a82      	ldr	r2, [pc, #520]	; (8000d78 <MX_GPIO_Init+0x264>)
 8000b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b72:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b76:	4b80      	ldr	r3, [pc, #512]	; (8000d78 <MX_GPIO_Init+0x264>)
 8000b78:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b80:	61bb      	str	r3, [r7, #24]
 8000b82:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b84:	4b7c      	ldr	r3, [pc, #496]	; (8000d78 <MX_GPIO_Init+0x264>)
 8000b86:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b8a:	4a7b      	ldr	r2, [pc, #492]	; (8000d78 <MX_GPIO_Init+0x264>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b94:	4b78      	ldr	r3, [pc, #480]	; (8000d78 <MX_GPIO_Init+0x264>)
 8000b96:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	617b      	str	r3, [r7, #20]
 8000ba0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba2:	4b75      	ldr	r3, [pc, #468]	; (8000d78 <MX_GPIO_Init+0x264>)
 8000ba4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ba8:	4a73      	ldr	r2, [pc, #460]	; (8000d78 <MX_GPIO_Init+0x264>)
 8000baa:	f043 0302 	orr.w	r3, r3, #2
 8000bae:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bb2:	4b71      	ldr	r3, [pc, #452]	; (8000d78 <MX_GPIO_Init+0x264>)
 8000bb4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bb8:	f003 0302 	and.w	r3, r3, #2
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc0:	4b6d      	ldr	r3, [pc, #436]	; (8000d78 <MX_GPIO_Init+0x264>)
 8000bc2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bc6:	4a6c      	ldr	r2, [pc, #432]	; (8000d78 <MX_GPIO_Init+0x264>)
 8000bc8:	f043 0308 	orr.w	r3, r3, #8
 8000bcc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bd0:	4b69      	ldr	r3, [pc, #420]	; (8000d78 <MX_GPIO_Init+0x264>)
 8000bd2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bd6:	f003 0308 	and.w	r3, r3, #8
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bde:	4b66      	ldr	r3, [pc, #408]	; (8000d78 <MX_GPIO_Init+0x264>)
 8000be0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000be4:	4a64      	ldr	r2, [pc, #400]	; (8000d78 <MX_GPIO_Init+0x264>)
 8000be6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bea:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bee:	4b62      	ldr	r3, [pc, #392]	; (8000d78 <MX_GPIO_Init+0x264>)
 8000bf0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bfc:	4b5e      	ldr	r3, [pc, #376]	; (8000d78 <MX_GPIO_Init+0x264>)
 8000bfe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c02:	4a5d      	ldr	r2, [pc, #372]	; (8000d78 <MX_GPIO_Init+0x264>)
 8000c04:	f043 0310 	orr.w	r3, r3, #16
 8000c08:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c0c:	4b5a      	ldr	r3, [pc, #360]	; (8000d78 <MX_GPIO_Init+0x264>)
 8000c0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c12:	f003 0310 	and.w	r3, r3, #16
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c20:	4856      	ldr	r0, [pc, #344]	; (8000d7c <MX_GPIO_Init+0x268>)
 8000c22:	f001 fda9 	bl	8002778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2110      	movs	r1, #16
 8000c2a:	4855      	ldr	r0, [pc, #340]	; (8000d80 <MX_GPIO_Init+0x26c>)
 8000c2c:	f001 fda4 	bl	8002778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2120      	movs	r1, #32
 8000c34:	4853      	ldr	r0, [pc, #332]	; (8000d84 <MX_GPIO_Init+0x270>)
 8000c36:	f001 fd9f 	bl	8002778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c40:	4851      	ldr	r0, [pc, #324]	; (8000d88 <MX_GPIO_Init+0x274>)
 8000c42:	f001 fd99 	bl	8002778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2102      	movs	r1, #2
 8000c4a:	4850      	ldr	r0, [pc, #320]	; (8000d8c <MX_GPIO_Init+0x278>)
 8000c4c:	f001 fd94 	bl	8002778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c56:	2300      	movs	r3, #0
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c62:	4619      	mov	r1, r3
 8000c64:	4847      	ldr	r0, [pc, #284]	; (8000d84 <MX_GPIO_Init+0x270>)
 8000c66:	f001 fbd7 	bl	8002418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000c6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c70:	2301      	movs	r3, #1
 8000c72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c80:	4619      	mov	r1, r3
 8000c82:	483e      	ldr	r0, [pc, #248]	; (8000d7c <MX_GPIO_Init+0x268>)
 8000c84:	f001 fbc8 	bl	8002418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c88:	2310      	movs	r3, #16
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c94:	2300      	movs	r3, #0
 8000c96:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4838      	ldr	r0, [pc, #224]	; (8000d80 <MX_GPIO_Init+0x26c>)
 8000ca0:	f001 fbba 	bl	8002418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ca4:	2320      	movs	r3, #32
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4832      	ldr	r0, [pc, #200]	; (8000d84 <MX_GPIO_Init+0x270>)
 8000cbc:	f001 fbac 	bl	8002418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|LD3_Pin;
 8000cc0:	f244 0301 	movw	r3, #16385	; 0x4001
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	482b      	ldr	r0, [pc, #172]	; (8000d88 <MX_GPIO_Init+0x274>)
 8000cda:	f001 fb9d 	bl	8002418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000cde:	2380      	movs	r3, #128	; 0x80
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ce2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4827      	ldr	r0, [pc, #156]	; (8000d90 <MX_GPIO_Init+0x27c>)
 8000cf4:	f001 fb90 	bl	8002418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000cf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	481c      	ldr	r0, [pc, #112]	; (8000d80 <MX_GPIO_Init+0x26c>)
 8000d0e:	f001 fb83 	bl	8002418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000d12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000d24:	230a      	movs	r3, #10
 8000d26:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4814      	ldr	r0, [pc, #80]	; (8000d80 <MX_GPIO_Init+0x26c>)
 8000d30:	f001 fb72 	bl	8002418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000d34:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	480c      	ldr	r0, [pc, #48]	; (8000d80 <MX_GPIO_Init+0x26c>)
 8000d4e:	f001 fb63 	bl	8002418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d52:	2302      	movs	r3, #2
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d56:	2301      	movs	r3, #1
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d66:	4619      	mov	r1, r3
 8000d68:	4808      	ldr	r0, [pc, #32]	; (8000d8c <MX_GPIO_Init+0x278>)
 8000d6a:	f001 fb55 	bl	8002418 <HAL_GPIO_Init>

}
 8000d6e:	bf00      	nop
 8000d70:	3738      	adds	r7, #56	; 0x38
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	58024400 	.word	0x58024400
 8000d7c:	58021400 	.word	0x58021400
 8000d80:	58020000 	.word	0x58020000
 8000d84:	58020800 	.word	0x58020800
 8000d88:	58020400 	.word	0x58020400
 8000d8c:	58021000 	.word	0x58021000
 8000d90:	58021800 	.word	0x58021800

08000d94 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d98:	f000 fc14 	bl	80015c4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d9c:	f000 f876 	bl	8000e8c <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8000da0:	f000 f8f0 	bl	8000f84 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000da4:	f7ff feb6 	bl	8000b14 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000da8:	f000 fadc 	bl	8001364 <MX_USART3_UART_Init>
	MX_USB_OTG_HS_USB_Init();
 8000dac:	f000 fbd8 	bl	8001560 <MX_USB_OTG_HS_USB_Init>
	MX_SPI1_Init();
 8000db0:	f000 f90c 	bl	8000fcc <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Transmit(&huart3, (uint8_t*) "Booting...\r\n",12,100);
 8000db4:	2364      	movs	r3, #100	; 0x64
 8000db6:	220c      	movs	r2, #12
 8000db8:	492a      	ldr	r1, [pc, #168]	; (8000e64 <main+0xd0>)
 8000dba:	482b      	ldr	r0, [pc, #172]	; (8000e68 <main+0xd4>)
 8000dbc:	f005 fb0b 	bl	80063d6 <HAL_UART_Transmit>

	nrf24_Init();
 8000dc0:	f7ff fe32 	bl	8000a28 <nrf24_Init>


	// TX mode
	nrf24_TxMode(TxAddress, 10);
 8000dc4:	210a      	movs	r1, #10
 8000dc6:	4829      	ldr	r0, [pc, #164]	; (8000e6c <main+0xd8>)
 8000dc8:	f7ff fe57 	bl	8000a7a <nrf24_TxMode>
	/* USER CODE BEGIN WHILE */
	while (1){
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if(uartFlag == 1){
 8000dcc:	4b28      	ldr	r3, [pc, #160]	; (8000e70 <main+0xdc>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d11f      	bne.n	8000e14 <main+0x80>
			switch(uartRxBuffer[0]){
 8000dd4:	4b27      	ldr	r3, [pc, #156]	; (8000e74 <main+0xe0>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b67      	cmp	r3, #103	; 0x67
 8000dda:	d108      	bne.n	8000dee <main+0x5a>
			case 'g' :
				HAL_UART_Transmit(&huart3,(uint8_t*) "et informations for nrf24\r\n",27,100);
 8000ddc:	2364      	movs	r3, #100	; 0x64
 8000dde:	221b      	movs	r2, #27
 8000de0:	4925      	ldr	r1, [pc, #148]	; (8000e78 <main+0xe4>)
 8000de2:	4821      	ldr	r0, [pc, #132]	; (8000e68 <main+0xd4>)
 8000de4:	f005 faf7 	bl	80063d6 <HAL_UART_Transmit>
				nrf24_ShowMemory();
 8000de8:	f7ff fce4 	bl	80007b4 <nrf24_ShowMemory>
				break;
 8000dec:	e00f      	b.n	8000e0e <main+0x7a>
			default :
				HAL_GPIO_TogglePin(LED2_PORT,  LED2_PIN) ;
 8000dee:	2102      	movs	r1, #2
 8000df0:	4822      	ldr	r0, [pc, #136]	; (8000e7c <main+0xe8>)
 8000df2:	f001 fcda 	bl	80027aa <HAL_GPIO_TogglePin>
				HAL_UART_Transmit(&huart3, (uint8_t*) msglu, 18, 100) ;
 8000df6:	4b22      	ldr	r3, [pc, #136]	; (8000e80 <main+0xec>)
 8000df8:	6819      	ldr	r1, [r3, #0]
 8000dfa:	2364      	movs	r3, #100	; 0x64
 8000dfc:	2212      	movs	r2, #18
 8000dfe:	481a      	ldr	r0, [pc, #104]	; (8000e68 <main+0xd4>)
 8000e00:	f005 fae9 	bl	80063d6 <HAL_UART_Transmit>
				HAL_GPIO_TogglePin(LED2_PORT,  LED2_PIN) ;
 8000e04:	2102      	movs	r1, #2
 8000e06:	481d      	ldr	r0, [pc, #116]	; (8000e7c <main+0xe8>)
 8000e08:	f001 fccf 	bl	80027aa <HAL_GPIO_TogglePin>
				break;
 8000e0c:	bf00      	nop
			}
			uartFlag = 0 ;
 8000e0e:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <main+0xdc>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED3_PORT,  LED3_PIN);
			HAL_Delay(50);
		}
		 */
		// Part for the transmission, will be put on one device the comment to upload the receive on another one
		if (nrf24_Transmit((uint8_t*)TxData) == HAL_OK){
 8000e14:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <main+0xf0>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fe57 	bl	8000acc <nrf24_Transmit>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d10e      	bne.n	8000e42 <main+0xae>
			HAL_GPIO_TogglePin(LED1_PORT,  LED1_PIN);
 8000e24:	2101      	movs	r1, #1
 8000e26:	4818      	ldr	r0, [pc, #96]	; (8000e88 <main+0xf4>)
 8000e28:	f001 fcbf 	bl	80027aa <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8000e2c:	2064      	movs	r0, #100	; 0x64
 8000e2e:	f000 fc5b 	bl	80016e8 <HAL_Delay>
			HAL_GPIO_TogglePin(LED1_PORT,  LED1_PIN);
 8000e32:	2101      	movs	r1, #1
 8000e34:	4814      	ldr	r0, [pc, #80]	; (8000e88 <main+0xf4>)
 8000e36:	f001 fcb8 	bl	80027aa <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8000e3a:	2064      	movs	r0, #100	; 0x64
 8000e3c:	f000 fc54 	bl	80016e8 <HAL_Delay>
 8000e40:	e7c4      	b.n	8000dcc <main+0x38>
		}
		else{
			HAL_GPIO_TogglePin(LED3_PORT,  LED3_PIN);
 8000e42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e46:	4810      	ldr	r0, [pc, #64]	; (8000e88 <main+0xf4>)
 8000e48:	f001 fcaf 	bl	80027aa <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8000e4c:	2064      	movs	r0, #100	; 0x64
 8000e4e:	f000 fc4b 	bl	80016e8 <HAL_Delay>
			HAL_GPIO_TogglePin(LED3_PORT,  LED3_PIN);
 8000e52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e56:	480c      	ldr	r0, [pc, #48]	; (8000e88 <main+0xf4>)
 8000e58:	f001 fca7 	bl	80027aa <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8000e5c:	2064      	movs	r0, #100	; 0x64
 8000e5e:	f000 fc43 	bl	80016e8 <HAL_Delay>
		if(uartFlag == 1){
 8000e62:	e7b3      	b.n	8000dcc <main+0x38>
 8000e64:	08009754 	.word	0x08009754
 8000e68:	24000170 	.word	0x24000170
 8000e6c:	24000000 	.word	0x24000000
 8000e70:	2400012c 	.word	0x2400012c
 8000e74:	24000150 	.word	0x24000150
 8000e78:	08009764 	.word	0x08009764
 8000e7c:	58021000 	.word	0x58021000
 8000e80:	2400000c 	.word	0x2400000c
 8000e84:	24000008 	.word	0x24000008
 8000e88:	58020400 	.word	0x58020400

08000e8c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b09c      	sub	sp, #112	; 0x70
 8000e90:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e96:	224c      	movs	r2, #76	; 0x4c
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f007 ffa2 	bl	8008de4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	2220      	movs	r2, #32
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f007 ff9c 	bl	8008de4 <memset>

	/*AXI clock gating */
	RCC->CKGAENR = 0xFFFFFFFF;
 8000eac:	4b33      	ldr	r3, [pc, #204]	; (8000f7c <SystemClock_Config+0xf0>)
 8000eae:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000eb6:	2004      	movs	r0, #4
 8000eb8:	f001 fc92 	bl	80027e0 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	4b2f      	ldr	r3, [pc, #188]	; (8000f80 <SystemClock_Config+0xf4>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	4a2e      	ldr	r2, [pc, #184]	; (8000f80 <SystemClock_Config+0xf4>)
 8000ec6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000eca:	6193      	str	r3, [r2, #24]
 8000ecc:	4b2c      	ldr	r3, [pc, #176]	; (8000f80 <SystemClock_Config+0xf4>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ed4:	603b      	str	r3, [r7, #0]
 8000ed6:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ed8:	bf00      	nop
 8000eda:	4b29      	ldr	r3, [pc, #164]	; (8000f80 <SystemClock_Config+0xf4>)
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ee6:	d1f8      	bne.n	8000eda <SystemClock_Config+0x4e>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000ee8:	2323      	movs	r3, #35	; 0x23
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
			|RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000eec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ef0:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV4;
 8000ef2:	2311      	movs	r3, #17
 8000ef4:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = 64;
 8000ef6:	2340      	movs	r3, #64	; 0x40
 8000ef8:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000efa:	2301      	movs	r3, #1
 8000efc:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000efe:	2302      	movs	r3, #2
 8000f00:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f02:	2302      	movs	r3, #2
 8000f04:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000f06:	2304      	movs	r3, #4
 8000f08:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 280;
 8000f0a:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000f0e:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8000f10:	2302      	movs	r3, #2
 8000f12:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f14:	2304      	movs	r3, #4
 8000f16:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000f1c:	2304      	movs	r3, #4
 8000f1e:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f001 fcb1 	bl	8002894 <HAL_RCC_OscConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <SystemClock_Config+0xb0>
	{
		Error_Handler();
 8000f38:	f000 f842 	bl	8000fc0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3c:	233f      	movs	r3, #63	; 0x3f
 8000f3e:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f40:	2303      	movs	r3, #3
 8000f42:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f44:	2300      	movs	r3, #0
 8000f46:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f4c:	2340      	movs	r3, #64	; 0x40
 8000f4e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f50:	2340      	movs	r3, #64	; 0x40
 8000f52:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f58:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f5a:	2340      	movs	r3, #64	; 0x40
 8000f5c:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	2107      	movs	r1, #7
 8000f62:	4618      	mov	r0, r3
 8000f64:	f002 f8c8 	bl	80030f8 <HAL_RCC_ClockConfig>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <SystemClock_Config+0xe6>
	{
		Error_Handler();
 8000f6e:	f000 f827 	bl	8000fc0 <Error_Handler>
	}
}
 8000f72:	bf00      	nop
 8000f74:	3770      	adds	r7, #112	; 0x70
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	58024400 	.word	0x58024400
 8000f80:	58024800 	.word	0x58024800

08000f84 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b0b0      	sub	sp, #192	; 0xc0
 8000f88:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	22c0      	movs	r2, #192	; 0xc0
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f007 ff27 	bl	8008de4 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8000f96:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000f9a:	f04f 0300 	mov.w	r3, #0
 8000f9e:	e9c7 2300 	strd	r2, r3, [r7]
	PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fa6:	463b      	mov	r3, r7
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f002 fc31 	bl	8003810 <HAL_RCCEx_PeriphCLKConfig>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <PeriphCommonClock_Config+0x34>
	{
		Error_Handler();
 8000fb4:	f000 f804 	bl	8000fc0 <Error_Handler>
	}
}
 8000fb8:	bf00      	nop
 8000fba:	37c0      	adds	r7, #192	; 0xc0
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc4:	b672      	cpsid	i
}
 8000fc6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <Error_Handler+0x8>
	...

08000fcc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000fd0:	4b27      	ldr	r3, [pc, #156]	; (8001070 <MX_SPI1_Init+0xa4>)
 8000fd2:	4a28      	ldr	r2, [pc, #160]	; (8001074 <MX_SPI1_Init+0xa8>)
 8000fd4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fd6:	4b26      	ldr	r3, [pc, #152]	; (8001070 <MX_SPI1_Init+0xa4>)
 8000fd8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000fdc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fde:	4b24      	ldr	r3, [pc, #144]	; (8001070 <MX_SPI1_Init+0xa4>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fe4:	4b22      	ldr	r3, [pc, #136]	; (8001070 <MX_SPI1_Init+0xa4>)
 8000fe6:	2207      	movs	r2, #7
 8000fe8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fea:	4b21      	ldr	r3, [pc, #132]	; (8001070 <MX_SPI1_Init+0xa4>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ff0:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <MX_SPI1_Init+0xa4>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ff6:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <MX_SPI1_Init+0xa4>)
 8000ff8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000ffc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ffe:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <MX_SPI1_Init+0xa4>)
 8001000:	2200      	movs	r2, #0
 8001002:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001004:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <MX_SPI1_Init+0xa4>)
 8001006:	2200      	movs	r2, #0
 8001008:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800100a:	4b19      	ldr	r3, [pc, #100]	; (8001070 <MX_SPI1_Init+0xa4>)
 800100c:	2200      	movs	r2, #0
 800100e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001010:	4b17      	ldr	r3, [pc, #92]	; (8001070 <MX_SPI1_Init+0xa4>)
 8001012:	2200      	movs	r2, #0
 8001014:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001016:	4b16      	ldr	r3, [pc, #88]	; (8001070 <MX_SPI1_Init+0xa4>)
 8001018:	2200      	movs	r2, #0
 800101a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800101c:	4b14      	ldr	r3, [pc, #80]	; (8001070 <MX_SPI1_Init+0xa4>)
 800101e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001022:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <MX_SPI1_Init+0xa4>)
 8001026:	2200      	movs	r2, #0
 8001028:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <MX_SPI1_Init+0xa4>)
 800102c:	2200      	movs	r2, #0
 800102e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001030:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <MX_SPI1_Init+0xa4>)
 8001032:	2200      	movs	r2, #0
 8001034:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <MX_SPI1_Init+0xa4>)
 8001038:	2200      	movs	r2, #0
 800103a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <MX_SPI1_Init+0xa4>)
 800103e:	2200      	movs	r2, #0
 8001040:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <MX_SPI1_Init+0xa4>)
 8001044:	2200      	movs	r2, #0
 8001046:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001048:	4b09      	ldr	r3, [pc, #36]	; (8001070 <MX_SPI1_Init+0xa4>)
 800104a:	2200      	movs	r2, #0
 800104c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800104e:	4b08      	ldr	r3, [pc, #32]	; (8001070 <MX_SPI1_Init+0xa4>)
 8001050:	2200      	movs	r2, #0
 8001052:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <MX_SPI1_Init+0xa4>)
 8001056:	2200      	movs	r2, #0
 8001058:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <MX_SPI1_Init+0xa4>)
 800105c:	f004 f9b8 	bl	80053d0 <HAL_SPI_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8001066:	f7ff ffab 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	240000a0 	.word	0x240000a0
 8001074:	40013000 	.word	0x40013000

08001078 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b0ba      	sub	sp, #232	; 0xe8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001090:	f107 0310 	add.w	r3, r7, #16
 8001094:	22c0      	movs	r2, #192	; 0xc0
 8001096:	2100      	movs	r1, #0
 8001098:	4618      	mov	r0, r3
 800109a:	f007 fea3 	bl	8008de4 <memset>
  if(spiHandle->Instance==SPI1)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a2a      	ldr	r2, [pc, #168]	; (800114c <HAL_SPI_MspInit+0xd4>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d14d      	bne.n	8001144 <HAL_SPI_MspInit+0xcc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80010a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010ac:	f04f 0300 	mov.w	r3, #0
 80010b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 80010b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010b8:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ba:	f107 0310 	add.w	r3, r7, #16
 80010be:	4618      	mov	r0, r3
 80010c0:	f002 fba6 	bl	8003810 <HAL_RCCEx_PeriphCLKConfig>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80010ca:	f7ff ff79 	bl	8000fc0 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010ce:	4b20      	ldr	r3, [pc, #128]	; (8001150 <HAL_SPI_MspInit+0xd8>)
 80010d0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80010d4:	4a1e      	ldr	r2, [pc, #120]	; (8001150 <HAL_SPI_MspInit+0xd8>)
 80010d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010da:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80010de:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <HAL_SPI_MspInit+0xd8>)
 80010e0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80010e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ec:	4b18      	ldr	r3, [pc, #96]	; (8001150 <HAL_SPI_MspInit+0xd8>)
 80010ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010f2:	4a17      	ldr	r2, [pc, #92]	; (8001150 <HAL_SPI_MspInit+0xd8>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010fc:	4b14      	ldr	r3, [pc, #80]	; (8001150 <HAL_SPI_MspInit+0xd8>)
 80010fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800110a:	23e0      	movs	r3, #224	; 0xe0
 800110c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001110:	2302      	movs	r3, #2
 8001112:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001122:	2305      	movs	r3, #5
 8001124:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001128:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800112c:	4619      	mov	r1, r3
 800112e:	4809      	ldr	r0, [pc, #36]	; (8001154 <HAL_SPI_MspInit+0xdc>)
 8001130:	f001 f972 	bl	8002418 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001134:	2200      	movs	r2, #0
 8001136:	2100      	movs	r1, #0
 8001138:	2023      	movs	r0, #35	; 0x23
 800113a:	f000 fbd4 	bl	80018e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800113e:	2023      	movs	r0, #35	; 0x23
 8001140:	f000 fbeb 	bl	800191a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001144:	bf00      	nop
 8001146:	37e8      	adds	r7, #232	; 0xe8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40013000 	.word	0x40013000
 8001150:	58024400 	.word	0x58024400
 8001154:	58020000 	.word	0x58020000

08001158 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115e:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <HAL_MspInit+0x30>)
 8001160:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001164:	4a08      	ldr	r2, [pc, #32]	; (8001188 <HAL_MspInit+0x30>)
 8001166:	f043 0302 	orr.w	r3, r3, #2
 800116a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_MspInit+0x30>)
 8001170:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	58024400 	.word	0x58024400

0800118c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001190:	e7fe      	b.n	8001190 <NMI_Handler+0x4>

08001192 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001196:	e7fe      	b.n	8001196 <HardFault_Handler+0x4>

08001198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800119c:	e7fe      	b.n	800119c <MemManage_Handler+0x4>

0800119e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <BusFault_Handler+0x4>

080011a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <UsageFault_Handler+0x4>

080011aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d8:	f000 fa66 	bl	80016a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}

080011e0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80011e4:	4802      	ldr	r0, [pc, #8]	; (80011f0 <SPI1_IRQHandler+0x10>)
 80011e6:	f004 fda3 	bl	8005d30 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	240000a0 	.word	0x240000a0

080011f4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011f8:	4802      	ldr	r0, [pc, #8]	; (8001204 <USART3_IRQHandler+0x10>)
 80011fa:	f005 f9c7 	bl	800658c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	24000170 	.word	0x24000170

08001208 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001210:	4a14      	ldr	r2, [pc, #80]	; (8001264 <_sbrk+0x5c>)
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <_sbrk+0x60>)
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <_sbrk+0x64>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d102      	bne.n	800122a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <_sbrk+0x64>)
 8001226:	4a12      	ldr	r2, [pc, #72]	; (8001270 <_sbrk+0x68>)
 8001228:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <_sbrk+0x64>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4413      	add	r3, r2
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	429a      	cmp	r2, r3
 8001236:	d207      	bcs.n	8001248 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001238:	f007 fdaa 	bl	8008d90 <__errno>
 800123c:	4603      	mov	r3, r0
 800123e:	220c      	movs	r2, #12
 8001240:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001242:	f04f 33ff 	mov.w	r3, #4294967295
 8001246:	e009      	b.n	800125c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001248:	4b08      	ldr	r3, [pc, #32]	; (800126c <_sbrk+0x64>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800124e:	4b07      	ldr	r3, [pc, #28]	; (800126c <_sbrk+0x64>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4413      	add	r3, r2
 8001256:	4a05      	ldr	r2, [pc, #20]	; (800126c <_sbrk+0x64>)
 8001258:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800125a:	68fb      	ldr	r3, [r7, #12]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	24100000 	.word	0x24100000
 8001268:	00000400 	.word	0x00000400
 800126c:	24000128 	.word	0x24000128
 8001270:	24000218 	.word	0x24000218

08001274 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001278:	4b32      	ldr	r3, [pc, #200]	; (8001344 <SystemInit+0xd0>)
 800127a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800127e:	4a31      	ldr	r2, [pc, #196]	; (8001344 <SystemInit+0xd0>)
 8001280:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001284:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001288:	4b2f      	ldr	r3, [pc, #188]	; (8001348 <SystemInit+0xd4>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 030f 	and.w	r3, r3, #15
 8001290:	2b02      	cmp	r3, #2
 8001292:	d807      	bhi.n	80012a4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001294:	4b2c      	ldr	r3, [pc, #176]	; (8001348 <SystemInit+0xd4>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f023 030f 	bic.w	r3, r3, #15
 800129c:	4a2a      	ldr	r2, [pc, #168]	; (8001348 <SystemInit+0xd4>)
 800129e:	f043 0303 	orr.w	r3, r3, #3
 80012a2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80012a4:	4b29      	ldr	r3, [pc, #164]	; (800134c <SystemInit+0xd8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a28      	ldr	r2, [pc, #160]	; (800134c <SystemInit+0xd8>)
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012b0:	4b26      	ldr	r3, [pc, #152]	; (800134c <SystemInit+0xd8>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80012b6:	4b25      	ldr	r3, [pc, #148]	; (800134c <SystemInit+0xd8>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	4924      	ldr	r1, [pc, #144]	; (800134c <SystemInit+0xd8>)
 80012bc:	4b24      	ldr	r3, [pc, #144]	; (8001350 <SystemInit+0xdc>)
 80012be:	4013      	ands	r3, r2
 80012c0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012c2:	4b21      	ldr	r3, [pc, #132]	; (8001348 <SystemInit+0xd4>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 030c 	and.w	r3, r3, #12
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d007      	beq.n	80012de <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012ce:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <SystemInit+0xd4>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f023 030f 	bic.w	r3, r3, #15
 80012d6:	4a1c      	ldr	r2, [pc, #112]	; (8001348 <SystemInit+0xd4>)
 80012d8:	f043 0303 	orr.w	r3, r3, #3
 80012dc:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80012de:	4b1b      	ldr	r3, [pc, #108]	; (800134c <SystemInit+0xd8>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80012e4:	4b19      	ldr	r3, [pc, #100]	; (800134c <SystemInit+0xd8>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80012ea:	4b18      	ldr	r3, [pc, #96]	; (800134c <SystemInit+0xd8>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80012f0:	4b16      	ldr	r3, [pc, #88]	; (800134c <SystemInit+0xd8>)
 80012f2:	4a18      	ldr	r2, [pc, #96]	; (8001354 <SystemInit+0xe0>)
 80012f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80012f6:	4b15      	ldr	r3, [pc, #84]	; (800134c <SystemInit+0xd8>)
 80012f8:	4a17      	ldr	r2, [pc, #92]	; (8001358 <SystemInit+0xe4>)
 80012fa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80012fc:	4b13      	ldr	r3, [pc, #76]	; (800134c <SystemInit+0xd8>)
 80012fe:	4a17      	ldr	r2, [pc, #92]	; (800135c <SystemInit+0xe8>)
 8001300:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001302:	4b12      	ldr	r3, [pc, #72]	; (800134c <SystemInit+0xd8>)
 8001304:	2200      	movs	r2, #0
 8001306:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001308:	4b10      	ldr	r3, [pc, #64]	; (800134c <SystemInit+0xd8>)
 800130a:	4a14      	ldr	r2, [pc, #80]	; (800135c <SystemInit+0xe8>)
 800130c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800130e:	4b0f      	ldr	r3, [pc, #60]	; (800134c <SystemInit+0xd8>)
 8001310:	2200      	movs	r2, #0
 8001312:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001314:	4b0d      	ldr	r3, [pc, #52]	; (800134c <SystemInit+0xd8>)
 8001316:	4a11      	ldr	r2, [pc, #68]	; (800135c <SystemInit+0xe8>)
 8001318:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <SystemInit+0xd8>)
 800131c:	2200      	movs	r2, #0
 800131e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001320:	4b0a      	ldr	r3, [pc, #40]	; (800134c <SystemInit+0xd8>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a09      	ldr	r2, [pc, #36]	; (800134c <SystemInit+0xd8>)
 8001326:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800132a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800132c:	4b07      	ldr	r3, [pc, #28]	; (800134c <SystemInit+0xd8>)
 800132e:	2200      	movs	r2, #0
 8001330:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001332:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <SystemInit+0xec>)
 8001334:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001338:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800133a:	bf00      	nop
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000ed00 	.word	0xe000ed00
 8001348:	52002000 	.word	0x52002000
 800134c:	58024400 	.word	0x58024400
 8001350:	eaf6ed7f 	.word	0xeaf6ed7f
 8001354:	02020200 	.word	0x02020200
 8001358:	01ff0000 	.word	0x01ff0000
 800135c:	01010280 	.word	0x01010280
 8001360:	52004000 	.word	0x52004000

08001364 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001368:	4b25      	ldr	r3, [pc, #148]	; (8001400 <MX_USART3_UART_Init+0x9c>)
 800136a:	4a26      	ldr	r2, [pc, #152]	; (8001404 <MX_USART3_UART_Init+0xa0>)
 800136c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800136e:	4b24      	ldr	r3, [pc, #144]	; (8001400 <MX_USART3_UART_Init+0x9c>)
 8001370:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001374:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001376:	4b22      	ldr	r3, [pc, #136]	; (8001400 <MX_USART3_UART_Init+0x9c>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800137c:	4b20      	ldr	r3, [pc, #128]	; (8001400 <MX_USART3_UART_Init+0x9c>)
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001382:	4b1f      	ldr	r3, [pc, #124]	; (8001400 <MX_USART3_UART_Init+0x9c>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001388:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <MX_USART3_UART_Init+0x9c>)
 800138a:	220c      	movs	r2, #12
 800138c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138e:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <MX_USART3_UART_Init+0x9c>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001394:	4b1a      	ldr	r3, [pc, #104]	; (8001400 <MX_USART3_UART_Init+0x9c>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800139a:	4b19      	ldr	r3, [pc, #100]	; (8001400 <MX_USART3_UART_Init+0x9c>)
 800139c:	2200      	movs	r2, #0
 800139e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013a0:	4b17      	ldr	r3, [pc, #92]	; (8001400 <MX_USART3_UART_Init+0x9c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013a6:	4b16      	ldr	r3, [pc, #88]	; (8001400 <MX_USART3_UART_Init+0x9c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013ac:	4814      	ldr	r0, [pc, #80]	; (8001400 <MX_USART3_UART_Init+0x9c>)
 80013ae:	f004 ffc2 	bl	8006336 <HAL_UART_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80013b8:	f7ff fe02 	bl	8000fc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013bc:	2100      	movs	r1, #0
 80013be:	4810      	ldr	r0, [pc, #64]	; (8001400 <MX_USART3_UART_Init+0x9c>)
 80013c0:	f007 fc1b 	bl	8008bfa <HAL_UARTEx_SetTxFifoThreshold>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80013ca:	f7ff fdf9 	bl	8000fc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013ce:	2100      	movs	r1, #0
 80013d0:	480b      	ldr	r0, [pc, #44]	; (8001400 <MX_USART3_UART_Init+0x9c>)
 80013d2:	f007 fc50 	bl	8008c76 <HAL_UARTEx_SetRxFifoThreshold>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80013dc:	f7ff fdf0 	bl	8000fc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80013e0:	4807      	ldr	r0, [pc, #28]	; (8001400 <MX_USART3_UART_Init+0x9c>)
 80013e2:	f007 fbd1 	bl	8008b88 <HAL_UARTEx_DisableFifoMode>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80013ec:	f7ff fde8 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  HAL_UART_Receive_IT(&huart3, (uint8_t*) uartRxBuffer, 1);
 80013f0:	2201      	movs	r2, #1
 80013f2:	4905      	ldr	r1, [pc, #20]	; (8001408 <MX_USART3_UART_Init+0xa4>)
 80013f4:	4802      	ldr	r0, [pc, #8]	; (8001400 <MX_USART3_UART_Init+0x9c>)
 80013f6:	f005 f87d 	bl	80064f4 <HAL_UART_Receive_IT>
  /* USER CODE END USART3_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	24000170 	.word	0x24000170
 8001404:	40004800 	.word	0x40004800
 8001408:	24000150 	.word	0x24000150

0800140c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b0ba      	sub	sp, #232	; 0xe8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001424:	f107 0310 	add.w	r3, r7, #16
 8001428:	22c0      	movs	r2, #192	; 0xc0
 800142a:	2100      	movs	r1, #0
 800142c:	4618      	mov	r0, r3
 800142e:	f007 fcd9 	bl	8008de4 <memset>
  if(uartHandle->Instance==USART3)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a2b      	ldr	r2, [pc, #172]	; (80014e4 <HAL_UART_MspInit+0xd8>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d14e      	bne.n	80014da <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800143c:	f04f 0202 	mov.w	r2, #2
 8001440:	f04f 0300 	mov.w	r3, #0
 8001444:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001448:	2300      	movs	r3, #0
 800144a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800144e:	f107 0310 	add.w	r3, r7, #16
 8001452:	4618      	mov	r0, r3
 8001454:	f002 f9dc 	bl	8003810 <HAL_RCCEx_PeriphCLKConfig>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800145e:	f7ff fdaf 	bl	8000fc0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001462:	4b21      	ldr	r3, [pc, #132]	; (80014e8 <HAL_UART_MspInit+0xdc>)
 8001464:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001468:	4a1f      	ldr	r2, [pc, #124]	; (80014e8 <HAL_UART_MspInit+0xdc>)
 800146a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800146e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001472:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <HAL_UART_MspInit+0xdc>)
 8001474:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001478:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001480:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <HAL_UART_MspInit+0xdc>)
 8001482:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001486:	4a18      	ldr	r2, [pc, #96]	; (80014e8 <HAL_UART_MspInit+0xdc>)
 8001488:	f043 0308 	orr.w	r3, r3, #8
 800148c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001490:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <HAL_UART_MspInit+0xdc>)
 8001492:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800149e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b2:	2300      	movs	r3, #0
 80014b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014b8:	2307      	movs	r3, #7
 80014ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014be:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014c2:	4619      	mov	r1, r3
 80014c4:	4809      	ldr	r0, [pc, #36]	; (80014ec <HAL_UART_MspInit+0xe0>)
 80014c6:	f000 ffa7 	bl	8002418 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2100      	movs	r1, #0
 80014ce:	2027      	movs	r0, #39	; 0x27
 80014d0:	f000 fa09 	bl	80018e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80014d4:	2027      	movs	r0, #39	; 0x27
 80014d6:	f000 fa20 	bl	800191a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80014da:	bf00      	nop
 80014dc:	37e8      	adds	r7, #232	; 0xe8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40004800 	.word	0x40004800
 80014e8:	58024400 	.word	0x58024400
 80014ec:	58020c00 	.word	0x58020c00

080014f0 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	uartFlag = 1;
 80014f8:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <HAL_UART_RxCpltCallback+0x34>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	701a      	strb	r2, [r3, #0]
	uartTxBuffer[0]=uartRxBuffer[0];
 80014fe:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <HAL_UART_RxCpltCallback+0x38>)
 8001500:	781a      	ldrb	r2, [r3, #0]
 8001502:	4b0a      	ldr	r3, [pc, #40]	; (800152c <HAL_UART_RxCpltCallback+0x3c>)
 8001504:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*) uartTxBuffer, 1, 100);
 8001506:	2364      	movs	r3, #100	; 0x64
 8001508:	2201      	movs	r2, #1
 800150a:	4908      	ldr	r1, [pc, #32]	; (800152c <HAL_UART_RxCpltCallback+0x3c>)
 800150c:	4808      	ldr	r0, [pc, #32]	; (8001530 <HAL_UART_RxCpltCallback+0x40>)
 800150e:	f004 ff62 	bl	80063d6 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart3, (uint8_t*) uartRxBuffer, 1);
 8001512:	2201      	movs	r2, #1
 8001514:	4904      	ldr	r1, [pc, #16]	; (8001528 <HAL_UART_RxCpltCallback+0x38>)
 8001516:	4806      	ldr	r0, [pc, #24]	; (8001530 <HAL_UART_RxCpltCallback+0x40>)
 8001518:	f004 ffec 	bl	80064f4 <HAL_UART_Receive_IT>

}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	2400012c 	.word	0x2400012c
 8001528:	24000150 	.word	0x24000150
 800152c:	24000130 	.word	0x24000130
 8001530:	24000170 	.word	0x24000170

08001534 <HAL_UART_Print>:

HAL_StatusTypeDef HAL_UART_Print(char* buffer){
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
	return HAL_UART_Transmit(&huart3, buffer, strlen(buffer), 100);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7fe fed7 	bl	80002f0 <strlen>
 8001542:	4603      	mov	r3, r0
 8001544:	b29a      	uxth	r2, r3
 8001546:	2364      	movs	r3, #100	; 0x64
 8001548:	6879      	ldr	r1, [r7, #4]
 800154a:	4804      	ldr	r0, [pc, #16]	; (800155c <HAL_UART_Print+0x28>)
 800154c:	f004 ff43 	bl	80063d6 <HAL_UART_Transmit>
 8001550:	4603      	mov	r3, r0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	24000170 	.word	0x24000170

08001560 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001570:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001574:	f7ff fe7e 	bl	8001274 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001578:	480c      	ldr	r0, [pc, #48]	; (80015ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800157a:	490d      	ldr	r1, [pc, #52]	; (80015b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800157c:	4a0d      	ldr	r2, [pc, #52]	; (80015b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800157e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001580:	e002      	b.n	8001588 <LoopCopyDataInit>

08001582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001586:	3304      	adds	r3, #4

08001588 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800158a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800158c:	d3f9      	bcc.n	8001582 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158e:	4a0a      	ldr	r2, [pc, #40]	; (80015b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001590:	4c0a      	ldr	r4, [pc, #40]	; (80015bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001594:	e001      	b.n	800159a <LoopFillZerobss>

08001596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001598:	3204      	adds	r2, #4

0800159a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800159a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800159c:	d3fb      	bcc.n	8001596 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800159e:	f007 fbfd 	bl	8008d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015a2:	f7ff fbf7 	bl	8000d94 <main>
  bx  lr
 80015a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015a8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80015ac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015b0:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 80015b4:	080097fc 	.word	0x080097fc
  ldr r2, =_sbss
 80015b8:	24000084 	.word	0x24000084
  ldr r4, =_ebss
 80015bc:	24000218 	.word	0x24000218

080015c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015c0:	e7fe      	b.n	80015c0 <ADC_IRQHandler>
	...

080015c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ca:	2003      	movs	r0, #3
 80015cc:	f000 f980 	bl	80018d0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80015d0:	f001 ff48 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 80015d4:	4602      	mov	r2, r0
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <HAL_Init+0x68>)
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	0a1b      	lsrs	r3, r3, #8
 80015dc:	f003 030f 	and.w	r3, r3, #15
 80015e0:	4913      	ldr	r1, [pc, #76]	; (8001630 <HAL_Init+0x6c>)
 80015e2:	5ccb      	ldrb	r3, [r1, r3]
 80015e4:	f003 031f 	and.w	r3, r3, #31
 80015e8:	fa22 f303 	lsr.w	r3, r2, r3
 80015ec:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80015ee:	4b0f      	ldr	r3, [pc, #60]	; (800162c <HAL_Init+0x68>)
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	f003 030f 	and.w	r3, r3, #15
 80015f6:	4a0e      	ldr	r2, [pc, #56]	; (8001630 <HAL_Init+0x6c>)
 80015f8:	5cd3      	ldrb	r3, [r2, r3]
 80015fa:	f003 031f 	and.w	r3, r3, #31
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	fa22 f303 	lsr.w	r3, r2, r3
 8001604:	4a0b      	ldr	r2, [pc, #44]	; (8001634 <HAL_Init+0x70>)
 8001606:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001608:	4a0b      	ldr	r2, [pc, #44]	; (8001638 <HAL_Init+0x74>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800160e:	2000      	movs	r0, #0
 8001610:	f000 f814 	bl	800163c <HAL_InitTick>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e002      	b.n	8001624 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800161e:	f7ff fd9b 	bl	8001158 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	58024400 	.word	0x58024400
 8001630:	08009780 	.word	0x08009780
 8001634:	24000014 	.word	0x24000014
 8001638:	24000010 	.word	0x24000010

0800163c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001644:	4b15      	ldr	r3, [pc, #84]	; (800169c <HAL_InitTick+0x60>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d101      	bne.n	8001650 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e021      	b.n	8001694 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001650:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <HAL_InitTick+0x64>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <HAL_InitTick+0x60>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	4619      	mov	r1, r3
 800165a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001662:	fbb2 f3f3 	udiv	r3, r2, r3
 8001666:	4618      	mov	r0, r3
 8001668:	f000 f965 	bl	8001936 <HAL_SYSTICK_Config>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e00e      	b.n	8001694 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2b0f      	cmp	r3, #15
 800167a:	d80a      	bhi.n	8001692 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800167c:	2200      	movs	r2, #0
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	f04f 30ff 	mov.w	r0, #4294967295
 8001684:	f000 f92f 	bl	80018e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001688:	4a06      	ldr	r2, [pc, #24]	; (80016a4 <HAL_InitTick+0x68>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800168e:	2300      	movs	r3, #0
 8001690:	e000      	b.n	8001694 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
}
 8001694:	4618      	mov	r0, r3
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	2400001c 	.word	0x2400001c
 80016a0:	24000010 	.word	0x24000010
 80016a4:	24000018 	.word	0x24000018

080016a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_IncTick+0x20>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_IncTick+0x24>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4413      	add	r3, r2
 80016b8:	4a04      	ldr	r2, [pc, #16]	; (80016cc <HAL_IncTick+0x24>)
 80016ba:	6013      	str	r3, [r2, #0]
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	2400001c 	.word	0x2400001c
 80016cc:	24000204 	.word	0x24000204

080016d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return uwTick;
 80016d4:	4b03      	ldr	r3, [pc, #12]	; (80016e4 <HAL_GetTick+0x14>)
 80016d6:	681b      	ldr	r3, [r3, #0]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	24000204 	.word	0x24000204

080016e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016f0:	f7ff ffee 	bl	80016d0 <HAL_GetTick>
 80016f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001700:	d005      	beq.n	800170e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <HAL_Delay+0x44>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	461a      	mov	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4413      	add	r3, r2
 800170c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800170e:	bf00      	nop
 8001710:	f7ff ffde 	bl	80016d0 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	429a      	cmp	r2, r3
 800171e:	d8f7      	bhi.n	8001710 <HAL_Delay+0x28>
  {
  }
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	2400001c 	.word	0x2400001c

08001730 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001740:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <__NVIC_SetPriorityGrouping+0x40>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800174c:	4013      	ands	r3, r2
 800174e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <__NVIC_SetPriorityGrouping+0x44>)
 800175a:	4313      	orrs	r3, r2
 800175c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800175e:	4a04      	ldr	r2, [pc, #16]	; (8001770 <__NVIC_SetPriorityGrouping+0x40>)
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	60d3      	str	r3, [r2, #12]
}
 8001764:	bf00      	nop
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	e000ed00 	.word	0xe000ed00
 8001774:	05fa0000 	.word	0x05fa0000

08001778 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800177c:	4b04      	ldr	r3, [pc, #16]	; (8001790 <__NVIC_GetPriorityGrouping+0x18>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	0a1b      	lsrs	r3, r3, #8
 8001782:	f003 0307 	and.w	r3, r3, #7
}
 8001786:	4618      	mov	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800179e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	db0b      	blt.n	80017be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017a6:	88fb      	ldrh	r3, [r7, #6]
 80017a8:	f003 021f 	and.w	r2, r3, #31
 80017ac:	4907      	ldr	r1, [pc, #28]	; (80017cc <__NVIC_EnableIRQ+0x38>)
 80017ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017b2:	095b      	lsrs	r3, r3, #5
 80017b4:	2001      	movs	r0, #1
 80017b6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000e100 	.word	0xe000e100

080017d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	6039      	str	r1, [r7, #0]
 80017da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	db0a      	blt.n	80017fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	490c      	ldr	r1, [pc, #48]	; (800181c <__NVIC_SetPriority+0x4c>)
 80017ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ee:	0112      	lsls	r2, r2, #4
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	440b      	add	r3, r1
 80017f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017f8:	e00a      	b.n	8001810 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	4908      	ldr	r1, [pc, #32]	; (8001820 <__NVIC_SetPriority+0x50>)
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	3b04      	subs	r3, #4
 8001808:	0112      	lsls	r2, r2, #4
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	440b      	add	r3, r1
 800180e:	761a      	strb	r2, [r3, #24]
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000e100 	.word	0xe000e100
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001824:	b480      	push	{r7}
 8001826:	b089      	sub	sp, #36	; 0x24
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f1c3 0307 	rsb	r3, r3, #7
 800183e:	2b04      	cmp	r3, #4
 8001840:	bf28      	it	cs
 8001842:	2304      	movcs	r3, #4
 8001844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3304      	adds	r3, #4
 800184a:	2b06      	cmp	r3, #6
 800184c:	d902      	bls.n	8001854 <NVIC_EncodePriority+0x30>
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3b03      	subs	r3, #3
 8001852:	e000      	b.n	8001856 <NVIC_EncodePriority+0x32>
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001858:	f04f 32ff 	mov.w	r2, #4294967295
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43da      	mvns	r2, r3
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	401a      	ands	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800186c:	f04f 31ff 	mov.w	r1, #4294967295
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	fa01 f303 	lsl.w	r3, r1, r3
 8001876:	43d9      	mvns	r1, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800187c:	4313      	orrs	r3, r2
         );
}
 800187e:	4618      	mov	r0, r3
 8001880:	3724      	adds	r7, #36	; 0x24
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
	...

0800188c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3b01      	subs	r3, #1
 8001898:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800189c:	d301      	bcc.n	80018a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800189e:	2301      	movs	r3, #1
 80018a0:	e00f      	b.n	80018c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018a2:	4a0a      	ldr	r2, [pc, #40]	; (80018cc <SysTick_Config+0x40>)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018aa:	210f      	movs	r1, #15
 80018ac:	f04f 30ff 	mov.w	r0, #4294967295
 80018b0:	f7ff ff8e 	bl	80017d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <SysTick_Config+0x40>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ba:	4b04      	ldr	r3, [pc, #16]	; (80018cc <SysTick_Config+0x40>)
 80018bc:	2207      	movs	r2, #7
 80018be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	e000e010 	.word	0xe000e010

080018d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff ff29 	bl	8001730 <__NVIC_SetPriorityGrouping>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b086      	sub	sp, #24
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	4603      	mov	r3, r0
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
 80018f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018f4:	f7ff ff40 	bl	8001778 <__NVIC_GetPriorityGrouping>
 80018f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	68b9      	ldr	r1, [r7, #8]
 80018fe:	6978      	ldr	r0, [r7, #20]
 8001900:	f7ff ff90 	bl	8001824 <NVIC_EncodePriority>
 8001904:	4602      	mov	r2, r0
 8001906:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800190a:	4611      	mov	r1, r2
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff ff5f 	bl	80017d0 <__NVIC_SetPriority>
}
 8001912:	bf00      	nop
 8001914:	3718      	adds	r7, #24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b082      	sub	sp, #8
 800191e:	af00      	add	r7, sp, #0
 8001920:	4603      	mov	r3, r0
 8001922:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001924:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ff33 	bl	8001794 <__NVIC_EnableIRQ>
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff ffa4 	bl	800188c <SysTick_Config>
 8001944:	4603      	mov	r3, r0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001958:	f7ff feba 	bl	80016d0 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e2dc      	b.n	8001f22 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d008      	beq.n	8001986 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2280      	movs	r2, #128	; 0x80
 8001978:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e2cd      	b.n	8001f22 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a76      	ldr	r2, [pc, #472]	; (8001b64 <HAL_DMA_Abort+0x214>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d04a      	beq.n	8001a26 <HAL_DMA_Abort+0xd6>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a74      	ldr	r2, [pc, #464]	; (8001b68 <HAL_DMA_Abort+0x218>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d045      	beq.n	8001a26 <HAL_DMA_Abort+0xd6>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a73      	ldr	r2, [pc, #460]	; (8001b6c <HAL_DMA_Abort+0x21c>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d040      	beq.n	8001a26 <HAL_DMA_Abort+0xd6>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a71      	ldr	r2, [pc, #452]	; (8001b70 <HAL_DMA_Abort+0x220>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d03b      	beq.n	8001a26 <HAL_DMA_Abort+0xd6>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a70      	ldr	r2, [pc, #448]	; (8001b74 <HAL_DMA_Abort+0x224>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d036      	beq.n	8001a26 <HAL_DMA_Abort+0xd6>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a6e      	ldr	r2, [pc, #440]	; (8001b78 <HAL_DMA_Abort+0x228>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d031      	beq.n	8001a26 <HAL_DMA_Abort+0xd6>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a6d      	ldr	r2, [pc, #436]	; (8001b7c <HAL_DMA_Abort+0x22c>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d02c      	beq.n	8001a26 <HAL_DMA_Abort+0xd6>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a6b      	ldr	r2, [pc, #428]	; (8001b80 <HAL_DMA_Abort+0x230>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d027      	beq.n	8001a26 <HAL_DMA_Abort+0xd6>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a6a      	ldr	r2, [pc, #424]	; (8001b84 <HAL_DMA_Abort+0x234>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d022      	beq.n	8001a26 <HAL_DMA_Abort+0xd6>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a68      	ldr	r2, [pc, #416]	; (8001b88 <HAL_DMA_Abort+0x238>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d01d      	beq.n	8001a26 <HAL_DMA_Abort+0xd6>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a67      	ldr	r2, [pc, #412]	; (8001b8c <HAL_DMA_Abort+0x23c>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d018      	beq.n	8001a26 <HAL_DMA_Abort+0xd6>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a65      	ldr	r2, [pc, #404]	; (8001b90 <HAL_DMA_Abort+0x240>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d013      	beq.n	8001a26 <HAL_DMA_Abort+0xd6>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a64      	ldr	r2, [pc, #400]	; (8001b94 <HAL_DMA_Abort+0x244>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d00e      	beq.n	8001a26 <HAL_DMA_Abort+0xd6>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a62      	ldr	r2, [pc, #392]	; (8001b98 <HAL_DMA_Abort+0x248>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d009      	beq.n	8001a26 <HAL_DMA_Abort+0xd6>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a61      	ldr	r2, [pc, #388]	; (8001b9c <HAL_DMA_Abort+0x24c>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d004      	beq.n	8001a26 <HAL_DMA_Abort+0xd6>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a5f      	ldr	r2, [pc, #380]	; (8001ba0 <HAL_DMA_Abort+0x250>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d101      	bne.n	8001a2a <HAL_DMA_Abort+0xda>
 8001a26:	2301      	movs	r3, #1
 8001a28:	e000      	b.n	8001a2c <HAL_DMA_Abort+0xdc>
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d013      	beq.n	8001a58 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 021e 	bic.w	r2, r2, #30
 8001a3e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	695a      	ldr	r2, [r3, #20]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a4e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	e00a      	b.n	8001a6e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f022 020e 	bic.w	r2, r2, #14
 8001a66:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a3c      	ldr	r2, [pc, #240]	; (8001b64 <HAL_DMA_Abort+0x214>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d072      	beq.n	8001b5e <HAL_DMA_Abort+0x20e>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a3a      	ldr	r2, [pc, #232]	; (8001b68 <HAL_DMA_Abort+0x218>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d06d      	beq.n	8001b5e <HAL_DMA_Abort+0x20e>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a39      	ldr	r2, [pc, #228]	; (8001b6c <HAL_DMA_Abort+0x21c>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d068      	beq.n	8001b5e <HAL_DMA_Abort+0x20e>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a37      	ldr	r2, [pc, #220]	; (8001b70 <HAL_DMA_Abort+0x220>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d063      	beq.n	8001b5e <HAL_DMA_Abort+0x20e>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a36      	ldr	r2, [pc, #216]	; (8001b74 <HAL_DMA_Abort+0x224>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d05e      	beq.n	8001b5e <HAL_DMA_Abort+0x20e>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a34      	ldr	r2, [pc, #208]	; (8001b78 <HAL_DMA_Abort+0x228>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d059      	beq.n	8001b5e <HAL_DMA_Abort+0x20e>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a33      	ldr	r2, [pc, #204]	; (8001b7c <HAL_DMA_Abort+0x22c>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d054      	beq.n	8001b5e <HAL_DMA_Abort+0x20e>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a31      	ldr	r2, [pc, #196]	; (8001b80 <HAL_DMA_Abort+0x230>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d04f      	beq.n	8001b5e <HAL_DMA_Abort+0x20e>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a30      	ldr	r2, [pc, #192]	; (8001b84 <HAL_DMA_Abort+0x234>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d04a      	beq.n	8001b5e <HAL_DMA_Abort+0x20e>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a2e      	ldr	r2, [pc, #184]	; (8001b88 <HAL_DMA_Abort+0x238>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d045      	beq.n	8001b5e <HAL_DMA_Abort+0x20e>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a2d      	ldr	r2, [pc, #180]	; (8001b8c <HAL_DMA_Abort+0x23c>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d040      	beq.n	8001b5e <HAL_DMA_Abort+0x20e>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a2b      	ldr	r2, [pc, #172]	; (8001b90 <HAL_DMA_Abort+0x240>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d03b      	beq.n	8001b5e <HAL_DMA_Abort+0x20e>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a2a      	ldr	r2, [pc, #168]	; (8001b94 <HAL_DMA_Abort+0x244>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d036      	beq.n	8001b5e <HAL_DMA_Abort+0x20e>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a28      	ldr	r2, [pc, #160]	; (8001b98 <HAL_DMA_Abort+0x248>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d031      	beq.n	8001b5e <HAL_DMA_Abort+0x20e>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a27      	ldr	r2, [pc, #156]	; (8001b9c <HAL_DMA_Abort+0x24c>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d02c      	beq.n	8001b5e <HAL_DMA_Abort+0x20e>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a25      	ldr	r2, [pc, #148]	; (8001ba0 <HAL_DMA_Abort+0x250>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d027      	beq.n	8001b5e <HAL_DMA_Abort+0x20e>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a24      	ldr	r2, [pc, #144]	; (8001ba4 <HAL_DMA_Abort+0x254>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d022      	beq.n	8001b5e <HAL_DMA_Abort+0x20e>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a22      	ldr	r2, [pc, #136]	; (8001ba8 <HAL_DMA_Abort+0x258>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d01d      	beq.n	8001b5e <HAL_DMA_Abort+0x20e>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a21      	ldr	r2, [pc, #132]	; (8001bac <HAL_DMA_Abort+0x25c>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d018      	beq.n	8001b5e <HAL_DMA_Abort+0x20e>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a1f      	ldr	r2, [pc, #124]	; (8001bb0 <HAL_DMA_Abort+0x260>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d013      	beq.n	8001b5e <HAL_DMA_Abort+0x20e>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a1e      	ldr	r2, [pc, #120]	; (8001bb4 <HAL_DMA_Abort+0x264>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d00e      	beq.n	8001b5e <HAL_DMA_Abort+0x20e>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a1c      	ldr	r2, [pc, #112]	; (8001bb8 <HAL_DMA_Abort+0x268>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d009      	beq.n	8001b5e <HAL_DMA_Abort+0x20e>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a1b      	ldr	r2, [pc, #108]	; (8001bbc <HAL_DMA_Abort+0x26c>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d004      	beq.n	8001b5e <HAL_DMA_Abort+0x20e>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a19      	ldr	r2, [pc, #100]	; (8001bc0 <HAL_DMA_Abort+0x270>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d132      	bne.n	8001bc4 <HAL_DMA_Abort+0x274>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e031      	b.n	8001bc6 <HAL_DMA_Abort+0x276>
 8001b62:	bf00      	nop
 8001b64:	40020010 	.word	0x40020010
 8001b68:	40020028 	.word	0x40020028
 8001b6c:	40020040 	.word	0x40020040
 8001b70:	40020058 	.word	0x40020058
 8001b74:	40020070 	.word	0x40020070
 8001b78:	40020088 	.word	0x40020088
 8001b7c:	400200a0 	.word	0x400200a0
 8001b80:	400200b8 	.word	0x400200b8
 8001b84:	40020410 	.word	0x40020410
 8001b88:	40020428 	.word	0x40020428
 8001b8c:	40020440 	.word	0x40020440
 8001b90:	40020458 	.word	0x40020458
 8001b94:	40020470 	.word	0x40020470
 8001b98:	40020488 	.word	0x40020488
 8001b9c:	400204a0 	.word	0x400204a0
 8001ba0:	400204b8 	.word	0x400204b8
 8001ba4:	58025408 	.word	0x58025408
 8001ba8:	5802541c 	.word	0x5802541c
 8001bac:	58025430 	.word	0x58025430
 8001bb0:	58025444 	.word	0x58025444
 8001bb4:	58025458 	.word	0x58025458
 8001bb8:	5802546c 	.word	0x5802546c
 8001bbc:	58025480 	.word	0x58025480
 8001bc0:	58025494 	.word	0x58025494
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d007      	beq.n	8001bda <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bd8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a6d      	ldr	r2, [pc, #436]	; (8001d94 <HAL_DMA_Abort+0x444>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d04a      	beq.n	8001c7a <HAL_DMA_Abort+0x32a>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a6b      	ldr	r2, [pc, #428]	; (8001d98 <HAL_DMA_Abort+0x448>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d045      	beq.n	8001c7a <HAL_DMA_Abort+0x32a>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a6a      	ldr	r2, [pc, #424]	; (8001d9c <HAL_DMA_Abort+0x44c>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d040      	beq.n	8001c7a <HAL_DMA_Abort+0x32a>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a68      	ldr	r2, [pc, #416]	; (8001da0 <HAL_DMA_Abort+0x450>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d03b      	beq.n	8001c7a <HAL_DMA_Abort+0x32a>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a67      	ldr	r2, [pc, #412]	; (8001da4 <HAL_DMA_Abort+0x454>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d036      	beq.n	8001c7a <HAL_DMA_Abort+0x32a>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a65      	ldr	r2, [pc, #404]	; (8001da8 <HAL_DMA_Abort+0x458>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d031      	beq.n	8001c7a <HAL_DMA_Abort+0x32a>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a64      	ldr	r2, [pc, #400]	; (8001dac <HAL_DMA_Abort+0x45c>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d02c      	beq.n	8001c7a <HAL_DMA_Abort+0x32a>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a62      	ldr	r2, [pc, #392]	; (8001db0 <HAL_DMA_Abort+0x460>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d027      	beq.n	8001c7a <HAL_DMA_Abort+0x32a>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a61      	ldr	r2, [pc, #388]	; (8001db4 <HAL_DMA_Abort+0x464>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d022      	beq.n	8001c7a <HAL_DMA_Abort+0x32a>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a5f      	ldr	r2, [pc, #380]	; (8001db8 <HAL_DMA_Abort+0x468>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d01d      	beq.n	8001c7a <HAL_DMA_Abort+0x32a>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a5e      	ldr	r2, [pc, #376]	; (8001dbc <HAL_DMA_Abort+0x46c>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d018      	beq.n	8001c7a <HAL_DMA_Abort+0x32a>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a5c      	ldr	r2, [pc, #368]	; (8001dc0 <HAL_DMA_Abort+0x470>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d013      	beq.n	8001c7a <HAL_DMA_Abort+0x32a>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a5b      	ldr	r2, [pc, #364]	; (8001dc4 <HAL_DMA_Abort+0x474>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d00e      	beq.n	8001c7a <HAL_DMA_Abort+0x32a>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a59      	ldr	r2, [pc, #356]	; (8001dc8 <HAL_DMA_Abort+0x478>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d009      	beq.n	8001c7a <HAL_DMA_Abort+0x32a>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a58      	ldr	r2, [pc, #352]	; (8001dcc <HAL_DMA_Abort+0x47c>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d004      	beq.n	8001c7a <HAL_DMA_Abort+0x32a>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a56      	ldr	r2, [pc, #344]	; (8001dd0 <HAL_DMA_Abort+0x480>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d108      	bne.n	8001c8c <HAL_DMA_Abort+0x33c>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 0201 	bic.w	r2, r2, #1
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	e007      	b.n	8001c9c <HAL_DMA_Abort+0x34c>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 0201 	bic.w	r2, r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001c9c:	e013      	b.n	8001cc6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c9e:	f7ff fd17 	bl	80016d0 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b05      	cmp	r3, #5
 8001caa:	d90c      	bls.n	8001cc6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2220      	movs	r2, #32
 8001cb0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2203      	movs	r2, #3
 8001cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e12d      	b.n	8001f22 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1e5      	bne.n	8001c9e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a2f      	ldr	r2, [pc, #188]	; (8001d94 <HAL_DMA_Abort+0x444>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d04a      	beq.n	8001d72 <HAL_DMA_Abort+0x422>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a2d      	ldr	r2, [pc, #180]	; (8001d98 <HAL_DMA_Abort+0x448>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d045      	beq.n	8001d72 <HAL_DMA_Abort+0x422>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a2c      	ldr	r2, [pc, #176]	; (8001d9c <HAL_DMA_Abort+0x44c>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d040      	beq.n	8001d72 <HAL_DMA_Abort+0x422>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a2a      	ldr	r2, [pc, #168]	; (8001da0 <HAL_DMA_Abort+0x450>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d03b      	beq.n	8001d72 <HAL_DMA_Abort+0x422>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a29      	ldr	r2, [pc, #164]	; (8001da4 <HAL_DMA_Abort+0x454>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d036      	beq.n	8001d72 <HAL_DMA_Abort+0x422>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a27      	ldr	r2, [pc, #156]	; (8001da8 <HAL_DMA_Abort+0x458>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d031      	beq.n	8001d72 <HAL_DMA_Abort+0x422>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a26      	ldr	r2, [pc, #152]	; (8001dac <HAL_DMA_Abort+0x45c>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d02c      	beq.n	8001d72 <HAL_DMA_Abort+0x422>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a24      	ldr	r2, [pc, #144]	; (8001db0 <HAL_DMA_Abort+0x460>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d027      	beq.n	8001d72 <HAL_DMA_Abort+0x422>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a23      	ldr	r2, [pc, #140]	; (8001db4 <HAL_DMA_Abort+0x464>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d022      	beq.n	8001d72 <HAL_DMA_Abort+0x422>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a21      	ldr	r2, [pc, #132]	; (8001db8 <HAL_DMA_Abort+0x468>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d01d      	beq.n	8001d72 <HAL_DMA_Abort+0x422>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a20      	ldr	r2, [pc, #128]	; (8001dbc <HAL_DMA_Abort+0x46c>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d018      	beq.n	8001d72 <HAL_DMA_Abort+0x422>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a1e      	ldr	r2, [pc, #120]	; (8001dc0 <HAL_DMA_Abort+0x470>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d013      	beq.n	8001d72 <HAL_DMA_Abort+0x422>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a1d      	ldr	r2, [pc, #116]	; (8001dc4 <HAL_DMA_Abort+0x474>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d00e      	beq.n	8001d72 <HAL_DMA_Abort+0x422>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a1b      	ldr	r2, [pc, #108]	; (8001dc8 <HAL_DMA_Abort+0x478>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d009      	beq.n	8001d72 <HAL_DMA_Abort+0x422>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a1a      	ldr	r2, [pc, #104]	; (8001dcc <HAL_DMA_Abort+0x47c>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d004      	beq.n	8001d72 <HAL_DMA_Abort+0x422>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a18      	ldr	r2, [pc, #96]	; (8001dd0 <HAL_DMA_Abort+0x480>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d101      	bne.n	8001d76 <HAL_DMA_Abort+0x426>
 8001d72:	2301      	movs	r3, #1
 8001d74:	e000      	b.n	8001d78 <HAL_DMA_Abort+0x428>
 8001d76:	2300      	movs	r3, #0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d02b      	beq.n	8001dd4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d80:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d86:	f003 031f 	and.w	r3, r3, #31
 8001d8a:	223f      	movs	r2, #63	; 0x3f
 8001d8c:	409a      	lsls	r2, r3
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	609a      	str	r2, [r3, #8]
 8001d92:	e02a      	b.n	8001dea <HAL_DMA_Abort+0x49a>
 8001d94:	40020010 	.word	0x40020010
 8001d98:	40020028 	.word	0x40020028
 8001d9c:	40020040 	.word	0x40020040
 8001da0:	40020058 	.word	0x40020058
 8001da4:	40020070 	.word	0x40020070
 8001da8:	40020088 	.word	0x40020088
 8001dac:	400200a0 	.word	0x400200a0
 8001db0:	400200b8 	.word	0x400200b8
 8001db4:	40020410 	.word	0x40020410
 8001db8:	40020428 	.word	0x40020428
 8001dbc:	40020440 	.word	0x40020440
 8001dc0:	40020458 	.word	0x40020458
 8001dc4:	40020470 	.word	0x40020470
 8001dc8:	40020488 	.word	0x40020488
 8001dcc:	400204a0 	.word	0x400204a0
 8001dd0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dde:	f003 031f 	and.w	r3, r3, #31
 8001de2:	2201      	movs	r2, #1
 8001de4:	409a      	lsls	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a4f      	ldr	r2, [pc, #316]	; (8001f2c <HAL_DMA_Abort+0x5dc>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d072      	beq.n	8001eda <HAL_DMA_Abort+0x58a>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a4d      	ldr	r2, [pc, #308]	; (8001f30 <HAL_DMA_Abort+0x5e0>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d06d      	beq.n	8001eda <HAL_DMA_Abort+0x58a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a4c      	ldr	r2, [pc, #304]	; (8001f34 <HAL_DMA_Abort+0x5e4>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d068      	beq.n	8001eda <HAL_DMA_Abort+0x58a>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a4a      	ldr	r2, [pc, #296]	; (8001f38 <HAL_DMA_Abort+0x5e8>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d063      	beq.n	8001eda <HAL_DMA_Abort+0x58a>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a49      	ldr	r2, [pc, #292]	; (8001f3c <HAL_DMA_Abort+0x5ec>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d05e      	beq.n	8001eda <HAL_DMA_Abort+0x58a>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a47      	ldr	r2, [pc, #284]	; (8001f40 <HAL_DMA_Abort+0x5f0>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d059      	beq.n	8001eda <HAL_DMA_Abort+0x58a>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a46      	ldr	r2, [pc, #280]	; (8001f44 <HAL_DMA_Abort+0x5f4>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d054      	beq.n	8001eda <HAL_DMA_Abort+0x58a>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a44      	ldr	r2, [pc, #272]	; (8001f48 <HAL_DMA_Abort+0x5f8>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d04f      	beq.n	8001eda <HAL_DMA_Abort+0x58a>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a43      	ldr	r2, [pc, #268]	; (8001f4c <HAL_DMA_Abort+0x5fc>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d04a      	beq.n	8001eda <HAL_DMA_Abort+0x58a>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a41      	ldr	r2, [pc, #260]	; (8001f50 <HAL_DMA_Abort+0x600>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d045      	beq.n	8001eda <HAL_DMA_Abort+0x58a>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a40      	ldr	r2, [pc, #256]	; (8001f54 <HAL_DMA_Abort+0x604>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d040      	beq.n	8001eda <HAL_DMA_Abort+0x58a>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a3e      	ldr	r2, [pc, #248]	; (8001f58 <HAL_DMA_Abort+0x608>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d03b      	beq.n	8001eda <HAL_DMA_Abort+0x58a>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a3d      	ldr	r2, [pc, #244]	; (8001f5c <HAL_DMA_Abort+0x60c>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d036      	beq.n	8001eda <HAL_DMA_Abort+0x58a>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a3b      	ldr	r2, [pc, #236]	; (8001f60 <HAL_DMA_Abort+0x610>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d031      	beq.n	8001eda <HAL_DMA_Abort+0x58a>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a3a      	ldr	r2, [pc, #232]	; (8001f64 <HAL_DMA_Abort+0x614>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d02c      	beq.n	8001eda <HAL_DMA_Abort+0x58a>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a38      	ldr	r2, [pc, #224]	; (8001f68 <HAL_DMA_Abort+0x618>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d027      	beq.n	8001eda <HAL_DMA_Abort+0x58a>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a37      	ldr	r2, [pc, #220]	; (8001f6c <HAL_DMA_Abort+0x61c>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d022      	beq.n	8001eda <HAL_DMA_Abort+0x58a>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a35      	ldr	r2, [pc, #212]	; (8001f70 <HAL_DMA_Abort+0x620>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d01d      	beq.n	8001eda <HAL_DMA_Abort+0x58a>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a34      	ldr	r2, [pc, #208]	; (8001f74 <HAL_DMA_Abort+0x624>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d018      	beq.n	8001eda <HAL_DMA_Abort+0x58a>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a32      	ldr	r2, [pc, #200]	; (8001f78 <HAL_DMA_Abort+0x628>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d013      	beq.n	8001eda <HAL_DMA_Abort+0x58a>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a31      	ldr	r2, [pc, #196]	; (8001f7c <HAL_DMA_Abort+0x62c>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d00e      	beq.n	8001eda <HAL_DMA_Abort+0x58a>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a2f      	ldr	r2, [pc, #188]	; (8001f80 <HAL_DMA_Abort+0x630>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d009      	beq.n	8001eda <HAL_DMA_Abort+0x58a>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a2e      	ldr	r2, [pc, #184]	; (8001f84 <HAL_DMA_Abort+0x634>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d004      	beq.n	8001eda <HAL_DMA_Abort+0x58a>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a2c      	ldr	r2, [pc, #176]	; (8001f88 <HAL_DMA_Abort+0x638>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d101      	bne.n	8001ede <HAL_DMA_Abort+0x58e>
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <HAL_DMA_Abort+0x590>
 8001ede:	2300      	movs	r3, #0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d015      	beq.n	8001f10 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001eec:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00c      	beq.n	8001f10 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f04:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001f0e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40020010 	.word	0x40020010
 8001f30:	40020028 	.word	0x40020028
 8001f34:	40020040 	.word	0x40020040
 8001f38:	40020058 	.word	0x40020058
 8001f3c:	40020070 	.word	0x40020070
 8001f40:	40020088 	.word	0x40020088
 8001f44:	400200a0 	.word	0x400200a0
 8001f48:	400200b8 	.word	0x400200b8
 8001f4c:	40020410 	.word	0x40020410
 8001f50:	40020428 	.word	0x40020428
 8001f54:	40020440 	.word	0x40020440
 8001f58:	40020458 	.word	0x40020458
 8001f5c:	40020470 	.word	0x40020470
 8001f60:	40020488 	.word	0x40020488
 8001f64:	400204a0 	.word	0x400204a0
 8001f68:	400204b8 	.word	0x400204b8
 8001f6c:	58025408 	.word	0x58025408
 8001f70:	5802541c 	.word	0x5802541c
 8001f74:	58025430 	.word	0x58025430
 8001f78:	58025444 	.word	0x58025444
 8001f7c:	58025458 	.word	0x58025458
 8001f80:	5802546c 	.word	0x5802546c
 8001f84:	58025480 	.word	0x58025480
 8001f88:	58025494 	.word	0x58025494

08001f8c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e237      	b.n	800240e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d004      	beq.n	8001fb4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2280      	movs	r2, #128	; 0x80
 8001fae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e22c      	b.n	800240e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a5c      	ldr	r2, [pc, #368]	; (800212c <HAL_DMA_Abort_IT+0x1a0>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d04a      	beq.n	8002054 <HAL_DMA_Abort_IT+0xc8>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a5b      	ldr	r2, [pc, #364]	; (8002130 <HAL_DMA_Abort_IT+0x1a4>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d045      	beq.n	8002054 <HAL_DMA_Abort_IT+0xc8>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a59      	ldr	r2, [pc, #356]	; (8002134 <HAL_DMA_Abort_IT+0x1a8>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d040      	beq.n	8002054 <HAL_DMA_Abort_IT+0xc8>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a58      	ldr	r2, [pc, #352]	; (8002138 <HAL_DMA_Abort_IT+0x1ac>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d03b      	beq.n	8002054 <HAL_DMA_Abort_IT+0xc8>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a56      	ldr	r2, [pc, #344]	; (800213c <HAL_DMA_Abort_IT+0x1b0>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d036      	beq.n	8002054 <HAL_DMA_Abort_IT+0xc8>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a55      	ldr	r2, [pc, #340]	; (8002140 <HAL_DMA_Abort_IT+0x1b4>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d031      	beq.n	8002054 <HAL_DMA_Abort_IT+0xc8>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a53      	ldr	r2, [pc, #332]	; (8002144 <HAL_DMA_Abort_IT+0x1b8>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d02c      	beq.n	8002054 <HAL_DMA_Abort_IT+0xc8>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a52      	ldr	r2, [pc, #328]	; (8002148 <HAL_DMA_Abort_IT+0x1bc>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d027      	beq.n	8002054 <HAL_DMA_Abort_IT+0xc8>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a50      	ldr	r2, [pc, #320]	; (800214c <HAL_DMA_Abort_IT+0x1c0>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d022      	beq.n	8002054 <HAL_DMA_Abort_IT+0xc8>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a4f      	ldr	r2, [pc, #316]	; (8002150 <HAL_DMA_Abort_IT+0x1c4>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d01d      	beq.n	8002054 <HAL_DMA_Abort_IT+0xc8>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a4d      	ldr	r2, [pc, #308]	; (8002154 <HAL_DMA_Abort_IT+0x1c8>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d018      	beq.n	8002054 <HAL_DMA_Abort_IT+0xc8>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a4c      	ldr	r2, [pc, #304]	; (8002158 <HAL_DMA_Abort_IT+0x1cc>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d013      	beq.n	8002054 <HAL_DMA_Abort_IT+0xc8>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a4a      	ldr	r2, [pc, #296]	; (800215c <HAL_DMA_Abort_IT+0x1d0>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d00e      	beq.n	8002054 <HAL_DMA_Abort_IT+0xc8>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a49      	ldr	r2, [pc, #292]	; (8002160 <HAL_DMA_Abort_IT+0x1d4>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d009      	beq.n	8002054 <HAL_DMA_Abort_IT+0xc8>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a47      	ldr	r2, [pc, #284]	; (8002164 <HAL_DMA_Abort_IT+0x1d8>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d004      	beq.n	8002054 <HAL_DMA_Abort_IT+0xc8>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a46      	ldr	r2, [pc, #280]	; (8002168 <HAL_DMA_Abort_IT+0x1dc>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d101      	bne.n	8002058 <HAL_DMA_Abort_IT+0xcc>
 8002054:	2301      	movs	r3, #1
 8002056:	e000      	b.n	800205a <HAL_DMA_Abort_IT+0xce>
 8002058:	2300      	movs	r3, #0
 800205a:	2b00      	cmp	r3, #0
 800205c:	f000 8086 	beq.w	800216c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2204      	movs	r2, #4
 8002064:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a2f      	ldr	r2, [pc, #188]	; (800212c <HAL_DMA_Abort_IT+0x1a0>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d04a      	beq.n	8002108 <HAL_DMA_Abort_IT+0x17c>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a2e      	ldr	r2, [pc, #184]	; (8002130 <HAL_DMA_Abort_IT+0x1a4>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d045      	beq.n	8002108 <HAL_DMA_Abort_IT+0x17c>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a2c      	ldr	r2, [pc, #176]	; (8002134 <HAL_DMA_Abort_IT+0x1a8>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d040      	beq.n	8002108 <HAL_DMA_Abort_IT+0x17c>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a2b      	ldr	r2, [pc, #172]	; (8002138 <HAL_DMA_Abort_IT+0x1ac>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d03b      	beq.n	8002108 <HAL_DMA_Abort_IT+0x17c>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a29      	ldr	r2, [pc, #164]	; (800213c <HAL_DMA_Abort_IT+0x1b0>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d036      	beq.n	8002108 <HAL_DMA_Abort_IT+0x17c>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a28      	ldr	r2, [pc, #160]	; (8002140 <HAL_DMA_Abort_IT+0x1b4>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d031      	beq.n	8002108 <HAL_DMA_Abort_IT+0x17c>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a26      	ldr	r2, [pc, #152]	; (8002144 <HAL_DMA_Abort_IT+0x1b8>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d02c      	beq.n	8002108 <HAL_DMA_Abort_IT+0x17c>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a25      	ldr	r2, [pc, #148]	; (8002148 <HAL_DMA_Abort_IT+0x1bc>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d027      	beq.n	8002108 <HAL_DMA_Abort_IT+0x17c>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a23      	ldr	r2, [pc, #140]	; (800214c <HAL_DMA_Abort_IT+0x1c0>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d022      	beq.n	8002108 <HAL_DMA_Abort_IT+0x17c>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a22      	ldr	r2, [pc, #136]	; (8002150 <HAL_DMA_Abort_IT+0x1c4>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d01d      	beq.n	8002108 <HAL_DMA_Abort_IT+0x17c>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a20      	ldr	r2, [pc, #128]	; (8002154 <HAL_DMA_Abort_IT+0x1c8>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d018      	beq.n	8002108 <HAL_DMA_Abort_IT+0x17c>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a1f      	ldr	r2, [pc, #124]	; (8002158 <HAL_DMA_Abort_IT+0x1cc>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d013      	beq.n	8002108 <HAL_DMA_Abort_IT+0x17c>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a1d      	ldr	r2, [pc, #116]	; (800215c <HAL_DMA_Abort_IT+0x1d0>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d00e      	beq.n	8002108 <HAL_DMA_Abort_IT+0x17c>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a1c      	ldr	r2, [pc, #112]	; (8002160 <HAL_DMA_Abort_IT+0x1d4>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d009      	beq.n	8002108 <HAL_DMA_Abort_IT+0x17c>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a1a      	ldr	r2, [pc, #104]	; (8002164 <HAL_DMA_Abort_IT+0x1d8>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d004      	beq.n	8002108 <HAL_DMA_Abort_IT+0x17c>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a19      	ldr	r2, [pc, #100]	; (8002168 <HAL_DMA_Abort_IT+0x1dc>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d108      	bne.n	800211a <HAL_DMA_Abort_IT+0x18e>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 0201 	bic.w	r2, r2, #1
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	e178      	b.n	800240c <HAL_DMA_Abort_IT+0x480>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 0201 	bic.w	r2, r2, #1
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	e16f      	b.n	800240c <HAL_DMA_Abort_IT+0x480>
 800212c:	40020010 	.word	0x40020010
 8002130:	40020028 	.word	0x40020028
 8002134:	40020040 	.word	0x40020040
 8002138:	40020058 	.word	0x40020058
 800213c:	40020070 	.word	0x40020070
 8002140:	40020088 	.word	0x40020088
 8002144:	400200a0 	.word	0x400200a0
 8002148:	400200b8 	.word	0x400200b8
 800214c:	40020410 	.word	0x40020410
 8002150:	40020428 	.word	0x40020428
 8002154:	40020440 	.word	0x40020440
 8002158:	40020458 	.word	0x40020458
 800215c:	40020470 	.word	0x40020470
 8002160:	40020488 	.word	0x40020488
 8002164:	400204a0 	.word	0x400204a0
 8002168:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 020e 	bic.w	r2, r2, #14
 800217a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a6c      	ldr	r2, [pc, #432]	; (8002334 <HAL_DMA_Abort_IT+0x3a8>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d04a      	beq.n	800221c <HAL_DMA_Abort_IT+0x290>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a6b      	ldr	r2, [pc, #428]	; (8002338 <HAL_DMA_Abort_IT+0x3ac>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d045      	beq.n	800221c <HAL_DMA_Abort_IT+0x290>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a69      	ldr	r2, [pc, #420]	; (800233c <HAL_DMA_Abort_IT+0x3b0>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d040      	beq.n	800221c <HAL_DMA_Abort_IT+0x290>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a68      	ldr	r2, [pc, #416]	; (8002340 <HAL_DMA_Abort_IT+0x3b4>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d03b      	beq.n	800221c <HAL_DMA_Abort_IT+0x290>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a66      	ldr	r2, [pc, #408]	; (8002344 <HAL_DMA_Abort_IT+0x3b8>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d036      	beq.n	800221c <HAL_DMA_Abort_IT+0x290>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a65      	ldr	r2, [pc, #404]	; (8002348 <HAL_DMA_Abort_IT+0x3bc>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d031      	beq.n	800221c <HAL_DMA_Abort_IT+0x290>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a63      	ldr	r2, [pc, #396]	; (800234c <HAL_DMA_Abort_IT+0x3c0>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d02c      	beq.n	800221c <HAL_DMA_Abort_IT+0x290>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a62      	ldr	r2, [pc, #392]	; (8002350 <HAL_DMA_Abort_IT+0x3c4>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d027      	beq.n	800221c <HAL_DMA_Abort_IT+0x290>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a60      	ldr	r2, [pc, #384]	; (8002354 <HAL_DMA_Abort_IT+0x3c8>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d022      	beq.n	800221c <HAL_DMA_Abort_IT+0x290>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a5f      	ldr	r2, [pc, #380]	; (8002358 <HAL_DMA_Abort_IT+0x3cc>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d01d      	beq.n	800221c <HAL_DMA_Abort_IT+0x290>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a5d      	ldr	r2, [pc, #372]	; (800235c <HAL_DMA_Abort_IT+0x3d0>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d018      	beq.n	800221c <HAL_DMA_Abort_IT+0x290>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a5c      	ldr	r2, [pc, #368]	; (8002360 <HAL_DMA_Abort_IT+0x3d4>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d013      	beq.n	800221c <HAL_DMA_Abort_IT+0x290>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a5a      	ldr	r2, [pc, #360]	; (8002364 <HAL_DMA_Abort_IT+0x3d8>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d00e      	beq.n	800221c <HAL_DMA_Abort_IT+0x290>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a59      	ldr	r2, [pc, #356]	; (8002368 <HAL_DMA_Abort_IT+0x3dc>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d009      	beq.n	800221c <HAL_DMA_Abort_IT+0x290>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a57      	ldr	r2, [pc, #348]	; (800236c <HAL_DMA_Abort_IT+0x3e0>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d004      	beq.n	800221c <HAL_DMA_Abort_IT+0x290>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a56      	ldr	r2, [pc, #344]	; (8002370 <HAL_DMA_Abort_IT+0x3e4>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d108      	bne.n	800222e <HAL_DMA_Abort_IT+0x2a2>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0201 	bic.w	r2, r2, #1
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	e007      	b.n	800223e <HAL_DMA_Abort_IT+0x2b2>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 0201 	bic.w	r2, r2, #1
 800223c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a3c      	ldr	r2, [pc, #240]	; (8002334 <HAL_DMA_Abort_IT+0x3a8>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d072      	beq.n	800232e <HAL_DMA_Abort_IT+0x3a2>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a3a      	ldr	r2, [pc, #232]	; (8002338 <HAL_DMA_Abort_IT+0x3ac>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d06d      	beq.n	800232e <HAL_DMA_Abort_IT+0x3a2>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a39      	ldr	r2, [pc, #228]	; (800233c <HAL_DMA_Abort_IT+0x3b0>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d068      	beq.n	800232e <HAL_DMA_Abort_IT+0x3a2>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a37      	ldr	r2, [pc, #220]	; (8002340 <HAL_DMA_Abort_IT+0x3b4>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d063      	beq.n	800232e <HAL_DMA_Abort_IT+0x3a2>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a36      	ldr	r2, [pc, #216]	; (8002344 <HAL_DMA_Abort_IT+0x3b8>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d05e      	beq.n	800232e <HAL_DMA_Abort_IT+0x3a2>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a34      	ldr	r2, [pc, #208]	; (8002348 <HAL_DMA_Abort_IT+0x3bc>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d059      	beq.n	800232e <HAL_DMA_Abort_IT+0x3a2>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a33      	ldr	r2, [pc, #204]	; (800234c <HAL_DMA_Abort_IT+0x3c0>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d054      	beq.n	800232e <HAL_DMA_Abort_IT+0x3a2>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a31      	ldr	r2, [pc, #196]	; (8002350 <HAL_DMA_Abort_IT+0x3c4>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d04f      	beq.n	800232e <HAL_DMA_Abort_IT+0x3a2>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a30      	ldr	r2, [pc, #192]	; (8002354 <HAL_DMA_Abort_IT+0x3c8>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d04a      	beq.n	800232e <HAL_DMA_Abort_IT+0x3a2>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a2e      	ldr	r2, [pc, #184]	; (8002358 <HAL_DMA_Abort_IT+0x3cc>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d045      	beq.n	800232e <HAL_DMA_Abort_IT+0x3a2>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a2d      	ldr	r2, [pc, #180]	; (800235c <HAL_DMA_Abort_IT+0x3d0>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d040      	beq.n	800232e <HAL_DMA_Abort_IT+0x3a2>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a2b      	ldr	r2, [pc, #172]	; (8002360 <HAL_DMA_Abort_IT+0x3d4>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d03b      	beq.n	800232e <HAL_DMA_Abort_IT+0x3a2>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a2a      	ldr	r2, [pc, #168]	; (8002364 <HAL_DMA_Abort_IT+0x3d8>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d036      	beq.n	800232e <HAL_DMA_Abort_IT+0x3a2>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a28      	ldr	r2, [pc, #160]	; (8002368 <HAL_DMA_Abort_IT+0x3dc>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d031      	beq.n	800232e <HAL_DMA_Abort_IT+0x3a2>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a27      	ldr	r2, [pc, #156]	; (800236c <HAL_DMA_Abort_IT+0x3e0>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d02c      	beq.n	800232e <HAL_DMA_Abort_IT+0x3a2>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a25      	ldr	r2, [pc, #148]	; (8002370 <HAL_DMA_Abort_IT+0x3e4>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d027      	beq.n	800232e <HAL_DMA_Abort_IT+0x3a2>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a24      	ldr	r2, [pc, #144]	; (8002374 <HAL_DMA_Abort_IT+0x3e8>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d022      	beq.n	800232e <HAL_DMA_Abort_IT+0x3a2>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a22      	ldr	r2, [pc, #136]	; (8002378 <HAL_DMA_Abort_IT+0x3ec>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d01d      	beq.n	800232e <HAL_DMA_Abort_IT+0x3a2>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a21      	ldr	r2, [pc, #132]	; (800237c <HAL_DMA_Abort_IT+0x3f0>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d018      	beq.n	800232e <HAL_DMA_Abort_IT+0x3a2>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a1f      	ldr	r2, [pc, #124]	; (8002380 <HAL_DMA_Abort_IT+0x3f4>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d013      	beq.n	800232e <HAL_DMA_Abort_IT+0x3a2>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a1e      	ldr	r2, [pc, #120]	; (8002384 <HAL_DMA_Abort_IT+0x3f8>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d00e      	beq.n	800232e <HAL_DMA_Abort_IT+0x3a2>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a1c      	ldr	r2, [pc, #112]	; (8002388 <HAL_DMA_Abort_IT+0x3fc>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d009      	beq.n	800232e <HAL_DMA_Abort_IT+0x3a2>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a1b      	ldr	r2, [pc, #108]	; (800238c <HAL_DMA_Abort_IT+0x400>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d004      	beq.n	800232e <HAL_DMA_Abort_IT+0x3a2>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a19      	ldr	r2, [pc, #100]	; (8002390 <HAL_DMA_Abort_IT+0x404>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d132      	bne.n	8002394 <HAL_DMA_Abort_IT+0x408>
 800232e:	2301      	movs	r3, #1
 8002330:	e031      	b.n	8002396 <HAL_DMA_Abort_IT+0x40a>
 8002332:	bf00      	nop
 8002334:	40020010 	.word	0x40020010
 8002338:	40020028 	.word	0x40020028
 800233c:	40020040 	.word	0x40020040
 8002340:	40020058 	.word	0x40020058
 8002344:	40020070 	.word	0x40020070
 8002348:	40020088 	.word	0x40020088
 800234c:	400200a0 	.word	0x400200a0
 8002350:	400200b8 	.word	0x400200b8
 8002354:	40020410 	.word	0x40020410
 8002358:	40020428 	.word	0x40020428
 800235c:	40020440 	.word	0x40020440
 8002360:	40020458 	.word	0x40020458
 8002364:	40020470 	.word	0x40020470
 8002368:	40020488 	.word	0x40020488
 800236c:	400204a0 	.word	0x400204a0
 8002370:	400204b8 	.word	0x400204b8
 8002374:	58025408 	.word	0x58025408
 8002378:	5802541c 	.word	0x5802541c
 800237c:	58025430 	.word	0x58025430
 8002380:	58025444 	.word	0x58025444
 8002384:	58025458 	.word	0x58025458
 8002388:	5802546c 	.word	0x5802546c
 800238c:	58025480 	.word	0x58025480
 8002390:	58025494 	.word	0x58025494
 8002394:	2300      	movs	r3, #0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d028      	beq.n	80023ec <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023a8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ae:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b4:	f003 031f 	and.w	r3, r3, #31
 80023b8:	2201      	movs	r2, #1
 80023ba:	409a      	lsls	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80023c8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00c      	beq.n	80023ec <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023e0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80023ea:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop

08002418 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002418:	b480      	push	{r7}
 800241a:	b089      	sub	sp, #36	; 0x24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002422:	2300      	movs	r3, #0
 8002424:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002426:	4b89      	ldr	r3, [pc, #548]	; (800264c <HAL_GPIO_Init+0x234>)
 8002428:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800242a:	e194      	b.n	8002756 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	2101      	movs	r1, #1
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	fa01 f303 	lsl.w	r3, r1, r3
 8002438:	4013      	ands	r3, r2
 800243a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 8186 	beq.w	8002750 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	2b01      	cmp	r3, #1
 800244e:	d005      	beq.n	800245c <HAL_GPIO_Init+0x44>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 0303 	and.w	r3, r3, #3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d130      	bne.n	80024be <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	2203      	movs	r2, #3
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4313      	orrs	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002492:	2201      	movs	r2, #1
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43db      	mvns	r3, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4013      	ands	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	091b      	lsrs	r3, r3, #4
 80024a8:	f003 0201 	and.w	r2, r3, #1
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	d017      	beq.n	80024fa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	2203      	movs	r2, #3
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43db      	mvns	r3, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4013      	ands	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d123      	bne.n	800254e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	08da      	lsrs	r2, r3, #3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3208      	adds	r2, #8
 800250e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	220f      	movs	r2, #15
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	691a      	ldr	r2, [r3, #16]
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4313      	orrs	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	08da      	lsrs	r2, r3, #3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3208      	adds	r2, #8
 8002548:	69b9      	ldr	r1, [r7, #24]
 800254a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	2203      	movs	r2, #3
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43db      	mvns	r3, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4013      	ands	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f003 0203 	and.w	r2, r3, #3
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4313      	orrs	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800258a:	2b00      	cmp	r3, #0
 800258c:	f000 80e0 	beq.w	8002750 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002590:	4b2f      	ldr	r3, [pc, #188]	; (8002650 <HAL_GPIO_Init+0x238>)
 8002592:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002596:	4a2e      	ldr	r2, [pc, #184]	; (8002650 <HAL_GPIO_Init+0x238>)
 8002598:	f043 0302 	orr.w	r3, r3, #2
 800259c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80025a0:	4b2b      	ldr	r3, [pc, #172]	; (8002650 <HAL_GPIO_Init+0x238>)
 80025a2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ae:	4a29      	ldr	r2, [pc, #164]	; (8002654 <HAL_GPIO_Init+0x23c>)
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	089b      	lsrs	r3, r3, #2
 80025b4:	3302      	adds	r3, #2
 80025b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	220f      	movs	r2, #15
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43db      	mvns	r3, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4013      	ands	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a20      	ldr	r2, [pc, #128]	; (8002658 <HAL_GPIO_Init+0x240>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d052      	beq.n	8002680 <HAL_GPIO_Init+0x268>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a1f      	ldr	r2, [pc, #124]	; (800265c <HAL_GPIO_Init+0x244>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d031      	beq.n	8002646 <HAL_GPIO_Init+0x22e>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a1e      	ldr	r2, [pc, #120]	; (8002660 <HAL_GPIO_Init+0x248>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d02b      	beq.n	8002642 <HAL_GPIO_Init+0x22a>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a1d      	ldr	r2, [pc, #116]	; (8002664 <HAL_GPIO_Init+0x24c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d025      	beq.n	800263e <HAL_GPIO_Init+0x226>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a1c      	ldr	r2, [pc, #112]	; (8002668 <HAL_GPIO_Init+0x250>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d01f      	beq.n	800263a <HAL_GPIO_Init+0x222>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a1b      	ldr	r2, [pc, #108]	; (800266c <HAL_GPIO_Init+0x254>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d019      	beq.n	8002636 <HAL_GPIO_Init+0x21e>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a1a      	ldr	r2, [pc, #104]	; (8002670 <HAL_GPIO_Init+0x258>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d013      	beq.n	8002632 <HAL_GPIO_Init+0x21a>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a19      	ldr	r2, [pc, #100]	; (8002674 <HAL_GPIO_Init+0x25c>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00d      	beq.n	800262e <HAL_GPIO_Init+0x216>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a18      	ldr	r2, [pc, #96]	; (8002678 <HAL_GPIO_Init+0x260>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d007      	beq.n	800262a <HAL_GPIO_Init+0x212>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a17      	ldr	r2, [pc, #92]	; (800267c <HAL_GPIO_Init+0x264>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d101      	bne.n	8002626 <HAL_GPIO_Init+0x20e>
 8002622:	2309      	movs	r3, #9
 8002624:	e02d      	b.n	8002682 <HAL_GPIO_Init+0x26a>
 8002626:	230a      	movs	r3, #10
 8002628:	e02b      	b.n	8002682 <HAL_GPIO_Init+0x26a>
 800262a:	2308      	movs	r3, #8
 800262c:	e029      	b.n	8002682 <HAL_GPIO_Init+0x26a>
 800262e:	2307      	movs	r3, #7
 8002630:	e027      	b.n	8002682 <HAL_GPIO_Init+0x26a>
 8002632:	2306      	movs	r3, #6
 8002634:	e025      	b.n	8002682 <HAL_GPIO_Init+0x26a>
 8002636:	2305      	movs	r3, #5
 8002638:	e023      	b.n	8002682 <HAL_GPIO_Init+0x26a>
 800263a:	2304      	movs	r3, #4
 800263c:	e021      	b.n	8002682 <HAL_GPIO_Init+0x26a>
 800263e:	2303      	movs	r3, #3
 8002640:	e01f      	b.n	8002682 <HAL_GPIO_Init+0x26a>
 8002642:	2302      	movs	r3, #2
 8002644:	e01d      	b.n	8002682 <HAL_GPIO_Init+0x26a>
 8002646:	2301      	movs	r3, #1
 8002648:	e01b      	b.n	8002682 <HAL_GPIO_Init+0x26a>
 800264a:	bf00      	nop
 800264c:	58000080 	.word	0x58000080
 8002650:	58024400 	.word	0x58024400
 8002654:	58000400 	.word	0x58000400
 8002658:	58020000 	.word	0x58020000
 800265c:	58020400 	.word	0x58020400
 8002660:	58020800 	.word	0x58020800
 8002664:	58020c00 	.word	0x58020c00
 8002668:	58021000 	.word	0x58021000
 800266c:	58021400 	.word	0x58021400
 8002670:	58021800 	.word	0x58021800
 8002674:	58021c00 	.word	0x58021c00
 8002678:	58022000 	.word	0x58022000
 800267c:	58022400 	.word	0x58022400
 8002680:	2300      	movs	r3, #0
 8002682:	69fa      	ldr	r2, [r7, #28]
 8002684:	f002 0203 	and.w	r2, r2, #3
 8002688:	0092      	lsls	r2, r2, #2
 800268a:	4093      	lsls	r3, r2
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002692:	4938      	ldr	r1, [pc, #224]	; (8002774 <HAL_GPIO_Init+0x35c>)
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	089b      	lsrs	r3, r3, #2
 8002698:	3302      	adds	r3, #2
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80026c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80026ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	43db      	mvns	r3, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4013      	ands	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80026f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	43db      	mvns	r3, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4013      	ands	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	43db      	mvns	r3, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4013      	ands	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	4313      	orrs	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	3301      	adds	r3, #1
 8002754:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	fa22 f303 	lsr.w	r3, r2, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	f47f ae63 	bne.w	800242c <HAL_GPIO_Init+0x14>
  }
}
 8002766:	bf00      	nop
 8002768:	bf00      	nop
 800276a:	3724      	adds	r7, #36	; 0x24
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	58000400 	.word	0x58000400

08002778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	460b      	mov	r3, r1
 8002782:	807b      	strh	r3, [r7, #2]
 8002784:	4613      	mov	r3, r2
 8002786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002788:	787b      	ldrb	r3, [r7, #1]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800278e:	887a      	ldrh	r2, [r7, #2]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002794:	e003      	b.n	800279e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002796:	887b      	ldrh	r3, [r7, #2]
 8002798:	041a      	lsls	r2, r3, #16
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	619a      	str	r2, [r3, #24]
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027aa:	b480      	push	{r7}
 80027ac:	b085      	sub	sp, #20
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
 80027b2:	460b      	mov	r3, r1
 80027b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027bc:	887a      	ldrh	r2, [r7, #2]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	4013      	ands	r3, r2
 80027c2:	041a      	lsls	r2, r3, #16
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	43d9      	mvns	r1, r3
 80027c8:	887b      	ldrh	r3, [r7, #2]
 80027ca:	400b      	ands	r3, r1
 80027cc:	431a      	orrs	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	619a      	str	r2, [r3, #24]
}
 80027d2:	bf00      	nop
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
	...

080027e0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80027e8:	4b29      	ldr	r3, [pc, #164]	; (8002890 <HAL_PWREx_ConfigSupply+0xb0>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	2b06      	cmp	r3, #6
 80027f2:	d00a      	beq.n	800280a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80027f4:	4b26      	ldr	r3, [pc, #152]	; (8002890 <HAL_PWREx_ConfigSupply+0xb0>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d001      	beq.n	8002806 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e040      	b.n	8002888 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	e03e      	b.n	8002888 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800280a:	4b21      	ldr	r3, [pc, #132]	; (8002890 <HAL_PWREx_ConfigSupply+0xb0>)
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002812:	491f      	ldr	r1, [pc, #124]	; (8002890 <HAL_PWREx_ConfigSupply+0xb0>)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4313      	orrs	r3, r2
 8002818:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800281a:	f7fe ff59 	bl	80016d0 <HAL_GetTick>
 800281e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002820:	e009      	b.n	8002836 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002822:	f7fe ff55 	bl	80016d0 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002830:	d901      	bls.n	8002836 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e028      	b.n	8002888 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002836:	4b16      	ldr	r3, [pc, #88]	; (8002890 <HAL_PWREx_ConfigSupply+0xb0>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800283e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002842:	d1ee      	bne.n	8002822 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b1e      	cmp	r3, #30
 8002848:	d008      	beq.n	800285c <HAL_PWREx_ConfigSupply+0x7c>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b2e      	cmp	r3, #46	; 0x2e
 800284e:	d005      	beq.n	800285c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b1d      	cmp	r3, #29
 8002854:	d002      	beq.n	800285c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b2d      	cmp	r3, #45	; 0x2d
 800285a:	d114      	bne.n	8002886 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800285c:	f7fe ff38 	bl	80016d0 <HAL_GetTick>
 8002860:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002862:	e009      	b.n	8002878 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002864:	f7fe ff34 	bl	80016d0 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002872:	d901      	bls.n	8002878 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e007      	b.n	8002888 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002878:	4b05      	ldr	r3, [pc, #20]	; (8002890 <HAL_PWREx_ConfigSupply+0xb0>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002884:	d1ee      	bne.n	8002864 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	58024800 	.word	0x58024800

08002894 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08c      	sub	sp, #48	; 0x30
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d102      	bne.n	80028a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	f000 bc1f 	b.w	80030e6 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 80b3 	beq.w	8002a1c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028b6:	4b95      	ldr	r3, [pc, #596]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028be:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028c0:	4b92      	ldr	r3, [pc, #584]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 80028c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80028c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c8:	2b10      	cmp	r3, #16
 80028ca:	d007      	beq.n	80028dc <HAL_RCC_OscConfig+0x48>
 80028cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ce:	2b18      	cmp	r3, #24
 80028d0:	d112      	bne.n	80028f8 <HAL_RCC_OscConfig+0x64>
 80028d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d4:	f003 0303 	and.w	r3, r3, #3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d10d      	bne.n	80028f8 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028dc:	4b8b      	ldr	r3, [pc, #556]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 8098 	beq.w	8002a1a <HAL_RCC_OscConfig+0x186>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f040 8093 	bne.w	8002a1a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e3f6      	b.n	80030e6 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002900:	d106      	bne.n	8002910 <HAL_RCC_OscConfig+0x7c>
 8002902:	4b82      	ldr	r3, [pc, #520]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a81      	ldr	r2, [pc, #516]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 8002908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	e058      	b.n	80029c2 <HAL_RCC_OscConfig+0x12e>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d112      	bne.n	800293e <HAL_RCC_OscConfig+0xaa>
 8002918:	4b7c      	ldr	r3, [pc, #496]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a7b      	ldr	r2, [pc, #492]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 800291e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002922:	6013      	str	r3, [r2, #0]
 8002924:	4b79      	ldr	r3, [pc, #484]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a78      	ldr	r2, [pc, #480]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 800292a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800292e:	6013      	str	r3, [r2, #0]
 8002930:	4b76      	ldr	r3, [pc, #472]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a75      	ldr	r2, [pc, #468]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 8002936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	e041      	b.n	80029c2 <HAL_RCC_OscConfig+0x12e>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002946:	d112      	bne.n	800296e <HAL_RCC_OscConfig+0xda>
 8002948:	4b70      	ldr	r3, [pc, #448]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a6f      	ldr	r2, [pc, #444]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 800294e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002952:	6013      	str	r3, [r2, #0]
 8002954:	4b6d      	ldr	r3, [pc, #436]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a6c      	ldr	r2, [pc, #432]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 800295a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800295e:	6013      	str	r3, [r2, #0]
 8002960:	4b6a      	ldr	r3, [pc, #424]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a69      	ldr	r2, [pc, #420]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 8002966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800296a:	6013      	str	r3, [r2, #0]
 800296c:	e029      	b.n	80029c2 <HAL_RCC_OscConfig+0x12e>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002976:	d112      	bne.n	800299e <HAL_RCC_OscConfig+0x10a>
 8002978:	4b64      	ldr	r3, [pc, #400]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a63      	ldr	r2, [pc, #396]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 800297e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002982:	6013      	str	r3, [r2, #0]
 8002984:	4b61      	ldr	r3, [pc, #388]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a60      	ldr	r2, [pc, #384]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 800298a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800298e:	6013      	str	r3, [r2, #0]
 8002990:	4b5e      	ldr	r3, [pc, #376]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a5d      	ldr	r2, [pc, #372]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 8002996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800299a:	6013      	str	r3, [r2, #0]
 800299c:	e011      	b.n	80029c2 <HAL_RCC_OscConfig+0x12e>
 800299e:	4b5b      	ldr	r3, [pc, #364]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a5a      	ldr	r2, [pc, #360]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 80029a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029a8:	6013      	str	r3, [r2, #0]
 80029aa:	4b58      	ldr	r3, [pc, #352]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a57      	ldr	r2, [pc, #348]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 80029b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	4b55      	ldr	r3, [pc, #340]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a54      	ldr	r2, [pc, #336]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 80029bc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80029c0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d013      	beq.n	80029f2 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ca:	f7fe fe81 	bl	80016d0 <HAL_GetTick>
 80029ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029d2:	f7fe fe7d 	bl	80016d0 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b64      	cmp	r3, #100	; 0x64
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e380      	b.n	80030e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029e4:	4b49      	ldr	r3, [pc, #292]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0f0      	beq.n	80029d2 <HAL_RCC_OscConfig+0x13e>
 80029f0:	e014      	b.n	8002a1c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f2:	f7fe fe6d 	bl	80016d0 <HAL_GetTick>
 80029f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029f8:	e008      	b.n	8002a0c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029fa:	f7fe fe69 	bl	80016d0 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b64      	cmp	r3, #100	; 0x64
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e36c      	b.n	80030e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a0c:	4b3f      	ldr	r3, [pc, #252]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1f0      	bne.n	80029fa <HAL_RCC_OscConfig+0x166>
 8002a18:	e000      	b.n	8002a1c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a1a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 808c 	beq.w	8002b42 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a2a:	4b38      	ldr	r3, [pc, #224]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a32:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a34:	4b35      	ldr	r3, [pc, #212]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 8002a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a38:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d007      	beq.n	8002a50 <HAL_RCC_OscConfig+0x1bc>
 8002a40:	6a3b      	ldr	r3, [r7, #32]
 8002a42:	2b18      	cmp	r3, #24
 8002a44:	d137      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x222>
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	f003 0303 	and.w	r3, r3, #3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d132      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a50:	4b2e      	ldr	r3, [pc, #184]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d005      	beq.n	8002a68 <HAL_RCC_OscConfig+0x1d4>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e33e      	b.n	80030e6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002a68:	4b28      	ldr	r3, [pc, #160]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f023 0219 	bic.w	r2, r3, #25
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	4925      	ldr	r1, [pc, #148]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7a:	f7fe fe29 	bl	80016d0 <HAL_GetTick>
 8002a7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a82:	f7fe fe25 	bl	80016d0 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e328      	b.n	80030e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a94:	4b1d      	ldr	r3, [pc, #116]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0f0      	beq.n	8002a82 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa0:	4b1a      	ldr	r3, [pc, #104]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	061b      	lsls	r3, r3, #24
 8002aae:	4917      	ldr	r1, [pc, #92]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ab4:	e045      	b.n	8002b42 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d028      	beq.n	8002b10 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002abe:	4b13      	ldr	r3, [pc, #76]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f023 0219 	bic.w	r2, r3, #25
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	4910      	ldr	r1, [pc, #64]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad0:	f7fe fdfe 	bl	80016d0 <HAL_GetTick>
 8002ad4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ad8:	f7fe fdfa 	bl	80016d0 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e2fd      	b.n	80030e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002aea:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0304 	and.w	r3, r3, #4
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0f0      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af6:	4b05      	ldr	r3, [pc, #20]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	061b      	lsls	r3, r3, #24
 8002b04:	4901      	ldr	r1, [pc, #4]	; (8002b0c <HAL_RCC_OscConfig+0x278>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	604b      	str	r3, [r1, #4]
 8002b0a:	e01a      	b.n	8002b42 <HAL_RCC_OscConfig+0x2ae>
 8002b0c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b10:	4b97      	ldr	r3, [pc, #604]	; (8002d70 <HAL_RCC_OscConfig+0x4dc>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a96      	ldr	r2, [pc, #600]	; (8002d70 <HAL_RCC_OscConfig+0x4dc>)
 8002b16:	f023 0301 	bic.w	r3, r3, #1
 8002b1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1c:	f7fe fdd8 	bl	80016d0 <HAL_GetTick>
 8002b20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b24:	f7fe fdd4 	bl	80016d0 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e2d7      	b.n	80030e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b36:	4b8e      	ldr	r3, [pc, #568]	; (8002d70 <HAL_RCC_OscConfig+0x4dc>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0304 	and.w	r3, r3, #4
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1f0      	bne.n	8002b24 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0310 	and.w	r3, r3, #16
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d06a      	beq.n	8002c24 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b4e:	4b88      	ldr	r3, [pc, #544]	; (8002d70 <HAL_RCC_OscConfig+0x4dc>)
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b56:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b58:	4b85      	ldr	r3, [pc, #532]	; (8002d70 <HAL_RCC_OscConfig+0x4dc>)
 8002b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d007      	beq.n	8002b74 <HAL_RCC_OscConfig+0x2e0>
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	2b18      	cmp	r3, #24
 8002b68:	d11b      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x30e>
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f003 0303 	and.w	r3, r3, #3
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d116      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b74:	4b7e      	ldr	r3, [pc, #504]	; (8002d70 <HAL_RCC_OscConfig+0x4dc>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d005      	beq.n	8002b8c <HAL_RCC_OscConfig+0x2f8>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	2b80      	cmp	r3, #128	; 0x80
 8002b86:	d001      	beq.n	8002b8c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e2ac      	b.n	80030e6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b8c:	4b78      	ldr	r3, [pc, #480]	; (8002d70 <HAL_RCC_OscConfig+0x4dc>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	061b      	lsls	r3, r3, #24
 8002b9a:	4975      	ldr	r1, [pc, #468]	; (8002d70 <HAL_RCC_OscConfig+0x4dc>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ba0:	e040      	b.n	8002c24 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d023      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002baa:	4b71      	ldr	r3, [pc, #452]	; (8002d70 <HAL_RCC_OscConfig+0x4dc>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a70      	ldr	r2, [pc, #448]	; (8002d70 <HAL_RCC_OscConfig+0x4dc>)
 8002bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb6:	f7fe fd8b 	bl	80016d0 <HAL_GetTick>
 8002bba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002bbe:	f7fe fd87 	bl	80016d0 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e28a      	b.n	80030e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002bd0:	4b67      	ldr	r3, [pc, #412]	; (8002d70 <HAL_RCC_OscConfig+0x4dc>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0f0      	beq.n	8002bbe <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bdc:	4b64      	ldr	r3, [pc, #400]	; (8002d70 <HAL_RCC_OscConfig+0x4dc>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	061b      	lsls	r3, r3, #24
 8002bea:	4961      	ldr	r1, [pc, #388]	; (8002d70 <HAL_RCC_OscConfig+0x4dc>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	60cb      	str	r3, [r1, #12]
 8002bf0:	e018      	b.n	8002c24 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002bf2:	4b5f      	ldr	r3, [pc, #380]	; (8002d70 <HAL_RCC_OscConfig+0x4dc>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a5e      	ldr	r2, [pc, #376]	; (8002d70 <HAL_RCC_OscConfig+0x4dc>)
 8002bf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfe:	f7fe fd67 	bl	80016d0 <HAL_GetTick>
 8002c02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c04:	e008      	b.n	8002c18 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002c06:	f7fe fd63 	bl	80016d0 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e266      	b.n	80030e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c18:	4b55      	ldr	r3, [pc, #340]	; (8002d70 <HAL_RCC_OscConfig+0x4dc>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1f0      	bne.n	8002c06 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0308 	and.w	r3, r3, #8
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d036      	beq.n	8002c9e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d019      	beq.n	8002c6c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c38:	4b4d      	ldr	r3, [pc, #308]	; (8002d70 <HAL_RCC_OscConfig+0x4dc>)
 8002c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c3c:	4a4c      	ldr	r2, [pc, #304]	; (8002d70 <HAL_RCC_OscConfig+0x4dc>)
 8002c3e:	f043 0301 	orr.w	r3, r3, #1
 8002c42:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c44:	f7fe fd44 	bl	80016d0 <HAL_GetTick>
 8002c48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c4c:	f7fe fd40 	bl	80016d0 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e243      	b.n	80030e6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c5e:	4b44      	ldr	r3, [pc, #272]	; (8002d70 <HAL_RCC_OscConfig+0x4dc>)
 8002c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0f0      	beq.n	8002c4c <HAL_RCC_OscConfig+0x3b8>
 8002c6a:	e018      	b.n	8002c9e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c6c:	4b40      	ldr	r3, [pc, #256]	; (8002d70 <HAL_RCC_OscConfig+0x4dc>)
 8002c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c70:	4a3f      	ldr	r2, [pc, #252]	; (8002d70 <HAL_RCC_OscConfig+0x4dc>)
 8002c72:	f023 0301 	bic.w	r3, r3, #1
 8002c76:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c78:	f7fe fd2a 	bl	80016d0 <HAL_GetTick>
 8002c7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c80:	f7fe fd26 	bl	80016d0 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e229      	b.n	80030e6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c92:	4b37      	ldr	r3, [pc, #220]	; (8002d70 <HAL_RCC_OscConfig+0x4dc>)
 8002c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0320 	and.w	r3, r3, #32
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d036      	beq.n	8002d18 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d019      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002cb2:	4b2f      	ldr	r3, [pc, #188]	; (8002d70 <HAL_RCC_OscConfig+0x4dc>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a2e      	ldr	r2, [pc, #184]	; (8002d70 <HAL_RCC_OscConfig+0x4dc>)
 8002cb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cbc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002cbe:	f7fe fd07 	bl	80016d0 <HAL_GetTick>
 8002cc2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cc6:	f7fe fd03 	bl	80016d0 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e206      	b.n	80030e6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002cd8:	4b25      	ldr	r3, [pc, #148]	; (8002d70 <HAL_RCC_OscConfig+0x4dc>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0f0      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x432>
 8002ce4:	e018      	b.n	8002d18 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ce6:	4b22      	ldr	r3, [pc, #136]	; (8002d70 <HAL_RCC_OscConfig+0x4dc>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a21      	ldr	r2, [pc, #132]	; (8002d70 <HAL_RCC_OscConfig+0x4dc>)
 8002cec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cf0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002cf2:	f7fe fced 	bl	80016d0 <HAL_GetTick>
 8002cf6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cfa:	f7fe fce9 	bl	80016d0 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e1ec      	b.n	80030e6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d0c:	4b18      	ldr	r3, [pc, #96]	; (8002d70 <HAL_RCC_OscConfig+0x4dc>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1f0      	bne.n	8002cfa <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 80af 	beq.w	8002e84 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d26:	4b13      	ldr	r3, [pc, #76]	; (8002d74 <HAL_RCC_OscConfig+0x4e0>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a12      	ldr	r2, [pc, #72]	; (8002d74 <HAL_RCC_OscConfig+0x4e0>)
 8002d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d32:	f7fe fccd 	bl	80016d0 <HAL_GetTick>
 8002d36:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d3a:	f7fe fcc9 	bl	80016d0 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b64      	cmp	r3, #100	; 0x64
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e1cc      	b.n	80030e6 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d4c:	4b09      	ldr	r3, [pc, #36]	; (8002d74 <HAL_RCC_OscConfig+0x4e0>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0f0      	beq.n	8002d3a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d10b      	bne.n	8002d78 <HAL_RCC_OscConfig+0x4e4>
 8002d60:	4b03      	ldr	r3, [pc, #12]	; (8002d70 <HAL_RCC_OscConfig+0x4dc>)
 8002d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d64:	4a02      	ldr	r2, [pc, #8]	; (8002d70 <HAL_RCC_OscConfig+0x4dc>)
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d6c:	e05b      	b.n	8002e26 <HAL_RCC_OscConfig+0x592>
 8002d6e:	bf00      	nop
 8002d70:	58024400 	.word	0x58024400
 8002d74:	58024800 	.word	0x58024800
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d112      	bne.n	8002da6 <HAL_RCC_OscConfig+0x512>
 8002d80:	4b9d      	ldr	r3, [pc, #628]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d84:	4a9c      	ldr	r2, [pc, #624]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002d86:	f023 0301 	bic.w	r3, r3, #1
 8002d8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d8c:	4b9a      	ldr	r3, [pc, #616]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d90:	4a99      	ldr	r2, [pc, #612]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002d92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d96:	6713      	str	r3, [r2, #112]	; 0x70
 8002d98:	4b97      	ldr	r3, [pc, #604]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9c:	4a96      	ldr	r2, [pc, #600]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002d9e:	f023 0304 	bic.w	r3, r3, #4
 8002da2:	6713      	str	r3, [r2, #112]	; 0x70
 8002da4:	e03f      	b.n	8002e26 <HAL_RCC_OscConfig+0x592>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	2b05      	cmp	r3, #5
 8002dac:	d112      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x540>
 8002dae:	4b92      	ldr	r3, [pc, #584]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db2:	4a91      	ldr	r2, [pc, #580]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002db4:	f043 0304 	orr.w	r3, r3, #4
 8002db8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dba:	4b8f      	ldr	r3, [pc, #572]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbe:	4a8e      	ldr	r2, [pc, #568]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002dc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc6:	4b8c      	ldr	r3, [pc, #560]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dca:	4a8b      	ldr	r2, [pc, #556]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002dcc:	f043 0301 	orr.w	r3, r3, #1
 8002dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8002dd2:	e028      	b.n	8002e26 <HAL_RCC_OscConfig+0x592>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	2b85      	cmp	r3, #133	; 0x85
 8002dda:	d112      	bne.n	8002e02 <HAL_RCC_OscConfig+0x56e>
 8002ddc:	4b86      	ldr	r3, [pc, #536]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de0:	4a85      	ldr	r2, [pc, #532]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002de2:	f043 0304 	orr.w	r3, r3, #4
 8002de6:	6713      	str	r3, [r2, #112]	; 0x70
 8002de8:	4b83      	ldr	r3, [pc, #524]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dec:	4a82      	ldr	r2, [pc, #520]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002df2:	6713      	str	r3, [r2, #112]	; 0x70
 8002df4:	4b80      	ldr	r3, [pc, #512]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df8:	4a7f      	ldr	r2, [pc, #508]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002dfa:	f043 0301 	orr.w	r3, r3, #1
 8002dfe:	6713      	str	r3, [r2, #112]	; 0x70
 8002e00:	e011      	b.n	8002e26 <HAL_RCC_OscConfig+0x592>
 8002e02:	4b7d      	ldr	r3, [pc, #500]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e06:	4a7c      	ldr	r2, [pc, #496]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002e08:	f023 0301 	bic.w	r3, r3, #1
 8002e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e0e:	4b7a      	ldr	r3, [pc, #488]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e12:	4a79      	ldr	r2, [pc, #484]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002e14:	f023 0304 	bic.w	r3, r3, #4
 8002e18:	6713      	str	r3, [r2, #112]	; 0x70
 8002e1a:	4b77      	ldr	r3, [pc, #476]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1e:	4a76      	ldr	r2, [pc, #472]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002e20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d015      	beq.n	8002e5a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e2e:	f7fe fc4f 	bl	80016d0 <HAL_GetTick>
 8002e32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e34:	e00a      	b.n	8002e4c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e36:	f7fe fc4b 	bl	80016d0 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e14c      	b.n	80030e6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e4c:	4b6a      	ldr	r3, [pc, #424]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0ee      	beq.n	8002e36 <HAL_RCC_OscConfig+0x5a2>
 8002e58:	e014      	b.n	8002e84 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5a:	f7fe fc39 	bl	80016d0 <HAL_GetTick>
 8002e5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e60:	e00a      	b.n	8002e78 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e62:	f7fe fc35 	bl	80016d0 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e136      	b.n	80030e6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e78:	4b5f      	ldr	r3, [pc, #380]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1ee      	bne.n	8002e62 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 812b 	beq.w	80030e4 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002e8e:	4b5a      	ldr	r3, [pc, #360]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e96:	2b18      	cmp	r3, #24
 8002e98:	f000 80bb 	beq.w	8003012 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	f040 8095 	bne.w	8002fd0 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea6:	4b54      	ldr	r3, [pc, #336]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a53      	ldr	r2, [pc, #332]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002eac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb2:	f7fe fc0d 	bl	80016d0 <HAL_GetTick>
 8002eb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eba:	f7fe fc09 	bl	80016d0 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e10c      	b.n	80030e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ecc:	4b4a      	ldr	r3, [pc, #296]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1f0      	bne.n	8002eba <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ed8:	4b47      	ldr	r3, [pc, #284]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002eda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002edc:	4b47      	ldr	r3, [pc, #284]	; (8002ffc <HAL_RCC_OscConfig+0x768>)
 8002ede:	4013      	ands	r3, r2
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002ee8:	0112      	lsls	r2, r2, #4
 8002eea:	430a      	orrs	r2, r1
 8002eec:	4942      	ldr	r1, [pc, #264]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	628b      	str	r3, [r1, #40]	; 0x28
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f00:	3b01      	subs	r3, #1
 8002f02:	025b      	lsls	r3, r3, #9
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	431a      	orrs	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	041b      	lsls	r3, r3, #16
 8002f10:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002f14:	431a      	orrs	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	061b      	lsls	r3, r3, #24
 8002f1e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002f22:	4935      	ldr	r1, [pc, #212]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002f28:	4b33      	ldr	r3, [pc, #204]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2c:	4a32      	ldr	r2, [pc, #200]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002f2e:	f023 0301 	bic.w	r3, r3, #1
 8002f32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f34:	4b30      	ldr	r3, [pc, #192]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002f36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f38:	4b31      	ldr	r3, [pc, #196]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f40:	00d2      	lsls	r2, r2, #3
 8002f42:	492d      	ldr	r1, [pc, #180]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002f48:	4b2b      	ldr	r3, [pc, #172]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4c:	f023 020c 	bic.w	r2, r3, #12
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	4928      	ldr	r1, [pc, #160]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002f5a:	4b27      	ldr	r3, [pc, #156]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5e:	f023 0202 	bic.w	r2, r3, #2
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f66:	4924      	ldr	r1, [pc, #144]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002f6c:	4b22      	ldr	r3, [pc, #136]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	4a21      	ldr	r2, [pc, #132]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f78:	4b1f      	ldr	r3, [pc, #124]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7c:	4a1e      	ldr	r2, [pc, #120]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002f7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002f84:	4b1c      	ldr	r3, [pc, #112]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f88:	4a1b      	ldr	r2, [pc, #108]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002f8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002f90:	4b19      	ldr	r3, [pc, #100]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f94:	4a18      	ldr	r2, [pc, #96]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002f96:	f043 0301 	orr.w	r3, r3, #1
 8002f9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f9c:	4b16      	ldr	r3, [pc, #88]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a15      	ldr	r2, [pc, #84]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa8:	f7fe fb92 	bl	80016d0 <HAL_GetTick>
 8002fac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb0:	f7fe fb8e 	bl	80016d0 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e091      	b.n	80030e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fc2:	4b0d      	ldr	r3, [pc, #52]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f0      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x71c>
 8002fce:	e089      	b.n	80030e4 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd0:	4b09      	ldr	r3, [pc, #36]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a08      	ldr	r2, [pc, #32]	; (8002ff8 <HAL_RCC_OscConfig+0x764>)
 8002fd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fdc:	f7fe fb78 	bl	80016d0 <HAL_GetTick>
 8002fe0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fe2:	e00f      	b.n	8003004 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe4:	f7fe fb74 	bl	80016d0 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d908      	bls.n	8003004 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e077      	b.n	80030e6 <HAL_RCC_OscConfig+0x852>
 8002ff6:	bf00      	nop
 8002ff8:	58024400 	.word	0x58024400
 8002ffc:	fffffc0c 	.word	0xfffffc0c
 8003000:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003004:	4b3a      	ldr	r3, [pc, #232]	; (80030f0 <HAL_RCC_OscConfig+0x85c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1e9      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x750>
 8003010:	e068      	b.n	80030e4 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003012:	4b37      	ldr	r3, [pc, #220]	; (80030f0 <HAL_RCC_OscConfig+0x85c>)
 8003014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003016:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003018:	4b35      	ldr	r3, [pc, #212]	; (80030f0 <HAL_RCC_OscConfig+0x85c>)
 800301a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	2b01      	cmp	r3, #1
 8003024:	d031      	beq.n	800308a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f003 0203 	and.w	r2, r3, #3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003030:	429a      	cmp	r2, r3
 8003032:	d12a      	bne.n	800308a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	091b      	lsrs	r3, r3, #4
 8003038:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003040:	429a      	cmp	r2, r3
 8003042:	d122      	bne.n	800308a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003050:	429a      	cmp	r2, r3
 8003052:	d11a      	bne.n	800308a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	0a5b      	lsrs	r3, r3, #9
 8003058:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003060:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003062:	429a      	cmp	r2, r3
 8003064:	d111      	bne.n	800308a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	0c1b      	lsrs	r3, r3, #16
 800306a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003072:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003074:	429a      	cmp	r2, r3
 8003076:	d108      	bne.n	800308a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	0e1b      	lsrs	r3, r3, #24
 800307c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003084:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003086:	429a      	cmp	r2, r3
 8003088:	d001      	beq.n	800308e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e02b      	b.n	80030e6 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800308e:	4b18      	ldr	r3, [pc, #96]	; (80030f0 <HAL_RCC_OscConfig+0x85c>)
 8003090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003092:	08db      	lsrs	r3, r3, #3
 8003094:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003098:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d01f      	beq.n	80030e4 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80030a4:	4b12      	ldr	r3, [pc, #72]	; (80030f0 <HAL_RCC_OscConfig+0x85c>)
 80030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a8:	4a11      	ldr	r2, [pc, #68]	; (80030f0 <HAL_RCC_OscConfig+0x85c>)
 80030aa:	f023 0301 	bic.w	r3, r3, #1
 80030ae:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030b0:	f7fe fb0e 	bl	80016d0 <HAL_GetTick>
 80030b4:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80030b6:	bf00      	nop
 80030b8:	f7fe fb0a 	bl	80016d0 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d0f9      	beq.n	80030b8 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80030c4:	4b0a      	ldr	r3, [pc, #40]	; (80030f0 <HAL_RCC_OscConfig+0x85c>)
 80030c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030c8:	4b0a      	ldr	r3, [pc, #40]	; (80030f4 <HAL_RCC_OscConfig+0x860>)
 80030ca:	4013      	ands	r3, r2
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80030d0:	00d2      	lsls	r2, r2, #3
 80030d2:	4907      	ldr	r1, [pc, #28]	; (80030f0 <HAL_RCC_OscConfig+0x85c>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80030d8:	4b05      	ldr	r3, [pc, #20]	; (80030f0 <HAL_RCC_OscConfig+0x85c>)
 80030da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030dc:	4a04      	ldr	r2, [pc, #16]	; (80030f0 <HAL_RCC_OscConfig+0x85c>)
 80030de:	f043 0301 	orr.w	r3, r3, #1
 80030e2:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3730      	adds	r7, #48	; 0x30
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	58024400 	.word	0x58024400
 80030f4:	ffff0007 	.word	0xffff0007

080030f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e19c      	b.n	8003446 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800310c:	4b8a      	ldr	r3, [pc, #552]	; (8003338 <HAL_RCC_ClockConfig+0x240>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 030f 	and.w	r3, r3, #15
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	429a      	cmp	r2, r3
 8003118:	d910      	bls.n	800313c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311a:	4b87      	ldr	r3, [pc, #540]	; (8003338 <HAL_RCC_ClockConfig+0x240>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f023 020f 	bic.w	r2, r3, #15
 8003122:	4985      	ldr	r1, [pc, #532]	; (8003338 <HAL_RCC_ClockConfig+0x240>)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	4313      	orrs	r3, r2
 8003128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800312a:	4b83      	ldr	r3, [pc, #524]	; (8003338 <HAL_RCC_ClockConfig+0x240>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	429a      	cmp	r2, r3
 8003136:	d001      	beq.n	800313c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e184      	b.n	8003446 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b00      	cmp	r3, #0
 8003146:	d010      	beq.n	800316a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691a      	ldr	r2, [r3, #16]
 800314c:	4b7b      	ldr	r3, [pc, #492]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003154:	429a      	cmp	r2, r3
 8003156:	d908      	bls.n	800316a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003158:	4b78      	ldr	r3, [pc, #480]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	4975      	ldr	r1, [pc, #468]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 8003166:	4313      	orrs	r3, r2
 8003168:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0308 	and.w	r3, r3, #8
 8003172:	2b00      	cmp	r3, #0
 8003174:	d010      	beq.n	8003198 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695a      	ldr	r2, [r3, #20]
 800317a:	4b70      	ldr	r3, [pc, #448]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003182:	429a      	cmp	r2, r3
 8003184:	d908      	bls.n	8003198 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003186:	4b6d      	ldr	r3, [pc, #436]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	496a      	ldr	r1, [pc, #424]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 8003194:	4313      	orrs	r3, r2
 8003196:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0310 	and.w	r3, r3, #16
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d010      	beq.n	80031c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	699a      	ldr	r2, [r3, #24]
 80031a8:	4b64      	ldr	r3, [pc, #400]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 80031aa:	69db      	ldr	r3, [r3, #28]
 80031ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d908      	bls.n	80031c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80031b4:	4b61      	ldr	r3, [pc, #388]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	495e      	ldr	r1, [pc, #376]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0320 	and.w	r3, r3, #32
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d010      	beq.n	80031f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69da      	ldr	r2, [r3, #28]
 80031d6:	4b59      	ldr	r3, [pc, #356]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031de:	429a      	cmp	r2, r3
 80031e0:	d908      	bls.n	80031f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80031e2:	4b56      	ldr	r3, [pc, #344]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	4953      	ldr	r1, [pc, #332]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d010      	beq.n	8003222 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	4b4d      	ldr	r3, [pc, #308]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	f003 030f 	and.w	r3, r3, #15
 800320c:	429a      	cmp	r2, r3
 800320e:	d908      	bls.n	8003222 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003210:	4b4a      	ldr	r3, [pc, #296]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	f023 020f 	bic.w	r2, r3, #15
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	4947      	ldr	r1, [pc, #284]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 800321e:	4313      	orrs	r3, r2
 8003220:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d055      	beq.n	80032da <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800322e:	4b43      	ldr	r3, [pc, #268]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	4940      	ldr	r1, [pc, #256]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 800323c:	4313      	orrs	r3, r2
 800323e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2b02      	cmp	r3, #2
 8003246:	d107      	bne.n	8003258 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003248:	4b3c      	ldr	r3, [pc, #240]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d121      	bne.n	8003298 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e0f6      	b.n	8003446 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b03      	cmp	r3, #3
 800325e:	d107      	bne.n	8003270 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003260:	4b36      	ldr	r3, [pc, #216]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d115      	bne.n	8003298 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e0ea      	b.n	8003446 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d107      	bne.n	8003288 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003278:	4b30      	ldr	r3, [pc, #192]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003280:	2b00      	cmp	r3, #0
 8003282:	d109      	bne.n	8003298 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e0de      	b.n	8003446 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003288:	4b2c      	ldr	r3, [pc, #176]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e0d6      	b.n	8003446 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003298:	4b28      	ldr	r3, [pc, #160]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	f023 0207 	bic.w	r2, r3, #7
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	4925      	ldr	r1, [pc, #148]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032aa:	f7fe fa11 	bl	80016d0 <HAL_GetTick>
 80032ae:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b0:	e00a      	b.n	80032c8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032b2:	f7fe fa0d 	bl	80016d0 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e0be      	b.n	8003446 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c8:	4b1c      	ldr	r3, [pc, #112]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d1eb      	bne.n	80032b2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d010      	beq.n	8003308 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	4b14      	ldr	r3, [pc, #80]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d208      	bcs.n	8003308 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032f6:	4b11      	ldr	r3, [pc, #68]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	f023 020f 	bic.w	r2, r3, #15
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	490e      	ldr	r1, [pc, #56]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 8003304:	4313      	orrs	r3, r2
 8003306:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003308:	4b0b      	ldr	r3, [pc, #44]	; (8003338 <HAL_RCC_ClockConfig+0x240>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 030f 	and.w	r3, r3, #15
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d214      	bcs.n	8003340 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003316:	4b08      	ldr	r3, [pc, #32]	; (8003338 <HAL_RCC_ClockConfig+0x240>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f023 020f 	bic.w	r2, r3, #15
 800331e:	4906      	ldr	r1, [pc, #24]	; (8003338 <HAL_RCC_ClockConfig+0x240>)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	4313      	orrs	r3, r2
 8003324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003326:	4b04      	ldr	r3, [pc, #16]	; (8003338 <HAL_RCC_ClockConfig+0x240>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	429a      	cmp	r2, r3
 8003332:	d005      	beq.n	8003340 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e086      	b.n	8003446 <HAL_RCC_ClockConfig+0x34e>
 8003338:	52002000 	.word	0x52002000
 800333c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b00      	cmp	r3, #0
 800334a:	d010      	beq.n	800336e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	691a      	ldr	r2, [r3, #16]
 8003350:	4b3f      	ldr	r3, [pc, #252]	; (8003450 <HAL_RCC_ClockConfig+0x358>)
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003358:	429a      	cmp	r2, r3
 800335a:	d208      	bcs.n	800336e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800335c:	4b3c      	ldr	r3, [pc, #240]	; (8003450 <HAL_RCC_ClockConfig+0x358>)
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	4939      	ldr	r1, [pc, #228]	; (8003450 <HAL_RCC_ClockConfig+0x358>)
 800336a:	4313      	orrs	r3, r2
 800336c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	2b00      	cmp	r3, #0
 8003378:	d010      	beq.n	800339c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	695a      	ldr	r2, [r3, #20]
 800337e:	4b34      	ldr	r3, [pc, #208]	; (8003450 <HAL_RCC_ClockConfig+0x358>)
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003386:	429a      	cmp	r2, r3
 8003388:	d208      	bcs.n	800339c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800338a:	4b31      	ldr	r3, [pc, #196]	; (8003450 <HAL_RCC_ClockConfig+0x358>)
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	492e      	ldr	r1, [pc, #184]	; (8003450 <HAL_RCC_ClockConfig+0x358>)
 8003398:	4313      	orrs	r3, r2
 800339a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0310 	and.w	r3, r3, #16
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d010      	beq.n	80033ca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	699a      	ldr	r2, [r3, #24]
 80033ac:	4b28      	ldr	r3, [pc, #160]	; (8003450 <HAL_RCC_ClockConfig+0x358>)
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d208      	bcs.n	80033ca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80033b8:	4b25      	ldr	r3, [pc, #148]	; (8003450 <HAL_RCC_ClockConfig+0x358>)
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	4922      	ldr	r1, [pc, #136]	; (8003450 <HAL_RCC_ClockConfig+0x358>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0320 	and.w	r3, r3, #32
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d010      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69da      	ldr	r2, [r3, #28]
 80033da:	4b1d      	ldr	r3, [pc, #116]	; (8003450 <HAL_RCC_ClockConfig+0x358>)
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d208      	bcs.n	80033f8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80033e6:	4b1a      	ldr	r3, [pc, #104]	; (8003450 <HAL_RCC_ClockConfig+0x358>)
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	4917      	ldr	r1, [pc, #92]	; (8003450 <HAL_RCC_ClockConfig+0x358>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80033f8:	f000 f834 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 80033fc:	4602      	mov	r2, r0
 80033fe:	4b14      	ldr	r3, [pc, #80]	; (8003450 <HAL_RCC_ClockConfig+0x358>)
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	0a1b      	lsrs	r3, r3, #8
 8003404:	f003 030f 	and.w	r3, r3, #15
 8003408:	4912      	ldr	r1, [pc, #72]	; (8003454 <HAL_RCC_ClockConfig+0x35c>)
 800340a:	5ccb      	ldrb	r3, [r1, r3]
 800340c:	f003 031f 	and.w	r3, r3, #31
 8003410:	fa22 f303 	lsr.w	r3, r2, r3
 8003414:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003416:	4b0e      	ldr	r3, [pc, #56]	; (8003450 <HAL_RCC_ClockConfig+0x358>)
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	4a0d      	ldr	r2, [pc, #52]	; (8003454 <HAL_RCC_ClockConfig+0x35c>)
 8003420:	5cd3      	ldrb	r3, [r2, r3]
 8003422:	f003 031f 	and.w	r3, r3, #31
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	fa22 f303 	lsr.w	r3, r2, r3
 800342c:	4a0a      	ldr	r2, [pc, #40]	; (8003458 <HAL_RCC_ClockConfig+0x360>)
 800342e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003430:	4a0a      	ldr	r2, [pc, #40]	; (800345c <HAL_RCC_ClockConfig+0x364>)
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003436:	4b0a      	ldr	r3, [pc, #40]	; (8003460 <HAL_RCC_ClockConfig+0x368>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f7fe f8fe 	bl	800163c <HAL_InitTick>
 8003440:	4603      	mov	r3, r0
 8003442:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003444:	7bfb      	ldrb	r3, [r7, #15]
}
 8003446:	4618      	mov	r0, r3
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	58024400 	.word	0x58024400
 8003454:	08009780 	.word	0x08009780
 8003458:	24000014 	.word	0x24000014
 800345c:	24000010 	.word	0x24000010
 8003460:	24000018 	.word	0x24000018

08003464 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003464:	b480      	push	{r7}
 8003466:	b089      	sub	sp, #36	; 0x24
 8003468:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800346a:	4bb3      	ldr	r3, [pc, #716]	; (8003738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003472:	2b18      	cmp	r3, #24
 8003474:	f200 8155 	bhi.w	8003722 <HAL_RCC_GetSysClockFreq+0x2be>
 8003478:	a201      	add	r2, pc, #4	; (adr r2, 8003480 <HAL_RCC_GetSysClockFreq+0x1c>)
 800347a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800347e:	bf00      	nop
 8003480:	080034e5 	.word	0x080034e5
 8003484:	08003723 	.word	0x08003723
 8003488:	08003723 	.word	0x08003723
 800348c:	08003723 	.word	0x08003723
 8003490:	08003723 	.word	0x08003723
 8003494:	08003723 	.word	0x08003723
 8003498:	08003723 	.word	0x08003723
 800349c:	08003723 	.word	0x08003723
 80034a0:	0800350b 	.word	0x0800350b
 80034a4:	08003723 	.word	0x08003723
 80034a8:	08003723 	.word	0x08003723
 80034ac:	08003723 	.word	0x08003723
 80034b0:	08003723 	.word	0x08003723
 80034b4:	08003723 	.word	0x08003723
 80034b8:	08003723 	.word	0x08003723
 80034bc:	08003723 	.word	0x08003723
 80034c0:	08003511 	.word	0x08003511
 80034c4:	08003723 	.word	0x08003723
 80034c8:	08003723 	.word	0x08003723
 80034cc:	08003723 	.word	0x08003723
 80034d0:	08003723 	.word	0x08003723
 80034d4:	08003723 	.word	0x08003723
 80034d8:	08003723 	.word	0x08003723
 80034dc:	08003723 	.word	0x08003723
 80034e0:	08003517 	.word	0x08003517
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034e4:	4b94      	ldr	r3, [pc, #592]	; (8003738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0320 	and.w	r3, r3, #32
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d009      	beq.n	8003504 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80034f0:	4b91      	ldr	r3, [pc, #580]	; (8003738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	08db      	lsrs	r3, r3, #3
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	4a90      	ldr	r2, [pc, #576]	; (800373c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80034fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003500:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003502:	e111      	b.n	8003728 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003504:	4b8d      	ldr	r3, [pc, #564]	; (800373c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003506:	61bb      	str	r3, [r7, #24]
      break;
 8003508:	e10e      	b.n	8003728 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800350a:	4b8d      	ldr	r3, [pc, #564]	; (8003740 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800350c:	61bb      	str	r3, [r7, #24]
      break;
 800350e:	e10b      	b.n	8003728 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003510:	4b8c      	ldr	r3, [pc, #560]	; (8003744 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003512:	61bb      	str	r3, [r7, #24]
      break;
 8003514:	e108      	b.n	8003728 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003516:	4b88      	ldr	r3, [pc, #544]	; (8003738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351a:	f003 0303 	and.w	r3, r3, #3
 800351e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003520:	4b85      	ldr	r3, [pc, #532]	; (8003738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003524:	091b      	lsrs	r3, r3, #4
 8003526:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800352a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800352c:	4b82      	ldr	r3, [pc, #520]	; (8003738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800352e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003536:	4b80      	ldr	r3, [pc, #512]	; (8003738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800353a:	08db      	lsrs	r3, r3, #3
 800353c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	fb02 f303 	mul.w	r3, r2, r3
 8003546:	ee07 3a90 	vmov	s15, r3
 800354a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800354e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 80e1 	beq.w	800371c <HAL_RCC_GetSysClockFreq+0x2b8>
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	2b02      	cmp	r3, #2
 800355e:	f000 8083 	beq.w	8003668 <HAL_RCC_GetSysClockFreq+0x204>
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2b02      	cmp	r3, #2
 8003566:	f200 80a1 	bhi.w	80036ac <HAL_RCC_GetSysClockFreq+0x248>
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d003      	beq.n	8003578 <HAL_RCC_GetSysClockFreq+0x114>
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d056      	beq.n	8003624 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003576:	e099      	b.n	80036ac <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003578:	4b6f      	ldr	r3, [pc, #444]	; (8003738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0320 	and.w	r3, r3, #32
 8003580:	2b00      	cmp	r3, #0
 8003582:	d02d      	beq.n	80035e0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003584:	4b6c      	ldr	r3, [pc, #432]	; (8003738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	08db      	lsrs	r3, r3, #3
 800358a:	f003 0303 	and.w	r3, r3, #3
 800358e:	4a6b      	ldr	r2, [pc, #428]	; (800373c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003590:	fa22 f303 	lsr.w	r3, r2, r3
 8003594:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	ee07 3a90 	vmov	s15, r3
 800359c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	ee07 3a90 	vmov	s15, r3
 80035a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035ae:	4b62      	ldr	r3, [pc, #392]	; (8003738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035b6:	ee07 3a90 	vmov	s15, r3
 80035ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035be:	ed97 6a02 	vldr	s12, [r7, #8]
 80035c2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003748 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035da:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80035de:	e087      	b.n	80036f0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	ee07 3a90 	vmov	s15, r3
 80035e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ea:	eddf 6a58 	vldr	s13, [pc, #352]	; 800374c <HAL_RCC_GetSysClockFreq+0x2e8>
 80035ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035f2:	4b51      	ldr	r3, [pc, #324]	; (8003738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035fa:	ee07 3a90 	vmov	s15, r3
 80035fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003602:	ed97 6a02 	vldr	s12, [r7, #8]
 8003606:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003748 <HAL_RCC_GetSysClockFreq+0x2e4>
 800360a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800360e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003612:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800361a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800361e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003622:	e065      	b.n	80036f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	ee07 3a90 	vmov	s15, r3
 800362a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800362e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003750 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003636:	4b40      	ldr	r3, [pc, #256]	; (8003738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800363e:	ee07 3a90 	vmov	s15, r3
 8003642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003646:	ed97 6a02 	vldr	s12, [r7, #8]
 800364a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003748 <HAL_RCC_GetSysClockFreq+0x2e4>
 800364e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800365a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800365e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003662:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003666:	e043      	b.n	80036f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	ee07 3a90 	vmov	s15, r3
 800366e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003672:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003754 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800367a:	4b2f      	ldr	r3, [pc, #188]	; (8003738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800367c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003682:	ee07 3a90 	vmov	s15, r3
 8003686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800368a:	ed97 6a02 	vldr	s12, [r7, #8]
 800368e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003748 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800369a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800369e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80036aa:	e021      	b.n	80036f0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	ee07 3a90 	vmov	s15, r3
 80036b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036b6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003750 <HAL_RCC_GetSysClockFreq+0x2ec>
 80036ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036be:	4b1e      	ldr	r3, [pc, #120]	; (8003738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036c6:	ee07 3a90 	vmov	s15, r3
 80036ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80036d2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003748 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80036ee:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80036f0:	4b11      	ldr	r3, [pc, #68]	; (8003738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f4:	0a5b      	lsrs	r3, r3, #9
 80036f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036fa:	3301      	adds	r3, #1
 80036fc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	ee07 3a90 	vmov	s15, r3
 8003704:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003708:	edd7 6a07 	vldr	s13, [r7, #28]
 800370c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003710:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003714:	ee17 3a90 	vmov	r3, s15
 8003718:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800371a:	e005      	b.n	8003728 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800371c:	2300      	movs	r3, #0
 800371e:	61bb      	str	r3, [r7, #24]
      break;
 8003720:	e002      	b.n	8003728 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003722:	4b07      	ldr	r3, [pc, #28]	; (8003740 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003724:	61bb      	str	r3, [r7, #24]
      break;
 8003726:	bf00      	nop
  }

  return sysclockfreq;
 8003728:	69bb      	ldr	r3, [r7, #24]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3724      	adds	r7, #36	; 0x24
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	58024400 	.word	0x58024400
 800373c:	03d09000 	.word	0x03d09000
 8003740:	003d0900 	.word	0x003d0900
 8003744:	007a1200 	.word	0x007a1200
 8003748:	46000000 	.word	0x46000000
 800374c:	4c742400 	.word	0x4c742400
 8003750:	4a742400 	.word	0x4a742400
 8003754:	4af42400 	.word	0x4af42400

08003758 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800375e:	f7ff fe81 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 8003762:	4602      	mov	r2, r0
 8003764:	4b10      	ldr	r3, [pc, #64]	; (80037a8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	0a1b      	lsrs	r3, r3, #8
 800376a:	f003 030f 	and.w	r3, r3, #15
 800376e:	490f      	ldr	r1, [pc, #60]	; (80037ac <HAL_RCC_GetHCLKFreq+0x54>)
 8003770:	5ccb      	ldrb	r3, [r1, r3]
 8003772:	f003 031f 	and.w	r3, r3, #31
 8003776:	fa22 f303 	lsr.w	r3, r2, r3
 800377a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800377c:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	f003 030f 	and.w	r3, r3, #15
 8003784:	4a09      	ldr	r2, [pc, #36]	; (80037ac <HAL_RCC_GetHCLKFreq+0x54>)
 8003786:	5cd3      	ldrb	r3, [r2, r3]
 8003788:	f003 031f 	and.w	r3, r3, #31
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	fa22 f303 	lsr.w	r3, r2, r3
 8003792:	4a07      	ldr	r2, [pc, #28]	; (80037b0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003794:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003796:	4a07      	ldr	r2, [pc, #28]	; (80037b4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800379c:	4b04      	ldr	r3, [pc, #16]	; (80037b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800379e:	681b      	ldr	r3, [r3, #0]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	58024400 	.word	0x58024400
 80037ac:	08009780 	.word	0x08009780
 80037b0:	24000014 	.word	0x24000014
 80037b4:	24000010 	.word	0x24000010

080037b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80037bc:	f7ff ffcc 	bl	8003758 <HAL_RCC_GetHCLKFreq>
 80037c0:	4602      	mov	r2, r0
 80037c2:	4b06      	ldr	r3, [pc, #24]	; (80037dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	091b      	lsrs	r3, r3, #4
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	4904      	ldr	r1, [pc, #16]	; (80037e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037ce:	5ccb      	ldrb	r3, [r1, r3]
 80037d0:	f003 031f 	and.w	r3, r3, #31
 80037d4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80037d8:	4618      	mov	r0, r3
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	58024400 	.word	0x58024400
 80037e0:	08009780 	.word	0x08009780

080037e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80037e8:	f7ff ffb6 	bl	8003758 <HAL_RCC_GetHCLKFreq>
 80037ec:	4602      	mov	r2, r0
 80037ee:	4b06      	ldr	r3, [pc, #24]	; (8003808 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	0a1b      	lsrs	r3, r3, #8
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	4904      	ldr	r1, [pc, #16]	; (800380c <HAL_RCC_GetPCLK2Freq+0x28>)
 80037fa:	5ccb      	ldrb	r3, [r1, r3]
 80037fc:	f003 031f 	and.w	r3, r3, #31
 8003800:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003804:	4618      	mov	r0, r3
 8003806:	bd80      	pop	{r7, pc}
 8003808:	58024400 	.word	0x58024400
 800380c:	08009780 	.word	0x08009780

08003810 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003814:	b0c8      	sub	sp, #288	; 0x120
 8003816:	af00      	add	r7, sp, #0
 8003818:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800381c:	2300      	movs	r3, #0
 800381e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003822:	2300      	movs	r3, #0
 8003824:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003828:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800382c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003830:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003834:	2500      	movs	r5, #0
 8003836:	ea54 0305 	orrs.w	r3, r4, r5
 800383a:	d049      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800383c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003842:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003846:	d02f      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003848:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800384c:	d828      	bhi.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800384e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003852:	d01a      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003854:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003858:	d822      	bhi.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800385e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003862:	d007      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003864:	e01c      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003866:	4ba7      	ldr	r3, [pc, #668]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386a:	4aa6      	ldr	r2, [pc, #664]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800386c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003870:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003872:	e01a      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003874:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003878:	3308      	adds	r3, #8
 800387a:	2102      	movs	r1, #2
 800387c:	4618      	mov	r0, r3
 800387e:	f001 fc43 	bl	8005108 <RCCEx_PLL2_Config>
 8003882:	4603      	mov	r3, r0
 8003884:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003888:	e00f      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800388a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800388e:	3328      	adds	r3, #40	; 0x28
 8003890:	2102      	movs	r1, #2
 8003892:	4618      	mov	r0, r3
 8003894:	f001 fcea 	bl	800526c <RCCEx_PLL3_Config>
 8003898:	4603      	mov	r3, r0
 800389a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800389e:	e004      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80038a6:	e000      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80038a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10a      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80038b2:	4b94      	ldr	r3, [pc, #592]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80038ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038c0:	4a90      	ldr	r2, [pc, #576]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038c2:	430b      	orrs	r3, r1
 80038c4:	6513      	str	r3, [r2, #80]	; 0x50
 80038c6:	e003      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038cc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80038d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80038dc:	f04f 0900 	mov.w	r9, #0
 80038e0:	ea58 0309 	orrs.w	r3, r8, r9
 80038e4:	d047      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80038e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	d82a      	bhi.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80038f0:	a201      	add	r2, pc, #4	; (adr r2, 80038f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80038f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f6:	bf00      	nop
 80038f8:	0800390d 	.word	0x0800390d
 80038fc:	0800391b 	.word	0x0800391b
 8003900:	08003931 	.word	0x08003931
 8003904:	0800394f 	.word	0x0800394f
 8003908:	0800394f 	.word	0x0800394f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800390c:	4b7d      	ldr	r3, [pc, #500]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800390e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003910:	4a7c      	ldr	r2, [pc, #496]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003912:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003916:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003918:	e01a      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800391a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800391e:	3308      	adds	r3, #8
 8003920:	2100      	movs	r1, #0
 8003922:	4618      	mov	r0, r3
 8003924:	f001 fbf0 	bl	8005108 <RCCEx_PLL2_Config>
 8003928:	4603      	mov	r3, r0
 800392a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800392e:	e00f      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003930:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003934:	3328      	adds	r3, #40	; 0x28
 8003936:	2100      	movs	r1, #0
 8003938:	4618      	mov	r0, r3
 800393a:	f001 fc97 	bl	800526c <RCCEx_PLL3_Config>
 800393e:	4603      	mov	r3, r0
 8003940:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003944:	e004      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800394c:	e000      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800394e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003950:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10a      	bne.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003958:	4b6a      	ldr	r3, [pc, #424]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800395a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800395c:	f023 0107 	bic.w	r1, r3, #7
 8003960:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003966:	4a67      	ldr	r2, [pc, #412]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003968:	430b      	orrs	r3, r1
 800396a:	6513      	str	r3, [r2, #80]	; 0x50
 800396c:	e003      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800396e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003972:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003976:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800397a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003982:	f04f 0b00 	mov.w	fp, #0
 8003986:	ea5a 030b 	orrs.w	r3, sl, fp
 800398a:	d054      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800398c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003992:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003996:	d036      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003998:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800399c:	d82f      	bhi.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800399e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039a2:	d032      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80039a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039a8:	d829      	bhi.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80039aa:	2bc0      	cmp	r3, #192	; 0xc0
 80039ac:	d02f      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80039ae:	2bc0      	cmp	r3, #192	; 0xc0
 80039b0:	d825      	bhi.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80039b2:	2b80      	cmp	r3, #128	; 0x80
 80039b4:	d018      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80039b6:	2b80      	cmp	r3, #128	; 0x80
 80039b8:	d821      	bhi.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d002      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80039be:	2b40      	cmp	r3, #64	; 0x40
 80039c0:	d007      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80039c2:	e01c      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039c4:	4b4f      	ldr	r3, [pc, #316]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c8:	4a4e      	ldr	r2, [pc, #312]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80039d0:	e01e      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039d6:	3308      	adds	r3, #8
 80039d8:	2100      	movs	r1, #0
 80039da:	4618      	mov	r0, r3
 80039dc:	f001 fb94 	bl	8005108 <RCCEx_PLL2_Config>
 80039e0:	4603      	mov	r3, r0
 80039e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80039e6:	e013      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039ec:	3328      	adds	r3, #40	; 0x28
 80039ee:	2100      	movs	r1, #0
 80039f0:	4618      	mov	r0, r3
 80039f2:	f001 fc3b 	bl	800526c <RCCEx_PLL3_Config>
 80039f6:	4603      	mov	r3, r0
 80039f8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80039fc:	e008      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003a04:	e004      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003a06:	bf00      	nop
 8003a08:	e002      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003a0a:	bf00      	nop
 8003a0c:	e000      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003a0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a10:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10a      	bne.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003a18:	4b3a      	ldr	r3, [pc, #232]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a1c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a26:	4a37      	ldr	r2, [pc, #220]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a28:	430b      	orrs	r3, r1
 8003a2a:	6513      	str	r3, [r2, #80]	; 0x50
 8003a2c:	e003      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a2e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a32:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003a36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003a42:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003a46:	2300      	movs	r3, #0
 8003a48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003a4c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003a50:	460b      	mov	r3, r1
 8003a52:	4313      	orrs	r3, r2
 8003a54:	d05c      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8003a56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a5c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003a60:	d03b      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003a62:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003a66:	d834      	bhi.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003a68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a6c:	d037      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003a6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a72:	d82e      	bhi.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003a74:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003a78:	d033      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003a7a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003a7e:	d828      	bhi.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a84:	d01a      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a8a:	d822      	bhi.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003a90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a94:	d007      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003a96:	e01c      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a98:	4b1a      	ldr	r3, [pc, #104]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9c:	4a19      	ldr	r2, [pc, #100]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aa2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003aa4:	e01e      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aaa:	3308      	adds	r3, #8
 8003aac:	2100      	movs	r1, #0
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f001 fb2a 	bl	8005108 <RCCEx_PLL2_Config>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003aba:	e013      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003abc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ac0:	3328      	adds	r3, #40	; 0x28
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f001 fbd1 	bl	800526c <RCCEx_PLL3_Config>
 8003aca:	4603      	mov	r3, r0
 8003acc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003ad8:	e004      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003ada:	bf00      	nop
 8003adc:	e002      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003ade:	bf00      	nop
 8003ae0:	e000      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003ae2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ae4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10d      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003aec:	4b05      	ldr	r3, [pc, #20]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003af0:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8003af4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003afa:	4a02      	ldr	r2, [pc, #8]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003afc:	430b      	orrs	r3, r1
 8003afe:	6513      	str	r3, [r2, #80]	; 0x50
 8003b00:	e006      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003b02:	bf00      	nop
 8003b04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b08:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b0c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003b10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b18:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003b1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003b20:	2300      	movs	r3, #0
 8003b22:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003b26:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	d03a      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003b30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b36:	2b30      	cmp	r3, #48	; 0x30
 8003b38:	d01f      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003b3a:	2b30      	cmp	r3, #48	; 0x30
 8003b3c:	d819      	bhi.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003b3e:	2b20      	cmp	r3, #32
 8003b40:	d00c      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003b42:	2b20      	cmp	r3, #32
 8003b44:	d815      	bhi.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d019      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003b4a:	2b10      	cmp	r3, #16
 8003b4c:	d111      	bne.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b4e:	4bae      	ldr	r3, [pc, #696]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b52:	4aad      	ldr	r2, [pc, #692]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003b5a:	e011      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b60:	3308      	adds	r3, #8
 8003b62:	2102      	movs	r1, #2
 8003b64:	4618      	mov	r0, r3
 8003b66:	f001 facf 	bl	8005108 <RCCEx_PLL2_Config>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003b70:	e006      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003b78:	e002      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003b7a:	bf00      	nop
 8003b7c:	e000      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003b7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b80:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d10a      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003b88:	4b9f      	ldr	r3, [pc, #636]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b8c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003b90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b96:	4a9c      	ldr	r2, [pc, #624]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b98:	430b      	orrs	r3, r1
 8003b9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b9c:	e003      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b9e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ba2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bae:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003bb2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003bbc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	d051      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003bc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bd0:	d035      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003bd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bd6:	d82e      	bhi.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003bd8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003bdc:	d031      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003bde:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003be2:	d828      	bhi.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003be4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003be8:	d01a      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003bea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bee:	d822      	bhi.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bf8:	d007      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003bfa:	e01c      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bfc:	4b82      	ldr	r3, [pc, #520]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c00:	4a81      	ldr	r2, [pc, #516]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003c02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c08:	e01c      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c0e:	3308      	adds	r3, #8
 8003c10:	2100      	movs	r1, #0
 8003c12:	4618      	mov	r0, r3
 8003c14:	f001 fa78 	bl	8005108 <RCCEx_PLL2_Config>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c1e:	e011      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c24:	3328      	adds	r3, #40	; 0x28
 8003c26:	2100      	movs	r1, #0
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f001 fb1f 	bl	800526c <RCCEx_PLL3_Config>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c34:	e006      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003c3c:	e002      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003c3e:	bf00      	nop
 8003c40:	e000      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003c42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c44:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10a      	bne.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003c4c:	4b6e      	ldr	r3, [pc, #440]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c50:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003c54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c5a:	4a6b      	ldr	r2, [pc, #428]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003c5c:	430b      	orrs	r3, r1
 8003c5e:	6513      	str	r3, [r2, #80]	; 0x50
 8003c60:	e003      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c62:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c66:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003c6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c72:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003c76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003c80:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003c84:	460b      	mov	r3, r1
 8003c86:	4313      	orrs	r3, r2
 8003c88:	d053      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003c8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c94:	d033      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003c96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c9a:	d82c      	bhi.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003c9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ca0:	d02f      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003ca2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ca6:	d826      	bhi.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003ca8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003cac:	d02b      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003cae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003cb2:	d820      	bhi.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003cb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cb8:	d012      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003cba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cbe:	d81a      	bhi.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d022      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc8:	d115      	bne.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cce:	3308      	adds	r3, #8
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f001 fa18 	bl	8005108 <RCCEx_PLL2_Config>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003cde:	e015      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ce4:	3328      	adds	r3, #40	; 0x28
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f001 fabf 	bl	800526c <RCCEx_PLL3_Config>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003cf4:	e00a      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003cfc:	e006      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003cfe:	bf00      	nop
 8003d00:	e004      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003d02:	bf00      	nop
 8003d04:	e002      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003d06:	bf00      	nop
 8003d08:	e000      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003d0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d0c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10a      	bne.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003d14:	4b3c      	ldr	r3, [pc, #240]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d18:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003d1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d22:	4a39      	ldr	r2, [pc, #228]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d24:	430b      	orrs	r3, r1
 8003d26:	6513      	str	r3, [r2, #80]	; 0x50
 8003d28:	e003      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d2a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d2e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003d32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003d3e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d42:	2300      	movs	r3, #0
 8003d44:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d48:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	d060      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003d52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d5a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003d5e:	d039      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8003d60:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003d64:	d832      	bhi.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003d66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d6a:	d035      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003d6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d70:	d82c      	bhi.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d76:	d031      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d7c:	d826      	bhi.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003d7e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d82:	d02d      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003d84:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d88:	d820      	bhi.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003d8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d8e:	d012      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003d90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d94:	d81a      	bhi.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d024      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003d9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d9e:	d115      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003da0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003da4:	3308      	adds	r3, #8
 8003da6:	2101      	movs	r1, #1
 8003da8:	4618      	mov	r0, r3
 8003daa:	f001 f9ad 	bl	8005108 <RCCEx_PLL2_Config>
 8003dae:	4603      	mov	r3, r0
 8003db0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003db4:	e017      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003db6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dba:	3328      	adds	r3, #40	; 0x28
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f001 fa54 	bl	800526c <RCCEx_PLL3_Config>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003dca:	e00c      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003dd2:	e008      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003dd4:	bf00      	nop
 8003dd6:	e006      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003dd8:	bf00      	nop
 8003dda:	e004      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003ddc:	bf00      	nop
 8003dde:	e002      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003de0:	bf00      	nop
 8003de2:	e000      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003de4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003de6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10e      	bne.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003dee:	4b06      	ldr	r3, [pc, #24]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dfa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003dfe:	4a02      	ldr	r2, [pc, #8]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e00:	430b      	orrs	r3, r1
 8003e02:	6593      	str	r3, [r2, #88]	; 0x58
 8003e04:	e006      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003e06:	bf00      	nop
 8003e08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e0c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e10:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003e20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e24:	2300      	movs	r3, #0
 8003e26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003e2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e2e:	460b      	mov	r3, r1
 8003e30:	4313      	orrs	r3, r2
 8003e32:	d037      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003e34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e3e:	d00e      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003e40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e44:	d816      	bhi.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d018      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003e4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e4e:	d111      	bne.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e50:	4bc4      	ldr	r3, [pc, #784]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e54:	4ac3      	ldr	r2, [pc, #780]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003e5c:	e00f      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e62:	3308      	adds	r3, #8
 8003e64:	2101      	movs	r1, #1
 8003e66:	4618      	mov	r0, r3
 8003e68:	f001 f94e 	bl	8005108 <RCCEx_PLL2_Config>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003e72:	e004      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003e7a:	e000      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003e7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e7e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10a      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e86:	4bb7      	ldr	r3, [pc, #732]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e8a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e94:	4ab3      	ldr	r2, [pc, #716]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e96:	430b      	orrs	r3, r1
 8003e98:	6513      	str	r3, [r2, #80]	; 0x50
 8003e9a:	e003      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e9c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ea0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eac:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003eb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003eba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	d039      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003ec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eca:	2b03      	cmp	r3, #3
 8003ecc:	d81c      	bhi.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003ece:	a201      	add	r2, pc, #4	; (adr r2, 8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed4:	08003f11 	.word	0x08003f11
 8003ed8:	08003ee5 	.word	0x08003ee5
 8003edc:	08003ef3 	.word	0x08003ef3
 8003ee0:	08003f11 	.word	0x08003f11
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ee4:	4b9f      	ldr	r3, [pc, #636]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee8:	4a9e      	ldr	r2, [pc, #632]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003eea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003ef0:	e00f      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ef6:	3308      	adds	r3, #8
 8003ef8:	2102      	movs	r1, #2
 8003efa:	4618      	mov	r0, r3
 8003efc:	f001 f904 	bl	8005108 <RCCEx_PLL2_Config>
 8003f00:	4603      	mov	r3, r0
 8003f02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003f06:	e004      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003f0e:	e000      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003f10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f12:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10a      	bne.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003f1a:	4b92      	ldr	r3, [pc, #584]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f1e:	f023 0103 	bic.w	r1, r3, #3
 8003f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f28:	4a8e      	ldr	r2, [pc, #568]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f2a:	430b      	orrs	r3, r1
 8003f2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f2e:	e003      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f30:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f34:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f40:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003f44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f48:	2300      	movs	r3, #0
 8003f4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f4e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003f52:	460b      	mov	r3, r1
 8003f54:	4313      	orrs	r3, r2
 8003f56:	f000 8099 	beq.w	800408c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f5a:	4b83      	ldr	r3, [pc, #524]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a82      	ldr	r2, [pc, #520]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f66:	f7fd fbb3 	bl	80016d0 <HAL_GetTick>
 8003f6a:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f6e:	e00b      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f70:	f7fd fbae 	bl	80016d0 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b64      	cmp	r3, #100	; 0x64
 8003f7e:	d903      	bls.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003f86:	e005      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f88:	4b77      	ldr	r3, [pc, #476]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d0ed      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003f94:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d173      	bne.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003f9c:	4b71      	ldr	r3, [pc, #452]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fa4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003fa8:	4053      	eors	r3, r2
 8003faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d015      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fb2:	4b6c      	ldr	r3, [pc, #432]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fbe:	4b69      	ldr	r3, [pc, #420]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc2:	4a68      	ldr	r2, [pc, #416]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fca:	4b66      	ldr	r3, [pc, #408]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fce:	4a65      	ldr	r2, [pc, #404]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003fd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fd4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003fd6:	4a63      	ldr	r2, [pc, #396]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fdc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003fde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fe2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fea:	d118      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fec:	f7fd fb70 	bl	80016d0 <HAL_GetTick>
 8003ff0:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ff4:	e00d      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ff6:	f7fd fb6b 	bl	80016d0 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004000:	1ad2      	subs	r2, r2, r3
 8004002:	f241 3388 	movw	r3, #5000	; 0x1388
 8004006:	429a      	cmp	r2, r3
 8004008:	d903      	bls.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8004010:	e005      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004012:	4b54      	ldr	r3, [pc, #336]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0eb      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800401e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004022:	2b00      	cmp	r3, #0
 8004024:	d129      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004026:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800402a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800402e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004032:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004036:	d10e      	bne.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004038:	4b4a      	ldr	r3, [pc, #296]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004040:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004044:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004048:	091a      	lsrs	r2, r3, #4
 800404a:	4b48      	ldr	r3, [pc, #288]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800404c:	4013      	ands	r3, r2
 800404e:	4a45      	ldr	r2, [pc, #276]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004050:	430b      	orrs	r3, r1
 8004052:	6113      	str	r3, [r2, #16]
 8004054:	e005      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004056:	4b43      	ldr	r3, [pc, #268]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	4a42      	ldr	r2, [pc, #264]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800405c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004060:	6113      	str	r3, [r2, #16]
 8004062:	4b40      	ldr	r3, [pc, #256]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004064:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004066:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800406a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800406e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004072:	4a3c      	ldr	r2, [pc, #240]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004074:	430b      	orrs	r3, r1
 8004076:	6713      	str	r3, [r2, #112]	; 0x70
 8004078:	e008      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800407a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800407e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8004082:	e003      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004084:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004088:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800408c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004094:	f002 0301 	and.w	r3, r2, #1
 8004098:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800409c:	2300      	movs	r3, #0
 800409e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80040a2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80040a6:	460b      	mov	r3, r1
 80040a8:	4313      	orrs	r3, r2
 80040aa:	f000 8090 	beq.w	80041ce <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80040ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040b6:	2b28      	cmp	r3, #40	; 0x28
 80040b8:	d870      	bhi.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80040ba:	a201      	add	r2, pc, #4	; (adr r2, 80040c0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80040bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c0:	080041a5 	.word	0x080041a5
 80040c4:	0800419d 	.word	0x0800419d
 80040c8:	0800419d 	.word	0x0800419d
 80040cc:	0800419d 	.word	0x0800419d
 80040d0:	0800419d 	.word	0x0800419d
 80040d4:	0800419d 	.word	0x0800419d
 80040d8:	0800419d 	.word	0x0800419d
 80040dc:	0800419d 	.word	0x0800419d
 80040e0:	08004171 	.word	0x08004171
 80040e4:	0800419d 	.word	0x0800419d
 80040e8:	0800419d 	.word	0x0800419d
 80040ec:	0800419d 	.word	0x0800419d
 80040f0:	0800419d 	.word	0x0800419d
 80040f4:	0800419d 	.word	0x0800419d
 80040f8:	0800419d 	.word	0x0800419d
 80040fc:	0800419d 	.word	0x0800419d
 8004100:	08004187 	.word	0x08004187
 8004104:	0800419d 	.word	0x0800419d
 8004108:	0800419d 	.word	0x0800419d
 800410c:	0800419d 	.word	0x0800419d
 8004110:	0800419d 	.word	0x0800419d
 8004114:	0800419d 	.word	0x0800419d
 8004118:	0800419d 	.word	0x0800419d
 800411c:	0800419d 	.word	0x0800419d
 8004120:	080041a5 	.word	0x080041a5
 8004124:	0800419d 	.word	0x0800419d
 8004128:	0800419d 	.word	0x0800419d
 800412c:	0800419d 	.word	0x0800419d
 8004130:	0800419d 	.word	0x0800419d
 8004134:	0800419d 	.word	0x0800419d
 8004138:	0800419d 	.word	0x0800419d
 800413c:	0800419d 	.word	0x0800419d
 8004140:	080041a5 	.word	0x080041a5
 8004144:	0800419d 	.word	0x0800419d
 8004148:	0800419d 	.word	0x0800419d
 800414c:	0800419d 	.word	0x0800419d
 8004150:	0800419d 	.word	0x0800419d
 8004154:	0800419d 	.word	0x0800419d
 8004158:	0800419d 	.word	0x0800419d
 800415c:	0800419d 	.word	0x0800419d
 8004160:	080041a5 	.word	0x080041a5
 8004164:	58024400 	.word	0x58024400
 8004168:	58024800 	.word	0x58024800
 800416c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004170:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004174:	3308      	adds	r3, #8
 8004176:	2101      	movs	r1, #1
 8004178:	4618      	mov	r0, r3
 800417a:	f000 ffc5 	bl	8005108 <RCCEx_PLL2_Config>
 800417e:	4603      	mov	r3, r0
 8004180:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004184:	e00f      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004186:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800418a:	3328      	adds	r3, #40	; 0x28
 800418c:	2101      	movs	r1, #1
 800418e:	4618      	mov	r0, r3
 8004190:	f001 f86c 	bl	800526c <RCCEx_PLL3_Config>
 8004194:	4603      	mov	r3, r0
 8004196:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800419a:	e004      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80041a2:	e000      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80041a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041a6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10b      	bne.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80041ae:	4bc0      	ldr	r3, [pc, #768]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80041b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80041b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041be:	4abc      	ldr	r2, [pc, #752]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80041c0:	430b      	orrs	r3, r1
 80041c2:	6553      	str	r3, [r2, #84]	; 0x54
 80041c4:	e003      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041ca:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80041ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d6:	f002 0302 	and.w	r3, r2, #2
 80041da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041de:	2300      	movs	r3, #0
 80041e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80041e4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80041e8:	460b      	mov	r3, r1
 80041ea:	4313      	orrs	r3, r2
 80041ec:	d043      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80041ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041f6:	2b05      	cmp	r3, #5
 80041f8:	d824      	bhi.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80041fa:	a201      	add	r2, pc, #4	; (adr r2, 8004200 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80041fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004200:	0800424d 	.word	0x0800424d
 8004204:	08004219 	.word	0x08004219
 8004208:	0800422f 	.word	0x0800422f
 800420c:	0800424d 	.word	0x0800424d
 8004210:	0800424d 	.word	0x0800424d
 8004214:	0800424d 	.word	0x0800424d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004218:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800421c:	3308      	adds	r3, #8
 800421e:	2101      	movs	r1, #1
 8004220:	4618      	mov	r0, r3
 8004222:	f000 ff71 	bl	8005108 <RCCEx_PLL2_Config>
 8004226:	4603      	mov	r3, r0
 8004228:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800422c:	e00f      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800422e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004232:	3328      	adds	r3, #40	; 0x28
 8004234:	2101      	movs	r1, #1
 8004236:	4618      	mov	r0, r3
 8004238:	f001 f818 	bl	800526c <RCCEx_PLL3_Config>
 800423c:	4603      	mov	r3, r0
 800423e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004242:	e004      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800424a:	e000      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800424c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800424e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10b      	bne.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004256:	4b96      	ldr	r3, [pc, #600]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425a:	f023 0107 	bic.w	r1, r3, #7
 800425e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004262:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004266:	4a92      	ldr	r2, [pc, #584]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004268:	430b      	orrs	r3, r1
 800426a:	6553      	str	r3, [r2, #84]	; 0x54
 800426c:	e003      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800426e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004272:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004276:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800427a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427e:	f002 0304 	and.w	r3, r2, #4
 8004282:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004286:	2300      	movs	r3, #0
 8004288:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800428c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004290:	460b      	mov	r3, r1
 8004292:	4313      	orrs	r3, r2
 8004294:	d043      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004296:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800429a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800429e:	2b05      	cmp	r3, #5
 80042a0:	d824      	bhi.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80042a2:	a201      	add	r2, pc, #4	; (adr r2, 80042a8 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80042a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a8:	080042f5 	.word	0x080042f5
 80042ac:	080042c1 	.word	0x080042c1
 80042b0:	080042d7 	.word	0x080042d7
 80042b4:	080042f5 	.word	0x080042f5
 80042b8:	080042f5 	.word	0x080042f5
 80042bc:	080042f5 	.word	0x080042f5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042c4:	3308      	adds	r3, #8
 80042c6:	2101      	movs	r1, #1
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 ff1d 	bl	8005108 <RCCEx_PLL2_Config>
 80042ce:	4603      	mov	r3, r0
 80042d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80042d4:	e00f      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042da:	3328      	adds	r3, #40	; 0x28
 80042dc:	2101      	movs	r1, #1
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 ffc4 	bl	800526c <RCCEx_PLL3_Config>
 80042e4:	4603      	mov	r3, r0
 80042e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80042ea:	e004      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80042f2:	e000      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80042f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10b      	bne.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042fe:	4b6c      	ldr	r3, [pc, #432]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004302:	f023 0107 	bic.w	r1, r3, #7
 8004306:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800430a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800430e:	4a68      	ldr	r2, [pc, #416]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004310:	430b      	orrs	r3, r1
 8004312:	6593      	str	r3, [r2, #88]	; 0x58
 8004314:	e003      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004316:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800431a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800431e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004326:	f002 0320 	and.w	r3, r2, #32
 800432a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800432e:	2300      	movs	r3, #0
 8004330:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004334:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004338:	460b      	mov	r3, r1
 800433a:	4313      	orrs	r3, r2
 800433c:	d055      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800433e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004342:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004346:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800434a:	d033      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800434c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004350:	d82c      	bhi.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004356:	d02f      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800435c:	d826      	bhi.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800435e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004362:	d02b      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004364:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004368:	d820      	bhi.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800436a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800436e:	d012      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004374:	d81a      	bhi.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004376:	2b00      	cmp	r3, #0
 8004378:	d022      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800437a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800437e:	d115      	bne.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004380:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004384:	3308      	adds	r3, #8
 8004386:	2100      	movs	r1, #0
 8004388:	4618      	mov	r0, r3
 800438a:	f000 febd 	bl	8005108 <RCCEx_PLL2_Config>
 800438e:	4603      	mov	r3, r0
 8004390:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004394:	e015      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004396:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800439a:	3328      	adds	r3, #40	; 0x28
 800439c:	2102      	movs	r1, #2
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 ff64 	bl	800526c <RCCEx_PLL3_Config>
 80043a4:	4603      	mov	r3, r0
 80043a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80043aa:	e00a      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80043b2:	e006      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80043b4:	bf00      	nop
 80043b6:	e004      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80043b8:	bf00      	nop
 80043ba:	e002      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80043bc:	bf00      	nop
 80043be:	e000      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80043c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10b      	bne.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043ca:	4b39      	ldr	r3, [pc, #228]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80043cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ce:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80043d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043da:	4a35      	ldr	r2, [pc, #212]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80043dc:	430b      	orrs	r3, r1
 80043de:	6553      	str	r3, [r2, #84]	; 0x54
 80043e0:	e003      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80043ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80043f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80043fa:	2300      	movs	r3, #0
 80043fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004400:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004404:	460b      	mov	r3, r1
 8004406:	4313      	orrs	r3, r2
 8004408:	d058      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800440a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800440e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004412:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004416:	d033      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004418:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800441c:	d82c      	bhi.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800441e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004422:	d02f      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004428:	d826      	bhi.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800442a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800442e:	d02b      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004430:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004434:	d820      	bhi.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004436:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800443a:	d012      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800443c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004440:	d81a      	bhi.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004442:	2b00      	cmp	r3, #0
 8004444:	d022      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8004446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800444a:	d115      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800444c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004450:	3308      	adds	r3, #8
 8004452:	2100      	movs	r1, #0
 8004454:	4618      	mov	r0, r3
 8004456:	f000 fe57 	bl	8005108 <RCCEx_PLL2_Config>
 800445a:	4603      	mov	r3, r0
 800445c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004460:	e015      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004462:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004466:	3328      	adds	r3, #40	; 0x28
 8004468:	2102      	movs	r1, #2
 800446a:	4618      	mov	r0, r3
 800446c:	f000 fefe 	bl	800526c <RCCEx_PLL3_Config>
 8004470:	4603      	mov	r3, r0
 8004472:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004476:	e00a      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800447e:	e006      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004480:	bf00      	nop
 8004482:	e004      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004484:	bf00      	nop
 8004486:	e002      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004488:	bf00      	nop
 800448a:	e000      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800448c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800448e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10e      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004496:	4b06      	ldr	r3, [pc, #24]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800449e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80044a6:	4a02      	ldr	r2, [pc, #8]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80044a8:	430b      	orrs	r3, r1
 80044aa:	6593      	str	r3, [r2, #88]	; 0x58
 80044ac:	e006      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80044ae:	bf00      	nop
 80044b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044b8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80044bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80044c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80044cc:	2300      	movs	r3, #0
 80044ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80044d2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80044d6:	460b      	mov	r3, r1
 80044d8:	4313      	orrs	r3, r2
 80044da:	d055      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80044dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044e4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80044e8:	d033      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80044ea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80044ee:	d82c      	bhi.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80044f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044f4:	d02f      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80044f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044fa:	d826      	bhi.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80044fc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004500:	d02b      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004502:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004506:	d820      	bhi.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004508:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800450c:	d012      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800450e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004512:	d81a      	bhi.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004514:	2b00      	cmp	r3, #0
 8004516:	d022      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004518:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800451c:	d115      	bne.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800451e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004522:	3308      	adds	r3, #8
 8004524:	2100      	movs	r1, #0
 8004526:	4618      	mov	r0, r3
 8004528:	f000 fdee 	bl	8005108 <RCCEx_PLL2_Config>
 800452c:	4603      	mov	r3, r0
 800452e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004532:	e015      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004534:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004538:	3328      	adds	r3, #40	; 0x28
 800453a:	2102      	movs	r1, #2
 800453c:	4618      	mov	r0, r3
 800453e:	f000 fe95 	bl	800526c <RCCEx_PLL3_Config>
 8004542:	4603      	mov	r3, r0
 8004544:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004548:	e00a      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004550:	e006      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004552:	bf00      	nop
 8004554:	e004      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004556:	bf00      	nop
 8004558:	e002      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800455a:	bf00      	nop
 800455c:	e000      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800455e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004560:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10b      	bne.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004568:	4ba1      	ldr	r3, [pc, #644]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800456a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800456c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004570:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004574:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004578:	4a9d      	ldr	r2, [pc, #628]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800457a:	430b      	orrs	r3, r1
 800457c:	6593      	str	r3, [r2, #88]	; 0x58
 800457e:	e003      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004580:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004584:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004588:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800458c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004590:	f002 0308 	and.w	r3, r2, #8
 8004594:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004598:	2300      	movs	r3, #0
 800459a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800459e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80045a2:	460b      	mov	r3, r1
 80045a4:	4313      	orrs	r3, r2
 80045a6:	d01e      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80045a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045b4:	d10c      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80045b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045ba:	3328      	adds	r3, #40	; 0x28
 80045bc:	2102      	movs	r1, #2
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 fe54 	bl	800526c <RCCEx_PLL3_Config>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d002      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80045d0:	4b87      	ldr	r3, [pc, #540]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80045d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045e0:	4a83      	ldr	r2, [pc, #524]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80045e2:	430b      	orrs	r3, r1
 80045e4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80045e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ee:	f002 0310 	and.w	r3, r2, #16
 80045f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045f6:	2300      	movs	r3, #0
 80045f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80045fc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004600:	460b      	mov	r3, r1
 8004602:	4313      	orrs	r3, r2
 8004604:	d01e      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004606:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800460a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800460e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004612:	d10c      	bne.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004614:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004618:	3328      	adds	r3, #40	; 0x28
 800461a:	2102      	movs	r1, #2
 800461c:	4618      	mov	r0, r3
 800461e:	f000 fe25 	bl	800526c <RCCEx_PLL3_Config>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d002      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800462e:	4b70      	ldr	r3, [pc, #448]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004632:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004636:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800463a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800463e:	4a6c      	ldr	r2, [pc, #432]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004640:	430b      	orrs	r3, r1
 8004642:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004644:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004650:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004654:	2300      	movs	r3, #0
 8004656:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800465a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800465e:	460b      	mov	r3, r1
 8004660:	4313      	orrs	r3, r2
 8004662:	d03e      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004664:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004668:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800466c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004670:	d022      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004672:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004676:	d81b      	bhi.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800467c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004680:	d00b      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004682:	e015      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004684:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004688:	3308      	adds	r3, #8
 800468a:	2100      	movs	r1, #0
 800468c:	4618      	mov	r0, r3
 800468e:	f000 fd3b 	bl	8005108 <RCCEx_PLL2_Config>
 8004692:	4603      	mov	r3, r0
 8004694:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004698:	e00f      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800469a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800469e:	3328      	adds	r3, #40	; 0x28
 80046a0:	2102      	movs	r1, #2
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 fde2 	bl	800526c <RCCEx_PLL3_Config>
 80046a8:	4603      	mov	r3, r0
 80046aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80046ae:	e004      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80046b6:	e000      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80046b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10b      	bne.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046c2:	4b4b      	ldr	r3, [pc, #300]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80046c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80046ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80046d2:	4a47      	ldr	r2, [pc, #284]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80046d4:	430b      	orrs	r3, r1
 80046d6:	6593      	str	r3, [r2, #88]	; 0x58
 80046d8:	e003      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046da:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046de:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80046e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ea:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80046ee:	67bb      	str	r3, [r7, #120]	; 0x78
 80046f0:	2300      	movs	r3, #0
 80046f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80046f4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80046f8:	460b      	mov	r3, r1
 80046fa:	4313      	orrs	r3, r2
 80046fc:	d03b      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80046fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004706:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800470a:	d01f      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800470c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004710:	d818      	bhi.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004712:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004716:	d003      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004718:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800471c:	d007      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800471e:	e011      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004720:	4b33      	ldr	r3, [pc, #204]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004724:	4a32      	ldr	r2, [pc, #200]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004726:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800472a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800472c:	e00f      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800472e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004732:	3328      	adds	r3, #40	; 0x28
 8004734:	2101      	movs	r1, #1
 8004736:	4618      	mov	r0, r3
 8004738:	f000 fd98 	bl	800526c <RCCEx_PLL3_Config>
 800473c:	4603      	mov	r3, r0
 800473e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004742:	e004      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800474a:	e000      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800474c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800474e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10b      	bne.n	800476e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004756:	4b26      	ldr	r3, [pc, #152]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800475e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004766:	4a22      	ldr	r2, [pc, #136]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004768:	430b      	orrs	r3, r1
 800476a:	6553      	str	r3, [r2, #84]	; 0x54
 800476c:	e003      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800476e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004772:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004776:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800477a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004782:	673b      	str	r3, [r7, #112]	; 0x70
 8004784:	2300      	movs	r3, #0
 8004786:	677b      	str	r3, [r7, #116]	; 0x74
 8004788:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800478c:	460b      	mov	r3, r1
 800478e:	4313      	orrs	r3, r2
 8004790:	d034      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004792:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800479c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047a0:	d007      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80047a2:	e011      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047a4:	4b12      	ldr	r3, [pc, #72]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80047a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a8:	4a11      	ldr	r2, [pc, #68]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80047aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80047b0:	e00e      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047b6:	3308      	adds	r3, #8
 80047b8:	2102      	movs	r1, #2
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 fca4 	bl	8005108 <RCCEx_PLL2_Config>
 80047c0:	4603      	mov	r3, r0
 80047c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80047c6:	e003      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80047ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10d      	bne.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80047d8:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80047da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e6:	4a02      	ldr	r2, [pc, #8]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80047e8:	430b      	orrs	r3, r1
 80047ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047ec:	e006      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80047ee:	bf00      	nop
 80047f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047f8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80047fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004804:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004808:	66bb      	str	r3, [r7, #104]	; 0x68
 800480a:	2300      	movs	r3, #0
 800480c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800480e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004812:	460b      	mov	r3, r1
 8004814:	4313      	orrs	r3, r2
 8004816:	d00c      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004818:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800481c:	3328      	adds	r3, #40	; 0x28
 800481e:	2102      	movs	r1, #2
 8004820:	4618      	mov	r0, r3
 8004822:	f000 fd23 	bl	800526c <RCCEx_PLL3_Config>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d002      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004832:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800483e:	663b      	str	r3, [r7, #96]	; 0x60
 8004840:	2300      	movs	r3, #0
 8004842:	667b      	str	r3, [r7, #100]	; 0x64
 8004844:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004848:	460b      	mov	r3, r1
 800484a:	4313      	orrs	r3, r2
 800484c:	d038      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800484e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004856:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800485a:	d018      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800485c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004860:	d811      	bhi.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004862:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004866:	d014      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800486c:	d80b      	bhi.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800486e:	2b00      	cmp	r3, #0
 8004870:	d011      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004876:	d106      	bne.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004878:	4bc3      	ldr	r3, [pc, #780]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800487a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487c:	4ac2      	ldr	r2, [pc, #776]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800487e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004882:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004884:	e008      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800488c:	e004      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800488e:	bf00      	nop
 8004890:	e002      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004892:	bf00      	nop
 8004894:	e000      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004896:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004898:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10b      	bne.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048a0:	4bb9      	ldr	r3, [pc, #740]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80048a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80048a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b0:	4ab5      	ldr	r2, [pc, #724]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80048b2:	430b      	orrs	r3, r1
 80048b4:	6553      	str	r3, [r2, #84]	; 0x54
 80048b6:	e003      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048bc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80048cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80048ce:	2300      	movs	r3, #0
 80048d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048d2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80048d6:	460b      	mov	r3, r1
 80048d8:	4313      	orrs	r3, r2
 80048da:	d009      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048dc:	4baa      	ldr	r3, [pc, #680]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80048de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80048e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048ea:	4aa7      	ldr	r2, [pc, #668]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80048ec:	430b      	orrs	r3, r1
 80048ee:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f8:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80048fc:	653b      	str	r3, [r7, #80]	; 0x50
 80048fe:	2300      	movs	r3, #0
 8004900:	657b      	str	r3, [r7, #84]	; 0x54
 8004902:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004906:	460b      	mov	r3, r1
 8004908:	4313      	orrs	r3, r2
 800490a:	d009      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800490c:	4b9e      	ldr	r3, [pc, #632]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800490e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004910:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004914:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491a:	4a9b      	ldr	r2, [pc, #620]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800491c:	430b      	orrs	r3, r1
 800491e:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004920:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004928:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800492c:	64bb      	str	r3, [r7, #72]	; 0x48
 800492e:	2300      	movs	r3, #0
 8004930:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004932:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004936:	460b      	mov	r3, r1
 8004938:	4313      	orrs	r3, r2
 800493a:	d009      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800493c:	4b92      	ldr	r3, [pc, #584]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800493e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004940:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8004944:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800494a:	4a8f      	ldr	r2, [pc, #572]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800494c:	430b      	orrs	r3, r1
 800494e:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004950:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004958:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800495c:	643b      	str	r3, [r7, #64]	; 0x40
 800495e:	2300      	movs	r3, #0
 8004960:	647b      	str	r3, [r7, #68]	; 0x44
 8004962:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004966:	460b      	mov	r3, r1
 8004968:	4313      	orrs	r3, r2
 800496a:	d00e      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800496c:	4b86      	ldr	r3, [pc, #536]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	4a85      	ldr	r2, [pc, #532]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004972:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004976:	6113      	str	r3, [r2, #16]
 8004978:	4b83      	ldr	r3, [pc, #524]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800497a:	6919      	ldr	r1, [r3, #16]
 800497c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004980:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004984:	4a80      	ldr	r2, [pc, #512]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004986:	430b      	orrs	r3, r1
 8004988:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800498a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800498e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004992:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004996:	63bb      	str	r3, [r7, #56]	; 0x38
 8004998:	2300      	movs	r3, #0
 800499a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800499c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80049a0:	460b      	mov	r3, r1
 80049a2:	4313      	orrs	r3, r2
 80049a4:	d009      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80049a6:	4b78      	ldr	r3, [pc, #480]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80049a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049aa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80049ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b4:	4a74      	ldr	r2, [pc, #464]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80049b6:	430b      	orrs	r3, r1
 80049b8:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80049c6:	633b      	str	r3, [r7, #48]	; 0x30
 80049c8:	2300      	movs	r3, #0
 80049ca:	637b      	str	r3, [r7, #52]	; 0x34
 80049cc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80049d0:	460b      	mov	r3, r1
 80049d2:	4313      	orrs	r3, r2
 80049d4:	d00a      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80049d6:	4b6c      	ldr	r3, [pc, #432]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80049d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049da:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80049de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049e6:	4a68      	ldr	r2, [pc, #416]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80049e8:	430b      	orrs	r3, r1
 80049ea:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80049ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f4:	2100      	movs	r1, #0
 80049f6:	62b9      	str	r1, [r7, #40]	; 0x28
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049fe:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004a02:	460b      	mov	r3, r1
 8004a04:	4313      	orrs	r3, r2
 8004a06:	d011      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a0c:	3308      	adds	r3, #8
 8004a0e:	2100      	movs	r1, #0
 8004a10:	4618      	mov	r0, r3
 8004a12:	f000 fb79 	bl	8005108 <RCCEx_PLL2_Config>
 8004a16:	4603      	mov	r3, r0
 8004a18:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004a1c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d003      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a24:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a28:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a34:	2100      	movs	r1, #0
 8004a36:	6239      	str	r1, [r7, #32]
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a3e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004a42:	460b      	mov	r3, r1
 8004a44:	4313      	orrs	r3, r2
 8004a46:	d011      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a4c:	3308      	adds	r3, #8
 8004a4e:	2101      	movs	r1, #1
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 fb59 	bl	8005108 <RCCEx_PLL2_Config>
 8004a56:	4603      	mov	r3, r0
 8004a58:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004a5c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a64:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a68:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004a6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a74:	2100      	movs	r1, #0
 8004a76:	61b9      	str	r1, [r7, #24]
 8004a78:	f003 0304 	and.w	r3, r3, #4
 8004a7c:	61fb      	str	r3, [r7, #28]
 8004a7e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004a82:	460b      	mov	r3, r1
 8004a84:	4313      	orrs	r3, r2
 8004a86:	d011      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a8c:	3308      	adds	r3, #8
 8004a8e:	2102      	movs	r1, #2
 8004a90:	4618      	mov	r0, r3
 8004a92:	f000 fb39 	bl	8005108 <RCCEx_PLL2_Config>
 8004a96:	4603      	mov	r3, r0
 8004a98:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004a9c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d003      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004aa8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004aac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	6139      	str	r1, [r7, #16]
 8004ab8:	f003 0308 	and.w	r3, r3, #8
 8004abc:	617b      	str	r3, [r7, #20]
 8004abe:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	d011      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004acc:	3328      	adds	r3, #40	; 0x28
 8004ace:	2100      	movs	r1, #0
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f000 fbcb 	bl	800526c <RCCEx_PLL3_Config>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8004adc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d003      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ae8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004aec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af4:	2100      	movs	r1, #0
 8004af6:	60b9      	str	r1, [r7, #8]
 8004af8:	f003 0310 	and.w	r3, r3, #16
 8004afc:	60fb      	str	r3, [r7, #12]
 8004afe:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004b02:	460b      	mov	r3, r1
 8004b04:	4313      	orrs	r3, r2
 8004b06:	d011      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b0c:	3328      	adds	r3, #40	; 0x28
 8004b0e:	2101      	movs	r1, #1
 8004b10:	4618      	mov	r0, r3
 8004b12:	f000 fbab 	bl	800526c <RCCEx_PLL3_Config>
 8004b16:	4603      	mov	r3, r0
 8004b18:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004b1c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d003      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b24:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b28:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004b2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b34:	2100      	movs	r1, #0
 8004b36:	6039      	str	r1, [r7, #0]
 8004b38:	f003 0320 	and.w	r3, r3, #32
 8004b3c:	607b      	str	r3, [r7, #4]
 8004b3e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004b42:	460b      	mov	r3, r1
 8004b44:	4313      	orrs	r3, r2
 8004b46:	d011      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b4c:	3328      	adds	r3, #40	; 0x28
 8004b4e:	2102      	movs	r1, #2
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 fb8b 	bl	800526c <RCCEx_PLL3_Config>
 8004b56:	4603      	mov	r3, r0
 8004b58:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004b5c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d003      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b64:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b68:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8004b6c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d101      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004b74:	2300      	movs	r3, #0
 8004b76:	e000      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8004b80:	46bd      	mov	sp, r7
 8004b82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b86:	bf00      	nop
 8004b88:	58024400 	.word	0x58024400

08004b8c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004b90:	f7fe fde2 	bl	8003758 <HAL_RCC_GetHCLKFreq>
 8004b94:	4602      	mov	r2, r0
 8004b96:	4b06      	ldr	r3, [pc, #24]	; (8004bb0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	091b      	lsrs	r3, r3, #4
 8004b9c:	f003 0307 	and.w	r3, r3, #7
 8004ba0:	4904      	ldr	r1, [pc, #16]	; (8004bb4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004ba2:	5ccb      	ldrb	r3, [r1, r3]
 8004ba4:	f003 031f 	and.w	r3, r3, #31
 8004ba8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	58024400 	.word	0x58024400
 8004bb4:	08009780 	.word	0x08009780

08004bb8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b089      	sub	sp, #36	; 0x24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004bc0:	4ba1      	ldr	r3, [pc, #644]	; (8004e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc4:	f003 0303 	and.w	r3, r3, #3
 8004bc8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004bca:	4b9f      	ldr	r3, [pc, #636]	; (8004e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bce:	0b1b      	lsrs	r3, r3, #12
 8004bd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bd4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004bd6:	4b9c      	ldr	r3, [pc, #624]	; (8004e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bda:	091b      	lsrs	r3, r3, #4
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004be2:	4b99      	ldr	r3, [pc, #612]	; (8004e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be6:	08db      	lsrs	r3, r3, #3
 8004be8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	fb02 f303 	mul.w	r3, r2, r3
 8004bf2:	ee07 3a90 	vmov	s15, r3
 8004bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bfa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 8111 	beq.w	8004e28 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	f000 8083 	beq.w	8004d14 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	f200 80a1 	bhi.w	8004d58 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d056      	beq.n	8004cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004c22:	e099      	b.n	8004d58 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c24:	4b88      	ldr	r3, [pc, #544]	; (8004e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0320 	and.w	r3, r3, #32
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d02d      	beq.n	8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c30:	4b85      	ldr	r3, [pc, #532]	; (8004e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	08db      	lsrs	r3, r3, #3
 8004c36:	f003 0303 	and.w	r3, r3, #3
 8004c3a:	4a84      	ldr	r2, [pc, #528]	; (8004e4c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c40:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	ee07 3a90 	vmov	s15, r3
 8004c48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	ee07 3a90 	vmov	s15, r3
 8004c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c5a:	4b7b      	ldr	r3, [pc, #492]	; (8004e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c62:	ee07 3a90 	vmov	s15, r3
 8004c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c6e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004e50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c86:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004c8a:	e087      	b.n	8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	ee07 3a90 	vmov	s15, r3
 8004c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c96:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004e54 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c9e:	4b6a      	ldr	r3, [pc, #424]	; (8004e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ca6:	ee07 3a90 	vmov	s15, r3
 8004caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cae:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cb2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004e50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cce:	e065      	b.n	8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	ee07 3a90 	vmov	s15, r3
 8004cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cda:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004e58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ce2:	4b59      	ldr	r3, [pc, #356]	; (8004e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cea:	ee07 3a90 	vmov	s15, r3
 8004cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cf6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004e50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d12:	e043      	b.n	8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	ee07 3a90 	vmov	s15, r3
 8004d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d1e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004e5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d26:	4b48      	ldr	r3, [pc, #288]	; (8004e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d2e:	ee07 3a90 	vmov	s15, r3
 8004d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d36:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d3a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004e50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d56:	e021      	b.n	8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	ee07 3a90 	vmov	s15, r3
 8004d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d62:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004e58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d6a:	4b37      	ldr	r3, [pc, #220]	; (8004e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d72:	ee07 3a90 	vmov	s15, r3
 8004d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d7e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004e50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d9a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004d9c:	4b2a      	ldr	r3, [pc, #168]	; (8004e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da0:	0a5b      	lsrs	r3, r3, #9
 8004da2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004da6:	ee07 3a90 	vmov	s15, r3
 8004daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004db2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004db6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dc2:	ee17 2a90 	vmov	r2, s15
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004dca:	4b1f      	ldr	r3, [pc, #124]	; (8004e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dce:	0c1b      	lsrs	r3, r3, #16
 8004dd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dd4:	ee07 3a90 	vmov	s15, r3
 8004dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ddc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004de0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004de4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004de8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004df0:	ee17 2a90 	vmov	r2, s15
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004df8:	4b13      	ldr	r3, [pc, #76]	; (8004e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfc:	0e1b      	lsrs	r3, r3, #24
 8004dfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e02:	ee07 3a90 	vmov	s15, r3
 8004e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e12:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e1e:	ee17 2a90 	vmov	r2, s15
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004e26:	e008      	b.n	8004e3a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	609a      	str	r2, [r3, #8]
}
 8004e3a:	bf00      	nop
 8004e3c:	3724      	adds	r7, #36	; 0x24
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	58024400 	.word	0x58024400
 8004e4c:	03d09000 	.word	0x03d09000
 8004e50:	46000000 	.word	0x46000000
 8004e54:	4c742400 	.word	0x4c742400
 8004e58:	4a742400 	.word	0x4a742400
 8004e5c:	4af42400 	.word	0x4af42400

08004e60 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b089      	sub	sp, #36	; 0x24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e68:	4ba1      	ldr	r3, [pc, #644]	; (80050f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6c:	f003 0303 	and.w	r3, r3, #3
 8004e70:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004e72:	4b9f      	ldr	r3, [pc, #636]	; (80050f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e76:	0d1b      	lsrs	r3, r3, #20
 8004e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e7c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004e7e:	4b9c      	ldr	r3, [pc, #624]	; (80050f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e82:	0a1b      	lsrs	r3, r3, #8
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004e8a:	4b99      	ldr	r3, [pc, #612]	; (80050f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8e:	08db      	lsrs	r3, r3, #3
 8004e90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	fb02 f303 	mul.w	r3, r2, r3
 8004e9a:	ee07 3a90 	vmov	s15, r3
 8004e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ea2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 8111 	beq.w	80050d0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	f000 8083 	beq.w	8004fbc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	f200 80a1 	bhi.w	8005000 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d003      	beq.n	8004ecc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d056      	beq.n	8004f78 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004eca:	e099      	b.n	8005000 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ecc:	4b88      	ldr	r3, [pc, #544]	; (80050f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0320 	and.w	r3, r3, #32
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d02d      	beq.n	8004f34 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ed8:	4b85      	ldr	r3, [pc, #532]	; (80050f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	08db      	lsrs	r3, r3, #3
 8004ede:	f003 0303 	and.w	r3, r3, #3
 8004ee2:	4a84      	ldr	r2, [pc, #528]	; (80050f4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ee8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	ee07 3a90 	vmov	s15, r3
 8004ef0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	ee07 3a90 	vmov	s15, r3
 8004efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f02:	4b7b      	ldr	r3, [pc, #492]	; (80050f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f0a:	ee07 3a90 	vmov	s15, r3
 8004f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f12:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f16:	eddf 5a78 	vldr	s11, [pc, #480]	; 80050f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f2e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004f32:	e087      	b.n	8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	ee07 3a90 	vmov	s15, r3
 8004f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f3e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80050fc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f46:	4b6a      	ldr	r3, [pc, #424]	; (80050f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f4e:	ee07 3a90 	vmov	s15, r3
 8004f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f56:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f5a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80050f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f76:	e065      	b.n	8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	ee07 3a90 	vmov	s15, r3
 8004f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f82:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005100 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f8a:	4b59      	ldr	r3, [pc, #356]	; (80050f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f92:	ee07 3a90 	vmov	s15, r3
 8004f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f9e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80050f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004faa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fba:	e043      	b.n	8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	ee07 3a90 	vmov	s15, r3
 8004fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fc6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005104 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fce:	4b48      	ldr	r3, [pc, #288]	; (80050f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fd6:	ee07 3a90 	vmov	s15, r3
 8004fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fde:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fe2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80050f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ffa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ffe:	e021      	b.n	8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	ee07 3a90 	vmov	s15, r3
 8005006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800500a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005100 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800500e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005012:	4b37      	ldr	r3, [pc, #220]	; (80050f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800501a:	ee07 3a90 	vmov	s15, r3
 800501e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005022:	ed97 6a03 	vldr	s12, [r7, #12]
 8005026:	eddf 5a34 	vldr	s11, [pc, #208]	; 80050f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800502a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800502e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005032:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800503a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800503e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005042:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005044:	4b2a      	ldr	r3, [pc, #168]	; (80050f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005048:	0a5b      	lsrs	r3, r3, #9
 800504a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800504e:	ee07 3a90 	vmov	s15, r3
 8005052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005056:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800505a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800505e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005066:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800506a:	ee17 2a90 	vmov	r2, s15
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005072:	4b1f      	ldr	r3, [pc, #124]	; (80050f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	0c1b      	lsrs	r3, r3, #16
 8005078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800507c:	ee07 3a90 	vmov	s15, r3
 8005080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005084:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005088:	ee37 7a87 	vadd.f32	s14, s15, s14
 800508c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005090:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005094:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005098:	ee17 2a90 	vmov	r2, s15
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80050a0:	4b13      	ldr	r3, [pc, #76]	; (80050f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a4:	0e1b      	lsrs	r3, r3, #24
 80050a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050aa:	ee07 3a90 	vmov	s15, r3
 80050ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80050be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050c6:	ee17 2a90 	vmov	r2, s15
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80050ce:	e008      	b.n	80050e2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	609a      	str	r2, [r3, #8]
}
 80050e2:	bf00      	nop
 80050e4:	3724      	adds	r7, #36	; 0x24
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	58024400 	.word	0x58024400
 80050f4:	03d09000 	.word	0x03d09000
 80050f8:	46000000 	.word	0x46000000
 80050fc:	4c742400 	.word	0x4c742400
 8005100:	4a742400 	.word	0x4a742400
 8005104:	4af42400 	.word	0x4af42400

08005108 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005112:	2300      	movs	r3, #0
 8005114:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005116:	4b53      	ldr	r3, [pc, #332]	; (8005264 <RCCEx_PLL2_Config+0x15c>)
 8005118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511a:	f003 0303 	and.w	r3, r3, #3
 800511e:	2b03      	cmp	r3, #3
 8005120:	d101      	bne.n	8005126 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e099      	b.n	800525a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005126:	4b4f      	ldr	r3, [pc, #316]	; (8005264 <RCCEx_PLL2_Config+0x15c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a4e      	ldr	r2, [pc, #312]	; (8005264 <RCCEx_PLL2_Config+0x15c>)
 800512c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005130:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005132:	f7fc facd 	bl	80016d0 <HAL_GetTick>
 8005136:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005138:	e008      	b.n	800514c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800513a:	f7fc fac9 	bl	80016d0 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b02      	cmp	r3, #2
 8005146:	d901      	bls.n	800514c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e086      	b.n	800525a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800514c:	4b45      	ldr	r3, [pc, #276]	; (8005264 <RCCEx_PLL2_Config+0x15c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1f0      	bne.n	800513a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005158:	4b42      	ldr	r3, [pc, #264]	; (8005264 <RCCEx_PLL2_Config+0x15c>)
 800515a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	031b      	lsls	r3, r3, #12
 8005166:	493f      	ldr	r1, [pc, #252]	; (8005264 <RCCEx_PLL2_Config+0x15c>)
 8005168:	4313      	orrs	r3, r2
 800516a:	628b      	str	r3, [r1, #40]	; 0x28
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	3b01      	subs	r3, #1
 8005172:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	3b01      	subs	r3, #1
 800517c:	025b      	lsls	r3, r3, #9
 800517e:	b29b      	uxth	r3, r3
 8005180:	431a      	orrs	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	3b01      	subs	r3, #1
 8005188:	041b      	lsls	r3, r3, #16
 800518a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800518e:	431a      	orrs	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	3b01      	subs	r3, #1
 8005196:	061b      	lsls	r3, r3, #24
 8005198:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800519c:	4931      	ldr	r1, [pc, #196]	; (8005264 <RCCEx_PLL2_Config+0x15c>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80051a2:	4b30      	ldr	r3, [pc, #192]	; (8005264 <RCCEx_PLL2_Config+0x15c>)
 80051a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	492d      	ldr	r1, [pc, #180]	; (8005264 <RCCEx_PLL2_Config+0x15c>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80051b4:	4b2b      	ldr	r3, [pc, #172]	; (8005264 <RCCEx_PLL2_Config+0x15c>)
 80051b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b8:	f023 0220 	bic.w	r2, r3, #32
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	4928      	ldr	r1, [pc, #160]	; (8005264 <RCCEx_PLL2_Config+0x15c>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80051c6:	4b27      	ldr	r3, [pc, #156]	; (8005264 <RCCEx_PLL2_Config+0x15c>)
 80051c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ca:	4a26      	ldr	r2, [pc, #152]	; (8005264 <RCCEx_PLL2_Config+0x15c>)
 80051cc:	f023 0310 	bic.w	r3, r3, #16
 80051d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80051d2:	4b24      	ldr	r3, [pc, #144]	; (8005264 <RCCEx_PLL2_Config+0x15c>)
 80051d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051d6:	4b24      	ldr	r3, [pc, #144]	; (8005268 <RCCEx_PLL2_Config+0x160>)
 80051d8:	4013      	ands	r3, r2
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	69d2      	ldr	r2, [r2, #28]
 80051de:	00d2      	lsls	r2, r2, #3
 80051e0:	4920      	ldr	r1, [pc, #128]	; (8005264 <RCCEx_PLL2_Config+0x15c>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80051e6:	4b1f      	ldr	r3, [pc, #124]	; (8005264 <RCCEx_PLL2_Config+0x15c>)
 80051e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ea:	4a1e      	ldr	r2, [pc, #120]	; (8005264 <RCCEx_PLL2_Config+0x15c>)
 80051ec:	f043 0310 	orr.w	r3, r3, #16
 80051f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d106      	bne.n	8005206 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80051f8:	4b1a      	ldr	r3, [pc, #104]	; (8005264 <RCCEx_PLL2_Config+0x15c>)
 80051fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fc:	4a19      	ldr	r2, [pc, #100]	; (8005264 <RCCEx_PLL2_Config+0x15c>)
 80051fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005202:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005204:	e00f      	b.n	8005226 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d106      	bne.n	800521a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800520c:	4b15      	ldr	r3, [pc, #84]	; (8005264 <RCCEx_PLL2_Config+0x15c>)
 800520e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005210:	4a14      	ldr	r2, [pc, #80]	; (8005264 <RCCEx_PLL2_Config+0x15c>)
 8005212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005216:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005218:	e005      	b.n	8005226 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800521a:	4b12      	ldr	r3, [pc, #72]	; (8005264 <RCCEx_PLL2_Config+0x15c>)
 800521c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521e:	4a11      	ldr	r2, [pc, #68]	; (8005264 <RCCEx_PLL2_Config+0x15c>)
 8005220:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005224:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005226:	4b0f      	ldr	r3, [pc, #60]	; (8005264 <RCCEx_PLL2_Config+0x15c>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a0e      	ldr	r2, [pc, #56]	; (8005264 <RCCEx_PLL2_Config+0x15c>)
 800522c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005230:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005232:	f7fc fa4d 	bl	80016d0 <HAL_GetTick>
 8005236:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005238:	e008      	b.n	800524c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800523a:	f7fc fa49 	bl	80016d0 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b02      	cmp	r3, #2
 8005246:	d901      	bls.n	800524c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e006      	b.n	800525a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800524c:	4b05      	ldr	r3, [pc, #20]	; (8005264 <RCCEx_PLL2_Config+0x15c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d0f0      	beq.n	800523a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005258:	7bfb      	ldrb	r3, [r7, #15]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	58024400 	.word	0x58024400
 8005268:	ffff0007 	.word	0xffff0007

0800526c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800527a:	4b53      	ldr	r3, [pc, #332]	; (80053c8 <RCCEx_PLL3_Config+0x15c>)
 800527c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527e:	f003 0303 	and.w	r3, r3, #3
 8005282:	2b03      	cmp	r3, #3
 8005284:	d101      	bne.n	800528a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e099      	b.n	80053be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800528a:	4b4f      	ldr	r3, [pc, #316]	; (80053c8 <RCCEx_PLL3_Config+0x15c>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a4e      	ldr	r2, [pc, #312]	; (80053c8 <RCCEx_PLL3_Config+0x15c>)
 8005290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005294:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005296:	f7fc fa1b 	bl	80016d0 <HAL_GetTick>
 800529a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800529c:	e008      	b.n	80052b0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800529e:	f7fc fa17 	bl	80016d0 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d901      	bls.n	80052b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e086      	b.n	80053be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80052b0:	4b45      	ldr	r3, [pc, #276]	; (80053c8 <RCCEx_PLL3_Config+0x15c>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1f0      	bne.n	800529e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80052bc:	4b42      	ldr	r3, [pc, #264]	; (80053c8 <RCCEx_PLL3_Config+0x15c>)
 80052be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	051b      	lsls	r3, r3, #20
 80052ca:	493f      	ldr	r1, [pc, #252]	; (80053c8 <RCCEx_PLL3_Config+0x15c>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	628b      	str	r3, [r1, #40]	; 0x28
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	3b01      	subs	r3, #1
 80052d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	3b01      	subs	r3, #1
 80052e0:	025b      	lsls	r3, r3, #9
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	431a      	orrs	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	3b01      	subs	r3, #1
 80052ec:	041b      	lsls	r3, r3, #16
 80052ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80052f2:	431a      	orrs	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	3b01      	subs	r3, #1
 80052fa:	061b      	lsls	r3, r3, #24
 80052fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005300:	4931      	ldr	r1, [pc, #196]	; (80053c8 <RCCEx_PLL3_Config+0x15c>)
 8005302:	4313      	orrs	r3, r2
 8005304:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005306:	4b30      	ldr	r3, [pc, #192]	; (80053c8 <RCCEx_PLL3_Config+0x15c>)
 8005308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	492d      	ldr	r1, [pc, #180]	; (80053c8 <RCCEx_PLL3_Config+0x15c>)
 8005314:	4313      	orrs	r3, r2
 8005316:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005318:	4b2b      	ldr	r3, [pc, #172]	; (80053c8 <RCCEx_PLL3_Config+0x15c>)
 800531a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	4928      	ldr	r1, [pc, #160]	; (80053c8 <RCCEx_PLL3_Config+0x15c>)
 8005326:	4313      	orrs	r3, r2
 8005328:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800532a:	4b27      	ldr	r3, [pc, #156]	; (80053c8 <RCCEx_PLL3_Config+0x15c>)
 800532c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532e:	4a26      	ldr	r2, [pc, #152]	; (80053c8 <RCCEx_PLL3_Config+0x15c>)
 8005330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005334:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005336:	4b24      	ldr	r3, [pc, #144]	; (80053c8 <RCCEx_PLL3_Config+0x15c>)
 8005338:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800533a:	4b24      	ldr	r3, [pc, #144]	; (80053cc <RCCEx_PLL3_Config+0x160>)
 800533c:	4013      	ands	r3, r2
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	69d2      	ldr	r2, [r2, #28]
 8005342:	00d2      	lsls	r2, r2, #3
 8005344:	4920      	ldr	r1, [pc, #128]	; (80053c8 <RCCEx_PLL3_Config+0x15c>)
 8005346:	4313      	orrs	r3, r2
 8005348:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800534a:	4b1f      	ldr	r3, [pc, #124]	; (80053c8 <RCCEx_PLL3_Config+0x15c>)
 800534c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534e:	4a1e      	ldr	r2, [pc, #120]	; (80053c8 <RCCEx_PLL3_Config+0x15c>)
 8005350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005354:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d106      	bne.n	800536a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800535c:	4b1a      	ldr	r3, [pc, #104]	; (80053c8 <RCCEx_PLL3_Config+0x15c>)
 800535e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005360:	4a19      	ldr	r2, [pc, #100]	; (80053c8 <RCCEx_PLL3_Config+0x15c>)
 8005362:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005366:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005368:	e00f      	b.n	800538a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d106      	bne.n	800537e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005370:	4b15      	ldr	r3, [pc, #84]	; (80053c8 <RCCEx_PLL3_Config+0x15c>)
 8005372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005374:	4a14      	ldr	r2, [pc, #80]	; (80053c8 <RCCEx_PLL3_Config+0x15c>)
 8005376:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800537a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800537c:	e005      	b.n	800538a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800537e:	4b12      	ldr	r3, [pc, #72]	; (80053c8 <RCCEx_PLL3_Config+0x15c>)
 8005380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005382:	4a11      	ldr	r2, [pc, #68]	; (80053c8 <RCCEx_PLL3_Config+0x15c>)
 8005384:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005388:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800538a:	4b0f      	ldr	r3, [pc, #60]	; (80053c8 <RCCEx_PLL3_Config+0x15c>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a0e      	ldr	r2, [pc, #56]	; (80053c8 <RCCEx_PLL3_Config+0x15c>)
 8005390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005394:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005396:	f7fc f99b 	bl	80016d0 <HAL_GetTick>
 800539a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800539c:	e008      	b.n	80053b0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800539e:	f7fc f997 	bl	80016d0 <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d901      	bls.n	80053b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e006      	b.n	80053be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80053b0:	4b05      	ldr	r3, [pc, #20]	; (80053c8 <RCCEx_PLL3_Config+0x15c>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d0f0      	beq.n	800539e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	58024400 	.word	0x58024400
 80053cc:	ffff0007 	.word	0xffff0007

080053d0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e10f      	b.n	8005602 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a87      	ldr	r2, [pc, #540]	; (800560c <HAL_SPI_Init+0x23c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d00f      	beq.n	8005412 <HAL_SPI_Init+0x42>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a86      	ldr	r2, [pc, #536]	; (8005610 <HAL_SPI_Init+0x240>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d00a      	beq.n	8005412 <HAL_SPI_Init+0x42>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a84      	ldr	r2, [pc, #528]	; (8005614 <HAL_SPI_Init+0x244>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d005      	beq.n	8005412 <HAL_SPI_Init+0x42>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	2b0f      	cmp	r3, #15
 800540c:	d901      	bls.n	8005412 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e0f7      	b.n	8005602 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 ff74 	bl	8006300 <SPI_GetPacketSize>
 8005418:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a7b      	ldr	r2, [pc, #492]	; (800560c <HAL_SPI_Init+0x23c>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d00c      	beq.n	800543e <HAL_SPI_Init+0x6e>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a79      	ldr	r2, [pc, #484]	; (8005610 <HAL_SPI_Init+0x240>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d007      	beq.n	800543e <HAL_SPI_Init+0x6e>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a78      	ldr	r2, [pc, #480]	; (8005614 <HAL_SPI_Init+0x244>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d002      	beq.n	800543e <HAL_SPI_Init+0x6e>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2b08      	cmp	r3, #8
 800543c:	d811      	bhi.n	8005462 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005442:	4a72      	ldr	r2, [pc, #456]	; (800560c <HAL_SPI_Init+0x23c>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d009      	beq.n	800545c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a70      	ldr	r2, [pc, #448]	; (8005610 <HAL_SPI_Init+0x240>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d004      	beq.n	800545c <HAL_SPI_Init+0x8c>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a6f      	ldr	r2, [pc, #444]	; (8005614 <HAL_SPI_Init+0x244>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d104      	bne.n	8005466 <HAL_SPI_Init+0x96>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2b10      	cmp	r3, #16
 8005460:	d901      	bls.n	8005466 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e0cd      	b.n	8005602 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d106      	bne.n	8005480 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f7fb fdfc 	bl	8001078 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2202      	movs	r2, #2
 8005484:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 0201 	bic.w	r2, r2, #1
 8005496:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80054a2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054ac:	d119      	bne.n	80054e2 <HAL_SPI_Init+0x112>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054b6:	d103      	bne.n	80054c0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d008      	beq.n	80054d2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10c      	bne.n	80054e2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80054cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054d0:	d107      	bne.n	80054e2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80054e0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00f      	beq.n	800550e <HAL_SPI_Init+0x13e>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	2b06      	cmp	r3, #6
 80054f4:	d90b      	bls.n	800550e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	430a      	orrs	r2, r1
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	e007      	b.n	800551e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800551c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	69da      	ldr	r2, [r3, #28]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005526:	431a      	orrs	r2, r3
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	431a      	orrs	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005530:	ea42 0103 	orr.w	r1, r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	68da      	ldr	r2, [r3, #12]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	430a      	orrs	r2, r1
 800553e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005548:	431a      	orrs	r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554e:	431a      	orrs	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	431a      	orrs	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	431a      	orrs	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	695b      	ldr	r3, [r3, #20]
 8005560:	431a      	orrs	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	431a      	orrs	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	431a      	orrs	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005572:	431a      	orrs	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	431a      	orrs	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800557e:	ea42 0103 	orr.w	r1, r2, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	430a      	orrs	r2, r1
 800558c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d113      	bne.n	80055be <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055a8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055bc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 0201 	bic.w	r2, r2, #1
 80055cc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00a      	beq.n	80055f0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	40013000 	.word	0x40013000
 8005610:	40003800 	.word	0x40003800
 8005614:	40003c00 	.word	0x40003c00

08005618 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b08a      	sub	sp, #40	; 0x28
 800561c:	af02      	add	r7, sp, #8
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	603b      	str	r3, [r7, #0]
 8005624:	4613      	mov	r3, r2
 8005626:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	3320      	adds	r3, #32
 800562e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005630:	2300      	movs	r3, #0
 8005632:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800563a:	2b01      	cmp	r3, #1
 800563c:	d101      	bne.n	8005642 <HAL_SPI_Transmit+0x2a>
 800563e:	2302      	movs	r3, #2
 8005640:	e1e1      	b.n	8005a06 <HAL_SPI_Transmit+0x3ee>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800564a:	f7fc f841 	bl	80016d0 <HAL_GetTick>
 800564e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b01      	cmp	r3, #1
 800565a:	d007      	beq.n	800566c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800565c:	2302      	movs	r3, #2
 800565e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005668:	7efb      	ldrb	r3, [r7, #27]
 800566a:	e1cc      	b.n	8005a06 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d002      	beq.n	8005678 <HAL_SPI_Transmit+0x60>
 8005672:	88fb      	ldrh	r3, [r7, #6]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d107      	bne.n	8005688 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005684:	7efb      	ldrb	r3, [r7, #27]
 8005686:	e1be      	b.n	8005a06 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2203      	movs	r2, #3
 800568c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	88fa      	ldrh	r2, [r7, #6]
 80056a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	88fa      	ldrh	r2, [r7, #6]
 80056aa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80056d8:	d108      	bne.n	80056ec <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056e8:	601a      	str	r2, [r3, #0]
 80056ea:	e009      	b.n	8005700 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80056fe:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	4b96      	ldr	r3, [pc, #600]	; (8005960 <HAL_SPI_Transmit+0x348>)
 8005708:	4013      	ands	r3, r2
 800570a:	88f9      	ldrh	r1, [r7, #6]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	6812      	ldr	r2, [r2, #0]
 8005710:	430b      	orrs	r3, r1
 8005712:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f042 0201 	orr.w	r2, r2, #1
 8005722:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800572c:	d107      	bne.n	800573e <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800573c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	2b0f      	cmp	r3, #15
 8005744:	d947      	bls.n	80057d6 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005746:	e03f      	b.n	80057c8 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b02      	cmp	r3, #2
 8005754:	d114      	bne.n	8005780 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	6812      	ldr	r2, [r2, #0]
 8005760:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005766:	1d1a      	adds	r2, r3, #4
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005772:	b29b      	uxth	r3, r3
 8005774:	3b01      	subs	r3, #1
 8005776:	b29a      	uxth	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800577e:	e023      	b.n	80057c8 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005780:	f7fb ffa6 	bl	80016d0 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	683a      	ldr	r2, [r7, #0]
 800578c:	429a      	cmp	r2, r3
 800578e:	d803      	bhi.n	8005798 <HAL_SPI_Transmit+0x180>
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005796:	d102      	bne.n	800579e <HAL_SPI_Transmit+0x186>
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d114      	bne.n	80057c8 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	f000 fce0 	bl	8006164 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e11e      	b.n	8005a06 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1b9      	bne.n	8005748 <HAL_SPI_Transmit+0x130>
 80057d4:	e0f1      	b.n	80059ba <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	2b07      	cmp	r3, #7
 80057dc:	f240 80e6 	bls.w	80059ac <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80057e0:	e05d      	b.n	800589e <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	f003 0302 	and.w	r3, r3, #2
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d132      	bne.n	8005856 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d918      	bls.n	800582e <HAL_SPI_Transmit+0x216>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005800:	2b00      	cmp	r3, #0
 8005802:	d014      	beq.n	800582e <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6812      	ldr	r2, [r2, #0]
 800580e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005814:	1d1a      	adds	r2, r3, #4
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005820:	b29b      	uxth	r3, r3
 8005822:	3b02      	subs	r3, #2
 8005824:	b29a      	uxth	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800582c:	e037      	b.n	800589e <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005832:	881a      	ldrh	r2, [r3, #0]
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800583c:	1c9a      	adds	r2, r3, #2
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005848:	b29b      	uxth	r3, r3
 800584a:	3b01      	subs	r3, #1
 800584c:	b29a      	uxth	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005854:	e023      	b.n	800589e <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005856:	f7fb ff3b 	bl	80016d0 <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	429a      	cmp	r2, r3
 8005864:	d803      	bhi.n	800586e <HAL_SPI_Transmit+0x256>
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586c:	d102      	bne.n	8005874 <HAL_SPI_Transmit+0x25c>
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d114      	bne.n	800589e <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f000 fc75 	bl	8006164 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005888:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e0b3      	b.n	8005a06 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d19b      	bne.n	80057e2 <HAL_SPI_Transmit+0x1ca>
 80058aa:	e086      	b.n	80059ba <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d154      	bne.n	8005964 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	2b03      	cmp	r3, #3
 80058c4:	d918      	bls.n	80058f8 <HAL_SPI_Transmit+0x2e0>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ca:	2b40      	cmp	r3, #64	; 0x40
 80058cc:	d914      	bls.n	80058f8 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6812      	ldr	r2, [r2, #0]
 80058d8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058de:	1d1a      	adds	r2, r3, #4
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	3b04      	subs	r3, #4
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80058f6:	e059      	b.n	80059ac <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80058fe:	b29b      	uxth	r3, r3
 8005900:	2b01      	cmp	r3, #1
 8005902:	d917      	bls.n	8005934 <HAL_SPI_Transmit+0x31c>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005908:	2b00      	cmp	r3, #0
 800590a:	d013      	beq.n	8005934 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005910:	881a      	ldrh	r2, [r3, #0]
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800591a:	1c9a      	adds	r2, r3, #2
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005926:	b29b      	uxth	r3, r3
 8005928:	3b02      	subs	r3, #2
 800592a:	b29a      	uxth	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005932:	e03b      	b.n	80059ac <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	3320      	adds	r3, #32
 800593e:	7812      	ldrb	r2, [r2, #0]
 8005940:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005946:	1c5a      	adds	r2, r3, #1
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005952:	b29b      	uxth	r3, r3
 8005954:	3b01      	subs	r3, #1
 8005956:	b29a      	uxth	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800595e:	e025      	b.n	80059ac <HAL_SPI_Transmit+0x394>
 8005960:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005964:	f7fb feb4 	bl	80016d0 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	429a      	cmp	r2, r3
 8005972:	d803      	bhi.n	800597c <HAL_SPI_Transmit+0x364>
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800597a:	d102      	bne.n	8005982 <HAL_SPI_Transmit+0x36a>
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d114      	bne.n	80059ac <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f000 fbee 	bl	8006164 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005996:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e02c      	b.n	8005a06 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f47f af79 	bne.w	80058ac <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	9300      	str	r3, [sp, #0]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	2200      	movs	r2, #0
 80059c2:	2108      	movs	r1, #8
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f000 fc6d 	bl	80062a4 <SPI_WaitOnFlagUntilTimeout>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d007      	beq.n	80059e0 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059d6:	f043 0220 	orr.w	r2, r3, #32
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f000 fbbf 	bl	8006164 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d001      	beq.n	8005a04 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e000      	b.n	8005a06 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 8005a04:	7efb      	ldrb	r3, [r7, #27]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3720      	adds	r7, #32
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop

08005a10 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b088      	sub	sp, #32
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	603b      	str	r3, [r7, #0]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a20:	2300      	movs	r3, #0
 8005a22:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3330      	adds	r3, #48	; 0x30
 8005a2a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d101      	bne.n	8005a3a <HAL_SPI_Receive+0x2a>
 8005a36:	2302      	movs	r3, #2
 8005a38:	e173      	b.n	8005d22 <HAL_SPI_Receive+0x312>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a42:	f7fb fe45 	bl	80016d0 <HAL_GetTick>
 8005a46:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d007      	beq.n	8005a64 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 8005a54:	2302      	movs	r3, #2
 8005a56:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005a60:	7ffb      	ldrb	r3, [r7, #31]
 8005a62:	e15e      	b.n	8005d22 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <HAL_SPI_Receive+0x60>
 8005a6a:	88fb      	ldrh	r3, [r7, #6]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d107      	bne.n	8005a80 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005a7c:	7ffb      	ldrb	r3, [r7, #31]
 8005a7e:	e150      	b.n	8005d22 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2204      	movs	r2, #4
 8005a84:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	88fa      	ldrh	r2, [r7, #6]
 8005a9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	88fa      	ldrh	r2, [r7, #6]
 8005aa2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005ad0:	d108      	bne.n	8005ae4 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ae0:	601a      	str	r2, [r3, #0]
 8005ae2:	e009      	b.n	8005af8 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005af6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	4b8b      	ldr	r3, [pc, #556]	; (8005d2c <HAL_SPI_Receive+0x31c>)
 8005b00:	4013      	ands	r3, r2
 8005b02:	88f9      	ldrh	r1, [r7, #6]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	6812      	ldr	r2, [r2, #0]
 8005b08:	430b      	orrs	r3, r1
 8005b0a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0201 	orr.w	r2, r2, #1
 8005b1a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b24:	d107      	bne.n	8005b36 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b34:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	2b0f      	cmp	r3, #15
 8005b3c:	d948      	bls.n	8005bd0 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005b3e:	e040      	b.n	8005bc2 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	695a      	ldr	r2, [r3, #20]
 8005b46:	f248 0308 	movw	r3, #32776	; 0x8008
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d014      	beq.n	8005b7a <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b58:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005b5a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b60:	1d1a      	adds	r2, r3, #4
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005b78:	e023      	b.n	8005bc2 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b7a:	f7fb fda9 	bl	80016d0 <HAL_GetTick>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	683a      	ldr	r2, [r7, #0]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d803      	bhi.n	8005b92 <HAL_SPI_Receive+0x182>
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b90:	d102      	bne.n	8005b98 <HAL_SPI_Receive+0x188>
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d114      	bne.n	8005bc2 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f000 fae3 	bl	8006164 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e0af      	b.n	8005d22 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1b8      	bne.n	8005b40 <HAL_SPI_Receive+0x130>
 8005bce:	e095      	b.n	8005cfc <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	2b07      	cmp	r3, #7
 8005bd6:	f240 808b 	bls.w	8005cf0 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005bda:	e03f      	b.n	8005c5c <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d114      	bne.n	8005c14 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bee:	69ba      	ldr	r2, [r7, #24]
 8005bf0:	8812      	ldrh	r2, [r2, #0]
 8005bf2:	b292      	uxth	r2, r2
 8005bf4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bfa:	1c9a      	adds	r2, r3, #2
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005c12:	e023      	b.n	8005c5c <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c14:	f7fb fd5c 	bl	80016d0 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	683a      	ldr	r2, [r7, #0]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d803      	bhi.n	8005c2c <HAL_SPI_Receive+0x21c>
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c2a:	d102      	bne.n	8005c32 <HAL_SPI_Receive+0x222>
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d114      	bne.n	8005c5c <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f000 fa96 	bl	8006164 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e062      	b.n	8005d22 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d1b9      	bne.n	8005bdc <HAL_SPI_Receive+0x1cc>
 8005c68:	e048      	b.n	8005cfc <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d117      	bne.n	8005ca8 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c84:	7812      	ldrb	r2, [r2, #0]
 8005c86:	b2d2      	uxtb	r2, r2
 8005c88:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c8e:	1c5a      	adds	r2, r3, #1
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005ca6:	e023      	b.n	8005cf0 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ca8:	f7fb fd12 	bl	80016d0 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	683a      	ldr	r2, [r7, #0]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d803      	bhi.n	8005cc0 <HAL_SPI_Receive+0x2b0>
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cbe:	d102      	bne.n	8005cc6 <HAL_SPI_Receive+0x2b6>
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d114      	bne.n	8005cf0 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f000 fa4c 	bl	8006164 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e018      	b.n	8005d22 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1b6      	bne.n	8005c6a <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f000 fa31 	bl	8006164 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d001      	beq.n	8005d20 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e000      	b.n	8005d22 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 8005d20:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3720      	adds	r7, #32
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	ffff0000 	.word	0xffff0000

08005d30 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b08a      	sub	sp, #40	; 0x28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8005d48:	6a3a      	ldr	r2, [r7, #32]
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005d62:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	3330      	adds	r3, #48	; 0x30
 8005d6a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d010      	beq.n	8005d98 <HAL_SPI_IRQHandler+0x68>
 8005d76:	6a3b      	ldr	r3, [r7, #32]
 8005d78:	f003 0308 	and.w	r3, r3, #8
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00b      	beq.n	8005d98 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	699a      	ldr	r2, [r3, #24]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d8e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 f9c3 	bl	800611c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8005d96:	e192      	b.n	80060be <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d113      	bne.n	8005dca <HAL_SPI_IRQHandler+0x9a>
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	f003 0320 	and.w	r3, r3, #32
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10e      	bne.n	8005dca <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d009      	beq.n	8005dca <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	4798      	blx	r3
    hspi->RxISR(hspi);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	4798      	blx	r3
    handled = 1UL;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10f      	bne.n	8005df4 <HAL_SPI_IRQHandler+0xc4>
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00a      	beq.n	8005df4 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d105      	bne.n	8005df4 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	4798      	blx	r3
    handled = 1UL;
 8005df0:	2301      	movs	r3, #1
 8005df2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	f003 0320 	and.w	r3, r3, #32
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10f      	bne.n	8005e1e <HAL_SPI_IRQHandler+0xee>
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	f003 0302 	and.w	r3, r3, #2
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00a      	beq.n	8005e1e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d105      	bne.n	8005e1e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	4798      	blx	r3
    handled = 1UL;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f040 8147 	bne.w	80060b4 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	f003 0308 	and.w	r3, r3, #8
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 808b 	beq.w	8005f48 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	699a      	ldr	r2, [r3, #24]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f042 0208 	orr.w	r2, r2, #8
 8005e40:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	699a      	ldr	r2, [r3, #24]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f042 0210 	orr.w	r2, r2, #16
 8005e50:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	699a      	ldr	r2, [r3, #24]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e60:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	691a      	ldr	r2, [r3, #16]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 0208 	bic.w	r2, r2, #8
 8005e70:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d13d      	bne.n	8005efc <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8005e80:	e036      	b.n	8005ef0 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	2b0f      	cmp	r3, #15
 8005e88:	d90b      	bls.n	8005ea2 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e92:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005e94:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e9a:	1d1a      	adds	r2, r3, #4
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	665a      	str	r2, [r3, #100]	; 0x64
 8005ea0:	e01d      	b.n	8005ede <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	2b07      	cmp	r3, #7
 8005ea8:	d90b      	bls.n	8005ec2 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	8812      	ldrh	r2, [r2, #0]
 8005eb2:	b292      	uxth	r2, r2
 8005eb4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005eba:	1c9a      	adds	r2, r3, #2
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	665a      	str	r2, [r3, #100]	; 0x64
 8005ec0:	e00d      	b.n	8005ede <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ece:	7812      	ldrb	r2, [r2, #0]
 8005ed0:	b2d2      	uxtb	r2, r2
 8005ed2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ed8:	1c5a      	adds	r2, r3, #1
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1c2      	bne.n	8005e82 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 f931 	bl	8006164 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d003      	beq.n	8005f1c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 f8f7 	bl	8006108 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005f1a:	e0d0      	b.n	80060be <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8005f1c:	7cfb      	ldrb	r3, [r7, #19]
 8005f1e:	2b05      	cmp	r3, #5
 8005f20:	d103      	bne.n	8005f2a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f8e6 	bl	80060f4 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8005f28:	e0c6      	b.n	80060b8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8005f2a:	7cfb      	ldrb	r3, [r7, #19]
 8005f2c:	2b04      	cmp	r3, #4
 8005f2e:	d103      	bne.n	8005f38 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 f8d5 	bl	80060e0 <HAL_SPI_RxCpltCallback>
    return;
 8005f36:	e0bf      	b.n	80060b8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8005f38:	7cfb      	ldrb	r3, [r7, #19]
 8005f3a:	2b03      	cmp	r3, #3
 8005f3c:	f040 80bc 	bne.w	80060b8 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 f8c3 	bl	80060cc <HAL_SPI_TxCpltCallback>
    return;
 8005f46:	e0b7      	b.n	80060b8 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f000 80b5 	beq.w	80060be <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00f      	beq.n	8005f7e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f64:	f043 0204 	orr.w	r2, r3, #4
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	699a      	ldr	r2, [r3, #24]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f7c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00f      	beq.n	8005fa8 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f8e:	f043 0201 	orr.w	r2, r3, #1
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	699a      	ldr	r2, [r3, #24]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fa6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00f      	beq.n	8005fd2 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fb8:	f043 0208 	orr.w	r2, r3, #8
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	699a      	ldr	r2, [r3, #24]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fd0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	f003 0320 	and.w	r3, r3, #32
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00f      	beq.n	8005ffc <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fe2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	699a      	ldr	r2, [r3, #24]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f042 0220 	orr.w	r2, r2, #32
 8005ffa:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006002:	2b00      	cmp	r3, #0
 8006004:	d05a      	beq.n	80060bc <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f022 0201 	bic.w	r2, r2, #1
 8006014:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6919      	ldr	r1, [r3, #16]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	4b28      	ldr	r3, [pc, #160]	; (80060c4 <HAL_SPI_IRQHandler+0x394>)
 8006022:	400b      	ands	r3, r1
 8006024:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800602c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006030:	d138      	bne.n	80060a4 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	689a      	ldr	r2, [r3, #8]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006040:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006046:	2b00      	cmp	r3, #0
 8006048:	d013      	beq.n	8006072 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800604e:	4a1e      	ldr	r2, [pc, #120]	; (80060c8 <HAL_SPI_IRQHandler+0x398>)
 8006050:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006056:	4618      	mov	r0, r3
 8006058:	f7fb ff98 	bl	8001f8c <HAL_DMA_Abort_IT>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d007      	beq.n	8006072 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006068:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006076:	2b00      	cmp	r3, #0
 8006078:	d020      	beq.n	80060bc <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800607e:	4a12      	ldr	r2, [pc, #72]	; (80060c8 <HAL_SPI_IRQHandler+0x398>)
 8006080:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006086:	4618      	mov	r0, r3
 8006088:	f7fb ff80 	bl	8001f8c <HAL_DMA_Abort_IT>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d014      	beq.n	80060bc <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006098:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80060a2:	e00b      	b.n	80060bc <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 f82b 	bl	8006108 <HAL_SPI_ErrorCallback>
    return;
 80060b2:	e003      	b.n	80060bc <HAL_SPI_IRQHandler+0x38c>
    return;
 80060b4:	bf00      	nop
 80060b6:	e002      	b.n	80060be <HAL_SPI_IRQHandler+0x38e>
    return;
 80060b8:	bf00      	nop
 80060ba:	e000      	b.n	80060be <HAL_SPI_IRQHandler+0x38e>
    return;
 80060bc:	bf00      	nop
  }
}
 80060be:	3728      	adds	r7, #40	; 0x28
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	fffffc94 	.word	0xfffffc94
 80060c8:	08006131 	.word	0x08006131

080060cc <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006156:	68f8      	ldr	r0, [r7, #12]
 8006158:	f7ff ffd6 	bl	8006108 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800615c:	bf00      	nop
 800615e:	3710      	adds	r7, #16
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	699a      	ldr	r2, [r3, #24]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f042 0208 	orr.w	r2, r2, #8
 8006182:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	699a      	ldr	r2, [r3, #24]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f042 0210 	orr.w	r2, r2, #16
 8006192:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f022 0201 	bic.w	r2, r2, #1
 80061a2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6919      	ldr	r1, [r3, #16]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	4b3c      	ldr	r3, [pc, #240]	; (80062a0 <SPI_CloseTransfer+0x13c>)
 80061b0:	400b      	ands	r3, r1
 80061b2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	689a      	ldr	r2, [r3, #8]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80061c2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b04      	cmp	r3, #4
 80061ce:	d014      	beq.n	80061fa <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f003 0320 	and.w	r3, r3, #32
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00f      	beq.n	80061fa <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	699a      	ldr	r2, [r3, #24]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f042 0220 	orr.w	r2, r2, #32
 80061f8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b03      	cmp	r3, #3
 8006204:	d014      	beq.n	8006230 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00f      	beq.n	8006230 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006216:	f043 0204 	orr.w	r2, r3, #4
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	699a      	ldr	r2, [r3, #24]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800622e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00f      	beq.n	800625a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006240:	f043 0201 	orr.w	r2, r3, #1
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	699a      	ldr	r2, [r3, #24]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006258:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00f      	beq.n	8006284 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800626a:	f043 0208 	orr.w	r2, r3, #8
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	699a      	ldr	r2, [r3, #24]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006282:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8006294:	bf00      	nop
 8006296:	3714      	adds	r7, #20
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr
 80062a0:	fffffc90 	.word	0xfffffc90

080062a4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	603b      	str	r3, [r7, #0]
 80062b0:	4613      	mov	r3, r2
 80062b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80062b4:	e010      	b.n	80062d8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062b6:	f7fb fa0b 	bl	80016d0 <HAL_GetTick>
 80062ba:	4602      	mov	r2, r0
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	683a      	ldr	r2, [r7, #0]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d803      	bhi.n	80062ce <SPI_WaitOnFlagUntilTimeout+0x2a>
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062cc:	d102      	bne.n	80062d4 <SPI_WaitOnFlagUntilTimeout+0x30>
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d101      	bne.n	80062d8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e00f      	b.n	80062f8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	695a      	ldr	r2, [r3, #20]
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	4013      	ands	r3, r2
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	bf0c      	ite	eq
 80062e8:	2301      	moveq	r3, #1
 80062ea:	2300      	movne	r3, #0
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	461a      	mov	r2, r3
 80062f0:	79fb      	ldrb	r3, [r7, #7]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d0df      	beq.n	80062b6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800630c:	095b      	lsrs	r3, r3, #5
 800630e:	3301      	adds	r3, #1
 8006310:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	3301      	adds	r3, #1
 8006318:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	3307      	adds	r3, #7
 800631e:	08db      	lsrs	r3, r3, #3
 8006320:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	fb02 f303 	mul.w	r3, r2, r3
}
 800632a:	4618      	mov	r0, r3
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b082      	sub	sp, #8
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d101      	bne.n	8006348 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e042      	b.n	80063ce <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800634e:	2b00      	cmp	r3, #0
 8006350:	d106      	bne.n	8006360 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f7fb f856 	bl	800140c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2224      	movs	r2, #36	; 0x24
 8006364:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f022 0201 	bic.w	r2, r2, #1
 8006376:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 fce1 	bl	8006d40 <UART_SetConfig>
 800637e:	4603      	mov	r3, r0
 8006380:	2b01      	cmp	r3, #1
 8006382:	d101      	bne.n	8006388 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e022      	b.n	80063ce <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638c:	2b00      	cmp	r3, #0
 800638e:	d002      	beq.n	8006396 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f001 fb41 	bl	8007a18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	685a      	ldr	r2, [r3, #4]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	689a      	ldr	r2, [r3, #8]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063b4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f042 0201 	orr.w	r2, r2, #1
 80063c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f001 fbc8 	bl	8007b5c <UART_CheckIdleState>
 80063cc:	4603      	mov	r3, r0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3708      	adds	r7, #8
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b08a      	sub	sp, #40	; 0x28
 80063da:	af02      	add	r7, sp, #8
 80063dc:	60f8      	str	r0, [r7, #12]
 80063de:	60b9      	str	r1, [r7, #8]
 80063e0:	603b      	str	r3, [r7, #0]
 80063e2:	4613      	mov	r3, r2
 80063e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ec:	2b20      	cmp	r3, #32
 80063ee:	d17b      	bne.n	80064e8 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d002      	beq.n	80063fc <HAL_UART_Transmit+0x26>
 80063f6:	88fb      	ldrh	r3, [r7, #6]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d101      	bne.n	8006400 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e074      	b.n	80064ea <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2221      	movs	r2, #33	; 0x21
 800640c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006410:	f7fb f95e 	bl	80016d0 <HAL_GetTick>
 8006414:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	88fa      	ldrh	r2, [r7, #6]
 800641a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	88fa      	ldrh	r2, [r7, #6]
 8006422:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800642e:	d108      	bne.n	8006442 <HAL_UART_Transmit+0x6c>
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d104      	bne.n	8006442 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006438:	2300      	movs	r3, #0
 800643a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	61bb      	str	r3, [r7, #24]
 8006440:	e003      	b.n	800644a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006446:	2300      	movs	r3, #0
 8006448:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800644a:	e030      	b.n	80064ae <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	9300      	str	r3, [sp, #0]
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	2200      	movs	r2, #0
 8006454:	2180      	movs	r1, #128	; 0x80
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f001 fc2a 	bl	8007cb0 <UART_WaitOnFlagUntilTimeout>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d005      	beq.n	800646e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2220      	movs	r2, #32
 8006466:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e03d      	b.n	80064ea <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d10b      	bne.n	800648c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	881b      	ldrh	r3, [r3, #0]
 8006478:	461a      	mov	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006482:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	3302      	adds	r3, #2
 8006488:	61bb      	str	r3, [r7, #24]
 800648a:	e007      	b.n	800649c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	781a      	ldrb	r2, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	3301      	adds	r3, #1
 800649a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	3b01      	subs	r3, #1
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1c8      	bne.n	800644c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	9300      	str	r3, [sp, #0]
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	2200      	movs	r2, #0
 80064c2:	2140      	movs	r1, #64	; 0x40
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f001 fbf3 	bl	8007cb0 <UART_WaitOnFlagUntilTimeout>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d005      	beq.n	80064dc <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2220      	movs	r2, #32
 80064d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e006      	b.n	80064ea <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2220      	movs	r2, #32
 80064e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80064e4:	2300      	movs	r3, #0
 80064e6:	e000      	b.n	80064ea <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80064e8:	2302      	movs	r3, #2
  }
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3720      	adds	r7, #32
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
	...

080064f4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b08a      	sub	sp, #40	; 0x28
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	4613      	mov	r3, r2
 8006500:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006508:	2b20      	cmp	r3, #32
 800650a:	d137      	bne.n	800657c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d002      	beq.n	8006518 <HAL_UART_Receive_IT+0x24>
 8006512:	88fb      	ldrh	r3, [r7, #6]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d101      	bne.n	800651c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e030      	b.n	800657e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a18      	ldr	r2, [pc, #96]	; (8006588 <HAL_UART_Receive_IT+0x94>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d01f      	beq.n	800656c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d018      	beq.n	800656c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	e853 3f00 	ldrex	r3, [r3]
 8006546:	613b      	str	r3, [r7, #16]
   return(result);
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800654e:	627b      	str	r3, [r7, #36]	; 0x24
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	461a      	mov	r2, r3
 8006556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006558:	623b      	str	r3, [r7, #32]
 800655a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655c:	69f9      	ldr	r1, [r7, #28]
 800655e:	6a3a      	ldr	r2, [r7, #32]
 8006560:	e841 2300 	strex	r3, r2, [r1]
 8006564:	61bb      	str	r3, [r7, #24]
   return(result);
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d1e6      	bne.n	800653a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800656c:	88fb      	ldrh	r3, [r7, #6]
 800656e:	461a      	mov	r2, r3
 8006570:	68b9      	ldr	r1, [r7, #8]
 8006572:	68f8      	ldr	r0, [r7, #12]
 8006574:	f001 fc04 	bl	8007d80 <UART_Start_Receive_IT>
 8006578:	4603      	mov	r3, r0
 800657a:	e000      	b.n	800657e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800657c:	2302      	movs	r3, #2
  }
}
 800657e:	4618      	mov	r0, r3
 8006580:	3728      	adds	r7, #40	; 0x28
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	58000c00 	.word	0x58000c00

0800658c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b0ba      	sub	sp, #232	; 0xe8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80065b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80065b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80065ba:	4013      	ands	r3, r2
 80065bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80065c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d11b      	bne.n	8006600 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80065c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065cc:	f003 0320 	and.w	r3, r3, #32
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d015      	beq.n	8006600 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80065d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065d8:	f003 0320 	and.w	r3, r3, #32
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d105      	bne.n	80065ec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80065e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d009      	beq.n	8006600 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f000 8377 	beq.w	8006ce4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	4798      	blx	r3
      }
      return;
 80065fe:	e371      	b.n	8006ce4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006600:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006604:	2b00      	cmp	r3, #0
 8006606:	f000 8123 	beq.w	8006850 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800660a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800660e:	4b8d      	ldr	r3, [pc, #564]	; (8006844 <HAL_UART_IRQHandler+0x2b8>)
 8006610:	4013      	ands	r3, r2
 8006612:	2b00      	cmp	r3, #0
 8006614:	d106      	bne.n	8006624 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006616:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800661a:	4b8b      	ldr	r3, [pc, #556]	; (8006848 <HAL_UART_IRQHandler+0x2bc>)
 800661c:	4013      	ands	r3, r2
 800661e:	2b00      	cmp	r3, #0
 8006620:	f000 8116 	beq.w	8006850 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	2b00      	cmp	r3, #0
 800662e:	d011      	beq.n	8006654 <HAL_UART_IRQHandler+0xc8>
 8006630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00b      	beq.n	8006654 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2201      	movs	r2, #1
 8006642:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800664a:	f043 0201 	orr.w	r2, r3, #1
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006658:	f003 0302 	and.w	r3, r3, #2
 800665c:	2b00      	cmp	r3, #0
 800665e:	d011      	beq.n	8006684 <HAL_UART_IRQHandler+0xf8>
 8006660:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006664:	f003 0301 	and.w	r3, r3, #1
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00b      	beq.n	8006684 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2202      	movs	r2, #2
 8006672:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800667a:	f043 0204 	orr.w	r2, r3, #4
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006688:	f003 0304 	and.w	r3, r3, #4
 800668c:	2b00      	cmp	r3, #0
 800668e:	d011      	beq.n	80066b4 <HAL_UART_IRQHandler+0x128>
 8006690:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006694:	f003 0301 	and.w	r3, r3, #1
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00b      	beq.n	80066b4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2204      	movs	r2, #4
 80066a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066aa:	f043 0202 	orr.w	r2, r3, #2
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80066b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066b8:	f003 0308 	and.w	r3, r3, #8
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d017      	beq.n	80066f0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80066c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066c4:	f003 0320 	and.w	r3, r3, #32
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d105      	bne.n	80066d8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80066cc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80066d0:	4b5c      	ldr	r3, [pc, #368]	; (8006844 <HAL_UART_IRQHandler+0x2b8>)
 80066d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00b      	beq.n	80066f0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2208      	movs	r2, #8
 80066de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066e6:	f043 0208 	orr.w	r2, r3, #8
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80066f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d012      	beq.n	8006722 <HAL_UART_IRQHandler+0x196>
 80066fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006700:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00c      	beq.n	8006722 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006710:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006718:	f043 0220 	orr.w	r2, r3, #32
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006728:	2b00      	cmp	r3, #0
 800672a:	f000 82dd 	beq.w	8006ce8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800672e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006732:	f003 0320 	and.w	r3, r3, #32
 8006736:	2b00      	cmp	r3, #0
 8006738:	d013      	beq.n	8006762 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800673a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800673e:	f003 0320 	and.w	r3, r3, #32
 8006742:	2b00      	cmp	r3, #0
 8006744:	d105      	bne.n	8006752 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800674a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d007      	beq.n	8006762 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006756:	2b00      	cmp	r3, #0
 8006758:	d003      	beq.n	8006762 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006768:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006776:	2b40      	cmp	r3, #64	; 0x40
 8006778:	d005      	beq.n	8006786 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800677a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800677e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006782:	2b00      	cmp	r3, #0
 8006784:	d054      	beq.n	8006830 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f001 fc1c 	bl	8007fc4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006796:	2b40      	cmp	r3, #64	; 0x40
 8006798:	d146      	bne.n	8006828 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	3308      	adds	r3, #8
 80067a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067a8:	e853 3f00 	ldrex	r3, [r3]
 80067ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80067b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	3308      	adds	r3, #8
 80067c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80067c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80067ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80067d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80067d6:	e841 2300 	strex	r3, r2, [r1]
 80067da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80067de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1d9      	bne.n	800679a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d017      	beq.n	8006820 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067f6:	4a15      	ldr	r2, [pc, #84]	; (800684c <HAL_UART_IRQHandler+0x2c0>)
 80067f8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006800:	4618      	mov	r0, r3
 8006802:	f7fb fbc3 	bl	8001f8c <HAL_DMA_Abort_IT>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d019      	beq.n	8006840 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800681a:	4610      	mov	r0, r2
 800681c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800681e:	e00f      	b.n	8006840 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fa77 	bl	8006d14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006826:	e00b      	b.n	8006840 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 fa73 	bl	8006d14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800682e:	e007      	b.n	8006840 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 fa6f 	bl	8006d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800683e:	e253      	b.n	8006ce8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006840:	bf00      	nop
    return;
 8006842:	e251      	b.n	8006ce8 <HAL_UART_IRQHandler+0x75c>
 8006844:	10000001 	.word	0x10000001
 8006848:	04000120 	.word	0x04000120
 800684c:	08008091 	.word	0x08008091

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006854:	2b01      	cmp	r3, #1
 8006856:	f040 81e7 	bne.w	8006c28 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800685a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800685e:	f003 0310 	and.w	r3, r3, #16
 8006862:	2b00      	cmp	r3, #0
 8006864:	f000 81e0 	beq.w	8006c28 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800686c:	f003 0310 	and.w	r3, r3, #16
 8006870:	2b00      	cmp	r3, #0
 8006872:	f000 81d9 	beq.w	8006c28 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2210      	movs	r2, #16
 800687c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006888:	2b40      	cmp	r3, #64	; 0x40
 800688a:	f040 8151 	bne.w	8006b30 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a96      	ldr	r2, [pc, #600]	; (8006af0 <HAL_UART_IRQHandler+0x564>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d068      	beq.n	800696e <HAL_UART_IRQHandler+0x3e2>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a93      	ldr	r2, [pc, #588]	; (8006af4 <HAL_UART_IRQHandler+0x568>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d061      	beq.n	800696e <HAL_UART_IRQHandler+0x3e2>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a91      	ldr	r2, [pc, #580]	; (8006af8 <HAL_UART_IRQHandler+0x56c>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d05a      	beq.n	800696e <HAL_UART_IRQHandler+0x3e2>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a8e      	ldr	r2, [pc, #568]	; (8006afc <HAL_UART_IRQHandler+0x570>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d053      	beq.n	800696e <HAL_UART_IRQHandler+0x3e2>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a8c      	ldr	r2, [pc, #560]	; (8006b00 <HAL_UART_IRQHandler+0x574>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d04c      	beq.n	800696e <HAL_UART_IRQHandler+0x3e2>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a89      	ldr	r2, [pc, #548]	; (8006b04 <HAL_UART_IRQHandler+0x578>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d045      	beq.n	800696e <HAL_UART_IRQHandler+0x3e2>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a87      	ldr	r2, [pc, #540]	; (8006b08 <HAL_UART_IRQHandler+0x57c>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d03e      	beq.n	800696e <HAL_UART_IRQHandler+0x3e2>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a84      	ldr	r2, [pc, #528]	; (8006b0c <HAL_UART_IRQHandler+0x580>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d037      	beq.n	800696e <HAL_UART_IRQHandler+0x3e2>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a82      	ldr	r2, [pc, #520]	; (8006b10 <HAL_UART_IRQHandler+0x584>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d030      	beq.n	800696e <HAL_UART_IRQHandler+0x3e2>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a7f      	ldr	r2, [pc, #508]	; (8006b14 <HAL_UART_IRQHandler+0x588>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d029      	beq.n	800696e <HAL_UART_IRQHandler+0x3e2>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a7d      	ldr	r2, [pc, #500]	; (8006b18 <HAL_UART_IRQHandler+0x58c>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d022      	beq.n	800696e <HAL_UART_IRQHandler+0x3e2>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a7a      	ldr	r2, [pc, #488]	; (8006b1c <HAL_UART_IRQHandler+0x590>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d01b      	beq.n	800696e <HAL_UART_IRQHandler+0x3e2>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a78      	ldr	r2, [pc, #480]	; (8006b20 <HAL_UART_IRQHandler+0x594>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d014      	beq.n	800696e <HAL_UART_IRQHandler+0x3e2>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a75      	ldr	r2, [pc, #468]	; (8006b24 <HAL_UART_IRQHandler+0x598>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d00d      	beq.n	800696e <HAL_UART_IRQHandler+0x3e2>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a73      	ldr	r2, [pc, #460]	; (8006b28 <HAL_UART_IRQHandler+0x59c>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d006      	beq.n	800696e <HAL_UART_IRQHandler+0x3e2>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a70      	ldr	r2, [pc, #448]	; (8006b2c <HAL_UART_IRQHandler+0x5a0>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d106      	bne.n	800697c <HAL_UART_IRQHandler+0x3f0>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	b29b      	uxth	r3, r3
 800697a:	e005      	b.n	8006988 <HAL_UART_IRQHandler+0x3fc>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	b29b      	uxth	r3, r3
 8006988:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800698c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006990:	2b00      	cmp	r3, #0
 8006992:	f000 81ab 	beq.w	8006cec <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800699c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069a0:	429a      	cmp	r2, r3
 80069a2:	f080 81a3 	bcs.w	8006cec <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069b6:	69db      	ldr	r3, [r3, #28]
 80069b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069bc:	f000 8087 	beq.w	8006ace <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069cc:	e853 3f00 	ldrex	r3, [r3]
 80069d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80069d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	461a      	mov	r2, r3
 80069e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80069ee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80069f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80069fa:	e841 2300 	strex	r3, r2, [r1]
 80069fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1da      	bne.n	80069c0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3308      	adds	r3, #8
 8006a10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a14:	e853 3f00 	ldrex	r3, [r3]
 8006a18:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a1c:	f023 0301 	bic.w	r3, r3, #1
 8006a20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	3308      	adds	r3, #8
 8006a2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a2e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006a32:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a34:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006a36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a3a:	e841 2300 	strex	r3, r2, [r1]
 8006a3e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1e1      	bne.n	8006a0a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	3308      	adds	r3, #8
 8006a4c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a50:	e853 3f00 	ldrex	r3, [r3]
 8006a54:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	3308      	adds	r3, #8
 8006a66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a6c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a72:	e841 2300 	strex	r3, r2, [r1]
 8006a76:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d1e3      	bne.n	8006a46 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2220      	movs	r2, #32
 8006a82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a94:	e853 3f00 	ldrex	r3, [r3]
 8006a98:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a9c:	f023 0310 	bic.w	r3, r3, #16
 8006aa0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006aae:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ab0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ab4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ab6:	e841 2300 	strex	r3, r2, [r1]
 8006aba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006abc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1e4      	bne.n	8006a8c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7fa ff41 	bl	8001950 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2202      	movs	r2, #2
 8006ad2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 f91d 	bl	8006d28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006aee:	e0fd      	b.n	8006cec <HAL_UART_IRQHandler+0x760>
 8006af0:	40020010 	.word	0x40020010
 8006af4:	40020028 	.word	0x40020028
 8006af8:	40020040 	.word	0x40020040
 8006afc:	40020058 	.word	0x40020058
 8006b00:	40020070 	.word	0x40020070
 8006b04:	40020088 	.word	0x40020088
 8006b08:	400200a0 	.word	0x400200a0
 8006b0c:	400200b8 	.word	0x400200b8
 8006b10:	40020410 	.word	0x40020410
 8006b14:	40020428 	.word	0x40020428
 8006b18:	40020440 	.word	0x40020440
 8006b1c:	40020458 	.word	0x40020458
 8006b20:	40020470 	.word	0x40020470
 8006b24:	40020488 	.word	0x40020488
 8006b28:	400204a0 	.word	0x400204a0
 8006b2c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	1ad3      	subs	r3, r2, r3
 8006b40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f000 80cf 	beq.w	8006cf0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8006b52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	f000 80ca 	beq.w	8006cf0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b64:	e853 3f00 	ldrex	r3, [r3]
 8006b68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	461a      	mov	r2, r3
 8006b7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b7e:	647b      	str	r3, [r7, #68]	; 0x44
 8006b80:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b86:	e841 2300 	strex	r3, r2, [r1]
 8006b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1e4      	bne.n	8006b5c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	3308      	adds	r3, #8
 8006b98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9c:	e853 3f00 	ldrex	r3, [r3]
 8006ba0:	623b      	str	r3, [r7, #32]
   return(result);
 8006ba2:	6a3a      	ldr	r2, [r7, #32]
 8006ba4:	4b55      	ldr	r3, [pc, #340]	; (8006cfc <HAL_UART_IRQHandler+0x770>)
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	3308      	adds	r3, #8
 8006bb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006bb6:	633a      	str	r2, [r7, #48]	; 0x30
 8006bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bbe:	e841 2300 	strex	r3, r2, [r1]
 8006bc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1e3      	bne.n	8006b92 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2220      	movs	r2, #32
 8006bce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	e853 3f00 	ldrex	r3, [r3]
 8006bea:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f023 0310 	bic.w	r3, r3, #16
 8006bf2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006c00:	61fb      	str	r3, [r7, #28]
 8006c02:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c04:	69b9      	ldr	r1, [r7, #24]
 8006c06:	69fa      	ldr	r2, [r7, #28]
 8006c08:	e841 2300 	strex	r3, r2, [r1]
 8006c0c:	617b      	str	r3, [r7, #20]
   return(result);
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1e4      	bne.n	8006bde <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2202      	movs	r2, #2
 8006c18:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f881 	bl	8006d28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c26:	e063      	b.n	8006cf0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00e      	beq.n	8006c52 <HAL_UART_IRQHandler+0x6c6>
 8006c34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d008      	beq.n	8006c52 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006c48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f001 ff7e 	bl	8008b4c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c50:	e051      	b.n	8006cf6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d014      	beq.n	8006c88 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006c5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d105      	bne.n	8006c76 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006c6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d008      	beq.n	8006c88 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d03a      	beq.n	8006cf4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	4798      	blx	r3
    }
    return;
 8006c86:	e035      	b.n	8006cf4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006c88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d009      	beq.n	8006ca8 <HAL_UART_IRQHandler+0x71c>
 8006c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d003      	beq.n	8006ca8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f001 fa0b 	bl	80080bc <UART_EndTransmit_IT>
    return;
 8006ca6:	e026      	b.n	8006cf6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d009      	beq.n	8006cc8 <HAL_UART_IRQHandler+0x73c>
 8006cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cb8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d003      	beq.n	8006cc8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f001 ff57 	bl	8008b74 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006cc6:	e016      	b.n	8006cf6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ccc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d010      	beq.n	8006cf6 <HAL_UART_IRQHandler+0x76a>
 8006cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	da0c      	bge.n	8006cf6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f001 ff3f 	bl	8008b60 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ce2:	e008      	b.n	8006cf6 <HAL_UART_IRQHandler+0x76a>
      return;
 8006ce4:	bf00      	nop
 8006ce6:	e006      	b.n	8006cf6 <HAL_UART_IRQHandler+0x76a>
    return;
 8006ce8:	bf00      	nop
 8006cea:	e004      	b.n	8006cf6 <HAL_UART_IRQHandler+0x76a>
      return;
 8006cec:	bf00      	nop
 8006cee:	e002      	b.n	8006cf6 <HAL_UART_IRQHandler+0x76a>
      return;
 8006cf0:	bf00      	nop
 8006cf2:	e000      	b.n	8006cf6 <HAL_UART_IRQHandler+0x76a>
    return;
 8006cf4:	bf00      	nop
  }
}
 8006cf6:	37e8      	adds	r7, #232	; 0xe8
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	effffffe 	.word	0xeffffffe

08006d00 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	460b      	mov	r3, r1
 8006d32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d44:	b092      	sub	sp, #72	; 0x48
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	689a      	ldr	r2, [r3, #8]
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	431a      	orrs	r2, r3
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	431a      	orrs	r2, r3
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	69db      	ldr	r3, [r3, #28]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	4bbe      	ldr	r3, [pc, #760]	; (8007068 <UART_SetConfig+0x328>)
 8006d70:	4013      	ands	r3, r2
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	6812      	ldr	r2, [r2, #0]
 8006d76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d78:	430b      	orrs	r3, r1
 8006d7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	68da      	ldr	r2, [r3, #12]
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	699b      	ldr	r3, [r3, #24]
 8006d96:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4ab3      	ldr	r2, [pc, #716]	; (800706c <UART_SetConfig+0x32c>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d004      	beq.n	8006dac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	6a1b      	ldr	r3, [r3, #32]
 8006da6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006da8:	4313      	orrs	r3, r2
 8006daa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	689a      	ldr	r2, [r3, #8]
 8006db2:	4baf      	ldr	r3, [pc, #700]	; (8007070 <UART_SetConfig+0x330>)
 8006db4:	4013      	ands	r3, r2
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	6812      	ldr	r2, [r2, #0]
 8006dba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006dbc:	430b      	orrs	r3, r1
 8006dbe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc6:	f023 010f 	bic.w	r1, r3, #15
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4aa6      	ldr	r2, [pc, #664]	; (8007074 <UART_SetConfig+0x334>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d177      	bne.n	8006ed0 <UART_SetConfig+0x190>
 8006de0:	4ba5      	ldr	r3, [pc, #660]	; (8007078 <UART_SetConfig+0x338>)
 8006de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006de8:	2b28      	cmp	r3, #40	; 0x28
 8006dea:	d86d      	bhi.n	8006ec8 <UART_SetConfig+0x188>
 8006dec:	a201      	add	r2, pc, #4	; (adr r2, 8006df4 <UART_SetConfig+0xb4>)
 8006dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df2:	bf00      	nop
 8006df4:	08006e99 	.word	0x08006e99
 8006df8:	08006ec9 	.word	0x08006ec9
 8006dfc:	08006ec9 	.word	0x08006ec9
 8006e00:	08006ec9 	.word	0x08006ec9
 8006e04:	08006ec9 	.word	0x08006ec9
 8006e08:	08006ec9 	.word	0x08006ec9
 8006e0c:	08006ec9 	.word	0x08006ec9
 8006e10:	08006ec9 	.word	0x08006ec9
 8006e14:	08006ea1 	.word	0x08006ea1
 8006e18:	08006ec9 	.word	0x08006ec9
 8006e1c:	08006ec9 	.word	0x08006ec9
 8006e20:	08006ec9 	.word	0x08006ec9
 8006e24:	08006ec9 	.word	0x08006ec9
 8006e28:	08006ec9 	.word	0x08006ec9
 8006e2c:	08006ec9 	.word	0x08006ec9
 8006e30:	08006ec9 	.word	0x08006ec9
 8006e34:	08006ea9 	.word	0x08006ea9
 8006e38:	08006ec9 	.word	0x08006ec9
 8006e3c:	08006ec9 	.word	0x08006ec9
 8006e40:	08006ec9 	.word	0x08006ec9
 8006e44:	08006ec9 	.word	0x08006ec9
 8006e48:	08006ec9 	.word	0x08006ec9
 8006e4c:	08006ec9 	.word	0x08006ec9
 8006e50:	08006ec9 	.word	0x08006ec9
 8006e54:	08006eb1 	.word	0x08006eb1
 8006e58:	08006ec9 	.word	0x08006ec9
 8006e5c:	08006ec9 	.word	0x08006ec9
 8006e60:	08006ec9 	.word	0x08006ec9
 8006e64:	08006ec9 	.word	0x08006ec9
 8006e68:	08006ec9 	.word	0x08006ec9
 8006e6c:	08006ec9 	.word	0x08006ec9
 8006e70:	08006ec9 	.word	0x08006ec9
 8006e74:	08006eb9 	.word	0x08006eb9
 8006e78:	08006ec9 	.word	0x08006ec9
 8006e7c:	08006ec9 	.word	0x08006ec9
 8006e80:	08006ec9 	.word	0x08006ec9
 8006e84:	08006ec9 	.word	0x08006ec9
 8006e88:	08006ec9 	.word	0x08006ec9
 8006e8c:	08006ec9 	.word	0x08006ec9
 8006e90:	08006ec9 	.word	0x08006ec9
 8006e94:	08006ec1 	.word	0x08006ec1
 8006e98:	2301      	movs	r3, #1
 8006e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e9e:	e326      	b.n	80074ee <UART_SetConfig+0x7ae>
 8006ea0:	2304      	movs	r3, #4
 8006ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ea6:	e322      	b.n	80074ee <UART_SetConfig+0x7ae>
 8006ea8:	2308      	movs	r3, #8
 8006eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eae:	e31e      	b.n	80074ee <UART_SetConfig+0x7ae>
 8006eb0:	2310      	movs	r3, #16
 8006eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eb6:	e31a      	b.n	80074ee <UART_SetConfig+0x7ae>
 8006eb8:	2320      	movs	r3, #32
 8006eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ebe:	e316      	b.n	80074ee <UART_SetConfig+0x7ae>
 8006ec0:	2340      	movs	r3, #64	; 0x40
 8006ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ec6:	e312      	b.n	80074ee <UART_SetConfig+0x7ae>
 8006ec8:	2380      	movs	r3, #128	; 0x80
 8006eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ece:	e30e      	b.n	80074ee <UART_SetConfig+0x7ae>
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a69      	ldr	r2, [pc, #420]	; (800707c <UART_SetConfig+0x33c>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d130      	bne.n	8006f3c <UART_SetConfig+0x1fc>
 8006eda:	4b67      	ldr	r3, [pc, #412]	; (8007078 <UART_SetConfig+0x338>)
 8006edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ede:	f003 0307 	and.w	r3, r3, #7
 8006ee2:	2b05      	cmp	r3, #5
 8006ee4:	d826      	bhi.n	8006f34 <UART_SetConfig+0x1f4>
 8006ee6:	a201      	add	r2, pc, #4	; (adr r2, 8006eec <UART_SetConfig+0x1ac>)
 8006ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eec:	08006f05 	.word	0x08006f05
 8006ef0:	08006f0d 	.word	0x08006f0d
 8006ef4:	08006f15 	.word	0x08006f15
 8006ef8:	08006f1d 	.word	0x08006f1d
 8006efc:	08006f25 	.word	0x08006f25
 8006f00:	08006f2d 	.word	0x08006f2d
 8006f04:	2300      	movs	r3, #0
 8006f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f0a:	e2f0      	b.n	80074ee <UART_SetConfig+0x7ae>
 8006f0c:	2304      	movs	r3, #4
 8006f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f12:	e2ec      	b.n	80074ee <UART_SetConfig+0x7ae>
 8006f14:	2308      	movs	r3, #8
 8006f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f1a:	e2e8      	b.n	80074ee <UART_SetConfig+0x7ae>
 8006f1c:	2310      	movs	r3, #16
 8006f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f22:	e2e4      	b.n	80074ee <UART_SetConfig+0x7ae>
 8006f24:	2320      	movs	r3, #32
 8006f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f2a:	e2e0      	b.n	80074ee <UART_SetConfig+0x7ae>
 8006f2c:	2340      	movs	r3, #64	; 0x40
 8006f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f32:	e2dc      	b.n	80074ee <UART_SetConfig+0x7ae>
 8006f34:	2380      	movs	r3, #128	; 0x80
 8006f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f3a:	e2d8      	b.n	80074ee <UART_SetConfig+0x7ae>
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a4f      	ldr	r2, [pc, #316]	; (8007080 <UART_SetConfig+0x340>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d130      	bne.n	8006fa8 <UART_SetConfig+0x268>
 8006f46:	4b4c      	ldr	r3, [pc, #304]	; (8007078 <UART_SetConfig+0x338>)
 8006f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f4a:	f003 0307 	and.w	r3, r3, #7
 8006f4e:	2b05      	cmp	r3, #5
 8006f50:	d826      	bhi.n	8006fa0 <UART_SetConfig+0x260>
 8006f52:	a201      	add	r2, pc, #4	; (adr r2, 8006f58 <UART_SetConfig+0x218>)
 8006f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f58:	08006f71 	.word	0x08006f71
 8006f5c:	08006f79 	.word	0x08006f79
 8006f60:	08006f81 	.word	0x08006f81
 8006f64:	08006f89 	.word	0x08006f89
 8006f68:	08006f91 	.word	0x08006f91
 8006f6c:	08006f99 	.word	0x08006f99
 8006f70:	2300      	movs	r3, #0
 8006f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f76:	e2ba      	b.n	80074ee <UART_SetConfig+0x7ae>
 8006f78:	2304      	movs	r3, #4
 8006f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f7e:	e2b6      	b.n	80074ee <UART_SetConfig+0x7ae>
 8006f80:	2308      	movs	r3, #8
 8006f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f86:	e2b2      	b.n	80074ee <UART_SetConfig+0x7ae>
 8006f88:	2310      	movs	r3, #16
 8006f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f8e:	e2ae      	b.n	80074ee <UART_SetConfig+0x7ae>
 8006f90:	2320      	movs	r3, #32
 8006f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f96:	e2aa      	b.n	80074ee <UART_SetConfig+0x7ae>
 8006f98:	2340      	movs	r3, #64	; 0x40
 8006f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f9e:	e2a6      	b.n	80074ee <UART_SetConfig+0x7ae>
 8006fa0:	2380      	movs	r3, #128	; 0x80
 8006fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fa6:	e2a2      	b.n	80074ee <UART_SetConfig+0x7ae>
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a35      	ldr	r2, [pc, #212]	; (8007084 <UART_SetConfig+0x344>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d130      	bne.n	8007014 <UART_SetConfig+0x2d4>
 8006fb2:	4b31      	ldr	r3, [pc, #196]	; (8007078 <UART_SetConfig+0x338>)
 8006fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fb6:	f003 0307 	and.w	r3, r3, #7
 8006fba:	2b05      	cmp	r3, #5
 8006fbc:	d826      	bhi.n	800700c <UART_SetConfig+0x2cc>
 8006fbe:	a201      	add	r2, pc, #4	; (adr r2, 8006fc4 <UART_SetConfig+0x284>)
 8006fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc4:	08006fdd 	.word	0x08006fdd
 8006fc8:	08006fe5 	.word	0x08006fe5
 8006fcc:	08006fed 	.word	0x08006fed
 8006fd0:	08006ff5 	.word	0x08006ff5
 8006fd4:	08006ffd 	.word	0x08006ffd
 8006fd8:	08007005 	.word	0x08007005
 8006fdc:	2300      	movs	r3, #0
 8006fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fe2:	e284      	b.n	80074ee <UART_SetConfig+0x7ae>
 8006fe4:	2304      	movs	r3, #4
 8006fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fea:	e280      	b.n	80074ee <UART_SetConfig+0x7ae>
 8006fec:	2308      	movs	r3, #8
 8006fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ff2:	e27c      	b.n	80074ee <UART_SetConfig+0x7ae>
 8006ff4:	2310      	movs	r3, #16
 8006ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ffa:	e278      	b.n	80074ee <UART_SetConfig+0x7ae>
 8006ffc:	2320      	movs	r3, #32
 8006ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007002:	e274      	b.n	80074ee <UART_SetConfig+0x7ae>
 8007004:	2340      	movs	r3, #64	; 0x40
 8007006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800700a:	e270      	b.n	80074ee <UART_SetConfig+0x7ae>
 800700c:	2380      	movs	r3, #128	; 0x80
 800700e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007012:	e26c      	b.n	80074ee <UART_SetConfig+0x7ae>
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a1b      	ldr	r2, [pc, #108]	; (8007088 <UART_SetConfig+0x348>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d142      	bne.n	80070a4 <UART_SetConfig+0x364>
 800701e:	4b16      	ldr	r3, [pc, #88]	; (8007078 <UART_SetConfig+0x338>)
 8007020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007022:	f003 0307 	and.w	r3, r3, #7
 8007026:	2b05      	cmp	r3, #5
 8007028:	d838      	bhi.n	800709c <UART_SetConfig+0x35c>
 800702a:	a201      	add	r2, pc, #4	; (adr r2, 8007030 <UART_SetConfig+0x2f0>)
 800702c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007030:	08007049 	.word	0x08007049
 8007034:	08007051 	.word	0x08007051
 8007038:	08007059 	.word	0x08007059
 800703c:	08007061 	.word	0x08007061
 8007040:	0800708d 	.word	0x0800708d
 8007044:	08007095 	.word	0x08007095
 8007048:	2300      	movs	r3, #0
 800704a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800704e:	e24e      	b.n	80074ee <UART_SetConfig+0x7ae>
 8007050:	2304      	movs	r3, #4
 8007052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007056:	e24a      	b.n	80074ee <UART_SetConfig+0x7ae>
 8007058:	2308      	movs	r3, #8
 800705a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800705e:	e246      	b.n	80074ee <UART_SetConfig+0x7ae>
 8007060:	2310      	movs	r3, #16
 8007062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007066:	e242      	b.n	80074ee <UART_SetConfig+0x7ae>
 8007068:	cfff69f3 	.word	0xcfff69f3
 800706c:	58000c00 	.word	0x58000c00
 8007070:	11fff4ff 	.word	0x11fff4ff
 8007074:	40011000 	.word	0x40011000
 8007078:	58024400 	.word	0x58024400
 800707c:	40004400 	.word	0x40004400
 8007080:	40004800 	.word	0x40004800
 8007084:	40004c00 	.word	0x40004c00
 8007088:	40005000 	.word	0x40005000
 800708c:	2320      	movs	r3, #32
 800708e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007092:	e22c      	b.n	80074ee <UART_SetConfig+0x7ae>
 8007094:	2340      	movs	r3, #64	; 0x40
 8007096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800709a:	e228      	b.n	80074ee <UART_SetConfig+0x7ae>
 800709c:	2380      	movs	r3, #128	; 0x80
 800709e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070a2:	e224      	b.n	80074ee <UART_SetConfig+0x7ae>
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4ab1      	ldr	r2, [pc, #708]	; (8007370 <UART_SetConfig+0x630>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d176      	bne.n	800719c <UART_SetConfig+0x45c>
 80070ae:	4bb1      	ldr	r3, [pc, #708]	; (8007374 <UART_SetConfig+0x634>)
 80070b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070b6:	2b28      	cmp	r3, #40	; 0x28
 80070b8:	d86c      	bhi.n	8007194 <UART_SetConfig+0x454>
 80070ba:	a201      	add	r2, pc, #4	; (adr r2, 80070c0 <UART_SetConfig+0x380>)
 80070bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c0:	08007165 	.word	0x08007165
 80070c4:	08007195 	.word	0x08007195
 80070c8:	08007195 	.word	0x08007195
 80070cc:	08007195 	.word	0x08007195
 80070d0:	08007195 	.word	0x08007195
 80070d4:	08007195 	.word	0x08007195
 80070d8:	08007195 	.word	0x08007195
 80070dc:	08007195 	.word	0x08007195
 80070e0:	0800716d 	.word	0x0800716d
 80070e4:	08007195 	.word	0x08007195
 80070e8:	08007195 	.word	0x08007195
 80070ec:	08007195 	.word	0x08007195
 80070f0:	08007195 	.word	0x08007195
 80070f4:	08007195 	.word	0x08007195
 80070f8:	08007195 	.word	0x08007195
 80070fc:	08007195 	.word	0x08007195
 8007100:	08007175 	.word	0x08007175
 8007104:	08007195 	.word	0x08007195
 8007108:	08007195 	.word	0x08007195
 800710c:	08007195 	.word	0x08007195
 8007110:	08007195 	.word	0x08007195
 8007114:	08007195 	.word	0x08007195
 8007118:	08007195 	.word	0x08007195
 800711c:	08007195 	.word	0x08007195
 8007120:	0800717d 	.word	0x0800717d
 8007124:	08007195 	.word	0x08007195
 8007128:	08007195 	.word	0x08007195
 800712c:	08007195 	.word	0x08007195
 8007130:	08007195 	.word	0x08007195
 8007134:	08007195 	.word	0x08007195
 8007138:	08007195 	.word	0x08007195
 800713c:	08007195 	.word	0x08007195
 8007140:	08007185 	.word	0x08007185
 8007144:	08007195 	.word	0x08007195
 8007148:	08007195 	.word	0x08007195
 800714c:	08007195 	.word	0x08007195
 8007150:	08007195 	.word	0x08007195
 8007154:	08007195 	.word	0x08007195
 8007158:	08007195 	.word	0x08007195
 800715c:	08007195 	.word	0x08007195
 8007160:	0800718d 	.word	0x0800718d
 8007164:	2301      	movs	r3, #1
 8007166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800716a:	e1c0      	b.n	80074ee <UART_SetConfig+0x7ae>
 800716c:	2304      	movs	r3, #4
 800716e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007172:	e1bc      	b.n	80074ee <UART_SetConfig+0x7ae>
 8007174:	2308      	movs	r3, #8
 8007176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800717a:	e1b8      	b.n	80074ee <UART_SetConfig+0x7ae>
 800717c:	2310      	movs	r3, #16
 800717e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007182:	e1b4      	b.n	80074ee <UART_SetConfig+0x7ae>
 8007184:	2320      	movs	r3, #32
 8007186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800718a:	e1b0      	b.n	80074ee <UART_SetConfig+0x7ae>
 800718c:	2340      	movs	r3, #64	; 0x40
 800718e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007192:	e1ac      	b.n	80074ee <UART_SetConfig+0x7ae>
 8007194:	2380      	movs	r3, #128	; 0x80
 8007196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800719a:	e1a8      	b.n	80074ee <UART_SetConfig+0x7ae>
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a75      	ldr	r2, [pc, #468]	; (8007378 <UART_SetConfig+0x638>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d130      	bne.n	8007208 <UART_SetConfig+0x4c8>
 80071a6:	4b73      	ldr	r3, [pc, #460]	; (8007374 <UART_SetConfig+0x634>)
 80071a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071aa:	f003 0307 	and.w	r3, r3, #7
 80071ae:	2b05      	cmp	r3, #5
 80071b0:	d826      	bhi.n	8007200 <UART_SetConfig+0x4c0>
 80071b2:	a201      	add	r2, pc, #4	; (adr r2, 80071b8 <UART_SetConfig+0x478>)
 80071b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b8:	080071d1 	.word	0x080071d1
 80071bc:	080071d9 	.word	0x080071d9
 80071c0:	080071e1 	.word	0x080071e1
 80071c4:	080071e9 	.word	0x080071e9
 80071c8:	080071f1 	.word	0x080071f1
 80071cc:	080071f9 	.word	0x080071f9
 80071d0:	2300      	movs	r3, #0
 80071d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071d6:	e18a      	b.n	80074ee <UART_SetConfig+0x7ae>
 80071d8:	2304      	movs	r3, #4
 80071da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071de:	e186      	b.n	80074ee <UART_SetConfig+0x7ae>
 80071e0:	2308      	movs	r3, #8
 80071e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071e6:	e182      	b.n	80074ee <UART_SetConfig+0x7ae>
 80071e8:	2310      	movs	r3, #16
 80071ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ee:	e17e      	b.n	80074ee <UART_SetConfig+0x7ae>
 80071f0:	2320      	movs	r3, #32
 80071f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071f6:	e17a      	b.n	80074ee <UART_SetConfig+0x7ae>
 80071f8:	2340      	movs	r3, #64	; 0x40
 80071fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071fe:	e176      	b.n	80074ee <UART_SetConfig+0x7ae>
 8007200:	2380      	movs	r3, #128	; 0x80
 8007202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007206:	e172      	b.n	80074ee <UART_SetConfig+0x7ae>
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a5b      	ldr	r2, [pc, #364]	; (800737c <UART_SetConfig+0x63c>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d130      	bne.n	8007274 <UART_SetConfig+0x534>
 8007212:	4b58      	ldr	r3, [pc, #352]	; (8007374 <UART_SetConfig+0x634>)
 8007214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007216:	f003 0307 	and.w	r3, r3, #7
 800721a:	2b05      	cmp	r3, #5
 800721c:	d826      	bhi.n	800726c <UART_SetConfig+0x52c>
 800721e:	a201      	add	r2, pc, #4	; (adr r2, 8007224 <UART_SetConfig+0x4e4>)
 8007220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007224:	0800723d 	.word	0x0800723d
 8007228:	08007245 	.word	0x08007245
 800722c:	0800724d 	.word	0x0800724d
 8007230:	08007255 	.word	0x08007255
 8007234:	0800725d 	.word	0x0800725d
 8007238:	08007265 	.word	0x08007265
 800723c:	2300      	movs	r3, #0
 800723e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007242:	e154      	b.n	80074ee <UART_SetConfig+0x7ae>
 8007244:	2304      	movs	r3, #4
 8007246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800724a:	e150      	b.n	80074ee <UART_SetConfig+0x7ae>
 800724c:	2308      	movs	r3, #8
 800724e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007252:	e14c      	b.n	80074ee <UART_SetConfig+0x7ae>
 8007254:	2310      	movs	r3, #16
 8007256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800725a:	e148      	b.n	80074ee <UART_SetConfig+0x7ae>
 800725c:	2320      	movs	r3, #32
 800725e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007262:	e144      	b.n	80074ee <UART_SetConfig+0x7ae>
 8007264:	2340      	movs	r3, #64	; 0x40
 8007266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800726a:	e140      	b.n	80074ee <UART_SetConfig+0x7ae>
 800726c:	2380      	movs	r3, #128	; 0x80
 800726e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007272:	e13c      	b.n	80074ee <UART_SetConfig+0x7ae>
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a41      	ldr	r2, [pc, #260]	; (8007380 <UART_SetConfig+0x640>)
 800727a:	4293      	cmp	r3, r2
 800727c:	f040 8082 	bne.w	8007384 <UART_SetConfig+0x644>
 8007280:	4b3c      	ldr	r3, [pc, #240]	; (8007374 <UART_SetConfig+0x634>)
 8007282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007284:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007288:	2b28      	cmp	r3, #40	; 0x28
 800728a:	d86d      	bhi.n	8007368 <UART_SetConfig+0x628>
 800728c:	a201      	add	r2, pc, #4	; (adr r2, 8007294 <UART_SetConfig+0x554>)
 800728e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007292:	bf00      	nop
 8007294:	08007339 	.word	0x08007339
 8007298:	08007369 	.word	0x08007369
 800729c:	08007369 	.word	0x08007369
 80072a0:	08007369 	.word	0x08007369
 80072a4:	08007369 	.word	0x08007369
 80072a8:	08007369 	.word	0x08007369
 80072ac:	08007369 	.word	0x08007369
 80072b0:	08007369 	.word	0x08007369
 80072b4:	08007341 	.word	0x08007341
 80072b8:	08007369 	.word	0x08007369
 80072bc:	08007369 	.word	0x08007369
 80072c0:	08007369 	.word	0x08007369
 80072c4:	08007369 	.word	0x08007369
 80072c8:	08007369 	.word	0x08007369
 80072cc:	08007369 	.word	0x08007369
 80072d0:	08007369 	.word	0x08007369
 80072d4:	08007349 	.word	0x08007349
 80072d8:	08007369 	.word	0x08007369
 80072dc:	08007369 	.word	0x08007369
 80072e0:	08007369 	.word	0x08007369
 80072e4:	08007369 	.word	0x08007369
 80072e8:	08007369 	.word	0x08007369
 80072ec:	08007369 	.word	0x08007369
 80072f0:	08007369 	.word	0x08007369
 80072f4:	08007351 	.word	0x08007351
 80072f8:	08007369 	.word	0x08007369
 80072fc:	08007369 	.word	0x08007369
 8007300:	08007369 	.word	0x08007369
 8007304:	08007369 	.word	0x08007369
 8007308:	08007369 	.word	0x08007369
 800730c:	08007369 	.word	0x08007369
 8007310:	08007369 	.word	0x08007369
 8007314:	08007359 	.word	0x08007359
 8007318:	08007369 	.word	0x08007369
 800731c:	08007369 	.word	0x08007369
 8007320:	08007369 	.word	0x08007369
 8007324:	08007369 	.word	0x08007369
 8007328:	08007369 	.word	0x08007369
 800732c:	08007369 	.word	0x08007369
 8007330:	08007369 	.word	0x08007369
 8007334:	08007361 	.word	0x08007361
 8007338:	2301      	movs	r3, #1
 800733a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800733e:	e0d6      	b.n	80074ee <UART_SetConfig+0x7ae>
 8007340:	2304      	movs	r3, #4
 8007342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007346:	e0d2      	b.n	80074ee <UART_SetConfig+0x7ae>
 8007348:	2308      	movs	r3, #8
 800734a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800734e:	e0ce      	b.n	80074ee <UART_SetConfig+0x7ae>
 8007350:	2310      	movs	r3, #16
 8007352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007356:	e0ca      	b.n	80074ee <UART_SetConfig+0x7ae>
 8007358:	2320      	movs	r3, #32
 800735a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800735e:	e0c6      	b.n	80074ee <UART_SetConfig+0x7ae>
 8007360:	2340      	movs	r3, #64	; 0x40
 8007362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007366:	e0c2      	b.n	80074ee <UART_SetConfig+0x7ae>
 8007368:	2380      	movs	r3, #128	; 0x80
 800736a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800736e:	e0be      	b.n	80074ee <UART_SetConfig+0x7ae>
 8007370:	40011400 	.word	0x40011400
 8007374:	58024400 	.word	0x58024400
 8007378:	40007800 	.word	0x40007800
 800737c:	40007c00 	.word	0x40007c00
 8007380:	40011800 	.word	0x40011800
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4aad      	ldr	r2, [pc, #692]	; (8007640 <UART_SetConfig+0x900>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d176      	bne.n	800747c <UART_SetConfig+0x73c>
 800738e:	4bad      	ldr	r3, [pc, #692]	; (8007644 <UART_SetConfig+0x904>)
 8007390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007392:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007396:	2b28      	cmp	r3, #40	; 0x28
 8007398:	d86c      	bhi.n	8007474 <UART_SetConfig+0x734>
 800739a:	a201      	add	r2, pc, #4	; (adr r2, 80073a0 <UART_SetConfig+0x660>)
 800739c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a0:	08007445 	.word	0x08007445
 80073a4:	08007475 	.word	0x08007475
 80073a8:	08007475 	.word	0x08007475
 80073ac:	08007475 	.word	0x08007475
 80073b0:	08007475 	.word	0x08007475
 80073b4:	08007475 	.word	0x08007475
 80073b8:	08007475 	.word	0x08007475
 80073bc:	08007475 	.word	0x08007475
 80073c0:	0800744d 	.word	0x0800744d
 80073c4:	08007475 	.word	0x08007475
 80073c8:	08007475 	.word	0x08007475
 80073cc:	08007475 	.word	0x08007475
 80073d0:	08007475 	.word	0x08007475
 80073d4:	08007475 	.word	0x08007475
 80073d8:	08007475 	.word	0x08007475
 80073dc:	08007475 	.word	0x08007475
 80073e0:	08007455 	.word	0x08007455
 80073e4:	08007475 	.word	0x08007475
 80073e8:	08007475 	.word	0x08007475
 80073ec:	08007475 	.word	0x08007475
 80073f0:	08007475 	.word	0x08007475
 80073f4:	08007475 	.word	0x08007475
 80073f8:	08007475 	.word	0x08007475
 80073fc:	08007475 	.word	0x08007475
 8007400:	0800745d 	.word	0x0800745d
 8007404:	08007475 	.word	0x08007475
 8007408:	08007475 	.word	0x08007475
 800740c:	08007475 	.word	0x08007475
 8007410:	08007475 	.word	0x08007475
 8007414:	08007475 	.word	0x08007475
 8007418:	08007475 	.word	0x08007475
 800741c:	08007475 	.word	0x08007475
 8007420:	08007465 	.word	0x08007465
 8007424:	08007475 	.word	0x08007475
 8007428:	08007475 	.word	0x08007475
 800742c:	08007475 	.word	0x08007475
 8007430:	08007475 	.word	0x08007475
 8007434:	08007475 	.word	0x08007475
 8007438:	08007475 	.word	0x08007475
 800743c:	08007475 	.word	0x08007475
 8007440:	0800746d 	.word	0x0800746d
 8007444:	2301      	movs	r3, #1
 8007446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800744a:	e050      	b.n	80074ee <UART_SetConfig+0x7ae>
 800744c:	2304      	movs	r3, #4
 800744e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007452:	e04c      	b.n	80074ee <UART_SetConfig+0x7ae>
 8007454:	2308      	movs	r3, #8
 8007456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800745a:	e048      	b.n	80074ee <UART_SetConfig+0x7ae>
 800745c:	2310      	movs	r3, #16
 800745e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007462:	e044      	b.n	80074ee <UART_SetConfig+0x7ae>
 8007464:	2320      	movs	r3, #32
 8007466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800746a:	e040      	b.n	80074ee <UART_SetConfig+0x7ae>
 800746c:	2340      	movs	r3, #64	; 0x40
 800746e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007472:	e03c      	b.n	80074ee <UART_SetConfig+0x7ae>
 8007474:	2380      	movs	r3, #128	; 0x80
 8007476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800747a:	e038      	b.n	80074ee <UART_SetConfig+0x7ae>
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a71      	ldr	r2, [pc, #452]	; (8007648 <UART_SetConfig+0x908>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d130      	bne.n	80074e8 <UART_SetConfig+0x7a8>
 8007486:	4b6f      	ldr	r3, [pc, #444]	; (8007644 <UART_SetConfig+0x904>)
 8007488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800748a:	f003 0307 	and.w	r3, r3, #7
 800748e:	2b05      	cmp	r3, #5
 8007490:	d826      	bhi.n	80074e0 <UART_SetConfig+0x7a0>
 8007492:	a201      	add	r2, pc, #4	; (adr r2, 8007498 <UART_SetConfig+0x758>)
 8007494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007498:	080074b1 	.word	0x080074b1
 800749c:	080074b9 	.word	0x080074b9
 80074a0:	080074c1 	.word	0x080074c1
 80074a4:	080074c9 	.word	0x080074c9
 80074a8:	080074d1 	.word	0x080074d1
 80074ac:	080074d9 	.word	0x080074d9
 80074b0:	2302      	movs	r3, #2
 80074b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074b6:	e01a      	b.n	80074ee <UART_SetConfig+0x7ae>
 80074b8:	2304      	movs	r3, #4
 80074ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074be:	e016      	b.n	80074ee <UART_SetConfig+0x7ae>
 80074c0:	2308      	movs	r3, #8
 80074c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074c6:	e012      	b.n	80074ee <UART_SetConfig+0x7ae>
 80074c8:	2310      	movs	r3, #16
 80074ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ce:	e00e      	b.n	80074ee <UART_SetConfig+0x7ae>
 80074d0:	2320      	movs	r3, #32
 80074d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074d6:	e00a      	b.n	80074ee <UART_SetConfig+0x7ae>
 80074d8:	2340      	movs	r3, #64	; 0x40
 80074da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074de:	e006      	b.n	80074ee <UART_SetConfig+0x7ae>
 80074e0:	2380      	movs	r3, #128	; 0x80
 80074e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074e6:	e002      	b.n	80074ee <UART_SetConfig+0x7ae>
 80074e8:	2380      	movs	r3, #128	; 0x80
 80074ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a55      	ldr	r2, [pc, #340]	; (8007648 <UART_SetConfig+0x908>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	f040 80f8 	bne.w	80076ea <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80074fa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80074fe:	2b20      	cmp	r3, #32
 8007500:	dc46      	bgt.n	8007590 <UART_SetConfig+0x850>
 8007502:	2b02      	cmp	r3, #2
 8007504:	db75      	blt.n	80075f2 <UART_SetConfig+0x8b2>
 8007506:	3b02      	subs	r3, #2
 8007508:	2b1e      	cmp	r3, #30
 800750a:	d872      	bhi.n	80075f2 <UART_SetConfig+0x8b2>
 800750c:	a201      	add	r2, pc, #4	; (adr r2, 8007514 <UART_SetConfig+0x7d4>)
 800750e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007512:	bf00      	nop
 8007514:	08007597 	.word	0x08007597
 8007518:	080075f3 	.word	0x080075f3
 800751c:	0800759f 	.word	0x0800759f
 8007520:	080075f3 	.word	0x080075f3
 8007524:	080075f3 	.word	0x080075f3
 8007528:	080075f3 	.word	0x080075f3
 800752c:	080075af 	.word	0x080075af
 8007530:	080075f3 	.word	0x080075f3
 8007534:	080075f3 	.word	0x080075f3
 8007538:	080075f3 	.word	0x080075f3
 800753c:	080075f3 	.word	0x080075f3
 8007540:	080075f3 	.word	0x080075f3
 8007544:	080075f3 	.word	0x080075f3
 8007548:	080075f3 	.word	0x080075f3
 800754c:	080075bf 	.word	0x080075bf
 8007550:	080075f3 	.word	0x080075f3
 8007554:	080075f3 	.word	0x080075f3
 8007558:	080075f3 	.word	0x080075f3
 800755c:	080075f3 	.word	0x080075f3
 8007560:	080075f3 	.word	0x080075f3
 8007564:	080075f3 	.word	0x080075f3
 8007568:	080075f3 	.word	0x080075f3
 800756c:	080075f3 	.word	0x080075f3
 8007570:	080075f3 	.word	0x080075f3
 8007574:	080075f3 	.word	0x080075f3
 8007578:	080075f3 	.word	0x080075f3
 800757c:	080075f3 	.word	0x080075f3
 8007580:	080075f3 	.word	0x080075f3
 8007584:	080075f3 	.word	0x080075f3
 8007588:	080075f3 	.word	0x080075f3
 800758c:	080075e5 	.word	0x080075e5
 8007590:	2b40      	cmp	r3, #64	; 0x40
 8007592:	d02a      	beq.n	80075ea <UART_SetConfig+0x8aa>
 8007594:	e02d      	b.n	80075f2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007596:	f7fd faf9 	bl	8004b8c <HAL_RCCEx_GetD3PCLK1Freq>
 800759a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800759c:	e02f      	b.n	80075fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800759e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7fd fb08 	bl	8004bb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80075a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075ac:	e027      	b.n	80075fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075ae:	f107 0318 	add.w	r3, r7, #24
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7fd fc54 	bl	8004e60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075bc:	e01f      	b.n	80075fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075be:	4b21      	ldr	r3, [pc, #132]	; (8007644 <UART_SetConfig+0x904>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 0320 	and.w	r3, r3, #32
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d009      	beq.n	80075de <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80075ca:	4b1e      	ldr	r3, [pc, #120]	; (8007644 <UART_SetConfig+0x904>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	08db      	lsrs	r3, r3, #3
 80075d0:	f003 0303 	and.w	r3, r3, #3
 80075d4:	4a1d      	ldr	r2, [pc, #116]	; (800764c <UART_SetConfig+0x90c>)
 80075d6:	fa22 f303 	lsr.w	r3, r2, r3
 80075da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80075dc:	e00f      	b.n	80075fe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80075de:	4b1b      	ldr	r3, [pc, #108]	; (800764c <UART_SetConfig+0x90c>)
 80075e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075e2:	e00c      	b.n	80075fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80075e4:	4b1a      	ldr	r3, [pc, #104]	; (8007650 <UART_SetConfig+0x910>)
 80075e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075e8:	e009      	b.n	80075fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075f0:	e005      	b.n	80075fe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80075f2:	2300      	movs	r3, #0
 80075f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80075fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80075fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007600:	2b00      	cmp	r3, #0
 8007602:	f000 81ee 	beq.w	80079e2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760a:	4a12      	ldr	r2, [pc, #72]	; (8007654 <UART_SetConfig+0x914>)
 800760c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007610:	461a      	mov	r2, r3
 8007612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007614:	fbb3 f3f2 	udiv	r3, r3, r2
 8007618:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	685a      	ldr	r2, [r3, #4]
 800761e:	4613      	mov	r3, r2
 8007620:	005b      	lsls	r3, r3, #1
 8007622:	4413      	add	r3, r2
 8007624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007626:	429a      	cmp	r2, r3
 8007628:	d305      	bcc.n	8007636 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007632:	429a      	cmp	r2, r3
 8007634:	d910      	bls.n	8007658 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800763c:	e1d1      	b.n	80079e2 <UART_SetConfig+0xca2>
 800763e:	bf00      	nop
 8007640:	40011c00 	.word	0x40011c00
 8007644:	58024400 	.word	0x58024400
 8007648:	58000c00 	.word	0x58000c00
 800764c:	03d09000 	.word	0x03d09000
 8007650:	003d0900 	.word	0x003d0900
 8007654:	08009790 	.word	0x08009790
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800765a:	2200      	movs	r2, #0
 800765c:	60bb      	str	r3, [r7, #8]
 800765e:	60fa      	str	r2, [r7, #12]
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007664:	4ac0      	ldr	r2, [pc, #768]	; (8007968 <UART_SetConfig+0xc28>)
 8007666:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800766a:	b29b      	uxth	r3, r3
 800766c:	2200      	movs	r2, #0
 800766e:	603b      	str	r3, [r7, #0]
 8007670:	607a      	str	r2, [r7, #4]
 8007672:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007676:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800767a:	f7f8 fe91 	bl	80003a0 <__aeabi_uldivmod>
 800767e:	4602      	mov	r2, r0
 8007680:	460b      	mov	r3, r1
 8007682:	4610      	mov	r0, r2
 8007684:	4619      	mov	r1, r3
 8007686:	f04f 0200 	mov.w	r2, #0
 800768a:	f04f 0300 	mov.w	r3, #0
 800768e:	020b      	lsls	r3, r1, #8
 8007690:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007694:	0202      	lsls	r2, r0, #8
 8007696:	6979      	ldr	r1, [r7, #20]
 8007698:	6849      	ldr	r1, [r1, #4]
 800769a:	0849      	lsrs	r1, r1, #1
 800769c:	2000      	movs	r0, #0
 800769e:	460c      	mov	r4, r1
 80076a0:	4605      	mov	r5, r0
 80076a2:	eb12 0804 	adds.w	r8, r2, r4
 80076a6:	eb43 0905 	adc.w	r9, r3, r5
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	469a      	mov	sl, r3
 80076b2:	4693      	mov	fp, r2
 80076b4:	4652      	mov	r2, sl
 80076b6:	465b      	mov	r3, fp
 80076b8:	4640      	mov	r0, r8
 80076ba:	4649      	mov	r1, r9
 80076bc:	f7f8 fe70 	bl	80003a0 <__aeabi_uldivmod>
 80076c0:	4602      	mov	r2, r0
 80076c2:	460b      	mov	r3, r1
 80076c4:	4613      	mov	r3, r2
 80076c6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80076c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076ce:	d308      	bcc.n	80076e2 <UART_SetConfig+0x9a2>
 80076d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076d6:	d204      	bcs.n	80076e2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076de:	60da      	str	r2, [r3, #12]
 80076e0:	e17f      	b.n	80079e2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80076e8:	e17b      	b.n	80079e2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	69db      	ldr	r3, [r3, #28]
 80076ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076f2:	f040 80bd 	bne.w	8007870 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80076f6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80076fa:	2b20      	cmp	r3, #32
 80076fc:	dc48      	bgt.n	8007790 <UART_SetConfig+0xa50>
 80076fe:	2b00      	cmp	r3, #0
 8007700:	db7b      	blt.n	80077fa <UART_SetConfig+0xaba>
 8007702:	2b20      	cmp	r3, #32
 8007704:	d879      	bhi.n	80077fa <UART_SetConfig+0xaba>
 8007706:	a201      	add	r2, pc, #4	; (adr r2, 800770c <UART_SetConfig+0x9cc>)
 8007708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800770c:	08007797 	.word	0x08007797
 8007710:	0800779f 	.word	0x0800779f
 8007714:	080077fb 	.word	0x080077fb
 8007718:	080077fb 	.word	0x080077fb
 800771c:	080077a7 	.word	0x080077a7
 8007720:	080077fb 	.word	0x080077fb
 8007724:	080077fb 	.word	0x080077fb
 8007728:	080077fb 	.word	0x080077fb
 800772c:	080077b7 	.word	0x080077b7
 8007730:	080077fb 	.word	0x080077fb
 8007734:	080077fb 	.word	0x080077fb
 8007738:	080077fb 	.word	0x080077fb
 800773c:	080077fb 	.word	0x080077fb
 8007740:	080077fb 	.word	0x080077fb
 8007744:	080077fb 	.word	0x080077fb
 8007748:	080077fb 	.word	0x080077fb
 800774c:	080077c7 	.word	0x080077c7
 8007750:	080077fb 	.word	0x080077fb
 8007754:	080077fb 	.word	0x080077fb
 8007758:	080077fb 	.word	0x080077fb
 800775c:	080077fb 	.word	0x080077fb
 8007760:	080077fb 	.word	0x080077fb
 8007764:	080077fb 	.word	0x080077fb
 8007768:	080077fb 	.word	0x080077fb
 800776c:	080077fb 	.word	0x080077fb
 8007770:	080077fb 	.word	0x080077fb
 8007774:	080077fb 	.word	0x080077fb
 8007778:	080077fb 	.word	0x080077fb
 800777c:	080077fb 	.word	0x080077fb
 8007780:	080077fb 	.word	0x080077fb
 8007784:	080077fb 	.word	0x080077fb
 8007788:	080077fb 	.word	0x080077fb
 800778c:	080077ed 	.word	0x080077ed
 8007790:	2b40      	cmp	r3, #64	; 0x40
 8007792:	d02e      	beq.n	80077f2 <UART_SetConfig+0xab2>
 8007794:	e031      	b.n	80077fa <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007796:	f7fc f80f 	bl	80037b8 <HAL_RCC_GetPCLK1Freq>
 800779a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800779c:	e033      	b.n	8007806 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800779e:	f7fc f821 	bl	80037e4 <HAL_RCC_GetPCLK2Freq>
 80077a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80077a4:	e02f      	b.n	8007806 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7fd fa04 	bl	8004bb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80077b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077b4:	e027      	b.n	8007806 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077b6:	f107 0318 	add.w	r3, r7, #24
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fd fb50 	bl	8004e60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077c4:	e01f      	b.n	8007806 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077c6:	4b69      	ldr	r3, [pc, #420]	; (800796c <UART_SetConfig+0xc2c>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 0320 	and.w	r3, r3, #32
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d009      	beq.n	80077e6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80077d2:	4b66      	ldr	r3, [pc, #408]	; (800796c <UART_SetConfig+0xc2c>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	08db      	lsrs	r3, r3, #3
 80077d8:	f003 0303 	and.w	r3, r3, #3
 80077dc:	4a64      	ldr	r2, [pc, #400]	; (8007970 <UART_SetConfig+0xc30>)
 80077de:	fa22 f303 	lsr.w	r3, r2, r3
 80077e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80077e4:	e00f      	b.n	8007806 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80077e6:	4b62      	ldr	r3, [pc, #392]	; (8007970 <UART_SetConfig+0xc30>)
 80077e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077ea:	e00c      	b.n	8007806 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80077ec:	4b61      	ldr	r3, [pc, #388]	; (8007974 <UART_SetConfig+0xc34>)
 80077ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077f0:	e009      	b.n	8007806 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077f8:	e005      	b.n	8007806 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80077fa:	2300      	movs	r3, #0
 80077fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007804:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007808:	2b00      	cmp	r3, #0
 800780a:	f000 80ea 	beq.w	80079e2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007812:	4a55      	ldr	r2, [pc, #340]	; (8007968 <UART_SetConfig+0xc28>)
 8007814:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007818:	461a      	mov	r2, r3
 800781a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800781c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007820:	005a      	lsls	r2, r3, #1
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	085b      	lsrs	r3, r3, #1
 8007828:	441a      	add	r2, r3
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007832:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007836:	2b0f      	cmp	r3, #15
 8007838:	d916      	bls.n	8007868 <UART_SetConfig+0xb28>
 800783a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800783c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007840:	d212      	bcs.n	8007868 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007844:	b29b      	uxth	r3, r3
 8007846:	f023 030f 	bic.w	r3, r3, #15
 800784a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800784c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800784e:	085b      	lsrs	r3, r3, #1
 8007850:	b29b      	uxth	r3, r3
 8007852:	f003 0307 	and.w	r3, r3, #7
 8007856:	b29a      	uxth	r2, r3
 8007858:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800785a:	4313      	orrs	r3, r2
 800785c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007864:	60da      	str	r2, [r3, #12]
 8007866:	e0bc      	b.n	80079e2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800786e:	e0b8      	b.n	80079e2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007870:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007874:	2b20      	cmp	r3, #32
 8007876:	dc4b      	bgt.n	8007910 <UART_SetConfig+0xbd0>
 8007878:	2b00      	cmp	r3, #0
 800787a:	f2c0 8087 	blt.w	800798c <UART_SetConfig+0xc4c>
 800787e:	2b20      	cmp	r3, #32
 8007880:	f200 8084 	bhi.w	800798c <UART_SetConfig+0xc4c>
 8007884:	a201      	add	r2, pc, #4	; (adr r2, 800788c <UART_SetConfig+0xb4c>)
 8007886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800788a:	bf00      	nop
 800788c:	08007917 	.word	0x08007917
 8007890:	0800791f 	.word	0x0800791f
 8007894:	0800798d 	.word	0x0800798d
 8007898:	0800798d 	.word	0x0800798d
 800789c:	08007927 	.word	0x08007927
 80078a0:	0800798d 	.word	0x0800798d
 80078a4:	0800798d 	.word	0x0800798d
 80078a8:	0800798d 	.word	0x0800798d
 80078ac:	08007937 	.word	0x08007937
 80078b0:	0800798d 	.word	0x0800798d
 80078b4:	0800798d 	.word	0x0800798d
 80078b8:	0800798d 	.word	0x0800798d
 80078bc:	0800798d 	.word	0x0800798d
 80078c0:	0800798d 	.word	0x0800798d
 80078c4:	0800798d 	.word	0x0800798d
 80078c8:	0800798d 	.word	0x0800798d
 80078cc:	08007947 	.word	0x08007947
 80078d0:	0800798d 	.word	0x0800798d
 80078d4:	0800798d 	.word	0x0800798d
 80078d8:	0800798d 	.word	0x0800798d
 80078dc:	0800798d 	.word	0x0800798d
 80078e0:	0800798d 	.word	0x0800798d
 80078e4:	0800798d 	.word	0x0800798d
 80078e8:	0800798d 	.word	0x0800798d
 80078ec:	0800798d 	.word	0x0800798d
 80078f0:	0800798d 	.word	0x0800798d
 80078f4:	0800798d 	.word	0x0800798d
 80078f8:	0800798d 	.word	0x0800798d
 80078fc:	0800798d 	.word	0x0800798d
 8007900:	0800798d 	.word	0x0800798d
 8007904:	0800798d 	.word	0x0800798d
 8007908:	0800798d 	.word	0x0800798d
 800790c:	0800797f 	.word	0x0800797f
 8007910:	2b40      	cmp	r3, #64	; 0x40
 8007912:	d037      	beq.n	8007984 <UART_SetConfig+0xc44>
 8007914:	e03a      	b.n	800798c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007916:	f7fb ff4f 	bl	80037b8 <HAL_RCC_GetPCLK1Freq>
 800791a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800791c:	e03c      	b.n	8007998 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800791e:	f7fb ff61 	bl	80037e4 <HAL_RCC_GetPCLK2Freq>
 8007922:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007924:	e038      	b.n	8007998 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800792a:	4618      	mov	r0, r3
 800792c:	f7fd f944 	bl	8004bb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007932:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007934:	e030      	b.n	8007998 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007936:	f107 0318 	add.w	r3, r7, #24
 800793a:	4618      	mov	r0, r3
 800793c:	f7fd fa90 	bl	8004e60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007944:	e028      	b.n	8007998 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007946:	4b09      	ldr	r3, [pc, #36]	; (800796c <UART_SetConfig+0xc2c>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 0320 	and.w	r3, r3, #32
 800794e:	2b00      	cmp	r3, #0
 8007950:	d012      	beq.n	8007978 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007952:	4b06      	ldr	r3, [pc, #24]	; (800796c <UART_SetConfig+0xc2c>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	08db      	lsrs	r3, r3, #3
 8007958:	f003 0303 	and.w	r3, r3, #3
 800795c:	4a04      	ldr	r2, [pc, #16]	; (8007970 <UART_SetConfig+0xc30>)
 800795e:	fa22 f303 	lsr.w	r3, r2, r3
 8007962:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007964:	e018      	b.n	8007998 <UART_SetConfig+0xc58>
 8007966:	bf00      	nop
 8007968:	08009790 	.word	0x08009790
 800796c:	58024400 	.word	0x58024400
 8007970:	03d09000 	.word	0x03d09000
 8007974:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007978:	4b24      	ldr	r3, [pc, #144]	; (8007a0c <UART_SetConfig+0xccc>)
 800797a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800797c:	e00c      	b.n	8007998 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800797e:	4b24      	ldr	r3, [pc, #144]	; (8007a10 <UART_SetConfig+0xcd0>)
 8007980:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007982:	e009      	b.n	8007998 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007984:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007988:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800798a:	e005      	b.n	8007998 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800798c:	2300      	movs	r3, #0
 800798e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007996:	bf00      	nop
    }

    if (pclk != 0U)
 8007998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800799a:	2b00      	cmp	r3, #0
 800799c:	d021      	beq.n	80079e2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a2:	4a1c      	ldr	r2, [pc, #112]	; (8007a14 <UART_SetConfig+0xcd4>)
 80079a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079a8:	461a      	mov	r2, r3
 80079aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079ac:	fbb3 f2f2 	udiv	r2, r3, r2
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	085b      	lsrs	r3, r3, #1
 80079b6:	441a      	add	r2, r3
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80079c0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c4:	2b0f      	cmp	r3, #15
 80079c6:	d909      	bls.n	80079dc <UART_SetConfig+0xc9c>
 80079c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079ce:	d205      	bcs.n	80079dc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80079d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	60da      	str	r2, [r3, #12]
 80079da:	e002      	b.n	80079e2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	2201      	movs	r2, #1
 80079e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	2201      	movs	r2, #1
 80079ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	2200      	movs	r2, #0
 80079f6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	2200      	movs	r2, #0
 80079fc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80079fe:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3748      	adds	r7, #72	; 0x48
 8007a06:	46bd      	mov	sp, r7
 8007a08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a0c:	03d09000 	.word	0x03d09000
 8007a10:	003d0900 	.word	0x003d0900
 8007a14:	08009790 	.word	0x08009790

08007a18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a24:	f003 0301 	and.w	r3, r3, #1
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d00a      	beq.n	8007a42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	430a      	orrs	r2, r1
 8007a40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a46:	f003 0302 	and.w	r3, r3, #2
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00a      	beq.n	8007a64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	430a      	orrs	r2, r1
 8007a62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a68:	f003 0304 	and.w	r3, r3, #4
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00a      	beq.n	8007a86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	430a      	orrs	r2, r1
 8007a84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a8a:	f003 0308 	and.w	r3, r3, #8
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00a      	beq.n	8007aa8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	430a      	orrs	r2, r1
 8007aa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aac:	f003 0310 	and.w	r3, r3, #16
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00a      	beq.n	8007aca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	430a      	orrs	r2, r1
 8007ac8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ace:	f003 0320 	and.w	r3, r3, #32
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00a      	beq.n	8007aec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	430a      	orrs	r2, r1
 8007aea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d01a      	beq.n	8007b2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	430a      	orrs	r2, r1
 8007b0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b16:	d10a      	bne.n	8007b2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	430a      	orrs	r2, r1
 8007b2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00a      	beq.n	8007b50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	430a      	orrs	r2, r1
 8007b4e:	605a      	str	r2, [r3, #4]
  }
}
 8007b50:	bf00      	nop
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b098      	sub	sp, #96	; 0x60
 8007b60:	af02      	add	r7, sp, #8
 8007b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b6c:	f7f9 fdb0 	bl	80016d0 <HAL_GetTick>
 8007b70:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f003 0308 	and.w	r3, r3, #8
 8007b7c:	2b08      	cmp	r3, #8
 8007b7e:	d12f      	bne.n	8007be0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b84:	9300      	str	r3, [sp, #0]
 8007b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 f88e 	bl	8007cb0 <UART_WaitOnFlagUntilTimeout>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d022      	beq.n	8007be0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba2:	e853 3f00 	ldrex	r3, [r3]
 8007ba6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007baa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bae:	653b      	str	r3, [r7, #80]	; 0x50
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bb8:	647b      	str	r3, [r7, #68]	; 0x44
 8007bba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bbc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007bbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bc0:	e841 2300 	strex	r3, r2, [r1]
 8007bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1e6      	bne.n	8007b9a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2220      	movs	r2, #32
 8007bd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bdc:	2303      	movs	r3, #3
 8007bde:	e063      	b.n	8007ca8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f003 0304 	and.w	r3, r3, #4
 8007bea:	2b04      	cmp	r3, #4
 8007bec:	d149      	bne.n	8007c82 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007bf2:	9300      	str	r3, [sp, #0]
 8007bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 f857 	bl	8007cb0 <UART_WaitOnFlagUntilTimeout>
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d03c      	beq.n	8007c82 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c10:	e853 3f00 	ldrex	r3, [r3]
 8007c14:	623b      	str	r3, [r7, #32]
   return(result);
 8007c16:	6a3b      	ldr	r3, [r7, #32]
 8007c18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	461a      	mov	r2, r3
 8007c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c26:	633b      	str	r3, [r7, #48]	; 0x30
 8007c28:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c2e:	e841 2300 	strex	r3, r2, [r1]
 8007c32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1e6      	bne.n	8007c08 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	3308      	adds	r3, #8
 8007c40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	e853 3f00 	ldrex	r3, [r3]
 8007c48:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f023 0301 	bic.w	r3, r3, #1
 8007c50:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	3308      	adds	r3, #8
 8007c58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c5a:	61fa      	str	r2, [r7, #28]
 8007c5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c5e:	69b9      	ldr	r1, [r7, #24]
 8007c60:	69fa      	ldr	r2, [r7, #28]
 8007c62:	e841 2300 	strex	r3, r2, [r1]
 8007c66:	617b      	str	r3, [r7, #20]
   return(result);
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d1e5      	bne.n	8007c3a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2220      	movs	r2, #32
 8007c72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	e012      	b.n	8007ca8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2220      	movs	r2, #32
 8007c86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2220      	movs	r2, #32
 8007c8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007ca6:	2300      	movs	r3, #0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3758      	adds	r7, #88	; 0x58
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	603b      	str	r3, [r7, #0]
 8007cbc:	4613      	mov	r3, r2
 8007cbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cc0:	e049      	b.n	8007d56 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cc8:	d045      	beq.n	8007d56 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cca:	f7f9 fd01 	bl	80016d0 <HAL_GetTick>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	1ad3      	subs	r3, r2, r3
 8007cd4:	69ba      	ldr	r2, [r7, #24]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d302      	bcc.n	8007ce0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d101      	bne.n	8007ce4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	e048      	b.n	8007d76 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f003 0304 	and.w	r3, r3, #4
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d031      	beq.n	8007d56 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	69db      	ldr	r3, [r3, #28]
 8007cf8:	f003 0308 	and.w	r3, r3, #8
 8007cfc:	2b08      	cmp	r3, #8
 8007cfe:	d110      	bne.n	8007d22 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2208      	movs	r2, #8
 8007d06:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	f000 f95b 	bl	8007fc4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2208      	movs	r2, #8
 8007d12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e029      	b.n	8007d76 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	69db      	ldr	r3, [r3, #28]
 8007d28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d30:	d111      	bne.n	8007d56 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f000 f941 	bl	8007fc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2220      	movs	r2, #32
 8007d46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007d52:	2303      	movs	r3, #3
 8007d54:	e00f      	b.n	8007d76 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	69da      	ldr	r2, [r3, #28]
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	4013      	ands	r3, r2
 8007d60:	68ba      	ldr	r2, [r7, #8]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	bf0c      	ite	eq
 8007d66:	2301      	moveq	r3, #1
 8007d68:	2300      	movne	r3, #0
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	79fb      	ldrb	r3, [r7, #7]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d0a6      	beq.n	8007cc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
	...

08007d80 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b0a3      	sub	sp, #140	; 0x8c
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	68ba      	ldr	r2, [r7, #8]
 8007d92:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	88fa      	ldrh	r2, [r7, #6]
 8007d98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	88fa      	ldrh	r2, [r7, #6]
 8007da0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2200      	movs	r2, #0
 8007da8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007db2:	d10e      	bne.n	8007dd2 <UART_Start_Receive_IT+0x52>
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d105      	bne.n	8007dc8 <UART_Start_Receive_IT+0x48>
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007dc2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007dc6:	e02d      	b.n	8007e24 <UART_Start_Receive_IT+0xa4>
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	22ff      	movs	r2, #255	; 0xff
 8007dcc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007dd0:	e028      	b.n	8007e24 <UART_Start_Receive_IT+0xa4>
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d10d      	bne.n	8007df6 <UART_Start_Receive_IT+0x76>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d104      	bne.n	8007dec <UART_Start_Receive_IT+0x6c>
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	22ff      	movs	r2, #255	; 0xff
 8007de6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007dea:	e01b      	b.n	8007e24 <UART_Start_Receive_IT+0xa4>
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	227f      	movs	r2, #127	; 0x7f
 8007df0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007df4:	e016      	b.n	8007e24 <UART_Start_Receive_IT+0xa4>
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007dfe:	d10d      	bne.n	8007e1c <UART_Start_Receive_IT+0x9c>
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	691b      	ldr	r3, [r3, #16]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d104      	bne.n	8007e12 <UART_Start_Receive_IT+0x92>
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	227f      	movs	r2, #127	; 0x7f
 8007e0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e10:	e008      	b.n	8007e24 <UART_Start_Receive_IT+0xa4>
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	223f      	movs	r2, #63	; 0x3f
 8007e16:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e1a:	e003      	b.n	8007e24 <UART_Start_Receive_IT+0xa4>
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2222      	movs	r2, #34	; 0x22
 8007e30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	3308      	adds	r3, #8
 8007e3a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e3e:	e853 3f00 	ldrex	r3, [r3]
 8007e42:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007e44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e46:	f043 0301 	orr.w	r3, r3, #1
 8007e4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	3308      	adds	r3, #8
 8007e54:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007e58:	673a      	str	r2, [r7, #112]	; 0x70
 8007e5a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007e5e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007e60:	e841 2300 	strex	r3, r2, [r1]
 8007e64:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007e66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1e3      	bne.n	8007e34 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e74:	d14f      	bne.n	8007f16 <UART_Start_Receive_IT+0x196>
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007e7c:	88fa      	ldrh	r2, [r7, #6]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d349      	bcc.n	8007f16 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e8a:	d107      	bne.n	8007e9c <UART_Start_Receive_IT+0x11c>
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d103      	bne.n	8007e9c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	4a47      	ldr	r2, [pc, #284]	; (8007fb4 <UART_Start_Receive_IT+0x234>)
 8007e98:	675a      	str	r2, [r3, #116]	; 0x74
 8007e9a:	e002      	b.n	8007ea2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	4a46      	ldr	r2, [pc, #280]	; (8007fb8 <UART_Start_Receive_IT+0x238>)
 8007ea0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d01a      	beq.n	8007ee0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007eb2:	e853 3f00 	ldrex	r3, [r3]
 8007eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ebe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007ecc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ece:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ed2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ed4:	e841 2300 	strex	r3, r2, [r1]
 8007ed8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007eda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d1e4      	bne.n	8007eaa <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	3308      	adds	r3, #8
 8007ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eea:	e853 3f00 	ldrex	r3, [r3]
 8007eee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ef6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	3308      	adds	r3, #8
 8007efe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007f00:	64ba      	str	r2, [r7, #72]	; 0x48
 8007f02:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f04:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007f06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f08:	e841 2300 	strex	r3, r2, [r1]
 8007f0c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007f0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d1e5      	bne.n	8007ee0 <UART_Start_Receive_IT+0x160>
 8007f14:	e046      	b.n	8007fa4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f1e:	d107      	bne.n	8007f30 <UART_Start_Receive_IT+0x1b0>
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	691b      	ldr	r3, [r3, #16]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d103      	bne.n	8007f30 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	4a24      	ldr	r2, [pc, #144]	; (8007fbc <UART_Start_Receive_IT+0x23c>)
 8007f2c:	675a      	str	r2, [r3, #116]	; 0x74
 8007f2e:	e002      	b.n	8007f36 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	4a23      	ldr	r2, [pc, #140]	; (8007fc0 <UART_Start_Receive_IT+0x240>)
 8007f34:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	691b      	ldr	r3, [r3, #16]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d019      	beq.n	8007f72 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f46:	e853 3f00 	ldrex	r3, [r3]
 8007f4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007f52:	677b      	str	r3, [r7, #116]	; 0x74
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	461a      	mov	r2, r3
 8007f5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f5c:	637b      	str	r3, [r7, #52]	; 0x34
 8007f5e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f64:	e841 2300 	strex	r3, r2, [r1]
 8007f68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d1e6      	bne.n	8007f3e <UART_Start_Receive_IT+0x1be>
 8007f70:	e018      	b.n	8007fa4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	e853 3f00 	ldrex	r3, [r3]
 8007f7e:	613b      	str	r3, [r7, #16]
   return(result);
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	f043 0320 	orr.w	r3, r3, #32
 8007f86:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f90:	623b      	str	r3, [r7, #32]
 8007f92:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f94:	69f9      	ldr	r1, [r7, #28]
 8007f96:	6a3a      	ldr	r2, [r7, #32]
 8007f98:	e841 2300 	strex	r3, r2, [r1]
 8007f9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d1e6      	bne.n	8007f72 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	378c      	adds	r7, #140	; 0x8c
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop
 8007fb4:	080087e5 	.word	0x080087e5
 8007fb8:	08008485 	.word	0x08008485
 8007fbc:	080082cd 	.word	0x080082cd
 8007fc0:	08008115 	.word	0x08008115

08007fc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b095      	sub	sp, #84	; 0x54
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fd4:	e853 3f00 	ldrex	r3, [r3]
 8007fd8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fea:	643b      	str	r3, [r7, #64]	; 0x40
 8007fec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ff0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ff2:	e841 2300 	strex	r3, r2, [r1]
 8007ff6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1e6      	bne.n	8007fcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	3308      	adds	r3, #8
 8008004:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008006:	6a3b      	ldr	r3, [r7, #32]
 8008008:	e853 3f00 	ldrex	r3, [r3]
 800800c:	61fb      	str	r3, [r7, #28]
   return(result);
 800800e:	69fa      	ldr	r2, [r7, #28]
 8008010:	4b1e      	ldr	r3, [pc, #120]	; (800808c <UART_EndRxTransfer+0xc8>)
 8008012:	4013      	ands	r3, r2
 8008014:	64bb      	str	r3, [r7, #72]	; 0x48
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	3308      	adds	r3, #8
 800801c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800801e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008020:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008022:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008026:	e841 2300 	strex	r3, r2, [r1]
 800802a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800802c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802e:	2b00      	cmp	r3, #0
 8008030:	d1e5      	bne.n	8007ffe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008036:	2b01      	cmp	r3, #1
 8008038:	d118      	bne.n	800806c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	e853 3f00 	ldrex	r3, [r3]
 8008046:	60bb      	str	r3, [r7, #8]
   return(result);
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	f023 0310 	bic.w	r3, r3, #16
 800804e:	647b      	str	r3, [r7, #68]	; 0x44
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	461a      	mov	r2, r3
 8008056:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008058:	61bb      	str	r3, [r7, #24]
 800805a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805c:	6979      	ldr	r1, [r7, #20]
 800805e:	69ba      	ldr	r2, [r7, #24]
 8008060:	e841 2300 	strex	r3, r2, [r1]
 8008064:	613b      	str	r3, [r7, #16]
   return(result);
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1e6      	bne.n	800803a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2220      	movs	r2, #32
 8008070:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008080:	bf00      	nop
 8008082:	3754      	adds	r7, #84	; 0x54
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr
 800808c:	effffffe 	.word	0xeffffffe

08008090 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800809c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080ae:	68f8      	ldr	r0, [r7, #12]
 80080b0:	f7fe fe30 	bl	8006d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080b4:	bf00      	nop
 80080b6:	3710      	adds	r7, #16
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b088      	sub	sp, #32
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	e853 3f00 	ldrex	r3, [r3]
 80080d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080d8:	61fb      	str	r3, [r7, #28]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	461a      	mov	r2, r3
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	61bb      	str	r3, [r7, #24]
 80080e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e6:	6979      	ldr	r1, [r7, #20]
 80080e8:	69ba      	ldr	r2, [r7, #24]
 80080ea:	e841 2300 	strex	r3, r2, [r1]
 80080ee:	613b      	str	r3, [r7, #16]
   return(result);
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d1e6      	bne.n	80080c4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2220      	movs	r2, #32
 80080fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f7fe fdfb 	bl	8006d00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800810a:	bf00      	nop
 800810c:	3720      	adds	r7, #32
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
	...

08008114 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b09c      	sub	sp, #112	; 0x70
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008122:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800812c:	2b22      	cmp	r3, #34	; 0x22
 800812e:	f040 80be 	bne.w	80082ae <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008138:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800813c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008140:	b2d9      	uxtb	r1, r3
 8008142:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008146:	b2da      	uxtb	r2, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800814c:	400a      	ands	r2, r1
 800814e:	b2d2      	uxtb	r2, r2
 8008150:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008156:	1c5a      	adds	r2, r3, #1
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008162:	b29b      	uxth	r3, r3
 8008164:	3b01      	subs	r3, #1
 8008166:	b29a      	uxth	r2, r3
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008174:	b29b      	uxth	r3, r3
 8008176:	2b00      	cmp	r3, #0
 8008178:	f040 80a1 	bne.w	80082be <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008184:	e853 3f00 	ldrex	r3, [r3]
 8008188:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800818a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800818c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008190:	66bb      	str	r3, [r7, #104]	; 0x68
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	461a      	mov	r2, r3
 8008198:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800819a:	65bb      	str	r3, [r7, #88]	; 0x58
 800819c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80081a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80081a2:	e841 2300 	strex	r3, r2, [r1]
 80081a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80081a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d1e6      	bne.n	800817c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	3308      	adds	r3, #8
 80081b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b8:	e853 3f00 	ldrex	r3, [r3]
 80081bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80081be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081c0:	f023 0301 	bic.w	r3, r3, #1
 80081c4:	667b      	str	r3, [r7, #100]	; 0x64
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	3308      	adds	r3, #8
 80081cc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80081ce:	647a      	str	r2, [r7, #68]	; 0x44
 80081d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80081d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081d6:	e841 2300 	strex	r3, r2, [r1]
 80081da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80081dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d1e5      	bne.n	80081ae <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2220      	movs	r2, #32
 80081e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a33      	ldr	r2, [pc, #204]	; (80082c8 <UART_RxISR_8BIT+0x1b4>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d01f      	beq.n	8008240 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800820a:	2b00      	cmp	r3, #0
 800820c:	d018      	beq.n	8008240 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008216:	e853 3f00 	ldrex	r3, [r3]
 800821a:	623b      	str	r3, [r7, #32]
   return(result);
 800821c:	6a3b      	ldr	r3, [r7, #32]
 800821e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008222:	663b      	str	r3, [r7, #96]	; 0x60
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	461a      	mov	r2, r3
 800822a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800822c:	633b      	str	r3, [r7, #48]	; 0x30
 800822e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008230:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008234:	e841 2300 	strex	r3, r2, [r1]
 8008238:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800823a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823c:	2b00      	cmp	r3, #0
 800823e:	d1e6      	bne.n	800820e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008244:	2b01      	cmp	r3, #1
 8008246:	d12e      	bne.n	80082a6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	e853 3f00 	ldrex	r3, [r3]
 800825a:	60fb      	str	r3, [r7, #12]
   return(result);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f023 0310 	bic.w	r3, r3, #16
 8008262:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	461a      	mov	r2, r3
 800826a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800826c:	61fb      	str	r3, [r7, #28]
 800826e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008270:	69b9      	ldr	r1, [r7, #24]
 8008272:	69fa      	ldr	r2, [r7, #28]
 8008274:	e841 2300 	strex	r3, r2, [r1]
 8008278:	617b      	str	r3, [r7, #20]
   return(result);
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d1e6      	bne.n	800824e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	69db      	ldr	r3, [r3, #28]
 8008286:	f003 0310 	and.w	r3, r3, #16
 800828a:	2b10      	cmp	r3, #16
 800828c:	d103      	bne.n	8008296 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2210      	movs	r2, #16
 8008294:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800829c:	4619      	mov	r1, r3
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f7fe fd42 	bl	8006d28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80082a4:	e00b      	b.n	80082be <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f7f9 f922 	bl	80014f0 <HAL_UART_RxCpltCallback>
}
 80082ac:	e007      	b.n	80082be <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	699a      	ldr	r2, [r3, #24]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f042 0208 	orr.w	r2, r2, #8
 80082bc:	619a      	str	r2, [r3, #24]
}
 80082be:	bf00      	nop
 80082c0:	3770      	adds	r7, #112	; 0x70
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	58000c00 	.word	0x58000c00

080082cc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b09c      	sub	sp, #112	; 0x70
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80082da:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082e4:	2b22      	cmp	r3, #34	; 0x22
 80082e6:	f040 80be 	bne.w	8008466 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082f8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80082fa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80082fe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008302:	4013      	ands	r3, r2
 8008304:	b29a      	uxth	r2, r3
 8008306:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008308:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800830e:	1c9a      	adds	r2, r3, #2
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800831a:	b29b      	uxth	r3, r3
 800831c:	3b01      	subs	r3, #1
 800831e:	b29a      	uxth	r2, r3
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800832c:	b29b      	uxth	r3, r3
 800832e:	2b00      	cmp	r3, #0
 8008330:	f040 80a1 	bne.w	8008476 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800833c:	e853 3f00 	ldrex	r3, [r3]
 8008340:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008344:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008348:	667b      	str	r3, [r7, #100]	; 0x64
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	461a      	mov	r2, r3
 8008350:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008352:	657b      	str	r3, [r7, #84]	; 0x54
 8008354:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008356:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008358:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800835a:	e841 2300 	strex	r3, r2, [r1]
 800835e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008362:	2b00      	cmp	r3, #0
 8008364:	d1e6      	bne.n	8008334 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	3308      	adds	r3, #8
 800836c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008370:	e853 3f00 	ldrex	r3, [r3]
 8008374:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008378:	f023 0301 	bic.w	r3, r3, #1
 800837c:	663b      	str	r3, [r7, #96]	; 0x60
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	3308      	adds	r3, #8
 8008384:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008386:	643a      	str	r2, [r7, #64]	; 0x40
 8008388:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800838c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800838e:	e841 2300 	strex	r3, r2, [r1]
 8008392:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008396:	2b00      	cmp	r3, #0
 8008398:	d1e5      	bne.n	8008366 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2220      	movs	r2, #32
 800839e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a33      	ldr	r2, [pc, #204]	; (8008480 <UART_RxISR_16BIT+0x1b4>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d01f      	beq.n	80083f8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d018      	beq.n	80083f8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083cc:	6a3b      	ldr	r3, [r7, #32]
 80083ce:	e853 3f00 	ldrex	r3, [r3]
 80083d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80083d4:	69fb      	ldr	r3, [r7, #28]
 80083d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80083da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	461a      	mov	r2, r3
 80083e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083e6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083ec:	e841 2300 	strex	r3, r2, [r1]
 80083f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d1e6      	bne.n	80083c6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d12e      	bne.n	800845e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	e853 3f00 	ldrex	r3, [r3]
 8008412:	60bb      	str	r3, [r7, #8]
   return(result);
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	f023 0310 	bic.w	r3, r3, #16
 800841a:	65bb      	str	r3, [r7, #88]	; 0x58
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	461a      	mov	r2, r3
 8008422:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008424:	61bb      	str	r3, [r7, #24]
 8008426:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008428:	6979      	ldr	r1, [r7, #20]
 800842a:	69ba      	ldr	r2, [r7, #24]
 800842c:	e841 2300 	strex	r3, r2, [r1]
 8008430:	613b      	str	r3, [r7, #16]
   return(result);
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d1e6      	bne.n	8008406 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	69db      	ldr	r3, [r3, #28]
 800843e:	f003 0310 	and.w	r3, r3, #16
 8008442:	2b10      	cmp	r3, #16
 8008444:	d103      	bne.n	800844e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	2210      	movs	r2, #16
 800844c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008454:	4619      	mov	r1, r3
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f7fe fc66 	bl	8006d28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800845c:	e00b      	b.n	8008476 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f7f9 f846 	bl	80014f0 <HAL_UART_RxCpltCallback>
}
 8008464:	e007      	b.n	8008476 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	699a      	ldr	r2, [r3, #24]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f042 0208 	orr.w	r2, r2, #8
 8008474:	619a      	str	r2, [r3, #24]
}
 8008476:	bf00      	nop
 8008478:	3770      	adds	r7, #112	; 0x70
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	58000c00 	.word	0x58000c00

08008484 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b0ac      	sub	sp, #176	; 0xb0
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008492:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	69db      	ldr	r3, [r3, #28]
 800849c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084ba:	2b22      	cmp	r3, #34	; 0x22
 80084bc:	f040 8180 	bne.w	80087c0 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80084c6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80084ca:	e123      	b.n	8008714 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80084d6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80084da:	b2d9      	uxtb	r1, r3
 80084dc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80084e0:	b2da      	uxtb	r2, r3
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084e6:	400a      	ands	r2, r1
 80084e8:	b2d2      	uxtb	r2, r2
 80084ea:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084f0:	1c5a      	adds	r2, r3, #1
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	3b01      	subs	r3, #1
 8008500:	b29a      	uxth	r2, r3
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	69db      	ldr	r3, [r3, #28]
 800850e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008512:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008516:	f003 0307 	and.w	r3, r3, #7
 800851a:	2b00      	cmp	r3, #0
 800851c:	d053      	beq.n	80085c6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800851e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008522:	f003 0301 	and.w	r3, r3, #1
 8008526:	2b00      	cmp	r3, #0
 8008528:	d011      	beq.n	800854e <UART_RxISR_8BIT_FIFOEN+0xca>
 800852a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800852e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008532:	2b00      	cmp	r3, #0
 8008534:	d00b      	beq.n	800854e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2201      	movs	r2, #1
 800853c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008544:	f043 0201 	orr.w	r2, r3, #1
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800854e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008552:	f003 0302 	and.w	r3, r3, #2
 8008556:	2b00      	cmp	r3, #0
 8008558:	d011      	beq.n	800857e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800855a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800855e:	f003 0301 	and.w	r3, r3, #1
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00b      	beq.n	800857e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2202      	movs	r2, #2
 800856c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008574:	f043 0204 	orr.w	r2, r3, #4
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800857e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008582:	f003 0304 	and.w	r3, r3, #4
 8008586:	2b00      	cmp	r3, #0
 8008588:	d011      	beq.n	80085ae <UART_RxISR_8BIT_FIFOEN+0x12a>
 800858a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800858e:	f003 0301 	and.w	r3, r3, #1
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00b      	beq.n	80085ae <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2204      	movs	r2, #4
 800859c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085a4:	f043 0202 	orr.w	r2, r3, #2
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d006      	beq.n	80085c6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f7fe fbab 	bl	8006d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	f040 80a0 	bne.w	8008714 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085dc:	e853 3f00 	ldrex	r3, [r3]
 80085e0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80085e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	461a      	mov	r2, r3
 80085f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80085f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80085f8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085fa:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80085fc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80085fe:	e841 2300 	strex	r3, r2, [r1]
 8008602:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8008604:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1e4      	bne.n	80085d4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	3308      	adds	r3, #8
 8008610:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008614:	e853 3f00 	ldrex	r3, [r3]
 8008618:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800861a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800861c:	4b6e      	ldr	r3, [pc, #440]	; (80087d8 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800861e:	4013      	ands	r3, r2
 8008620:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	3308      	adds	r3, #8
 800862a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800862e:	66ba      	str	r2, [r7, #104]	; 0x68
 8008630:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008632:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008634:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008636:	e841 2300 	strex	r3, r2, [r1]
 800863a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800863c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800863e:	2b00      	cmp	r3, #0
 8008640:	d1e3      	bne.n	800860a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2220      	movs	r2, #32
 8008646:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2200      	movs	r2, #0
 8008654:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a60      	ldr	r2, [pc, #384]	; (80087dc <UART_RxISR_8BIT_FIFOEN+0x358>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d021      	beq.n	80086a4 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800866a:	2b00      	cmp	r3, #0
 800866c:	d01a      	beq.n	80086a4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008676:	e853 3f00 	ldrex	r3, [r3]
 800867a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800867c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800867e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008682:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	461a      	mov	r2, r3
 800868c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008690:	657b      	str	r3, [r7, #84]	; 0x54
 8008692:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008694:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008696:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008698:	e841 2300 	strex	r3, r2, [r1]
 800869c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800869e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d1e4      	bne.n	800866e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d130      	bne.n	800870e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ba:	e853 3f00 	ldrex	r3, [r3]
 80086be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80086c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c2:	f023 0310 	bic.w	r3, r3, #16
 80086c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	461a      	mov	r2, r3
 80086d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086d4:	643b      	str	r3, [r7, #64]	; 0x40
 80086d6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80086da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80086dc:	e841 2300 	strex	r3, r2, [r1]
 80086e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d1e4      	bne.n	80086b2 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	69db      	ldr	r3, [r3, #28]
 80086ee:	f003 0310 	and.w	r3, r3, #16
 80086f2:	2b10      	cmp	r3, #16
 80086f4:	d103      	bne.n	80086fe <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2210      	movs	r2, #16
 80086fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008704:	4619      	mov	r1, r3
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f7fe fb0e 	bl	8006d28 <HAL_UARTEx_RxEventCallback>
 800870c:	e002      	b.n	8008714 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f7f8 feee 	bl	80014f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008714:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008718:	2b00      	cmp	r3, #0
 800871a:	d006      	beq.n	800872a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800871c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008720:	f003 0320 	and.w	r3, r3, #32
 8008724:	2b00      	cmp	r3, #0
 8008726:	f47f aed1 	bne.w	80084cc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008730:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008734:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008738:	2b00      	cmp	r3, #0
 800873a:	d049      	beq.n	80087d0 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008742:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8008746:	429a      	cmp	r2, r3
 8008748:	d242      	bcs.n	80087d0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	3308      	adds	r3, #8
 8008750:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008752:	6a3b      	ldr	r3, [r7, #32]
 8008754:	e853 3f00 	ldrex	r3, [r3]
 8008758:	61fb      	str	r3, [r7, #28]
   return(result);
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008760:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	3308      	adds	r3, #8
 800876a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800876e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008770:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008772:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008776:	e841 2300 	strex	r3, r2, [r1]
 800877a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800877c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877e:	2b00      	cmp	r3, #0
 8008780:	d1e3      	bne.n	800874a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a16      	ldr	r2, [pc, #88]	; (80087e0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008786:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	e853 3f00 	ldrex	r3, [r3]
 8008794:	60bb      	str	r3, [r7, #8]
   return(result);
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	f043 0320 	orr.w	r3, r3, #32
 800879c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	461a      	mov	r2, r3
 80087a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80087aa:	61bb      	str	r3, [r7, #24]
 80087ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ae:	6979      	ldr	r1, [r7, #20]
 80087b0:	69ba      	ldr	r2, [r7, #24]
 80087b2:	e841 2300 	strex	r3, r2, [r1]
 80087b6:	613b      	str	r3, [r7, #16]
   return(result);
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d1e4      	bne.n	8008788 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80087be:	e007      	b.n	80087d0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	699a      	ldr	r2, [r3, #24]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f042 0208 	orr.w	r2, r2, #8
 80087ce:	619a      	str	r2, [r3, #24]
}
 80087d0:	bf00      	nop
 80087d2:	37b0      	adds	r7, #176	; 0xb0
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	effffffe 	.word	0xeffffffe
 80087dc:	58000c00 	.word	0x58000c00
 80087e0:	08008115 	.word	0x08008115

080087e4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b0ae      	sub	sp, #184	; 0xb8
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80087f2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	69db      	ldr	r3, [r3, #28]
 80087fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	689b      	ldr	r3, [r3, #8]
 8008810:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800881a:	2b22      	cmp	r3, #34	; 0x22
 800881c:	f040 8184 	bne.w	8008b28 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008826:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800882a:	e127      	b.n	8008a7c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008832:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800883a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800883e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8008842:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008846:	4013      	ands	r3, r2
 8008848:	b29a      	uxth	r2, r3
 800884a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800884e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008854:	1c9a      	adds	r2, r3, #2
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008860:	b29b      	uxth	r3, r3
 8008862:	3b01      	subs	r3, #1
 8008864:	b29a      	uxth	r2, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	69db      	ldr	r3, [r3, #28]
 8008872:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008876:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800887a:	f003 0307 	and.w	r3, r3, #7
 800887e:	2b00      	cmp	r3, #0
 8008880:	d053      	beq.n	800892a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008882:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008886:	f003 0301 	and.w	r3, r3, #1
 800888a:	2b00      	cmp	r3, #0
 800888c:	d011      	beq.n	80088b2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800888e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00b      	beq.n	80088b2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2201      	movs	r2, #1
 80088a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088a8:	f043 0201 	orr.w	r2, r3, #1
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80088b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80088b6:	f003 0302 	and.w	r3, r3, #2
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d011      	beq.n	80088e2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80088be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80088c2:	f003 0301 	and.w	r3, r3, #1
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d00b      	beq.n	80088e2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2202      	movs	r2, #2
 80088d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088d8:	f043 0204 	orr.w	r2, r3, #4
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80088e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80088e6:	f003 0304 	and.w	r3, r3, #4
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d011      	beq.n	8008912 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80088ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80088f2:	f003 0301 	and.w	r3, r3, #1
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d00b      	beq.n	8008912 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2204      	movs	r2, #4
 8008900:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008908:	f043 0202 	orr.w	r2, r3, #2
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008918:	2b00      	cmp	r3, #0
 800891a:	d006      	beq.n	800892a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f7fe f9f9 	bl	8006d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2200      	movs	r2, #0
 8008926:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008930:	b29b      	uxth	r3, r3
 8008932:	2b00      	cmp	r3, #0
 8008934:	f040 80a2 	bne.w	8008a7c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008940:	e853 3f00 	ldrex	r3, [r3]
 8008944:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008946:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008948:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800894c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	461a      	mov	r2, r3
 8008956:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800895a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800895e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008960:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008962:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008966:	e841 2300 	strex	r3, r2, [r1]
 800896a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800896c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800896e:	2b00      	cmp	r3, #0
 8008970:	d1e2      	bne.n	8008938 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	3308      	adds	r3, #8
 8008978:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800897a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800897c:	e853 3f00 	ldrex	r3, [r3]
 8008980:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008982:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008984:	4b6e      	ldr	r3, [pc, #440]	; (8008b40 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8008986:	4013      	ands	r3, r2
 8008988:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	3308      	adds	r3, #8
 8008992:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008996:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008998:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800899a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800899c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800899e:	e841 2300 	strex	r3, r2, [r1]
 80089a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80089a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d1e3      	bne.n	8008972 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2220      	movs	r2, #32
 80089ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a60      	ldr	r2, [pc, #384]	; (8008b44 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d021      	beq.n	8008a0c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d01a      	beq.n	8008a0c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089de:	e853 3f00 	ldrex	r3, [r3]
 80089e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80089e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80089ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	461a      	mov	r2, r3
 80089f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80089f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80089fa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80089fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008a00:	e841 2300 	strex	r3, r2, [r1]
 8008a04:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008a06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d1e4      	bne.n	80089d6 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d130      	bne.n	8008a76 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a22:	e853 3f00 	ldrex	r3, [r3]
 8008a26:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a2a:	f023 0310 	bic.w	r3, r3, #16
 8008a2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	461a      	mov	r2, r3
 8008a38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a3c:	647b      	str	r3, [r7, #68]	; 0x44
 8008a3e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a44:	e841 2300 	strex	r3, r2, [r1]
 8008a48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d1e4      	bne.n	8008a1a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	69db      	ldr	r3, [r3, #28]
 8008a56:	f003 0310 	and.w	r3, r3, #16
 8008a5a:	2b10      	cmp	r3, #16
 8008a5c:	d103      	bne.n	8008a66 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2210      	movs	r2, #16
 8008a64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f7fe f95a 	bl	8006d28 <HAL_UARTEx_RxEventCallback>
 8008a74:	e002      	b.n	8008a7c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f7f8 fd3a 	bl	80014f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008a7c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d006      	beq.n	8008a92 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8008a84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008a88:	f003 0320 	and.w	r3, r3, #32
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f47f aecd 	bne.w	800882c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a98:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008a9c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d049      	beq.n	8008b38 <UART_RxISR_16BIT_FIFOEN+0x354>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008aaa:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d242      	bcs.n	8008b38 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	3308      	adds	r3, #8
 8008ab8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abc:	e853 3f00 	ldrex	r3, [r3]
 8008ac0:	623b      	str	r3, [r7, #32]
   return(result);
 8008ac2:	6a3b      	ldr	r3, [r7, #32]
 8008ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ac8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	3308      	adds	r3, #8
 8008ad2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008ad6:	633a      	str	r2, [r7, #48]	; 0x30
 8008ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ada:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ade:	e841 2300 	strex	r3, r2, [r1]
 8008ae2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1e3      	bne.n	8008ab2 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4a16      	ldr	r2, [pc, #88]	; (8008b48 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008aee:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	e853 3f00 	ldrex	r3, [r3]
 8008afc:	60fb      	str	r3, [r7, #12]
   return(result);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f043 0320 	orr.w	r3, r3, #32
 8008b04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b12:	61fb      	str	r3, [r7, #28]
 8008b14:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b16:	69b9      	ldr	r1, [r7, #24]
 8008b18:	69fa      	ldr	r2, [r7, #28]
 8008b1a:	e841 2300 	strex	r3, r2, [r1]
 8008b1e:	617b      	str	r3, [r7, #20]
   return(result);
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d1e4      	bne.n	8008af0 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b26:	e007      	b.n	8008b38 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	699a      	ldr	r2, [r3, #24]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f042 0208 	orr.w	r2, r2, #8
 8008b36:	619a      	str	r2, [r3, #24]
}
 8008b38:	bf00      	nop
 8008b3a:	37b8      	adds	r7, #184	; 0xb8
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	effffffe 	.word	0xeffffffe
 8008b44:	58000c00 	.word	0x58000c00
 8008b48:	080082cd 	.word	0x080082cd

08008b4c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008b54:	bf00      	nop
 8008b56:	370c      	adds	r7, #12
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b083      	sub	sp, #12
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008b68:	bf00      	nop
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008b7c:	bf00      	nop
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b085      	sub	sp, #20
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d101      	bne.n	8008b9e <HAL_UARTEx_DisableFifoMode+0x16>
 8008b9a:	2302      	movs	r3, #2
 8008b9c:	e027      	b.n	8008bee <HAL_UARTEx_DisableFifoMode+0x66>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2224      	movs	r2, #36	; 0x24
 8008baa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f022 0201 	bic.w	r2, r2, #1
 8008bc4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008bcc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2220      	movs	r2, #32
 8008be0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008bec:	2300      	movs	r3, #0
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3714      	adds	r7, #20
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr

08008bfa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b084      	sub	sp, #16
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
 8008c02:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d101      	bne.n	8008c12 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008c0e:	2302      	movs	r3, #2
 8008c10:	e02d      	b.n	8008c6e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2201      	movs	r2, #1
 8008c16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2224      	movs	r2, #36	; 0x24
 8008c1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f022 0201 	bic.w	r2, r2, #1
 8008c38:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	683a      	ldr	r2, [r7, #0]
 8008c4a:	430a      	orrs	r2, r1
 8008c4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 f850 	bl	8008cf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	68fa      	ldr	r2, [r7, #12]
 8008c5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2220      	movs	r2, #32
 8008c60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2200      	movs	r2, #0
 8008c68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b084      	sub	sp, #16
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
 8008c7e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d101      	bne.n	8008c8e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008c8a:	2302      	movs	r3, #2
 8008c8c:	e02d      	b.n	8008cea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2201      	movs	r2, #1
 8008c92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2224      	movs	r2, #36	; 0x24
 8008c9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f022 0201 	bic.w	r2, r2, #1
 8008cb4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	683a      	ldr	r2, [r7, #0]
 8008cc6:	430a      	orrs	r2, r1
 8008cc8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 f812 	bl	8008cf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2220      	movs	r2, #32
 8008cdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008ce8:	2300      	movs	r3, #0
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3710      	adds	r7, #16
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
	...

08008cf4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d108      	bne.n	8008d16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008d14:	e031      	b.n	8008d7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008d16:	2310      	movs	r3, #16
 8008d18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008d1a:	2310      	movs	r3, #16
 8008d1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	0e5b      	lsrs	r3, r3, #25
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	f003 0307 	and.w	r3, r3, #7
 8008d2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	0f5b      	lsrs	r3, r3, #29
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	f003 0307 	and.w	r3, r3, #7
 8008d3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d3e:	7bbb      	ldrb	r3, [r7, #14]
 8008d40:	7b3a      	ldrb	r2, [r7, #12]
 8008d42:	4911      	ldr	r1, [pc, #68]	; (8008d88 <UARTEx_SetNbDataToProcess+0x94>)
 8008d44:	5c8a      	ldrb	r2, [r1, r2]
 8008d46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008d4a:	7b3a      	ldrb	r2, [r7, #12]
 8008d4c:	490f      	ldr	r1, [pc, #60]	; (8008d8c <UARTEx_SetNbDataToProcess+0x98>)
 8008d4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d50:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d54:	b29a      	uxth	r2, r3
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d5c:	7bfb      	ldrb	r3, [r7, #15]
 8008d5e:	7b7a      	ldrb	r2, [r7, #13]
 8008d60:	4909      	ldr	r1, [pc, #36]	; (8008d88 <UARTEx_SetNbDataToProcess+0x94>)
 8008d62:	5c8a      	ldrb	r2, [r1, r2]
 8008d64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008d68:	7b7a      	ldrb	r2, [r7, #13]
 8008d6a:	4908      	ldr	r1, [pc, #32]	; (8008d8c <UARTEx_SetNbDataToProcess+0x98>)
 8008d6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d72:	b29a      	uxth	r2, r3
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008d7a:	bf00      	nop
 8008d7c:	3714      	adds	r7, #20
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr
 8008d86:	bf00      	nop
 8008d88:	080097a8 	.word	0x080097a8
 8008d8c:	080097b0 	.word	0x080097b0

08008d90 <__errno>:
 8008d90:	4b01      	ldr	r3, [pc, #4]	; (8008d98 <__errno+0x8>)
 8008d92:	6818      	ldr	r0, [r3, #0]
 8008d94:	4770      	bx	lr
 8008d96:	bf00      	nop
 8008d98:	24000020 	.word	0x24000020

08008d9c <__libc_init_array>:
 8008d9c:	b570      	push	{r4, r5, r6, lr}
 8008d9e:	4d0d      	ldr	r5, [pc, #52]	; (8008dd4 <__libc_init_array+0x38>)
 8008da0:	4c0d      	ldr	r4, [pc, #52]	; (8008dd8 <__libc_init_array+0x3c>)
 8008da2:	1b64      	subs	r4, r4, r5
 8008da4:	10a4      	asrs	r4, r4, #2
 8008da6:	2600      	movs	r6, #0
 8008da8:	42a6      	cmp	r6, r4
 8008daa:	d109      	bne.n	8008dc0 <__libc_init_array+0x24>
 8008dac:	4d0b      	ldr	r5, [pc, #44]	; (8008ddc <__libc_init_array+0x40>)
 8008dae:	4c0c      	ldr	r4, [pc, #48]	; (8008de0 <__libc_init_array+0x44>)
 8008db0:	f000 fc8e 	bl	80096d0 <_init>
 8008db4:	1b64      	subs	r4, r4, r5
 8008db6:	10a4      	asrs	r4, r4, #2
 8008db8:	2600      	movs	r6, #0
 8008dba:	42a6      	cmp	r6, r4
 8008dbc:	d105      	bne.n	8008dca <__libc_init_array+0x2e>
 8008dbe:	bd70      	pop	{r4, r5, r6, pc}
 8008dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dc4:	4798      	blx	r3
 8008dc6:	3601      	adds	r6, #1
 8008dc8:	e7ee      	b.n	8008da8 <__libc_init_array+0xc>
 8008dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dce:	4798      	blx	r3
 8008dd0:	3601      	adds	r6, #1
 8008dd2:	e7f2      	b.n	8008dba <__libc_init_array+0x1e>
 8008dd4:	080097f4 	.word	0x080097f4
 8008dd8:	080097f4 	.word	0x080097f4
 8008ddc:	080097f4 	.word	0x080097f4
 8008de0:	080097f8 	.word	0x080097f8

08008de4 <memset>:
 8008de4:	4402      	add	r2, r0
 8008de6:	4603      	mov	r3, r0
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d100      	bne.n	8008dee <memset+0xa>
 8008dec:	4770      	bx	lr
 8008dee:	f803 1b01 	strb.w	r1, [r3], #1
 8008df2:	e7f9      	b.n	8008de8 <memset+0x4>

08008df4 <siprintf>:
 8008df4:	b40e      	push	{r1, r2, r3}
 8008df6:	b500      	push	{lr}
 8008df8:	b09c      	sub	sp, #112	; 0x70
 8008dfa:	ab1d      	add	r3, sp, #116	; 0x74
 8008dfc:	9002      	str	r0, [sp, #8]
 8008dfe:	9006      	str	r0, [sp, #24]
 8008e00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e04:	4809      	ldr	r0, [pc, #36]	; (8008e2c <siprintf+0x38>)
 8008e06:	9107      	str	r1, [sp, #28]
 8008e08:	9104      	str	r1, [sp, #16]
 8008e0a:	4909      	ldr	r1, [pc, #36]	; (8008e30 <siprintf+0x3c>)
 8008e0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e10:	9105      	str	r1, [sp, #20]
 8008e12:	6800      	ldr	r0, [r0, #0]
 8008e14:	9301      	str	r3, [sp, #4]
 8008e16:	a902      	add	r1, sp, #8
 8008e18:	f000 f868 	bl	8008eec <_svfiprintf_r>
 8008e1c:	9b02      	ldr	r3, [sp, #8]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	701a      	strb	r2, [r3, #0]
 8008e22:	b01c      	add	sp, #112	; 0x70
 8008e24:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e28:	b003      	add	sp, #12
 8008e2a:	4770      	bx	lr
 8008e2c:	24000020 	.word	0x24000020
 8008e30:	ffff0208 	.word	0xffff0208

08008e34 <__ssputs_r>:
 8008e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e38:	688e      	ldr	r6, [r1, #8]
 8008e3a:	429e      	cmp	r6, r3
 8008e3c:	4682      	mov	sl, r0
 8008e3e:	460c      	mov	r4, r1
 8008e40:	4690      	mov	r8, r2
 8008e42:	461f      	mov	r7, r3
 8008e44:	d838      	bhi.n	8008eb8 <__ssputs_r+0x84>
 8008e46:	898a      	ldrh	r2, [r1, #12]
 8008e48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e4c:	d032      	beq.n	8008eb4 <__ssputs_r+0x80>
 8008e4e:	6825      	ldr	r5, [r4, #0]
 8008e50:	6909      	ldr	r1, [r1, #16]
 8008e52:	eba5 0901 	sub.w	r9, r5, r1
 8008e56:	6965      	ldr	r5, [r4, #20]
 8008e58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e60:	3301      	adds	r3, #1
 8008e62:	444b      	add	r3, r9
 8008e64:	106d      	asrs	r5, r5, #1
 8008e66:	429d      	cmp	r5, r3
 8008e68:	bf38      	it	cc
 8008e6a:	461d      	movcc	r5, r3
 8008e6c:	0553      	lsls	r3, r2, #21
 8008e6e:	d531      	bpl.n	8008ed4 <__ssputs_r+0xa0>
 8008e70:	4629      	mov	r1, r5
 8008e72:	f000 fb63 	bl	800953c <_malloc_r>
 8008e76:	4606      	mov	r6, r0
 8008e78:	b950      	cbnz	r0, 8008e90 <__ssputs_r+0x5c>
 8008e7a:	230c      	movs	r3, #12
 8008e7c:	f8ca 3000 	str.w	r3, [sl]
 8008e80:	89a3      	ldrh	r3, [r4, #12]
 8008e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e86:	81a3      	strh	r3, [r4, #12]
 8008e88:	f04f 30ff 	mov.w	r0, #4294967295
 8008e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e90:	6921      	ldr	r1, [r4, #16]
 8008e92:	464a      	mov	r2, r9
 8008e94:	f000 fabe 	bl	8009414 <memcpy>
 8008e98:	89a3      	ldrh	r3, [r4, #12]
 8008e9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ea2:	81a3      	strh	r3, [r4, #12]
 8008ea4:	6126      	str	r6, [r4, #16]
 8008ea6:	6165      	str	r5, [r4, #20]
 8008ea8:	444e      	add	r6, r9
 8008eaa:	eba5 0509 	sub.w	r5, r5, r9
 8008eae:	6026      	str	r6, [r4, #0]
 8008eb0:	60a5      	str	r5, [r4, #8]
 8008eb2:	463e      	mov	r6, r7
 8008eb4:	42be      	cmp	r6, r7
 8008eb6:	d900      	bls.n	8008eba <__ssputs_r+0x86>
 8008eb8:	463e      	mov	r6, r7
 8008eba:	6820      	ldr	r0, [r4, #0]
 8008ebc:	4632      	mov	r2, r6
 8008ebe:	4641      	mov	r1, r8
 8008ec0:	f000 fab6 	bl	8009430 <memmove>
 8008ec4:	68a3      	ldr	r3, [r4, #8]
 8008ec6:	1b9b      	subs	r3, r3, r6
 8008ec8:	60a3      	str	r3, [r4, #8]
 8008eca:	6823      	ldr	r3, [r4, #0]
 8008ecc:	4433      	add	r3, r6
 8008ece:	6023      	str	r3, [r4, #0]
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	e7db      	b.n	8008e8c <__ssputs_r+0x58>
 8008ed4:	462a      	mov	r2, r5
 8008ed6:	f000 fba5 	bl	8009624 <_realloc_r>
 8008eda:	4606      	mov	r6, r0
 8008edc:	2800      	cmp	r0, #0
 8008ede:	d1e1      	bne.n	8008ea4 <__ssputs_r+0x70>
 8008ee0:	6921      	ldr	r1, [r4, #16]
 8008ee2:	4650      	mov	r0, sl
 8008ee4:	f000 fabe 	bl	8009464 <_free_r>
 8008ee8:	e7c7      	b.n	8008e7a <__ssputs_r+0x46>
	...

08008eec <_svfiprintf_r>:
 8008eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ef0:	4698      	mov	r8, r3
 8008ef2:	898b      	ldrh	r3, [r1, #12]
 8008ef4:	061b      	lsls	r3, r3, #24
 8008ef6:	b09d      	sub	sp, #116	; 0x74
 8008ef8:	4607      	mov	r7, r0
 8008efa:	460d      	mov	r5, r1
 8008efc:	4614      	mov	r4, r2
 8008efe:	d50e      	bpl.n	8008f1e <_svfiprintf_r+0x32>
 8008f00:	690b      	ldr	r3, [r1, #16]
 8008f02:	b963      	cbnz	r3, 8008f1e <_svfiprintf_r+0x32>
 8008f04:	2140      	movs	r1, #64	; 0x40
 8008f06:	f000 fb19 	bl	800953c <_malloc_r>
 8008f0a:	6028      	str	r0, [r5, #0]
 8008f0c:	6128      	str	r0, [r5, #16]
 8008f0e:	b920      	cbnz	r0, 8008f1a <_svfiprintf_r+0x2e>
 8008f10:	230c      	movs	r3, #12
 8008f12:	603b      	str	r3, [r7, #0]
 8008f14:	f04f 30ff 	mov.w	r0, #4294967295
 8008f18:	e0d1      	b.n	80090be <_svfiprintf_r+0x1d2>
 8008f1a:	2340      	movs	r3, #64	; 0x40
 8008f1c:	616b      	str	r3, [r5, #20]
 8008f1e:	2300      	movs	r3, #0
 8008f20:	9309      	str	r3, [sp, #36]	; 0x24
 8008f22:	2320      	movs	r3, #32
 8008f24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f28:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f2c:	2330      	movs	r3, #48	; 0x30
 8008f2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80090d8 <_svfiprintf_r+0x1ec>
 8008f32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f36:	f04f 0901 	mov.w	r9, #1
 8008f3a:	4623      	mov	r3, r4
 8008f3c:	469a      	mov	sl, r3
 8008f3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f42:	b10a      	cbz	r2, 8008f48 <_svfiprintf_r+0x5c>
 8008f44:	2a25      	cmp	r2, #37	; 0x25
 8008f46:	d1f9      	bne.n	8008f3c <_svfiprintf_r+0x50>
 8008f48:	ebba 0b04 	subs.w	fp, sl, r4
 8008f4c:	d00b      	beq.n	8008f66 <_svfiprintf_r+0x7a>
 8008f4e:	465b      	mov	r3, fp
 8008f50:	4622      	mov	r2, r4
 8008f52:	4629      	mov	r1, r5
 8008f54:	4638      	mov	r0, r7
 8008f56:	f7ff ff6d 	bl	8008e34 <__ssputs_r>
 8008f5a:	3001      	adds	r0, #1
 8008f5c:	f000 80aa 	beq.w	80090b4 <_svfiprintf_r+0x1c8>
 8008f60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f62:	445a      	add	r2, fp
 8008f64:	9209      	str	r2, [sp, #36]	; 0x24
 8008f66:	f89a 3000 	ldrb.w	r3, [sl]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	f000 80a2 	beq.w	80090b4 <_svfiprintf_r+0x1c8>
 8008f70:	2300      	movs	r3, #0
 8008f72:	f04f 32ff 	mov.w	r2, #4294967295
 8008f76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f7a:	f10a 0a01 	add.w	sl, sl, #1
 8008f7e:	9304      	str	r3, [sp, #16]
 8008f80:	9307      	str	r3, [sp, #28]
 8008f82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f86:	931a      	str	r3, [sp, #104]	; 0x68
 8008f88:	4654      	mov	r4, sl
 8008f8a:	2205      	movs	r2, #5
 8008f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f90:	4851      	ldr	r0, [pc, #324]	; (80090d8 <_svfiprintf_r+0x1ec>)
 8008f92:	f7f7 f9b5 	bl	8000300 <memchr>
 8008f96:	9a04      	ldr	r2, [sp, #16]
 8008f98:	b9d8      	cbnz	r0, 8008fd2 <_svfiprintf_r+0xe6>
 8008f9a:	06d0      	lsls	r0, r2, #27
 8008f9c:	bf44      	itt	mi
 8008f9e:	2320      	movmi	r3, #32
 8008fa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fa4:	0711      	lsls	r1, r2, #28
 8008fa6:	bf44      	itt	mi
 8008fa8:	232b      	movmi	r3, #43	; 0x2b
 8008faa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fae:	f89a 3000 	ldrb.w	r3, [sl]
 8008fb2:	2b2a      	cmp	r3, #42	; 0x2a
 8008fb4:	d015      	beq.n	8008fe2 <_svfiprintf_r+0xf6>
 8008fb6:	9a07      	ldr	r2, [sp, #28]
 8008fb8:	4654      	mov	r4, sl
 8008fba:	2000      	movs	r0, #0
 8008fbc:	f04f 0c0a 	mov.w	ip, #10
 8008fc0:	4621      	mov	r1, r4
 8008fc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fc6:	3b30      	subs	r3, #48	; 0x30
 8008fc8:	2b09      	cmp	r3, #9
 8008fca:	d94e      	bls.n	800906a <_svfiprintf_r+0x17e>
 8008fcc:	b1b0      	cbz	r0, 8008ffc <_svfiprintf_r+0x110>
 8008fce:	9207      	str	r2, [sp, #28]
 8008fd0:	e014      	b.n	8008ffc <_svfiprintf_r+0x110>
 8008fd2:	eba0 0308 	sub.w	r3, r0, r8
 8008fd6:	fa09 f303 	lsl.w	r3, r9, r3
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	9304      	str	r3, [sp, #16]
 8008fde:	46a2      	mov	sl, r4
 8008fe0:	e7d2      	b.n	8008f88 <_svfiprintf_r+0x9c>
 8008fe2:	9b03      	ldr	r3, [sp, #12]
 8008fe4:	1d19      	adds	r1, r3, #4
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	9103      	str	r1, [sp, #12]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	bfbb      	ittet	lt
 8008fee:	425b      	neglt	r3, r3
 8008ff0:	f042 0202 	orrlt.w	r2, r2, #2
 8008ff4:	9307      	strge	r3, [sp, #28]
 8008ff6:	9307      	strlt	r3, [sp, #28]
 8008ff8:	bfb8      	it	lt
 8008ffa:	9204      	strlt	r2, [sp, #16]
 8008ffc:	7823      	ldrb	r3, [r4, #0]
 8008ffe:	2b2e      	cmp	r3, #46	; 0x2e
 8009000:	d10c      	bne.n	800901c <_svfiprintf_r+0x130>
 8009002:	7863      	ldrb	r3, [r4, #1]
 8009004:	2b2a      	cmp	r3, #42	; 0x2a
 8009006:	d135      	bne.n	8009074 <_svfiprintf_r+0x188>
 8009008:	9b03      	ldr	r3, [sp, #12]
 800900a:	1d1a      	adds	r2, r3, #4
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	9203      	str	r2, [sp, #12]
 8009010:	2b00      	cmp	r3, #0
 8009012:	bfb8      	it	lt
 8009014:	f04f 33ff 	movlt.w	r3, #4294967295
 8009018:	3402      	adds	r4, #2
 800901a:	9305      	str	r3, [sp, #20]
 800901c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80090e8 <_svfiprintf_r+0x1fc>
 8009020:	7821      	ldrb	r1, [r4, #0]
 8009022:	2203      	movs	r2, #3
 8009024:	4650      	mov	r0, sl
 8009026:	f7f7 f96b 	bl	8000300 <memchr>
 800902a:	b140      	cbz	r0, 800903e <_svfiprintf_r+0x152>
 800902c:	2340      	movs	r3, #64	; 0x40
 800902e:	eba0 000a 	sub.w	r0, r0, sl
 8009032:	fa03 f000 	lsl.w	r0, r3, r0
 8009036:	9b04      	ldr	r3, [sp, #16]
 8009038:	4303      	orrs	r3, r0
 800903a:	3401      	adds	r4, #1
 800903c:	9304      	str	r3, [sp, #16]
 800903e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009042:	4826      	ldr	r0, [pc, #152]	; (80090dc <_svfiprintf_r+0x1f0>)
 8009044:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009048:	2206      	movs	r2, #6
 800904a:	f7f7 f959 	bl	8000300 <memchr>
 800904e:	2800      	cmp	r0, #0
 8009050:	d038      	beq.n	80090c4 <_svfiprintf_r+0x1d8>
 8009052:	4b23      	ldr	r3, [pc, #140]	; (80090e0 <_svfiprintf_r+0x1f4>)
 8009054:	bb1b      	cbnz	r3, 800909e <_svfiprintf_r+0x1b2>
 8009056:	9b03      	ldr	r3, [sp, #12]
 8009058:	3307      	adds	r3, #7
 800905a:	f023 0307 	bic.w	r3, r3, #7
 800905e:	3308      	adds	r3, #8
 8009060:	9303      	str	r3, [sp, #12]
 8009062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009064:	4433      	add	r3, r6
 8009066:	9309      	str	r3, [sp, #36]	; 0x24
 8009068:	e767      	b.n	8008f3a <_svfiprintf_r+0x4e>
 800906a:	fb0c 3202 	mla	r2, ip, r2, r3
 800906e:	460c      	mov	r4, r1
 8009070:	2001      	movs	r0, #1
 8009072:	e7a5      	b.n	8008fc0 <_svfiprintf_r+0xd4>
 8009074:	2300      	movs	r3, #0
 8009076:	3401      	adds	r4, #1
 8009078:	9305      	str	r3, [sp, #20]
 800907a:	4619      	mov	r1, r3
 800907c:	f04f 0c0a 	mov.w	ip, #10
 8009080:	4620      	mov	r0, r4
 8009082:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009086:	3a30      	subs	r2, #48	; 0x30
 8009088:	2a09      	cmp	r2, #9
 800908a:	d903      	bls.n	8009094 <_svfiprintf_r+0x1a8>
 800908c:	2b00      	cmp	r3, #0
 800908e:	d0c5      	beq.n	800901c <_svfiprintf_r+0x130>
 8009090:	9105      	str	r1, [sp, #20]
 8009092:	e7c3      	b.n	800901c <_svfiprintf_r+0x130>
 8009094:	fb0c 2101 	mla	r1, ip, r1, r2
 8009098:	4604      	mov	r4, r0
 800909a:	2301      	movs	r3, #1
 800909c:	e7f0      	b.n	8009080 <_svfiprintf_r+0x194>
 800909e:	ab03      	add	r3, sp, #12
 80090a0:	9300      	str	r3, [sp, #0]
 80090a2:	462a      	mov	r2, r5
 80090a4:	4b0f      	ldr	r3, [pc, #60]	; (80090e4 <_svfiprintf_r+0x1f8>)
 80090a6:	a904      	add	r1, sp, #16
 80090a8:	4638      	mov	r0, r7
 80090aa:	f3af 8000 	nop.w
 80090ae:	1c42      	adds	r2, r0, #1
 80090b0:	4606      	mov	r6, r0
 80090b2:	d1d6      	bne.n	8009062 <_svfiprintf_r+0x176>
 80090b4:	89ab      	ldrh	r3, [r5, #12]
 80090b6:	065b      	lsls	r3, r3, #25
 80090b8:	f53f af2c 	bmi.w	8008f14 <_svfiprintf_r+0x28>
 80090bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090be:	b01d      	add	sp, #116	; 0x74
 80090c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090c4:	ab03      	add	r3, sp, #12
 80090c6:	9300      	str	r3, [sp, #0]
 80090c8:	462a      	mov	r2, r5
 80090ca:	4b06      	ldr	r3, [pc, #24]	; (80090e4 <_svfiprintf_r+0x1f8>)
 80090cc:	a904      	add	r1, sp, #16
 80090ce:	4638      	mov	r0, r7
 80090d0:	f000 f87a 	bl	80091c8 <_printf_i>
 80090d4:	e7eb      	b.n	80090ae <_svfiprintf_r+0x1c2>
 80090d6:	bf00      	nop
 80090d8:	080097b8 	.word	0x080097b8
 80090dc:	080097c2 	.word	0x080097c2
 80090e0:	00000000 	.word	0x00000000
 80090e4:	08008e35 	.word	0x08008e35
 80090e8:	080097be 	.word	0x080097be

080090ec <_printf_common>:
 80090ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090f0:	4616      	mov	r6, r2
 80090f2:	4699      	mov	r9, r3
 80090f4:	688a      	ldr	r2, [r1, #8]
 80090f6:	690b      	ldr	r3, [r1, #16]
 80090f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80090fc:	4293      	cmp	r3, r2
 80090fe:	bfb8      	it	lt
 8009100:	4613      	movlt	r3, r2
 8009102:	6033      	str	r3, [r6, #0]
 8009104:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009108:	4607      	mov	r7, r0
 800910a:	460c      	mov	r4, r1
 800910c:	b10a      	cbz	r2, 8009112 <_printf_common+0x26>
 800910e:	3301      	adds	r3, #1
 8009110:	6033      	str	r3, [r6, #0]
 8009112:	6823      	ldr	r3, [r4, #0]
 8009114:	0699      	lsls	r1, r3, #26
 8009116:	bf42      	ittt	mi
 8009118:	6833      	ldrmi	r3, [r6, #0]
 800911a:	3302      	addmi	r3, #2
 800911c:	6033      	strmi	r3, [r6, #0]
 800911e:	6825      	ldr	r5, [r4, #0]
 8009120:	f015 0506 	ands.w	r5, r5, #6
 8009124:	d106      	bne.n	8009134 <_printf_common+0x48>
 8009126:	f104 0a19 	add.w	sl, r4, #25
 800912a:	68e3      	ldr	r3, [r4, #12]
 800912c:	6832      	ldr	r2, [r6, #0]
 800912e:	1a9b      	subs	r3, r3, r2
 8009130:	42ab      	cmp	r3, r5
 8009132:	dc26      	bgt.n	8009182 <_printf_common+0x96>
 8009134:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009138:	1e13      	subs	r3, r2, #0
 800913a:	6822      	ldr	r2, [r4, #0]
 800913c:	bf18      	it	ne
 800913e:	2301      	movne	r3, #1
 8009140:	0692      	lsls	r2, r2, #26
 8009142:	d42b      	bmi.n	800919c <_printf_common+0xb0>
 8009144:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009148:	4649      	mov	r1, r9
 800914a:	4638      	mov	r0, r7
 800914c:	47c0      	blx	r8
 800914e:	3001      	adds	r0, #1
 8009150:	d01e      	beq.n	8009190 <_printf_common+0xa4>
 8009152:	6823      	ldr	r3, [r4, #0]
 8009154:	68e5      	ldr	r5, [r4, #12]
 8009156:	6832      	ldr	r2, [r6, #0]
 8009158:	f003 0306 	and.w	r3, r3, #6
 800915c:	2b04      	cmp	r3, #4
 800915e:	bf08      	it	eq
 8009160:	1aad      	subeq	r5, r5, r2
 8009162:	68a3      	ldr	r3, [r4, #8]
 8009164:	6922      	ldr	r2, [r4, #16]
 8009166:	bf0c      	ite	eq
 8009168:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800916c:	2500      	movne	r5, #0
 800916e:	4293      	cmp	r3, r2
 8009170:	bfc4      	itt	gt
 8009172:	1a9b      	subgt	r3, r3, r2
 8009174:	18ed      	addgt	r5, r5, r3
 8009176:	2600      	movs	r6, #0
 8009178:	341a      	adds	r4, #26
 800917a:	42b5      	cmp	r5, r6
 800917c:	d11a      	bne.n	80091b4 <_printf_common+0xc8>
 800917e:	2000      	movs	r0, #0
 8009180:	e008      	b.n	8009194 <_printf_common+0xa8>
 8009182:	2301      	movs	r3, #1
 8009184:	4652      	mov	r2, sl
 8009186:	4649      	mov	r1, r9
 8009188:	4638      	mov	r0, r7
 800918a:	47c0      	blx	r8
 800918c:	3001      	adds	r0, #1
 800918e:	d103      	bne.n	8009198 <_printf_common+0xac>
 8009190:	f04f 30ff 	mov.w	r0, #4294967295
 8009194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009198:	3501      	adds	r5, #1
 800919a:	e7c6      	b.n	800912a <_printf_common+0x3e>
 800919c:	18e1      	adds	r1, r4, r3
 800919e:	1c5a      	adds	r2, r3, #1
 80091a0:	2030      	movs	r0, #48	; 0x30
 80091a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091a6:	4422      	add	r2, r4
 80091a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091b0:	3302      	adds	r3, #2
 80091b2:	e7c7      	b.n	8009144 <_printf_common+0x58>
 80091b4:	2301      	movs	r3, #1
 80091b6:	4622      	mov	r2, r4
 80091b8:	4649      	mov	r1, r9
 80091ba:	4638      	mov	r0, r7
 80091bc:	47c0      	blx	r8
 80091be:	3001      	adds	r0, #1
 80091c0:	d0e6      	beq.n	8009190 <_printf_common+0xa4>
 80091c2:	3601      	adds	r6, #1
 80091c4:	e7d9      	b.n	800917a <_printf_common+0x8e>
	...

080091c8 <_printf_i>:
 80091c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091cc:	7e0f      	ldrb	r7, [r1, #24]
 80091ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80091d0:	2f78      	cmp	r7, #120	; 0x78
 80091d2:	4691      	mov	r9, r2
 80091d4:	4680      	mov	r8, r0
 80091d6:	460c      	mov	r4, r1
 80091d8:	469a      	mov	sl, r3
 80091da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80091de:	d807      	bhi.n	80091f0 <_printf_i+0x28>
 80091e0:	2f62      	cmp	r7, #98	; 0x62
 80091e2:	d80a      	bhi.n	80091fa <_printf_i+0x32>
 80091e4:	2f00      	cmp	r7, #0
 80091e6:	f000 80d8 	beq.w	800939a <_printf_i+0x1d2>
 80091ea:	2f58      	cmp	r7, #88	; 0x58
 80091ec:	f000 80a3 	beq.w	8009336 <_printf_i+0x16e>
 80091f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80091f8:	e03a      	b.n	8009270 <_printf_i+0xa8>
 80091fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80091fe:	2b15      	cmp	r3, #21
 8009200:	d8f6      	bhi.n	80091f0 <_printf_i+0x28>
 8009202:	a101      	add	r1, pc, #4	; (adr r1, 8009208 <_printf_i+0x40>)
 8009204:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009208:	08009261 	.word	0x08009261
 800920c:	08009275 	.word	0x08009275
 8009210:	080091f1 	.word	0x080091f1
 8009214:	080091f1 	.word	0x080091f1
 8009218:	080091f1 	.word	0x080091f1
 800921c:	080091f1 	.word	0x080091f1
 8009220:	08009275 	.word	0x08009275
 8009224:	080091f1 	.word	0x080091f1
 8009228:	080091f1 	.word	0x080091f1
 800922c:	080091f1 	.word	0x080091f1
 8009230:	080091f1 	.word	0x080091f1
 8009234:	08009381 	.word	0x08009381
 8009238:	080092a5 	.word	0x080092a5
 800923c:	08009363 	.word	0x08009363
 8009240:	080091f1 	.word	0x080091f1
 8009244:	080091f1 	.word	0x080091f1
 8009248:	080093a3 	.word	0x080093a3
 800924c:	080091f1 	.word	0x080091f1
 8009250:	080092a5 	.word	0x080092a5
 8009254:	080091f1 	.word	0x080091f1
 8009258:	080091f1 	.word	0x080091f1
 800925c:	0800936b 	.word	0x0800936b
 8009260:	682b      	ldr	r3, [r5, #0]
 8009262:	1d1a      	adds	r2, r3, #4
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	602a      	str	r2, [r5, #0]
 8009268:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800926c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009270:	2301      	movs	r3, #1
 8009272:	e0a3      	b.n	80093bc <_printf_i+0x1f4>
 8009274:	6820      	ldr	r0, [r4, #0]
 8009276:	6829      	ldr	r1, [r5, #0]
 8009278:	0606      	lsls	r6, r0, #24
 800927a:	f101 0304 	add.w	r3, r1, #4
 800927e:	d50a      	bpl.n	8009296 <_printf_i+0xce>
 8009280:	680e      	ldr	r6, [r1, #0]
 8009282:	602b      	str	r3, [r5, #0]
 8009284:	2e00      	cmp	r6, #0
 8009286:	da03      	bge.n	8009290 <_printf_i+0xc8>
 8009288:	232d      	movs	r3, #45	; 0x2d
 800928a:	4276      	negs	r6, r6
 800928c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009290:	485e      	ldr	r0, [pc, #376]	; (800940c <_printf_i+0x244>)
 8009292:	230a      	movs	r3, #10
 8009294:	e019      	b.n	80092ca <_printf_i+0x102>
 8009296:	680e      	ldr	r6, [r1, #0]
 8009298:	602b      	str	r3, [r5, #0]
 800929a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800929e:	bf18      	it	ne
 80092a0:	b236      	sxthne	r6, r6
 80092a2:	e7ef      	b.n	8009284 <_printf_i+0xbc>
 80092a4:	682b      	ldr	r3, [r5, #0]
 80092a6:	6820      	ldr	r0, [r4, #0]
 80092a8:	1d19      	adds	r1, r3, #4
 80092aa:	6029      	str	r1, [r5, #0]
 80092ac:	0601      	lsls	r1, r0, #24
 80092ae:	d501      	bpl.n	80092b4 <_printf_i+0xec>
 80092b0:	681e      	ldr	r6, [r3, #0]
 80092b2:	e002      	b.n	80092ba <_printf_i+0xf2>
 80092b4:	0646      	lsls	r6, r0, #25
 80092b6:	d5fb      	bpl.n	80092b0 <_printf_i+0xe8>
 80092b8:	881e      	ldrh	r6, [r3, #0]
 80092ba:	4854      	ldr	r0, [pc, #336]	; (800940c <_printf_i+0x244>)
 80092bc:	2f6f      	cmp	r7, #111	; 0x6f
 80092be:	bf0c      	ite	eq
 80092c0:	2308      	moveq	r3, #8
 80092c2:	230a      	movne	r3, #10
 80092c4:	2100      	movs	r1, #0
 80092c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80092ca:	6865      	ldr	r5, [r4, #4]
 80092cc:	60a5      	str	r5, [r4, #8]
 80092ce:	2d00      	cmp	r5, #0
 80092d0:	bfa2      	ittt	ge
 80092d2:	6821      	ldrge	r1, [r4, #0]
 80092d4:	f021 0104 	bicge.w	r1, r1, #4
 80092d8:	6021      	strge	r1, [r4, #0]
 80092da:	b90e      	cbnz	r6, 80092e0 <_printf_i+0x118>
 80092dc:	2d00      	cmp	r5, #0
 80092de:	d04d      	beq.n	800937c <_printf_i+0x1b4>
 80092e0:	4615      	mov	r5, r2
 80092e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80092e6:	fb03 6711 	mls	r7, r3, r1, r6
 80092ea:	5dc7      	ldrb	r7, [r0, r7]
 80092ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80092f0:	4637      	mov	r7, r6
 80092f2:	42bb      	cmp	r3, r7
 80092f4:	460e      	mov	r6, r1
 80092f6:	d9f4      	bls.n	80092e2 <_printf_i+0x11a>
 80092f8:	2b08      	cmp	r3, #8
 80092fa:	d10b      	bne.n	8009314 <_printf_i+0x14c>
 80092fc:	6823      	ldr	r3, [r4, #0]
 80092fe:	07de      	lsls	r6, r3, #31
 8009300:	d508      	bpl.n	8009314 <_printf_i+0x14c>
 8009302:	6923      	ldr	r3, [r4, #16]
 8009304:	6861      	ldr	r1, [r4, #4]
 8009306:	4299      	cmp	r1, r3
 8009308:	bfde      	ittt	le
 800930a:	2330      	movle	r3, #48	; 0x30
 800930c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009310:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009314:	1b52      	subs	r2, r2, r5
 8009316:	6122      	str	r2, [r4, #16]
 8009318:	f8cd a000 	str.w	sl, [sp]
 800931c:	464b      	mov	r3, r9
 800931e:	aa03      	add	r2, sp, #12
 8009320:	4621      	mov	r1, r4
 8009322:	4640      	mov	r0, r8
 8009324:	f7ff fee2 	bl	80090ec <_printf_common>
 8009328:	3001      	adds	r0, #1
 800932a:	d14c      	bne.n	80093c6 <_printf_i+0x1fe>
 800932c:	f04f 30ff 	mov.w	r0, #4294967295
 8009330:	b004      	add	sp, #16
 8009332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009336:	4835      	ldr	r0, [pc, #212]	; (800940c <_printf_i+0x244>)
 8009338:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800933c:	6829      	ldr	r1, [r5, #0]
 800933e:	6823      	ldr	r3, [r4, #0]
 8009340:	f851 6b04 	ldr.w	r6, [r1], #4
 8009344:	6029      	str	r1, [r5, #0]
 8009346:	061d      	lsls	r5, r3, #24
 8009348:	d514      	bpl.n	8009374 <_printf_i+0x1ac>
 800934a:	07df      	lsls	r7, r3, #31
 800934c:	bf44      	itt	mi
 800934e:	f043 0320 	orrmi.w	r3, r3, #32
 8009352:	6023      	strmi	r3, [r4, #0]
 8009354:	b91e      	cbnz	r6, 800935e <_printf_i+0x196>
 8009356:	6823      	ldr	r3, [r4, #0]
 8009358:	f023 0320 	bic.w	r3, r3, #32
 800935c:	6023      	str	r3, [r4, #0]
 800935e:	2310      	movs	r3, #16
 8009360:	e7b0      	b.n	80092c4 <_printf_i+0xfc>
 8009362:	6823      	ldr	r3, [r4, #0]
 8009364:	f043 0320 	orr.w	r3, r3, #32
 8009368:	6023      	str	r3, [r4, #0]
 800936a:	2378      	movs	r3, #120	; 0x78
 800936c:	4828      	ldr	r0, [pc, #160]	; (8009410 <_printf_i+0x248>)
 800936e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009372:	e7e3      	b.n	800933c <_printf_i+0x174>
 8009374:	0659      	lsls	r1, r3, #25
 8009376:	bf48      	it	mi
 8009378:	b2b6      	uxthmi	r6, r6
 800937a:	e7e6      	b.n	800934a <_printf_i+0x182>
 800937c:	4615      	mov	r5, r2
 800937e:	e7bb      	b.n	80092f8 <_printf_i+0x130>
 8009380:	682b      	ldr	r3, [r5, #0]
 8009382:	6826      	ldr	r6, [r4, #0]
 8009384:	6961      	ldr	r1, [r4, #20]
 8009386:	1d18      	adds	r0, r3, #4
 8009388:	6028      	str	r0, [r5, #0]
 800938a:	0635      	lsls	r5, r6, #24
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	d501      	bpl.n	8009394 <_printf_i+0x1cc>
 8009390:	6019      	str	r1, [r3, #0]
 8009392:	e002      	b.n	800939a <_printf_i+0x1d2>
 8009394:	0670      	lsls	r0, r6, #25
 8009396:	d5fb      	bpl.n	8009390 <_printf_i+0x1c8>
 8009398:	8019      	strh	r1, [r3, #0]
 800939a:	2300      	movs	r3, #0
 800939c:	6123      	str	r3, [r4, #16]
 800939e:	4615      	mov	r5, r2
 80093a0:	e7ba      	b.n	8009318 <_printf_i+0x150>
 80093a2:	682b      	ldr	r3, [r5, #0]
 80093a4:	1d1a      	adds	r2, r3, #4
 80093a6:	602a      	str	r2, [r5, #0]
 80093a8:	681d      	ldr	r5, [r3, #0]
 80093aa:	6862      	ldr	r2, [r4, #4]
 80093ac:	2100      	movs	r1, #0
 80093ae:	4628      	mov	r0, r5
 80093b0:	f7f6 ffa6 	bl	8000300 <memchr>
 80093b4:	b108      	cbz	r0, 80093ba <_printf_i+0x1f2>
 80093b6:	1b40      	subs	r0, r0, r5
 80093b8:	6060      	str	r0, [r4, #4]
 80093ba:	6863      	ldr	r3, [r4, #4]
 80093bc:	6123      	str	r3, [r4, #16]
 80093be:	2300      	movs	r3, #0
 80093c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093c4:	e7a8      	b.n	8009318 <_printf_i+0x150>
 80093c6:	6923      	ldr	r3, [r4, #16]
 80093c8:	462a      	mov	r2, r5
 80093ca:	4649      	mov	r1, r9
 80093cc:	4640      	mov	r0, r8
 80093ce:	47d0      	blx	sl
 80093d0:	3001      	adds	r0, #1
 80093d2:	d0ab      	beq.n	800932c <_printf_i+0x164>
 80093d4:	6823      	ldr	r3, [r4, #0]
 80093d6:	079b      	lsls	r3, r3, #30
 80093d8:	d413      	bmi.n	8009402 <_printf_i+0x23a>
 80093da:	68e0      	ldr	r0, [r4, #12]
 80093dc:	9b03      	ldr	r3, [sp, #12]
 80093de:	4298      	cmp	r0, r3
 80093e0:	bfb8      	it	lt
 80093e2:	4618      	movlt	r0, r3
 80093e4:	e7a4      	b.n	8009330 <_printf_i+0x168>
 80093e6:	2301      	movs	r3, #1
 80093e8:	4632      	mov	r2, r6
 80093ea:	4649      	mov	r1, r9
 80093ec:	4640      	mov	r0, r8
 80093ee:	47d0      	blx	sl
 80093f0:	3001      	adds	r0, #1
 80093f2:	d09b      	beq.n	800932c <_printf_i+0x164>
 80093f4:	3501      	adds	r5, #1
 80093f6:	68e3      	ldr	r3, [r4, #12]
 80093f8:	9903      	ldr	r1, [sp, #12]
 80093fa:	1a5b      	subs	r3, r3, r1
 80093fc:	42ab      	cmp	r3, r5
 80093fe:	dcf2      	bgt.n	80093e6 <_printf_i+0x21e>
 8009400:	e7eb      	b.n	80093da <_printf_i+0x212>
 8009402:	2500      	movs	r5, #0
 8009404:	f104 0619 	add.w	r6, r4, #25
 8009408:	e7f5      	b.n	80093f6 <_printf_i+0x22e>
 800940a:	bf00      	nop
 800940c:	080097c9 	.word	0x080097c9
 8009410:	080097da 	.word	0x080097da

08009414 <memcpy>:
 8009414:	440a      	add	r2, r1
 8009416:	4291      	cmp	r1, r2
 8009418:	f100 33ff 	add.w	r3, r0, #4294967295
 800941c:	d100      	bne.n	8009420 <memcpy+0xc>
 800941e:	4770      	bx	lr
 8009420:	b510      	push	{r4, lr}
 8009422:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009426:	f803 4f01 	strb.w	r4, [r3, #1]!
 800942a:	4291      	cmp	r1, r2
 800942c:	d1f9      	bne.n	8009422 <memcpy+0xe>
 800942e:	bd10      	pop	{r4, pc}

08009430 <memmove>:
 8009430:	4288      	cmp	r0, r1
 8009432:	b510      	push	{r4, lr}
 8009434:	eb01 0402 	add.w	r4, r1, r2
 8009438:	d902      	bls.n	8009440 <memmove+0x10>
 800943a:	4284      	cmp	r4, r0
 800943c:	4623      	mov	r3, r4
 800943e:	d807      	bhi.n	8009450 <memmove+0x20>
 8009440:	1e43      	subs	r3, r0, #1
 8009442:	42a1      	cmp	r1, r4
 8009444:	d008      	beq.n	8009458 <memmove+0x28>
 8009446:	f811 2b01 	ldrb.w	r2, [r1], #1
 800944a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800944e:	e7f8      	b.n	8009442 <memmove+0x12>
 8009450:	4402      	add	r2, r0
 8009452:	4601      	mov	r1, r0
 8009454:	428a      	cmp	r2, r1
 8009456:	d100      	bne.n	800945a <memmove+0x2a>
 8009458:	bd10      	pop	{r4, pc}
 800945a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800945e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009462:	e7f7      	b.n	8009454 <memmove+0x24>

08009464 <_free_r>:
 8009464:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009466:	2900      	cmp	r1, #0
 8009468:	d044      	beq.n	80094f4 <_free_r+0x90>
 800946a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800946e:	9001      	str	r0, [sp, #4]
 8009470:	2b00      	cmp	r3, #0
 8009472:	f1a1 0404 	sub.w	r4, r1, #4
 8009476:	bfb8      	it	lt
 8009478:	18e4      	addlt	r4, r4, r3
 800947a:	f000 f913 	bl	80096a4 <__malloc_lock>
 800947e:	4a1e      	ldr	r2, [pc, #120]	; (80094f8 <_free_r+0x94>)
 8009480:	9801      	ldr	r0, [sp, #4]
 8009482:	6813      	ldr	r3, [r2, #0]
 8009484:	b933      	cbnz	r3, 8009494 <_free_r+0x30>
 8009486:	6063      	str	r3, [r4, #4]
 8009488:	6014      	str	r4, [r2, #0]
 800948a:	b003      	add	sp, #12
 800948c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009490:	f000 b90e 	b.w	80096b0 <__malloc_unlock>
 8009494:	42a3      	cmp	r3, r4
 8009496:	d908      	bls.n	80094aa <_free_r+0x46>
 8009498:	6825      	ldr	r5, [r4, #0]
 800949a:	1961      	adds	r1, r4, r5
 800949c:	428b      	cmp	r3, r1
 800949e:	bf01      	itttt	eq
 80094a0:	6819      	ldreq	r1, [r3, #0]
 80094a2:	685b      	ldreq	r3, [r3, #4]
 80094a4:	1949      	addeq	r1, r1, r5
 80094a6:	6021      	streq	r1, [r4, #0]
 80094a8:	e7ed      	b.n	8009486 <_free_r+0x22>
 80094aa:	461a      	mov	r2, r3
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	b10b      	cbz	r3, 80094b4 <_free_r+0x50>
 80094b0:	42a3      	cmp	r3, r4
 80094b2:	d9fa      	bls.n	80094aa <_free_r+0x46>
 80094b4:	6811      	ldr	r1, [r2, #0]
 80094b6:	1855      	adds	r5, r2, r1
 80094b8:	42a5      	cmp	r5, r4
 80094ba:	d10b      	bne.n	80094d4 <_free_r+0x70>
 80094bc:	6824      	ldr	r4, [r4, #0]
 80094be:	4421      	add	r1, r4
 80094c0:	1854      	adds	r4, r2, r1
 80094c2:	42a3      	cmp	r3, r4
 80094c4:	6011      	str	r1, [r2, #0]
 80094c6:	d1e0      	bne.n	800948a <_free_r+0x26>
 80094c8:	681c      	ldr	r4, [r3, #0]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	6053      	str	r3, [r2, #4]
 80094ce:	4421      	add	r1, r4
 80094d0:	6011      	str	r1, [r2, #0]
 80094d2:	e7da      	b.n	800948a <_free_r+0x26>
 80094d4:	d902      	bls.n	80094dc <_free_r+0x78>
 80094d6:	230c      	movs	r3, #12
 80094d8:	6003      	str	r3, [r0, #0]
 80094da:	e7d6      	b.n	800948a <_free_r+0x26>
 80094dc:	6825      	ldr	r5, [r4, #0]
 80094de:	1961      	adds	r1, r4, r5
 80094e0:	428b      	cmp	r3, r1
 80094e2:	bf04      	itt	eq
 80094e4:	6819      	ldreq	r1, [r3, #0]
 80094e6:	685b      	ldreq	r3, [r3, #4]
 80094e8:	6063      	str	r3, [r4, #4]
 80094ea:	bf04      	itt	eq
 80094ec:	1949      	addeq	r1, r1, r5
 80094ee:	6021      	streq	r1, [r4, #0]
 80094f0:	6054      	str	r4, [r2, #4]
 80094f2:	e7ca      	b.n	800948a <_free_r+0x26>
 80094f4:	b003      	add	sp, #12
 80094f6:	bd30      	pop	{r4, r5, pc}
 80094f8:	24000208 	.word	0x24000208

080094fc <sbrk_aligned>:
 80094fc:	b570      	push	{r4, r5, r6, lr}
 80094fe:	4e0e      	ldr	r6, [pc, #56]	; (8009538 <sbrk_aligned+0x3c>)
 8009500:	460c      	mov	r4, r1
 8009502:	6831      	ldr	r1, [r6, #0]
 8009504:	4605      	mov	r5, r0
 8009506:	b911      	cbnz	r1, 800950e <sbrk_aligned+0x12>
 8009508:	f000 f8bc 	bl	8009684 <_sbrk_r>
 800950c:	6030      	str	r0, [r6, #0]
 800950e:	4621      	mov	r1, r4
 8009510:	4628      	mov	r0, r5
 8009512:	f000 f8b7 	bl	8009684 <_sbrk_r>
 8009516:	1c43      	adds	r3, r0, #1
 8009518:	d00a      	beq.n	8009530 <sbrk_aligned+0x34>
 800951a:	1cc4      	adds	r4, r0, #3
 800951c:	f024 0403 	bic.w	r4, r4, #3
 8009520:	42a0      	cmp	r0, r4
 8009522:	d007      	beq.n	8009534 <sbrk_aligned+0x38>
 8009524:	1a21      	subs	r1, r4, r0
 8009526:	4628      	mov	r0, r5
 8009528:	f000 f8ac 	bl	8009684 <_sbrk_r>
 800952c:	3001      	adds	r0, #1
 800952e:	d101      	bne.n	8009534 <sbrk_aligned+0x38>
 8009530:	f04f 34ff 	mov.w	r4, #4294967295
 8009534:	4620      	mov	r0, r4
 8009536:	bd70      	pop	{r4, r5, r6, pc}
 8009538:	2400020c 	.word	0x2400020c

0800953c <_malloc_r>:
 800953c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009540:	1ccd      	adds	r5, r1, #3
 8009542:	f025 0503 	bic.w	r5, r5, #3
 8009546:	3508      	adds	r5, #8
 8009548:	2d0c      	cmp	r5, #12
 800954a:	bf38      	it	cc
 800954c:	250c      	movcc	r5, #12
 800954e:	2d00      	cmp	r5, #0
 8009550:	4607      	mov	r7, r0
 8009552:	db01      	blt.n	8009558 <_malloc_r+0x1c>
 8009554:	42a9      	cmp	r1, r5
 8009556:	d905      	bls.n	8009564 <_malloc_r+0x28>
 8009558:	230c      	movs	r3, #12
 800955a:	603b      	str	r3, [r7, #0]
 800955c:	2600      	movs	r6, #0
 800955e:	4630      	mov	r0, r6
 8009560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009564:	4e2e      	ldr	r6, [pc, #184]	; (8009620 <_malloc_r+0xe4>)
 8009566:	f000 f89d 	bl	80096a4 <__malloc_lock>
 800956a:	6833      	ldr	r3, [r6, #0]
 800956c:	461c      	mov	r4, r3
 800956e:	bb34      	cbnz	r4, 80095be <_malloc_r+0x82>
 8009570:	4629      	mov	r1, r5
 8009572:	4638      	mov	r0, r7
 8009574:	f7ff ffc2 	bl	80094fc <sbrk_aligned>
 8009578:	1c43      	adds	r3, r0, #1
 800957a:	4604      	mov	r4, r0
 800957c:	d14d      	bne.n	800961a <_malloc_r+0xde>
 800957e:	6834      	ldr	r4, [r6, #0]
 8009580:	4626      	mov	r6, r4
 8009582:	2e00      	cmp	r6, #0
 8009584:	d140      	bne.n	8009608 <_malloc_r+0xcc>
 8009586:	6823      	ldr	r3, [r4, #0]
 8009588:	4631      	mov	r1, r6
 800958a:	4638      	mov	r0, r7
 800958c:	eb04 0803 	add.w	r8, r4, r3
 8009590:	f000 f878 	bl	8009684 <_sbrk_r>
 8009594:	4580      	cmp	r8, r0
 8009596:	d13a      	bne.n	800960e <_malloc_r+0xd2>
 8009598:	6821      	ldr	r1, [r4, #0]
 800959a:	3503      	adds	r5, #3
 800959c:	1a6d      	subs	r5, r5, r1
 800959e:	f025 0503 	bic.w	r5, r5, #3
 80095a2:	3508      	adds	r5, #8
 80095a4:	2d0c      	cmp	r5, #12
 80095a6:	bf38      	it	cc
 80095a8:	250c      	movcc	r5, #12
 80095aa:	4629      	mov	r1, r5
 80095ac:	4638      	mov	r0, r7
 80095ae:	f7ff ffa5 	bl	80094fc <sbrk_aligned>
 80095b2:	3001      	adds	r0, #1
 80095b4:	d02b      	beq.n	800960e <_malloc_r+0xd2>
 80095b6:	6823      	ldr	r3, [r4, #0]
 80095b8:	442b      	add	r3, r5
 80095ba:	6023      	str	r3, [r4, #0]
 80095bc:	e00e      	b.n	80095dc <_malloc_r+0xa0>
 80095be:	6822      	ldr	r2, [r4, #0]
 80095c0:	1b52      	subs	r2, r2, r5
 80095c2:	d41e      	bmi.n	8009602 <_malloc_r+0xc6>
 80095c4:	2a0b      	cmp	r2, #11
 80095c6:	d916      	bls.n	80095f6 <_malloc_r+0xba>
 80095c8:	1961      	adds	r1, r4, r5
 80095ca:	42a3      	cmp	r3, r4
 80095cc:	6025      	str	r5, [r4, #0]
 80095ce:	bf18      	it	ne
 80095d0:	6059      	strne	r1, [r3, #4]
 80095d2:	6863      	ldr	r3, [r4, #4]
 80095d4:	bf08      	it	eq
 80095d6:	6031      	streq	r1, [r6, #0]
 80095d8:	5162      	str	r2, [r4, r5]
 80095da:	604b      	str	r3, [r1, #4]
 80095dc:	4638      	mov	r0, r7
 80095de:	f104 060b 	add.w	r6, r4, #11
 80095e2:	f000 f865 	bl	80096b0 <__malloc_unlock>
 80095e6:	f026 0607 	bic.w	r6, r6, #7
 80095ea:	1d23      	adds	r3, r4, #4
 80095ec:	1af2      	subs	r2, r6, r3
 80095ee:	d0b6      	beq.n	800955e <_malloc_r+0x22>
 80095f0:	1b9b      	subs	r3, r3, r6
 80095f2:	50a3      	str	r3, [r4, r2]
 80095f4:	e7b3      	b.n	800955e <_malloc_r+0x22>
 80095f6:	6862      	ldr	r2, [r4, #4]
 80095f8:	42a3      	cmp	r3, r4
 80095fa:	bf0c      	ite	eq
 80095fc:	6032      	streq	r2, [r6, #0]
 80095fe:	605a      	strne	r2, [r3, #4]
 8009600:	e7ec      	b.n	80095dc <_malloc_r+0xa0>
 8009602:	4623      	mov	r3, r4
 8009604:	6864      	ldr	r4, [r4, #4]
 8009606:	e7b2      	b.n	800956e <_malloc_r+0x32>
 8009608:	4634      	mov	r4, r6
 800960a:	6876      	ldr	r6, [r6, #4]
 800960c:	e7b9      	b.n	8009582 <_malloc_r+0x46>
 800960e:	230c      	movs	r3, #12
 8009610:	603b      	str	r3, [r7, #0]
 8009612:	4638      	mov	r0, r7
 8009614:	f000 f84c 	bl	80096b0 <__malloc_unlock>
 8009618:	e7a1      	b.n	800955e <_malloc_r+0x22>
 800961a:	6025      	str	r5, [r4, #0]
 800961c:	e7de      	b.n	80095dc <_malloc_r+0xa0>
 800961e:	bf00      	nop
 8009620:	24000208 	.word	0x24000208

08009624 <_realloc_r>:
 8009624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009628:	4680      	mov	r8, r0
 800962a:	4614      	mov	r4, r2
 800962c:	460e      	mov	r6, r1
 800962e:	b921      	cbnz	r1, 800963a <_realloc_r+0x16>
 8009630:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009634:	4611      	mov	r1, r2
 8009636:	f7ff bf81 	b.w	800953c <_malloc_r>
 800963a:	b92a      	cbnz	r2, 8009648 <_realloc_r+0x24>
 800963c:	f7ff ff12 	bl	8009464 <_free_r>
 8009640:	4625      	mov	r5, r4
 8009642:	4628      	mov	r0, r5
 8009644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009648:	f000 f838 	bl	80096bc <_malloc_usable_size_r>
 800964c:	4284      	cmp	r4, r0
 800964e:	4607      	mov	r7, r0
 8009650:	d802      	bhi.n	8009658 <_realloc_r+0x34>
 8009652:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009656:	d812      	bhi.n	800967e <_realloc_r+0x5a>
 8009658:	4621      	mov	r1, r4
 800965a:	4640      	mov	r0, r8
 800965c:	f7ff ff6e 	bl	800953c <_malloc_r>
 8009660:	4605      	mov	r5, r0
 8009662:	2800      	cmp	r0, #0
 8009664:	d0ed      	beq.n	8009642 <_realloc_r+0x1e>
 8009666:	42bc      	cmp	r4, r7
 8009668:	4622      	mov	r2, r4
 800966a:	4631      	mov	r1, r6
 800966c:	bf28      	it	cs
 800966e:	463a      	movcs	r2, r7
 8009670:	f7ff fed0 	bl	8009414 <memcpy>
 8009674:	4631      	mov	r1, r6
 8009676:	4640      	mov	r0, r8
 8009678:	f7ff fef4 	bl	8009464 <_free_r>
 800967c:	e7e1      	b.n	8009642 <_realloc_r+0x1e>
 800967e:	4635      	mov	r5, r6
 8009680:	e7df      	b.n	8009642 <_realloc_r+0x1e>
	...

08009684 <_sbrk_r>:
 8009684:	b538      	push	{r3, r4, r5, lr}
 8009686:	4d06      	ldr	r5, [pc, #24]	; (80096a0 <_sbrk_r+0x1c>)
 8009688:	2300      	movs	r3, #0
 800968a:	4604      	mov	r4, r0
 800968c:	4608      	mov	r0, r1
 800968e:	602b      	str	r3, [r5, #0]
 8009690:	f7f7 fdba 	bl	8001208 <_sbrk>
 8009694:	1c43      	adds	r3, r0, #1
 8009696:	d102      	bne.n	800969e <_sbrk_r+0x1a>
 8009698:	682b      	ldr	r3, [r5, #0]
 800969a:	b103      	cbz	r3, 800969e <_sbrk_r+0x1a>
 800969c:	6023      	str	r3, [r4, #0]
 800969e:	bd38      	pop	{r3, r4, r5, pc}
 80096a0:	24000210 	.word	0x24000210

080096a4 <__malloc_lock>:
 80096a4:	4801      	ldr	r0, [pc, #4]	; (80096ac <__malloc_lock+0x8>)
 80096a6:	f000 b811 	b.w	80096cc <__retarget_lock_acquire_recursive>
 80096aa:	bf00      	nop
 80096ac:	24000214 	.word	0x24000214

080096b0 <__malloc_unlock>:
 80096b0:	4801      	ldr	r0, [pc, #4]	; (80096b8 <__malloc_unlock+0x8>)
 80096b2:	f000 b80c 	b.w	80096ce <__retarget_lock_release_recursive>
 80096b6:	bf00      	nop
 80096b8:	24000214 	.word	0x24000214

080096bc <_malloc_usable_size_r>:
 80096bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096c0:	1f18      	subs	r0, r3, #4
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	bfbc      	itt	lt
 80096c6:	580b      	ldrlt	r3, [r1, r0]
 80096c8:	18c0      	addlt	r0, r0, r3
 80096ca:	4770      	bx	lr

080096cc <__retarget_lock_acquire_recursive>:
 80096cc:	4770      	bx	lr

080096ce <__retarget_lock_release_recursive>:
 80096ce:	4770      	bx	lr

080096d0 <_init>:
 80096d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096d2:	bf00      	nop
 80096d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096d6:	bc08      	pop	{r3}
 80096d8:	469e      	mov	lr, r3
 80096da:	4770      	bx	lr

080096dc <_fini>:
 80096dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096de:	bf00      	nop
 80096e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096e2:	bc08      	pop	{r3}
 80096e4:	469e      	mov	lr, r3
 80096e6:	4770      	bx	lr
